enum Duplicates (java:EE) {
    // @internal
    F,
    G,
    F
}

enum Inconsistent {
    A,
    B = A,
    C
}

enum TooShort {
    OnlyField
}

bitfield enum WithoutValues {
    Field1,
    Field2 = 2,
    Field3,
    Field4 = 4
}

variant WithDuplicates (cs:VV) {
    int i;
    int j;
}

struct EmptyStruct {
}

variant TooSmall {
    EmptyStruct field;
}

struct K {
    int i;
}

struct S3 {
    int i;
}

struct S {
    float f;
    double d;
    vector<vector<vector<int>>> v;
    any o;
    dictionary<dictionary<int, int>, vector<vector<K>>> m;

    struct InnerS {
        int i;
        float k;
        double k;
        S3 f;
        int j;
        void k;
    }

    lite struct InnerLiteS {
        int i;
        float k;
        double k;
        S3 f;
        int j;
        void k;
    }
}

listener L : L {
    void onSomething();
}

// @undocumented
lambda listener LambdaListener {
    void onLambdaSomething();
    void onLambdaSomething(int i);
    I onInterfaceReturn();
    void onListenerParameter(L invalidParameter);
    void onConstParameter(S.InnerLiteS s);
}
strong_ref platform interface SL {
    void doSomething();
}

interface EmptyInterface { }

// @internal
struct AnotherInternal {
    int reserved;
}

// @internal
struct NotFound { 
    int reserved;
    AnotherInternal ai;
}

struct SomeStruct {
    vector<NotFound> internalField;
    // @internal
    vector<AnotherInternal> anotherInternalField;
}

/**
 * Reference to lambda listener's method:
 * {@link LambdaListener#onLambdaSomething()} - a syntax error because such
 * a method won't exist in some languages.
 */
interface I : L {
    NotFound method();
    any notAllowed(const int x, const TooShort t, any a, int sp_i);
    const int constNotAllowed();
    void useConstParameter(S.InnerLiteS s);

    int intProperty;
    const bool boolProperty;
    const I readonlyInterfaceProperty readonly;
    gen const I generatedInterfaceProperty;
    const I correctInterfaceProperty;
    void methodWithInvalidObjcName<objc:iosF.param>(int i);
    L methodWithIncorrectListener();
    SL methodWithCorrectListener();
    vector<EmptyInterface> interfacesProperty readonly;
    dictionary<string, EmptyInterface> interfacesMapProperty readonly;
    vector<EmptyInterface> interfaces();
    dictionary<string, EmptyInterface> interfacesMap();
}

lite struct LS {
    // @internal
    double value;
    // @internal
    optional double optionalValue;
}

/**
 * Reference to nonexistent method: {@link L#onSomeUnusualResponse(I)}. And
 * a reference to existing method: {@link L#onSomething()}.
 */
struct ContainsListener {
    L l;
}

// @internal
lambda listener FailedAssertionListener {
    void onFailedAssertion(
        const string file,
        int line,
        const string condition,
        const string message,
        const vector<string> stack);
}

// @internal
static interface InternalStatics {
}

// @undocumented
static interface UndocumentedStatics {
    string version<java:getVersion>();

    void setFailedAssertionListener<objc:setFailedAssertionListener>(
        FailedAssertionListener failedAssertionListener);
}

static interface SomeStatics {
    int method();
    int constMethod() const;

    int value;
    int readonlyValue readonly;
}
