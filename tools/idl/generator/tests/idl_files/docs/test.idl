lite struct Struct { int i; }
variant Variant { int i; float f; }

enum TestError {
    Server,
    Client
}

struct Response {
    int i;
    float f;
}

options struct OptionsStructure {
    string empty;
    string filled  = "default value";
}

lite struct DefaultValue {
    string filled = "default value";
}

lite struct CombinedValues {
    string empty;
    string filled  = "default value";
}

lite struct DefaultTimeintervalValue {
    time_interval empty;
    time_interval filled = 300;
}

weak_ref interface Interface (java:JavaInterface, objc:ObjcInterface) {
    void method(int intValue, float floatValue, const Struct someStruct, Variant andVariant);
}

lambda listener LambdaListener (objc:ResponseHandler) {
    void onResponse(const Response response);
    void onError(TestError error);
}

interface InterfaceWithDocs {
    /**
     * Link to {@link docs.Struct}, to {@link docs.Variant#f},
     * and some unsupported tag {@some.unsupported.tag}.
     *
     *************************************************************************
     *
     * More links after separator: {@link Struct}, {@link
     * docs.Interface#method(int, float, const Struct, Variant)}, and link to
     * self: {@link #methodWithDocs(Interface, const Struct, LambdaListener)}.
     *
     * @param i - {@link Interface}, does something important
     * @param s - some struct
     *
     * @return true if successful, false - otherwise
     */
    bool methodWithDocs(Interface i, const Struct s, LambdaListener l);
}
