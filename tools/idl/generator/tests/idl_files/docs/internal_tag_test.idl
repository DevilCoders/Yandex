/**
 * @undocumented
 * This struct should be excluded from documentation.
 */
struct VeryPrivate {
    int regularField;
    float oneMoreRegularField;
}

/**
 * @undocumented
 * This struct should be excluded from documentation.
 */
options struct SuchHidden {
    float regularField;
    int oneMoreRegularField;
    float twoMoreRegularFields;
}

/**
 * @internal
 * This struct should be excluded from documentation.
 */
options struct SuchOptions {
    TooInternal interfaceField;
}

/**
 * @internal
 * This listener should be excluded from documentation.
 */
lambda listener SoSecret {
    void firstCallback(const VeryPrivate muchClassified);
}

/**
 * @internal
 * This interface should be excluded from documentation.
 */
interface TooInternal {
    bool regularMethod(const SuchHidden muchPrivate, VeryPrivate soInternal);
}

struct VeryOpen {
    int regularField;
    /**
     * @internal
     * Only this field should be excluded from docs
     */
    optional bool hiddenSwitch;
}

struct MuchUnprotected {
    float regularField;
    bool oneMoreRegularField;
    /**
     * @internal
     * Only this field should be excluded from docs
     */
    optional int hiddenField;
}

lambda listener SoDeclassified {
    void cantMarkMethodsAsInternalHereYet(const VeryOpen knownStructure);
}

lambda listener EmptyCallback {
    void onEmpty();
}

lambda listener LambdaListenerWithTwoMethods {
    void onSuccess();
    void onError(int error);
}

lambda listener CallbackWithParam {
    void onCallback(int i);
}

interface TooExternal {
    bool regularMethod(const MuchUnprotected structure, const SoDeclassified callback);
    /**
     * @internal
     * Only this method should be excluded from docs
     */
    void hiddenMethod(const SuchHidden structure, const SoSecret callback);
}

struct WithInternalEnum {
    InternalEnum e;

    enum InternalEnum {
        A,
        B,
        C
    }
}
