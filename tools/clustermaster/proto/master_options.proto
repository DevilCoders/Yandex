package NClusterMaster;

import "library/cpp/getoptpb/proto/confoption.proto";

message TMasterOptions {
    option (NGetoptPb.Title) = "Clustermaster master daemon.";

    optional bool DoNotDaemonize = 1            [(NGetoptPb.Conf) = {Short: 'f', Long: "do-not-daemonize", Descr: "do not daemonize"}, default = false];
    optional string PidFilePath = 2             [(NGetoptPb.Conf) = {Short: 'P', Long: "pid-file", Descr: "pid file", Type: "path"}];
    optional string LogFilePath = 3             [(NGetoptPb.Conf) = {Short: 'l', Long: "log-file", Descr: "log file", Type: "path"}];
    optional bool DebugLogOutput = 4            [(NGetoptPb.Conf) = {Short: 'D', Long: "debug-log", Descr: "enable debug log output"}, default = false];
    optional string ScriptPath = 5              [(NGetoptPb.Conf) = {Short: 's', Long: "cm-script", Descr: "control script", Type: "path"}];
    repeated string HostCfgPaths = 6            [(NGetoptPb.Conf) = {Short: 'c', Long: "host-cfg", Descr: "use host.cfg config", Type: "path"}];

    optional string CustomWorkersListPath = 7   [(NGetoptPb.Conf) = {Short: 'C', Long: "hostlist", Descr: "use custom workers list file", Type:"path"}];
    optional string VarDirPath = 8              [(NGetoptPb.Conf) = {Short: 'v', Long: "var-dir", Descr: "var dir", Type: "path"}];
    optional uint32 WorkerPort = 9              [(NGetoptPb.Conf) = {Short: 'w', Long: "worker-port", Descr: "worker port", Type: "port"}, default = 3131];
    optional string AuthKeyPath = 10            [(NGetoptPb.Conf) = {Short: 'a', Long: "auth-key", Descr: "auth key file", Type: "path"}];
    optional uint32 NetworkRetry = 11           [(NGetoptPb.Conf) = {Short: 'r', Long: "network-retry", Descr: "network retry", Type: "seconds"}, default = 5];
    optional uint32 NetworkHeartbeat = 12       [(NGetoptPb.Conf) = {Short: 'b', Long: "network-heartbeat", Descr: "network heartbeat", Type: "seconds"}, default = 1];
    optional string InstanceName = 13           [(NGetoptPb.Conf) = {Short: 'n', Long: "instance-name", Descr: "set instance name", Type: "name"}];
    optional uint32 HTTPPort = 14               [(NGetoptPb.Conf) = {Short: 'h', Long: "http-port", Descr: "HTTP port", Type: "port"}, default = 3130];
    optional uint32 ROHTTPPort = 15             [(NGetoptPb.Conf) = {Short: 'H', Long: "http-port-ro", Descr: "read-only HTTP port", Type: "port"}, default = 0];
    optional bool DisableGraphviz = 16          [(NGetoptPb.Conf) = {Short: 'G', Long: "disable-graphviz", Descr: "disable graphviz"}, default = false];
    optional uint32 GraphvizIterationsLimit = 17[(NGetoptPb.Conf) = {Short: 'z', Long: "graphviz-iter-limit", Descr: "limit the graphviz iterations", Type: "count"}];

    optional bool RetryOnFailureEnabled = 18    [(NGetoptPb.Conf) = {Short: 'R', Long: "enable-retry-on-failure-by-default", Descr: "enable <retry on failure> by default"},
        default = false];
    optional bool PerSecondTargetsEnabled = 19  [(NGetoptPb.Conf) = {Short: 'S', Long: "enable-second-detailed-targets", Descr: "enable second-detailed targets"},
        default = false];

    optional uint32 PokeHeartbeat = 20          [(NGetoptPb.Conf) = {Long: "poke-heartbeat", Descr: "delay between async poke updates", Type: "seconds"}, default = 5];
    optional uint32 MaxPokesPerHeartbeat = 21   [(NGetoptPb.Conf) = {Long: "max-pokes-per-heartbeat", Descr: "max sync poke updates", Type: "count"}, default = 100];
    optional bool DumpGraphOnReload = 22        [(NGetoptPb.Conf) = {Long: "dump-graph-on-reload", Descr: "do dump graph state on script reload"}, default = false];
    optional bool NoUserNotify = 23             [(NGetoptPb.Conf) = {Long: "no-user-notify", Descr: "do not send any notifications"}, default = false];
    optional bool EnableJuggler = 29            [(NGetoptPb.Conf) = {Long: "enable-juggler", Descr: "push events about target failures to juggler"}, default = false];
    optional uint32 HTTPUpdaterDelay = 24       [(NGetoptPb.Conf) = {Long: "http-updater-delay", Descr: "delay between two ajax updates in http interface", Type: "seconds"},
        default = 1];
    optional uint32 ProxyHttpTimeout = 25       [(NGetoptPb.Conf) = {Long: "proxy-http-timeout", Descr: "proxy http request timeout", Type: "seconds"}, default = 10];
    optional bool Panic = 26                    [(NGetoptPb.Conf) = {Long: "panic", Descr: "terminate master on script parsing error"}, default = false];
    optional string YtProxy = 27                [(NGetoptPb.Conf) = {Long: "yt-proxy", Descr: "yt proxy to store state to"}];
    optional string YtVarDir = 28               [(NGetoptPb.Conf) = {Long: "yt-var-dir", Descr: "var dir path on yt cluster"}];
    optional uint32 NTargetLogs = 30            [(NGetoptPb.Conf) = {Long: "target-log-count", Descr: "Number of previous target logs to show links for", Type: "number"}];
    optional string MailSender = 31             [(NGetoptPb.Conf) = {Long: "mail-sender", Descr: "E-mail address which is put into from field of outgoing notification mails"}];
    optional string TvmSecretPath = 32          [(NGetoptPb.Conf) = {Long: "tvm-secret-path", Descr: "File with tvm-api client secret inside."}, default = "/Berkanavt/clustermaster/tvm.secret"];
    optional string IdmRole = 33                [(NGetoptPb.Conf) = {Long: "idm-role", Descr: "Require authentication headers and idm-role for authorization via webauth service."}];
    optional bool Authenticate = 34             [(NGetoptPb.Conf) = {Long: "authenticate", Descr: "Try to resolve username via webauth service."}, default = false];
    optional string TelegramSecretPath = 35     [(NGetoptPb.Conf) = {Long: "telegram-secret-path", Descr: "File with OAuth token for sending telegram messages."}, default = ""];
    optional string SmtpServer = 36             [(NGetoptPb.Conf) = {Long: "smtp-server", Descr: "External smtp server to use for e-mail notifications delivery."}, default = "localhost"];
    optional uint64 YtBackoffPeriodMin = 37     [(NGetoptPb.Conf) = {Long: "yt-backoff-period-min", Descr: "Configure minimal back off period (in seconds) after YT cannot be reached"}, default = 30];
    optional uint64 YtBackoffPeriodMax = 38     [(NGetoptPb.Conf) = {Long: "yt-backoff-period-max", Descr: "Configure maximal back off period (in seconds) after YT cannot be reached"}, default = 300];
    optional string YtTokenPath = 39            [(NGetoptPb.Conf) = {Long: "yt-token-path", Descr: "Path to YT token"}];
    optional string YtUser = 40                 [(NGetoptPb.Conf) = {Long: "yt-user", Descr: "YT token's owner"}];
    optional string JNSSecretPath = 41          [(NGetoptPb.Conf) = {Long: "jns-secret-path", Descr: "File with OAuth token for sending messages through jns."}, default = ""];
}
