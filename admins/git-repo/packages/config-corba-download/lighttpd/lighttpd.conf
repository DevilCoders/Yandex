# Debian lighttpd configuration file
# 

############ Options you really have to take care of ####################

## modules to load
# mod_access, mod_accesslog and mod_alias are loaded by default
# all other module should only be loaded if neccesary
# - saves some time
# - saves memory

server.modules              = ( 
            "mod_access",
            "mod_alias",
	    "mod_auth",
	    "mod_cgi",
            "mod_accesslog",
	   "mod_extforward",
            "mod_setenv",
            "mod_rewrite",
	    "mod_fastcgi",
            "mod_redirect",
	    "mod_proxy",
#           "mod_status", 
#           "mod_evhost",
#           "mod_compress",
#           "mod_usertrack",
#           "mod_rrdtool",
#           "mod_webdav",
#           "mod_expire",
           "mod_flv_streaming",
#           "mod_evasive"
 )

#extforward.forwarder = ("all" => "trust")
server.use-ipv6 = "disable"

## a static document-root, for virtual-hosting take look at the 
## server.virtual-* options
server.document-root       = "/opt/block/"

#  wher to send error-messages to
server.errorlog            = "/var/log/lighttpd/error.log"

## files to check for if .../ is requested
index-file.names           = ( "index.php", "index.html", "index.cgi", "index.shtml",
                               "index.htm", "default.htm" , "index.pl" )

cgi.assign      = (
                     ".pl"  => "/usr/bin/perl" 
		  )


## Use the "Content-Type" extended attribute to obtain mime type if possible
#mimetype.use-xattr = "enable"

#### accesslog module
accesslog.filename         = "/var/log/lighttpd/access.log"
accesslog.format           = "%t block.yandex.ru %h \"%r\" %s \"%{Referer}i\" \"%{User-Agent}i\" \"%{Cookie}i\" %D %b"

#accesslog.use-syslog		= "enable"

## deny access the file-extensions
#
# ~    is for backupfiles from vi, emacs, joe, ...
# .inc is often used for code includes which should in general not be part
#      of the document-root
url.access-deny            = ( "~", ".inc" )

#### rewrite

######### Options that are good to be but not neccesary to be changed #######

## bind to port (default: 80)
#server.port               = 81

## bind to localhost only (default: all interfaces)
#server.bind                = "localhost"


server.event-handler    =       "linux-sysepoll"                                
server.max-fds          =	8192
server.max-worker       =       4           
## error-handler for status 404
#server.error-handler-404  = "/error-handler.html"
#server.error-handler-404  = "/error-handler.php"

## to help the rc.scripts
server.pid-file            = "/var/run/lighttpd.pid"

## 
## Format: <errorfile-prefix><status>.html
## -> ..../status-404.html for 'File not found'
#server.errorfile-prefix    = "/var/www/"

## virtual directory listings
dir-listing.encoding        = "utf-8"
server.dir-listing          = "disable"
include_shell "/usr/share/lighttpd/create-mime.assign.pl"

## send unhandled HTTP-header headers to error-log
debug.dump-unknown-headers = "enable"
server.max-write-idle = 1440
### only root can use these options
#
# chroot() to directory (default: no chroot() )
#server.chroot            = "/"

## change uid to <uid> (default: don't care)
server.username            = "www-data"

## change uid to <uid> (default: don't care)
server.groupname           = "www-data"

#### compress module
#compress.cache-dir          = "/var/tmp/lighttpd/cache/compress/"
#compress.filetype           = ("text/plain", "text/html")

#### status module
# status.status-url = "/server-status"
# status.config-url = "/server-config"

#### url handling modules (rewrite, redirect, access)
#url.rewrite                 = ( "^/$"             => "/server-status" )
# url.redirect                = ( "^/wishlist/(.+)" => "http://www.123.org/$1" )

#
# define a pattern for the host url finding
# %% => % sign
# %0 => domain name + tld
# %1 => tld
# %2 => domain name without tld
# %3 => subdomain 1 name
# %4 => subdomain 2 name
#
# evhost.path-pattern = "/home/storage/dev/www/%3/htdocs/"

#### expire module
# expire.url                  = ( "/buggy/" => "access 2 hours", "/asdhas/" => "access plus 1 seconds 2 minutes")

#### rrdtool
# rrdtool.binary = "/usr/bin/rrdtool"
# rrdtool.db-name = "/var/www/lighttpd.rrd"

## this is a hack
alias.url = ("___invalid___" => "___invalid___")

##ssi
server.modules += ( "mod_ssi" )
ssi.extension = ( ".shtml" )

#### handle Debian Policy Manual, Section 11.5. urls
#### and by default allow them only from localhost

#SSL engine
$SERVER["socket"] == ":443" {
ssl.engine = "enable"
ssl.pemfile = "/etc/lighttpd/certs/download.yandex.ru.pem"
ssl.ca-file = "/etc/lighttpd/certs/allCAs.pem"
server.name = "download2.yandex.ru"
server.document-root = "/opt/www/"
accesslog.filename = "/var/log/lighttpd/saccess.log"
}

auth.debug                 = 0
auth.backend               = "htpasswd"
auth.backend.htpasswd.userfile = "/etc/lighttpd/lighttpd.user.htpasswd"



$HTTP["host"] =~ "^download.?\.yandex\.ru$" {
	mimetype.assign += (
		".application" => "application/x-ms-application",
		".manifest" => "application/x-ms-manifest",
		".json" => "application/json",
		)
	accesslog.format           = "%t %V %h \"%r\" %s \"%{Referer}i\" \"%{User-Agent}i\" \"%{Cookie}i\" %D %b"
        global {
                alias.url += (
                        "/doc/" => "/usr/share/doc/",
                        "/images/" => "/usr/share/images/"
                )
        }

	#Widgets-all
	$HTTP["url"] =~ "/widgets" {
	$HTTP["url"] =~ "/*.wgt" {
	    setenv.add-response-header = (
	    "Content-Disposition" => "inline;filename=widget.zip",
            "Content-Type" => "application/x-opera-widgets",
#	    "X-Opera-Swingline" => "Opera Widgets: FTW!"
	)
	}
	}

	$HTTP["url"] =~ "/online/kav/YandexOnlineKavSetup.exe" {
	    url.redirect = ( ".*" => "http://online.yandex.ru/kav/update" )
	}

	$HTTP["url"] =~ "/yandex-pack/exp/version.rss" {
	    url.redirect = ( ".*" => "http://download.yandex.ru/bar/ie/version.rss" )
	}

        dir-listing.activate = "disable"
	server.document-root = "/opt/www/"
        server.errorfile-prefix = "/opt/www/"
        magnet.attract-physical-path-to = (server.document-root + "/index.lua")
	flv-streaming.extensions = ( ".flv" )

        proxy.balance = "hash"
	proxy.server  = ( "/yandex-server/" => ( (
			"host" => "127.0.0.1",
			"port" => 8080 ) ) )

	auth.require = ( "/skreling/" => 
	(
		"method"  => "basic",
		"realm"   => "download archiv",
		"require" => "valid-user"
	)
	)
}	
#$HTTP["host"] =~ "^block.?\.yandex\.ru$" {
#	$HTTP["url"] =~ "mail" {
#        	        fastcgi.server = (
#                	    "/mail/send" =>
#                        	    ((
#	                            "socket" => "/tmp/fastcgi-blockmail.sock",
#	                            "bin-path" => "/usr/libexec/blockmail/mail_from_block.fpl",
#	                            "max-procs" => 4,
#	                            "check-local" => "disable",
#	                            "bin-environment" => (
#	                                    "TEMPLATE_ROOT" => "/opt/block/mail/",
#	                                    "DEFAULT_FROM" => "unblock@yandex-team.ru",
#	                                    "MAIL_TO" => "unblock@yandex-team.ru",
#	                                    "OK_URL" => "http://block.yandex.ru/mail/ok.html",
#	                                    "TOO_URL" => "http://block.yandex.ru/mail/enough.html",
#	                            ),
#	                            ))
#	    		)
#	}
#} 

#### variable usage:
## variable name without "." is auto prefixed by "var." and becomes "var.bar"
#bar = 1
#var.mystring = "foo"

## integer add
#bar += 1
## string concat, with integer cast as string, result: "www.foo1.com"
#server.name = "www." + mystring + var.bar + ".com"
## array merge
#index-file.names = (foo + ".php") + index-file.names
#index-file.names += (foo + ".php")


#### external configuration files
## mimetype mapping
## load enabled configuration files, 
## read /etc/lighttpd/conf-available/README first
include_shell "/usr/share/lighttpd/include-conf-enabled.pl"

server.kbytes-per-second = 35000


# vim: syn=on,c
# vim: set syntax=perl,c

