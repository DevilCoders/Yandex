{%- set cluster = pillar.get('cluster') -%}
{%- set env =  grains['yandex-environment'] -%}
{%- set dc_hosts = salt['conductor']['groups2hosts'](cluster, datacenter=grains['conductor']['root_datacenter']) %}

{#- Used error_code numbers:                  #}
{#- 554 caching for 5 seconds                 #}
{#- 555 caching for 30 min                    #}
{#- 557 caching 404                           #}
{#- 558 caching for 24 hours                  #}
{#- 565 caching for 5 minutes                 #}
{#- 571 listing limited common/bucket         #}

proxy_cache_path  /var/cache/nginx/cache/s3 levels=1:1:2   keys_zone=s3:256m inactive=1h  max_size=50G;

upstream s3-website {
    server [::]:8081;
}

upstream s3-goose-monitoring {
    server 127.0.0.1:3355;
}

upstream s3-goose {
    server unix:/var/run/s3-goose/main.sock max_fails=0;
}

map "$local_upstream" $s3_upstream {
    default s3-goose;
    "s3-website" s3-website;
}

map "$http_host" $time_threshold {
    default 0.002;
}

map "$request_method:$host:$uri" $bucket_node_cache_30m {
    default 0;
    include s3/bucket_cached_node_30m.conf;
}

map "$request_method:$host:$uri" $bucket_node_cache_5s {
    default 0;
    include s3/bucket_cached_node_5s.conf;
}

map "$request_method:$host:$uri" $bucket_node_cache_5m {
    default 0;
    include s3/bucket_cached_node_5m.conf;
}

map "$request_method:$host:$uri" $bucket_node_cache_24h {
    default 0;
    include s3/bucket_cached_node_24h.conf;
}

map "$request_method:$host:$uri" $bucket_node_cache_404 {
    default 0;
#    ~^(GET):strm\.s3\.mds\.yandex\.net:/[^?]+$ 1;
#    ~^(GET):s3\.mds\.yandex\.net:/strm/[^?]+$ 1;
}

include include/s3/shared_dicts.conf;

server {
    server_name
        s3.mds.yandex.net
        s3.mdst.yandex.net
        *.s3.mds.yandex.net
        *.s3.mdst.yandex.net
        prestable-s3.mds.yandex.net
        vla-s3.mds.yandex.net
        sas-s3.mds.yandex.net
        man-s3.mds.yandex.net
        msk-s3.mds.yandex.net;

    listen 4080 reuseport;
    listen [::]:4080 reuseport;

    listen 127.0.0.1:80;
    listen [::1]:80;

    listen 127.0.0.1:443 ssl;
    listen [::1]:443 ssl;

    listen 4480 ssl;
    listen [::]:4480 ssl;

    listen 213.180.205.147:80 reuseport;
    listen [2a02:6b8:0:3400::3:147]:80 reuseport;
    listen 213.180.205.147:443 ssl reuseport;
    listen [2a02:6b8:0:3400::3:147]:443 ssl reuseport;

    {%- if env == 'prestable' %}

    listen [2a02:6b8:0:3400:0:14d2:0:1]:80 reuseport;
    listen [2a02:6b8:0:3400:0:14d2:0:1]:443 ssl reuseport;

    {%- endif %}

    {% if grains['conductor']['root_datacenter'] == 'vla' and '2a02:6b8:0:3400:0:37f:0:a' in grains['ipv6'] -%}
    listen [2a02:6b8:0:3400:0:37f:0:a]:80 reuseport;
    {%- elif grains['conductor']['root_datacenter'] == 'sas' and '2a02:6b8:0:3400:0:37f:0:b' in grains['ipv6'] -%}
    listen [2a02:6b8:0:3400:0:37f:0:b]:80 reuseport;
    listen [2a02:6b8:0:3400:0:37f:0:b]:443 ssl reuseport;
    {%- elif grains['conductor']['root_datacenter'] == 'man' and '2a02:6b8:0:3400:0:37f:0:c' in grains['ipv6'] -%}
    listen [2a02:6b8:0:3400:0:37f:0:c]:80 reuseport;
    {%- elif grains['conductor']['root_datacenter'] in ['iva', 'myt'] and '2a02:6b8:0:3400:0:37f:0:d' in grains['ipv6'] -%}
    listen [2a02:6b8:0:3400:0:37f:0:d]:80 reuseport;
    {% endif %}
    keepalive_timeout  60 60;
    keepalive_requests 256;

    tskv_log /var/log/nginx/s3-tskv.log s3-access-log;

    ssl_certificate     /etc/yandex-certs/s3.mds.yandex.net.pem;
    ssl_certificate_key /etc/yandex-certs/s3.mds.yandex.net.key;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers kEECDH+AESGCM+AES128:kEECDH+AES128:kRSA+AESGCM+AES128:kRSA+AES128:RC4-SHA:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
    #ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    #ssl_ciphers TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:kEECDH+AESGCM+AES128:kEECDH+AESGCM+AES256:kRSA+AESGCM+AES128:kEECDH+AES128:kRSA+AES128:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2:!RC4:!3DES:!DSS;
    ssl_session_cache    shared:S3_SSL_CACHE:128m;
    ssl_session_timeout  28h;

    # ssl_stapling on;
    # ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/ssl/certuml4.pem;

    # forward proxy for CONNECT request
    resolver                       127.0.0.1;
    proxy_connect;
    proxy_connect_allow            443;
    proxy_connect_connect_timeout  300s;
    proxy_connect_read_timeout     7200s;
    proxy_connect_send_timeout     600s;
    proxy_connect_address          213.180.205.147;

    set $http_endpoint_type "";
    set $local_upstream "s3-goose";

    include include/s3/values.conf;
    include s3/aws_error_pages.conf;
    include s3/compression_options.conf;
    include s3/proxy_options.conf;

    request_id_from_header on;
    request_id_header_name X-Request-Id;

    client_max_body_size 5g;

    underscores_in_headers on;


    if ($bucket_node_cache_30m = 1)     { return 555; }
    if ($bucket_node_cache_24h = 1)     { return 558; }
    if ($bucket_node_cache_5s = 1)      { return 554; }
    if ($bucket_node_cache_5m = 1)      { return 565; }
    if ($bucket_node_cache_404 = 1)     { return 557; }

    proxy_intercept_errors on;
    error_page 555 = @cached_30m;
    error_page 558 = @cached_24h;
    error_page 554 = @cached_5s;
    error_page 565 = @cached_5m;
    error_page 557 = @cached_404;

    include s3/disabled_url.conf;

    location @cached_30m {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_30m.conf;
    }

    location @cached_24h {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_24h.conf;
    }

    location @cached_5s {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_5s.conf;
    }

    location @cached_5m {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_5m.conf;
    }

    location @cached_404 {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_404_options.conf;
    }

    location = /hostname {
        add_header "Content-Type" "text/plain";
        return 200 $hostname;

        log_by_lua_block {
            increment_metric("s3mds_stat_system_dmmm", 1, true)
        }
    }

    location / {
        rewrite_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.route()
        }

        access_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.limitBucketRate()
        }

        proxy_set_header Host $http_host;

        include s3/base_location_options_s3lib.conf;
    }

    location @error503 {
        return 503;
    }

    include s3/ping.conf;

    log_by_lua_file /etc/nginx/include/s3-metrics.lua;
}

server {
    server_name
        s3-zen.mds.yandex.net
        s3-zen.mdst.yandex.net
        *.s3-zen.mds.yandex.net
        *.s3-zen.mdst.yandex.net

    listen 93.158.157.140:80 reuseport;
    listen [2a02:6b8:0:3400:0:14d2:0:3]:80 reuseport;
    listen 93.158.157.140:443 ssl reuseport;
    listen [2a02:6b8:0:3400:0:14d2:0:3]:443 ssl reuseport;

    keepalive_timeout  60 60;
    keepalive_requests 256;

    tskv_log /var/log/nginx/s3-tskv.log s3-access-log;

    ssl_certificate     /etc/yandex-certs/s3.mds.yandex.net.pem;
    ssl_certificate_key /etc/yandex-certs/s3.mds.yandex.net.key;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers kEECDH+AESGCM+AES128:kEECDH+AES128:kRSA+AESGCM+AES128:kRSA+AES128:RC4-SHA:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
    #ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    #ssl_ciphers TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:kEECDH+AESGCM+AES128:kEECDH+AESGCM+AES256:kRSA+AESGCM+AES128:kEECDH+AES128:kRSA+AES128:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2:!RC4:!3DES:!DSS;
    ssl_session_cache    shared:S3_SSL_CACHE:128m;
    ssl_session_timeout  28h;

    # ssl_stapling on;
    # ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/ssl/certuml4.pem;

    # set to zen after goose patching
    set $http_endpoint_type "";
    set $local_upstream "s3-goose";

    include include/s3/values.conf;
    include s3/aws_error_pages.conf;
    include s3/compression_options.conf;
    include s3/proxy_options.conf;

    request_id_from_header on;
    request_id_header_name X-Request-Id;

    client_max_body_size 5g;

    underscores_in_headers on;

    if ($bucket_node_cache_30m = 1)     { return 555; }
    if ($bucket_node_cache_24h = 1)     { return 558; }
    if ($bucket_node_cache_5s = 1)      { return 554; }
    if ($bucket_node_cache_5m = 1)      { return 565; }
    if ($bucket_node_cache_404 = 1)     { return 557; }

    proxy_intercept_errors on;
    error_page 555 = @cached_30m;
    error_page 558 = @cached_24h;
    error_page 554 = @cached_5s;
    error_page 565 = @cached_5m;
    error_page 557 = @cached_404;

    location @cached_30m {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_30m.conf;
    }

    location @cached_24h {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_24h.conf;
    }

    location @cached_5s {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_5s.conf;
    }

    location @cached_5m {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_5m.conf;
    }

    location @cached_404 {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_404_options.conf;
    }

    location / {
        rewrite_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.route()
        }

        # add S3Lib.checkZenAccessAllowed() later
        access_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.limitBucketRate()
        }

        proxy_set_header Host $http_host;

        include s3/base_location_options_s3lib.conf;
    }

    location @error503 {
        return 503;
    }

    include s3/ping.conf;

    log_by_lua_file /etc/nginx/include/s3-metrics.lua;
}

server {
    server_name
        s3-staff.mds.yandex.net
        *.s3-staff.mds.yandex.net;

    listen 93.158.157.53:80 reuseport;
    listen [2a02:6b8:0:3400:0:14d2:0:2]:80 reuseport;
    listen 93.158.157.53:443 ssl reuseport;
    listen [2a02:6b8:0:3400:0:14d2:0:2]:443 ssl reuseport;

    keepalive_timeout  60 60;
    keepalive_requests 256;

    tskv_log /var/log/nginx/s3-tskv.log s3-access-log;

    ssl_certificate     /etc/yandex-certs/s3.mds.yandex.net.pem;
    ssl_certificate_key /etc/yandex-certs/s3.mds.yandex.net.key;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers kEECDH+AESGCM+AES128:kEECDH+AES128:kRSA+AESGCM+AES128:kRSA+AES128:RC4-SHA:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
    #ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    #ssl_ciphers TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:kEECDH+AESGCM+AES128:kEECDH+AESGCM+AES256:kRSA+AESGCM+AES128:kEECDH+AES128:kRSA+AES128:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2:!RC4:!3DES:!DSS;
    ssl_session_cache    shared:S3_SSL_CACHE:128m;
    ssl_session_timeout  28h;

    # ssl_stapling on;
    # ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/ssl/certuml4.pem;

    set $http_endpoint_type "staff";
    set $local_upstream "s3-goose";

    include include/s3/values.conf;
    include s3/aws_error_pages.conf;
    include s3/compression_options.conf;
    include s3/proxy_options.conf;

    request_id_from_header on;
    request_id_header_name X-Request-Id;

    client_max_body_size 5g;

    underscores_in_headers on;


    if ($bucket_node_cache_30m = 1)     { return 555; }
    if ($bucket_node_cache_24h = 1)     { return 558; }
    if ($bucket_node_cache_5s = 1)      { return 554; }
    if ($bucket_node_cache_5m = 1)      { return 565; }
    if ($bucket_node_cache_404 = 1)     { return 557; }

    proxy_intercept_errors on;
    error_page 555 = @cached_30m;
    error_page 558 = @cached_24h;
    error_page 554 = @cached_5s;
    error_page 565 = @cached_5m;
    error_page 557 = @cached_404;

    include s3/disabled_url.conf;

    location @cached_30m {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_30m.conf;
    }

    location @cached_24h {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_24h.conf;
    }

    location @cached_5s {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_5s.conf;
    }

    location @cached_5m {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_options_5m.conf;
    }

    location @cached_404 {
        include s3/internal_cache_options.conf;
        include s3/proxy_cache_404_options.conf;
    }

    location / {
        rewrite_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.route()
        }

        access_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.checkStaffAccessAllowed()
            S3Lib.limitBucketRate()
        }

        proxy_set_header Host $http_host;

        include s3/base_location_options_s3lib.conf;
    }

    location @error503 {
        return 503;
    }

    include s3/ping.conf;

    log_by_lua_file /etc/nginx/include/s3-metrics.lua;
}

# overwrite default robots.txt
# map "$request_method:$host:$request_uri" $custom_robots {
#     default  0;
#     ~^(GET):hotosho\.s3\.yandex\.net:/robots\.txt 1;
# }

server {
    server_name
        s3.yandex.net
        *.s3.yandex.net
        *.adfox.ru
        *.games.s3.yandex.net
        pano.maps.yandex.net;

    listen 4180;
    listen [::]:4180;

    listen 127.0.0.1:80;
    listen [::1]:80;

    listen 127.0.0.1:443 ssl;
    listen [::1]:443 ssl;

    listen 4543 ssl;
    listen [::]:4543 ssl;
    listen 93.158.134.158:80;
    listen [2a02:6b8::2:158]:80;
    listen 93.158.134.158:443 ssl http2;
    listen [2a02:6b8::2:158]:443 ssl http2;

    keepalive_timeout  60 60;
    keepalive_requests 512;

    tskv_log /var/log/nginx/s3-tskv.log s3-access-log;

    ssl_certificate     /etc/yandex-certs/s3.yandex.net.pem;
    ssl_certificate_key /etc/yandex-certs/s3.yandex.net.key;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers kEECDH+AESGCM+AES128:kEECDH+AES128:kRSA+AESGCM+AES128:kRSA+AES128:RC4-SHA:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
    #ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    #ssl_ciphers TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:kEECDH+AESGCM+AES128:kEECDH+AESGCM+AES256:kRSA+AESGCM+AES128:kEECDH+AES128:kRSA+AES128:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2:!RC4:!3DES:!DSS;
    ssl_session_cache    shared:S3EXT_SSL_CACHE:128m;
    ssl_session_timeout  28h;

    # ssl_stapling on;
    # ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/ssl/certuml4.pem;

    # https://st.yandex-team.ru/MDS-9533
    ssl_session_ticket_key ssl/mds_and_storage.key;
    ssl_session_ticket_key ssl/mds_and_storage.key.prev;
    ssl_session_ticket_key ssl/mds_and_storage.key.prevprev;

    # https://st.yandex-team.ru/MDS-9463
    http2_max_requests 32768;
    http2_max_concurrent_streams 6;
    http2_idle_timeout 1m;

    {%- if grains['conductor']['root_datacenter'] == 'sas' %}
      {%- set failure_fraction = 0.5 %}
    {%- else %}
      {%- set failure_fraction = 0.01 %}
    {%- endif %}
    #https://st.yandex-team.ru/MDS-12286
    more_set_headers "NEL: {\"report_to\": \"network-errors\", \"max_age\": 600, \"success_fraction\": 0.001, \"failure_fraction\": 0.01}";
    more_set_headers "Report-To: {\"group\": \"network-errors\", \"max_age\": 600, \"endpoints\": [ { \"url\": \"https://dr.yandex.net/s3_nel\"}]}";

    set $http_endpoint_type "public";

    include include/s3/values.conf;
    include s3/aws_error_pages.conf;
    include s3/compression_options.conf;
    include s3/proxy_options.conf;

    if ($bucket_node_cache_5s = 1)                  { return 554; }
    if ($bucket_node_cache_5m = 1)                  { return 565; }
    if ($bucket_node_cache_30m = 1)                 { return 555; }
    if ($bucket_node_cache_24h = 1)                 { return 558; }

    proxy_intercept_errors on;
    error_page 554 = @cached_5s;
    error_page 565 = @cached_5m;
    error_page 555 = @cached_30m;
    error_page 558 = @cached_24h;

    location = / {
        return 403;
    }

    location / {

        rewrite_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.route()
        }

        access_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.checkPublicAccessAllowed()
            S3Lib.limitBucketRate()
        }

        rewrite (.*) $1? break;
        chunked_transfer_encoding off;
        proxy_pass_request_body   off;

        proxy_set_header Authorization          "";
        proxy_set_header Content-Length         "";
        proxy_set_header Host                   $s3_bucket_name.s3.mds.yandex.net;
        proxy_set_header x-amz-security-token   "";

        include s3/base_location_options_s3lib.conf;
    }

    location @cached_30m {
        access_by_lua_block {
          local S3Lib = require "s3.lib"
          S3Lib.init()
          S3Lib.checkPublicAccessAllowed()
        }

        include s3/external_cache_options.conf;
        include s3/proxy_cache_options_30m.conf;
    }

    location @cached_5s {
        access_by_lua_block {
          local S3Lib = require "s3.lib"
          S3Lib.init()
          S3Lib.checkPublicAccessAllowed()
        }

        include s3/external_cache_options.conf;
        include s3/proxy_cache_options_5s.conf;
    }

    location @cached_5m {
        access_by_lua_block {
          local S3Lib = require "s3.lib"
          S3Lib.init()
          S3Lib.checkPublicAccessAllowed()
        }

        include s3/external_cache_options.conf;
        include s3/proxy_cache_options_5m.conf;
    }

    location @cached_24h {
        access_by_lua_block {
          local S3Lib = require "s3.lib"
          S3Lib.init()
          S3Lib.checkPublicAccessAllowed()
        }

        include s3/external_cache_options.conf;
        include s3/proxy_cache_options_24h.conf;
    }

    location @error503 { return 503; }

    include s3/ping.conf;

    log_by_lua_file /etc/nginx/include/s3-metrics.lua;
}

server {
    server_name
        s3-private.mds.yandex.net
        s3-private.mdst.yandex.net
        *.s3-private.mdst.yandex.net
        *.s3-private.mds.yandex.net;

    listen 4280;
    listen [::]:4280;

    listen 127.0.0.1:80;
    listen [::1]:80;

    listen 127.0.0.1:443 ssl;
    listen [::1]:443 ssl;

    listen 4443 ssl;
    listen [::]:4443 ssl;

    listen 87.250.251.158:80;
    listen [2a02:6b8::3:158]:80;
    listen 87.250.251.158:443 ssl;
    listen [2a02:6b8::3:158]:443 ssl;

    tskv_log /var/log/nginx/s3-tskv.log s3-access-log;

    ssl_certificate     /etc/yandex-certs/s3-private.mds.yandex.net.pem;
    ssl_certificate_key /etc/yandex-certs/s3-private.mds.yandex.net.key;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers kEECDH+AESGCM+AES128:kEECDH+AES128:kRSA+AESGCM+AES128:kRSA+AES128:RC4-SHA:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
    #ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    #ssl_ciphers TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:kEECDH+AESGCM+AES128:kEECDH+AESGCM+AES256:kRSA+AESGCM+AES128:kEECDH+AES128:kRSA+AES128:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2:!RC4:!3DES:!DSS;
    ssl_session_cache    shared:S3_PRIVATE_SSL_CACHE:128m;
    ssl_session_timeout  28h;

    # ssl_stapling on;
    # ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/ssl/certuml4.pem;

    set $http_endpoint_type "private";

    include include/s3/values.conf;
    include s3/aws_error_pages.conf;
    include s3/compression_options.conf;
    include s3/proxy_options.conf;

    request_id_from_header on;
    request_id_header_name X-Request-Id;

    client_max_body_size 5g;

    underscores_in_headers on;

    location / {
        rewrite_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.route()
        }

        access_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.checkPrivateAccessAllowed()
            S3Lib.limitBucketRate()
        }

        proxy_set_header Host $http_host;

        include s3/base_location_options_s3lib.conf;
    }

    location @error503 {
        return 503;
    }

    include s3/ping.conf;

    log_by_lua_file /etc/nginx/include/s3-metrics.lua;
}

server {
    server_name s3-website.mds.yandex.net
                *.s3-website.mds.yandex.net;

    listen 80 default_server backlog=4096 reuseport;
    listen [::]:80 ipv6only=on default_server backlog=4096 reuseport;

    listen 443 ssl http2 default_server backlog=4096 reuseport;
    listen [::]:443 ssl http2 ipv6only=on default_server backlog=4096 reuseport;

    http2_max_requests 32768;
    http2_max_concurrent_streams 6;
    http2_idle_timeout 1m;

    ssl_certificate     /etc/yandex-certs/s3-website.mds.yandex.net.pem;
    ssl_certificate_key /etc/yandex-certs/s3-website.mds.yandex.net.key;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers kEECDH+AESGCM+AES128:kEECDH+AES128:kRSA+AESGCM+AES128:kRSA+AES128:RC4-SHA:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
    #ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    #ssl_ciphers TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:kEECDH+AESGCM+AES128:kEECDH+AESGCM+AES256:kRSA+AESGCM+AES128:kEECDH+AES128:kRSA+AES128:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2:!RC4:!3DES:!DSS;
    ssl_session_cache    shared:S3_WEBSITE_SSL_CACHE:128m;
    ssl_session_timeout  28h;

    tskv_log /var/log/nginx/s3-tskv.log s3-access-log;

    include include/s3/values.conf;
    include s3/aws_error_pages.conf;
    include s3/compression_options.conf;

    request_id_from_header on;
    request_id_header_name X-Request-Id;

    client_max_body_size 5g;

    underscores_in_headers on;
    set $local_upstream "s3-website";

    location / {
        rewrite_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.route()
        }

        access_by_lua_block {
            local S3Lib = require "s3.lib"
            S3Lib.init()

            S3Lib.limitBucketRate()
        }

        proxy_set_header Host                   $http_host;

        include s3/proxy_options.conf;
        include s3/base_location_options_s3lib.conf;
    }

    include s3/ping.conf;

    log_by_lua_file /etc/nginx/include/s3-metrics.lua;
}
