{%- set speed_iface = salt['cmd.shell']('source /usr/local/sbin/autodetect_active_eth; ethtool $default_route_iface |grep Speed |awk "{print $NF}"  |egrep "[0-9]+" -o') | int -%}
{% set env = grains['yandex-environment'] %}
{% if env == 'testing' %}
{% set envdomain = 'mdst' %}
{% else %}
{% set envdomain = 'mds' %}
{% endif %}


{%- if speed_iface > 0 -%}
     {% set slb_weight = ((( speed_iface / 1000 ) + 5 ) / 2 ) %}
     {% if slb_weight <= 0 %}
         {% set slb_weight = 2 %}
     {% endif %}
{%- endif -%}

# MDS-15351
location = /s3-ping {
    # same as ping, duplicate for speed
    content_by_lua_block {
        ping_proxy, ping_mon = ngx.location.capture_multi{
            { "/ping-s3-goose-proxy" },
            { "/ping-s3-goose-monitoring" },
        }

        if ( ping_proxy.status == ngx.HTTP_OK
            and ping_mon.status == ngx.HTTP_OK
            and not is_maintenance() ) then
            ngx.exit(ngx.HTTP_OK)
        else
            ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
        end
    }

    log_by_lua_block {
        increment_metric("s3mds_stat_system_dmmm", 1, true)
    }
    more_set_headers -s '200' "RS-Weight: {{ slb_weight | int }}";
}

location = /ping {
    # same as s3-ping, duplicate for speed
    content_by_lua_block {
        ping_proxy, ping_mon = ngx.location.capture_multi{
            { "/ping-s3-goose-proxy" },
            { "/ping-s3-goose-monitoring" },
        }

        if ( ping_proxy.status == ngx.HTTP_OK
            and ping_mon.status == ngx.HTTP_OK
            and not is_maintenance() ) then
            ngx.exit(ngx.HTTP_OK)
        else
            ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
        end
    }

    log_by_lua_block {
        increment_metric("s3mds_stat_system_dmmm", 1, true)
    }
    more_set_headers -s '200' "RS-Weight: {{ slb_weight | int }}";
}

# Make sure nginx can pass request to actual S3 API application and get the response
# (unix-socket has right permissions/port is listened/etc.)
location = /ping-s3-goose-proxy {
    rewrite ^/(.*) / break;

    proxy_http_version                  1.1;
    proxy_set_header Host               "s3.{{ envdomain }}.yandex.net";
    proxy_set_header Connection         "";

    proxy_pass    http://s3-goose;
    log_by_lua_block {
        increment_metric("s3mds_stat_system_dmmm", 1, true)
    }
}

# Make sure S3 API application is ready to process requests
# (DB/MDS/etc. is available)
location = /ping-s3-goose-monitoring {
    rewrite ^/(.*) /ping break;

    proxy_set_header Host               "s3.{{ envdomain }}.yandex.net";

    proxy_pass    http://s3-goose-monitoring;
    log_by_lua_block {
        increment_metric("s3mds_stat_system_dmmm", 1, true)
    }
}
