location ~* ^/rtfb_testing/(?<encrypted_stid>[a-zA-Z0-9_-]+) {
    auth_sign_token "{{ pillar['yav']['storage-auth_sign_token-tfb_testing'] }}";
    auth_sign_optional content_type=$arg_content_type filename=$arg_filename disposition=$arg_disposition;
    auth_sign_decrypt decr encrypted_stid;

    more_set_headers -s '200 206 302' "Access-Control-Allow-Origin: *";
    access_by_lua '

        -- Get request arguments into lua dict args
        local args = ngx.req.get_uri_args()
        local dec_uri = ngx.var.decr
        if dec_uri ~= nil and dec_uri ~= "" then
            ngx.exec(ngx.unescape_uri("/get-tfb_testing-internal/" .. dec_uri), args)
        end
        ';
}

location /get-tfb_testing-internal/ {
    internal;

    more_set_headers -s '200 206 302' "Access-Control-Allow-Origin: *";
    set $unistat_namespace "tfb_testing";
    set $unistat_request_type "get";
    rewrite /get-tfb_testing-internal/(.*) $1 break;

    header_filter_by_lua_block {
        local args = ngx.req.get_uri_args()

        if args.disposition ~= nil and args.disposition ~= "" then
            local ua = ngx.req.get_headers()["User-Agent"]
            local filename = ""
            local escaped_fn = ngx.escape_uri(args.filename)
            escaped_fn = ngx.re.gsub(escaped_fn, ",", "%2C")
            escaped_fn = ngx.re.gsub(escaped_fn, "'", "%27")

            if ua ~= nil then
                if string.match(ua, 'MSIE [78]\\.0') then
                    filename = "filename=" .. escaped_fn
                    filename = ngx.re.gsub(filename, "%20", " ")
                    filename = ngx.re.gsub(filename, "%25", "%")
                elseif string.match(ua, 'Android') then
                    filename = "filename=" .. "\"" .. args.filename .. "\""
                elseif not string.match(ua, 'Safari') and  not string.match(ua, 'Chrome') then
                    filename = "filename=" .. args.filename
                else
                    filename ="filename*=UTF-8''" .. escaped_fn
                end
            end

            local allowed_inline_content_types = {
                 ["image/jpeg"] = true,
                 ["image/png"] = true,
                 ["image/gif"] = true,
                 ["image/x-ms-bmp"] = true,
                 ["image/tiff"] = true,
                 ["image/bmp"] = true,
                 ["image/x-png"] = true,
                 ["image/psd"] = true,
                 ["image/webp"] = true,
                 ["application/octet-stream"] = true,
                 ["application/ogg"] = true,
                 ["application/epub+zip"] = true,
                 ["text/json"] = true,
               }

            if filename ~= nil then
                if args.disposition == "attachment" or args.content_type == nil then
                    ngx.header.Content_Disposition = "attachment; " .. filename
                else
                    local m, err = ngx.re.match(args.content_type, "(?:audio|video)/", "ax")
                    if m or allowed_inline_content_types[args.content_type] then
                        ngx.header.Content_Disposition = args.disposition .. "; " .. filename
                    else
                        ngx.header.Content_Disposition = "attachment; " .. filename
                    end
                end
            end

            if args.content_type ~= nil and args.content_type ~= "" then
                ngx.header.content_type = ngx.re.gsub(args.content_type, "[^a-zA-Z0-9/.-]", "")
            end
        end

        if args.content_type ~= nil and args.content_type ~= "" then
            ngx.header.Content_Type = args.content_type
        end
    }

    include include/mediastorage-settings.conf;
}
