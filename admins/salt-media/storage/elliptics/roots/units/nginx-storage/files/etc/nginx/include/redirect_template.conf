location ~* ^/r{{ ns_name }}/(?<encrypted_stid>[a-zA-Z0-9_-]+) {
    auth_sign_token "{{ token }}";
    auth_sign_optional content_type=$arg_content_type filename=$arg_filename disposition=$arg_disposition;
    auth_sign_decrypt decr encrypted_stid;

    {% if cors == True -%}
    more_set_headers -s '200 206 302' "Access-Control-Allow-Origin: *";
    {%- endif %}
    access_by_lua '

        -- Get request arguments into lua dict args
        local args = ngx.req.get_uri_args()
        local dec_uri = ngx.var.decr
        if dec_uri ~= nil and dec_uri ~= "" then
            ngx.exec(ngx.unescape_uri("/get-{{ ns_name }}-internal/" .. dec_uri), args)
        end
        ';
}

location /get-{{ ns_name }}-internal/ {
    internal;

    {% if cors == True -%}
    more_set_headers -s '200 206 302' "Access-Control-Allow-Origin: *";
    {%- endif %}
    set $unistat_namespace "{{ ns_name }}";
    set $unistat_request_type "get";
    rewrite /get-{{ ns_name }}-internal/(.*) $1 break;

    header_filter_by_lua_block {
        local args = ngx.req.get_uri_args()

        if args.disposition ~= nil and args.disposition ~= "" then
            local ua = ngx.req.get_headers()["User-Agent"]
            local filename = ""
            local escaped_fn = ngx.escape_uri(args.filename)
            escaped_fn = ngx.re.gsub(escaped_fn, ",", "%2C")
            escaped_fn = ngx.re.gsub(escaped_fn, "'", "%27")

            if ua ~= nil then
                if string.match(ua, 'Safari') and not string.match(ua, 'Chrome') then
                    filename = "filename=" .. args.filename
                elseif string.match(ua, 'MSIE [78]\\.0') then
                    filename = "filename=" .. escaped_fn
                    filename = ngx.re.gsub(filename, "%20", " ")
                    filename = ngx.re.gsub(filename, "%25", "%")
                elseif string.match(ua, 'Android') then
                    filename = "filename=" .. "\"" .. args.filename .. "\""
                else
                    filename ="filename*=UTF-8''" .. escaped_fn
                end
            end

            ngx.header.Content_Disposition = args.disposition .. "; " .. filename
        end

        if args.content_type ~= nil and args.content_type ~= "" then
            ngx.header.Content_Type = args.content_type
        end
    }

    include include/mediastorage-settings.conf;
}
