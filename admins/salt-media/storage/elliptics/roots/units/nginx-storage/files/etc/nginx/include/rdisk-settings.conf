    limit_rate 10m;
    limit_rate_after 10m;

    header_filter_by_lua_block {
        local args = ngx.req.get_uri_args()
        if args.content_type ~= nil and args.content_type ~= "" then
            ngx.header.content_type = ngx.re.gsub(args.content_type, "[^a-zA-Z0-9/.-]", "")
        end

        local ua = ngx.req.get_headers()["User-Agent"]
        local filename = ""
        local escaped_fn = ngx.escape_uri(args.filename)
        escaped_fn = ngx.re.gsub(escaped_fn, ",", "%2C")
        escaped_fn = ngx.re.gsub(escaped_fn, "'", "%27")

        if ua ~= nil then
            if string.match(ua, 'MSIE [78]\\.0') then
                filename = "filename=" .. escaped_fn
                filename = ngx.re.gsub(filename, "%20", " ")
                filename = ngx.re.gsub(filename, "%25", "%")
            elseif string.match(ua, 'Android') then
                filename = "filename=" .. "\"" .. args.filename .. "\""
            else
                filename ="filename*=UTF-8''" .. escaped_fn
            end
        end

        local allowed_inline_content_types = {
          ["image/jpeg"] = true,
          ["image/png"] = true,
          ["image/gif"] = true,
          ["image/x-ms-bmp"] = true,
          ["image/tiff"] = true,
          ["image/bmp"] = true,
          ["image/x-png"] = true,
          ["image/psd"] = true,
          ["image/webp"] = true,
          ["application/octet-stream"] = true,
          ["application/ogg"] = true,
          ["application/epub+zip"] = true,
          ["text/json"] = true,
        }

        if filename ~= nil then
            if args.disposition == "attachment" or args.content_type == nil then
                ngx.header.Content_Disposition = "attachment; " .. filename
            else
                local m, err = ngx.re.match(args.content_type, "(?:audio|video)/", "ax")
                if m or allowed_inline_content_types[args.content_type] then
                    ngx.header.Content_Disposition = args.disposition .. "; " .. filename
                else
                    ngx.header.Content_Disposition = "attachment; " .. filename
                    increment_metric("forbidden_inline_disposition_dmmm", 1)
                end
            end
        end
    }

    tskv_log    /var/log/nginx/downloader/access.log ydisk-downloader-access-log;
    error_log   /var/log/nginx/downloader/error.log;

    #https://st.yandex-team.ru/MDS-2200
    more_set_headers -s '200 206 302' "Access-Control-Allow-Origin: *";

    add_header X-Content-Type-Options "nosniff";
    add_header Etag $arg_etag;
