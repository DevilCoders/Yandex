#!/usr/bin/env python2

from yaml import load
import os
import sys
import requests
from pprint import pprint as pp

import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.poolmanager import PoolManager


DEBUG = bool(os.getenv("HTTP_CHECK_DEBUG", False))

if not DEBUG:   # 2>/dev/null
    f = open('/dev/null', 'w')
    sys.stderr = f

def debug(data, desc="debug message"):
    if DEBUG:
        pp({desc: data})


class SourceAddressAdapter(HTTPAdapter):
    def __init__(self, source_address, **kwargs):
        self.source_address = source_address

        super(SourceAddressAdapter, self).__init__(**kwargs)

    def init_poolmanager(self, connections, maxsize, block=False):
        self.poolmanager = PoolManager(num_pools=connections,
                                       maxsize=maxsize,
                                       block=block,
                                       source_address=self.source_address)

def load_config():
    conf = {"http": [], "https": []}
    try:
        conf_file = "/etc/monitoring/http_check.yaml"
        if len(sys.argv) > 2:
            conf_file = sys.argv[2]
        conf = load(open(conf_file))
    except:
        e = sys.exc_info()
        print("1;Exception {0[0].__name__}: {0[1]}!".format(e))
        sys.exit(0)

    debug(conf, "Raw checks data")
    for k in conf:
        for item in conf[k]:
            item["inet"] = str(item.get("inet", 6))
            item["proto"] = item.get("proto", k)

            if "handle" not in item:
                item["handle"] = '/ping'
            else:
                if not item["handle"].startswith("/"):
                    item["handle"] = '/{0}'.format(item["handle"])
            if "port" not in item:
                item["port"] = ''
            else:
                item["port"] = ":{0}".format(item["port"])
    debug(conf, "Prepared checks data")
    return conf


def make_uri(ip, data):
    uri = "{0[proto]}://{1}{0[port]}{0[handle]}".format(data, ip)
    debug(uri, "Maked uri")
    return uri

def make_headers(data):
    if data.get("host", "localhost") != "localhost":
        headers = {"Host": data["host"]}
        return headers

def ping(item):
    errors = []
    ping_session = requests.Session()
    source_ips={"IPv6": '[::1]', "IPv4": '127.0.0.1'}
    "4" not in item["inet"] and source_ips.pop("IPv4")
    "6" not in item["inet"] and source_ips.pop("IPv6")

    headers = make_headers(item)
    debug(headers, "Headers content")

    for ipv in source_ips.keys():
        uri = make_uri(source_ips[ipv], item)
        ping_session.mount(item["proto"], SourceAddressAdapter(source_ips[ipv]))
        try:
            resp = requests.get(uri, allow_redirects=False,
                                verify=item.get('verify', False), headers=headers)
            if resp.status_code != requests.codes.ok:
                text = "{0} {1}: {2.status_code} - {2.reason}".format(
                        ipv,
                        "/".join((item["host"], resp.url.split("/", 3)[-1])),
                        resp)
                errors.append(text)
            debug("{0.url}: {0.status_code} - {0.reason} for {1}".format(
                  resp, headers), "DEBUG Response")
        except:
            e = sys.exc_info()
            errors.append("{2}:{0}: {1[0].__name__}: {1[1]}".format(uri, e, ipv))
            debug(errors)
    return ", ".join(errors)

if __name__ == '__main__':
    config = load_config()

    mode = 'http'
    if len(sys.argv) > 1:
        mode = sys.argv[1]

    config = config[mode]
    msg = map(ping, config)

    if any(msg):
        debug(msg, "Msg list")
        msg = "2;{0}".format(",".join(filter(None, msg)))
    elif not msg:
        msg = "0;Checks not configured, Ok."
    else:
        handles = map(lambda x: x['handle'], config)
        msg = "0; {0} Ok".format(','.join(handles))

    print(msg)
