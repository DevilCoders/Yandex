{%- set config = mediastorage -%}
{
    "endpoints": [
        "unix:/var/run/mediastorage/mediastorage-proxy.sock",
        {% if config.local_port -%}
        "::1:{{ config.port }}"
        {%- else -%}
        ":::{{ config.port }}"
        {%- endif %}
    ],
    "backlog": {{ config.backlog }},
    "threads": {{ config.threads }},
    "max_pending_connections": {{ config.max_pending_connections }},
    "buffer_size": 65536,
    "monitor-port": 20001,
    "log_request_headers": {{ config.log_request_headers }},
    "request_header": "X-Request-ID",
    "safe_mode": true,
    "logger": {
        "level": "info",
        "root": [
            {
                "formatter": {
                    "type": "string",
                    "sevmap": ["DEBUG", "INFO", "WARN", "ERROR"],
                    "pattern": "{timestamp:l} {trace_id:{0:default}0>16} {thread:d}/{process:d} {severity}: {message}, attrs: [{...}]"
                },
                "sinks": [
                    {
                        "type": "asynchronous",
                        "factor": 16,
                        "overflow": "wait",
                        "sink": {
                            "type": "file",
                            "path": "{{ config.log.path }}",
                            "flush": 100
                        }
                    }
                ]
            }
        ],
        "access_log": [{
            "type": "blocking",
            "formatter": {
                "type": "string",
                {% if config.elliptics_cluster -%}
                {% raw %}
                "pattern": "timestamp={timestamp:{%Y-%m-%dT%H:%M:%S.%f}l}\trequest={url}\tstatus={status}\tunixtime={timestamp:{%s}l}\ttrace_id={trace_id}\tlocal_addr={local_addr}\tip={remote_addr}\tmethod={method}\tbytes_recv={bytes_received}\tbytes_sent={bytes_sent}\treceive_time={receive_time:.3f}\tsend_time={send_time:.3f}\tstarttransfer_time={starttransfer_time:.3f}\trequest_time={request_time:.3f}"
                {% endraw %}
                {%- else -%}
                {% raw %}
                "pattern": "tskv\ttskv_format=lenulca-access-log\ttimestamp={timestamp:{%Y-%m-%dT%H:%M:%S.%f}l}\trequest={url}\tstatus={status}\tunixtime={timestamp:{%s}l}\ttrace_id={trace_id}\tlocal_addr={local_addr}\tip={remote_addr}\tmethod={method}\tbytes_recv={bytes_received}\tbytes_sent={bytes_sent}\treceive_time={receive_time:.3f}\tsend_time={send_time:.3f}\tstarttransfer_time={starttransfer_time:.3f}\trequest_time={request_time:.3f}"
                {% endraw %}
                {%- endif %}
            },
            "sinks": [{
                "type": "asynchronous",
                "factor": 16,
                "overflow": "wait",
                "sink": {
                    "type": "file",
                    {% if config.elliptics_cluster -%}
                    "path": "{{ config.log.mds_access_path }}",
                    {%- else -%}
                    "path": "{{ config.log.access_path }}",
                    {%- endif %}
                    "flush": 100
                }
            }]
        }]
    },
    "application" : {
        "disable-auth": {{ config.disable_auth|lower }},
        {%- if config.elliptics_local_node %}
        "elliptics-forward-address": "{{ grains['fqdn'] }}:1025:10",
        {%- endif %}
        "enable-federation-mode-fallback": true,
        "elliptics-log-level" : "error",
        "elliptics-access-logger": {
            "elliptics_access": [
                {
                    "sinks": [
                        {
                           "type": "asynchronous",
                           "sink": {
                              "type": "file",
                              "path": "/var/log/mds/elliptics.log",
                              "flush": 100
                           },
                           "factor": 16,
                           "overflow": "wait"
                        }
                    ],
                    "formatter": {
                        "mutate": {
                            "timestamp": {
                                "strftime": "%Y-%m-%dT%H:%M:%S",
                                "gmtime": false
                            },
                            "unixtime_microsec_utc": {
                                "strftime": "%s.%f",
                                "gmtime": false
                            },
                            "timezone": {
                                "strftime": "%z"
                            }
                        },
                        "create": {
                            "type": "elliptics-client",
                            "tskv_format": "elliptics-proxy-client-log"
                        },
                        "type": "tskv",
                        "remove": [
                            "severity",
                            "message"
                        ]
                    }
                }
            ]
        },
        {% if config.elliptics_cluster -%}
        "mulcagate-access-logger": {
            "mulcagate_access": [{
                "type": "blocking",
                "formatter": {
                    "type": "string",
                    {% raw %}
                    "pattern": "tskv\ttskv_format=lenulca-access-log\ttimestamp={timestamp:{%Y-%m-%dT%H:%M:%S.%f}l}\trequest={url}\tstatus={status}\tunixtime={timestamp:{%s}l}\ttrace_id={trace_id}\tlocal_addr={local_addr}\tip={remote_addr}\tmethod={method}\tbytes_recv={bytes_received}\tbytes_sent={bytes_sent}\treceive_time={receive_time:.3f}\tsend_time={send_time:.3f}\tstarttransfer_time={starttransfer_time:.3f}\trequest_time={request_time:.3f}"
                    {% endraw %}
                },
                "sinks": [{
                    "type": "asynchronous",
                    "factor": 16,
                    "overflow": "wait",
                    "sink": {
                        "type": "file",
                        "path": "{{ config.log.access_path }}",
                        "flush": 100
                    }
                }]
            }]
        },
        {%- endif %}
        "executor-threads": {{ config.executor_threads }},
        "http-check": {
            "family": 10,
            "port": {{ config.http_check.port }},
            "query": "?service={{ config.http_check.service }}",
            "timeout_ms": {{ config.http_check.timeout_ms }}
        },
        "timeouts": {
            "lookup": {{ config.timeouts.lookup }},
            "read": {{ config.timeouts.read }},
            "remove": {{ config.timeouts.remove }},
            "write": {{ config.timeouts.write }},
            "wait": {{ config.timeouts.wait }},
            "check": {{ config.timeouts.check }},
            "exec": {{ config.timeouts.exec }}
        },
        "timeout-coefs": {
            "data-flow-rate": {{ config.timeout_coefs.data_flow_rate }},
            "for-commit": {{ config.timeout_coefs.for_commit }}
        },
        "chunk-size": {
            "write": {{ config.chunk_size.write }},
            "read": {{ config.chunk_size.read }}
        },
        "retries": {
            "limit-of-middle-chunk-attempts": 5,
            "scale-retry-timeout": 3
        },
        "cfg-flags": {{ config.cfg_flags }},
        "elliptics-features" : {
            "independent_protocol" : {{ config.elliptics_features.independent_protocol|lower }}
        },
        "elliptics-threads": {
            "io-thread-num": {{ config.elliptics_threads.io_thread_num }},
            "nonblocking-io-thread-num": {{ config.elliptics_threads.nonblocking_io_thread_num }},
            "net-thread-num": {{ config.elliptics_threads.net_thread_num }}
        },
        {%- if "lepton" in config %}
        "lepton": {
            "enable": {{ config.lepton.enable|lower }},
            "address": "{{ config.lepton.address }}",
            "local_address": "{{ config.lepton.local_address }}",
            "comparison": {{ config.lepton.comparison|lower }}
        },
        {%- endif %}
        "mastermind": {
            {%- set remotes = config.mastermind.remotes %}
            "nodes": [
                {%- for r in remotes -%}
                {
                    "host": "{{ r }}",
                    "port": {{ config.mastermind.port }}
                }{{ "," if not loop.last else "" }}
                {%- endfor %}
            ],
            "group-info-update-period": {{ config.mastermind.update_period }},
            "storage-info-period" : {{ config.mastermind.storage_info_period }},
            "config-remotes-period" : {{ config.mastermind.config_remotes_period }},
            "cached-keys-period" : {{ config.mastermind.cached_keys_period }},
            "warning-time": {{ config.mastermind.warning_time }},
            "expire-time": {{ config.mastermind.expire_time }},
            "enqueue-retries": {{ config.mastermind.enqueue_retries }},
            "enqueue-timeout": {{ config.mastermind.enqueue_timeout }},
            "reconnect-timeout": {{ config.mastermind.reconnect_timeout }},
            "cache-path": "{{ config.mastermind.cache_path }}",
            "worker-name": "{{ config.mastermind.worker_name }}",
            "compress-cache-file": true
        },
        {%- if config.mavrodi.enabled %}
        "meta-mastermind" : {
            "max-history-depth" : 2,
            "max-snapshot-age-sec": 86400,
            "snapshots-dir" : "/var/cache/mastermind",
            "grpc-calls-before-endpoint-switch": 10,
            {%- set remotes = config.mavrodi.remotes %}
            "grpc-endpoints": [
                {%- for r in remotes -%}
                    "{{ r }}:{{ config.mavrodi.port }}"{{ "," if not loop.last else "" }}
                {%- endfor %}
            ],
            "grpc-call-timeout-sec" : 40,
            "snapshot-update-interval-sec" : 60,
            "tls":{
                "enabled":true,
                "cert_path":"/etc/mavrodi/ssl/mavrodi.crt",
                "key_path":"/etc/mavrodi/ssl/mavrodi.key",
                "ca_paths":[
                   "/etc/mavrodi/ssl/ca.crt"
                ]
            }
        },
        {%- endif %}
        "die-limit": {{ config.die_limit }},
        {% if config.elliptics_cluster %}
        "header-protector" : {
            "name" : "X-MDS-SECURITY",
            "value" : "woo2aiD9uL",
            "handlers" : [
                "get", "downloadinfo", "download-info",
                "stat-log", "stat_log", "stat", "fileinfo", "dist-info",
                "cache-update"
            ]
        },
        {%- endif %}
        "yt-log": {
            "format": "tskv\ttskv_format=mds-proxy-log\top={operation}\trequest_id={request_id}\tunixtime={file_timestamp}\tnamespace={namespace}\tcouple_id={couple_id}\tfilename={filename}\tobject_size={file_size}\texpire_at={expiration_date}",
            "root": [
                {
                    "formatter": {
                        "type": "string",
                        "pattern": "{message}"
                    },
                    "sinks": [
                        {
                            "type": "asynchronous",
                            "factor": 16,
                            "overflow": "wait",
                            "sink": {
                                "type": "file",
                                "path": "/var/log/mds/tskv.log",
                                "flush": 100
                            }
                        }
                    ]
                }
            ]
        },
        "auth": {
            "enabled": true,
            "tvm": {
                "client_id": {{ config.auth_client_id }},
                "keys_cache_dir": "/var/cache/mds_tvm_cache/"
            }
        },
        "handystats": {
            "enable": {{ config.handystats.enable|lower }},
            "dump-interval": 4507,
            "statistics": {
                "moving-interval": 5000,
                "histogram-bins": 30,
                "tags": ["moving-avg", "histogram"]
            },
            "gauge": {
                "tags": ["histogram"]
            },
            "counter": {
                "tags": ["value"]
            },
            "timer": {
                "idle-timeout": 60000,
                "tags": ["moving-avg"]
            },
            "io.replies": {
                "tags": ["rate"]
            },
            "io.{input,output}.queue.size": {
                "tags": ["moving-avg"]
            },
            "pool.sys.*.active_threads": {
                "tags": ["moving-avg"]
            },
            "pool.sys.*.queue.size": {
                "tags": ["moving-avg"]
            },
            "libmm.storage_info.age_seconds": {
                "tags": ["value"]
            },
            "libmds.*.*.write.*.retry_num": {
                "tags": ["moving-avg"]
            },
            "proxy.*.*.process.*.*": {
                "tags": ["value"]
            },
            "libmds.*.*.acl.cache.lifetime": {
                "tags": ["value"]
            },
            "libmds.*.*.nscfg.lifetime": {
              "tags": ["value"]
            },
            "libmds.*.*.nscfg.version": {
              "tags": ["value"]
            },
            "libmds.*.*.age_seconds": {
              "tags": ["value"]
            },
            "elliptics.nodes_alive": {
                "tags": ["value"]
            },
            "tvm_cache.status.*": {
                "tags": ["value"]
            }
        },
        "cache": {
            "enable": {{ config.cache.enable|lower }},
            "version": "{{ config.cache.version }}",
            "remotes": "/etc/elliptics/cache-remotes.id",
            "elliptics": {
                "wait_timeout_sec": 1,
                "check_timeout_sec": 3,
                "flags": 12,
                "nonblocking_io_threads": 1,
                "net_threads": 1
            },
           "read_timeout_msec": 100,
           "write_timeout_sec": 1
        },
        "acl": {
            "enable": true,
            "http_source": {{ config.acl.http_source }},
            "cache_path": "/var/cache/proxy-acl/cache",
            "update_interval_sec": 60,
            "http_request_timeout_msec": 2000,
            "http_response_timeout_msec": 500
        },
        "tls": {
          "support": {{ config.tls.support }},
          "cert_path": "{{ config.tls.cert }}",
          "key_path": "{{ config.tls.key }}",
          "ca_path": "{{ config.tls.ca }}"
        },
        "karl": {
          "enabled": {{ config.karl.enabled|lower }},
          "use_federations": {{ config.karl.use_federations|lower }},
          "use_locality": true,
          "default_federation": 1,
          "discovery": {
            "connection_string": "{{ config.karl.connection_string }}",
            "prefix": "{{ config.karl.prefix }}",
            "snapshot_filename" : "/var/cache/mastermind/karl_discovery.proxy"
          },
          "tls": {
            "enabled": {{ config.karl.tls.enabled|lower }},
            "cert_path": "/etc/karl/ssl/karl.crt",
            "key_path": "/etc/karl/ssl/karl.key",
            "ca_paths": ["/etc/karl/ssl/ca.crt"]
          }
        },
        "nscfg": {
          "enabled": {{ config.nscfg.enabled|lower }},
          "http_source": "{{ config.nscfg.http_source }}",
          "warning_time_sec": {{ config.nscfg.warning_time_sec }},
          "cache_path": "/var/cache/nscfg/settings.cache",
          "update_interval_sec": 60,
          "http_request_timeout_msec": 10000
        },
        "dc": "{{ grains['conductor']['root_datacenter'] }}"
    }
}
