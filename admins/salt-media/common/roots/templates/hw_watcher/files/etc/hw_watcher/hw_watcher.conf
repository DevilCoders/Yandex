[global]
## Minimum time interval between sending mail for the same problem (in seconds)
## (default: 604800 (one week))
# send_mail_threshold = 604800

mail_to = {{ hw_watcher.mail }}
mail_dc = helpdc@yandex-team.ru
mail_emergency = {{ hw_watcher.mail }}

enable_module = {{ hw_watcher.enable_module | join(', ') }}
reaction = {{ hw_watcher.reaction.default | join(', ') }}

[bot]
## BOT API URL
## (default: http://bot.yandex-team.ru/api)
# api_url = http://bot.yandex-team.ru/api
{%- if hw_watcher.bot.token %}
oauth_token = {{ hw_watcher.bot.token }}
{%- endif %}

## BOT initiator
## (default: search)
initiator = {{ hw_watcher.initiator }}

[mem]
## Some systems report total memory amount lower than actual
## This parameters provide additional thresholds to mitigate this error

## This is absolute parameter added to detected RAM amount.
## This mitigates small rounding errors
## (default: 1 Gb)
# threshold_gb = 1
## This is relative parameter. Detected amount multiplied by
## (1+threshold_percent/100)
## (default: 1.5%)
# threshold_percent = 1.5

[ecc]
## Trace and report ECC memory errors

## Threshold of uncorrectable ECC on DIMM module
## When error counter is equal or greater the threshold, hw-watcher tries
## to determine fault DIMM module and apply the reaction
## (default: 1)
# ue_threshold = 1

## Threshold of correctable ECC on DIMM module
## When error counter is equal or greater the threshold, hw-watcher tries
## to determine fault DIMM module and apply the reaction
## (default: 15)
# ce_threshold = 15
ce_threshold = {{ hw_watcher.ecc.ce_threshold }}

## We trace errors during that time interval. It is used to reset edac
## counters. You can set the interval by using keyword day, hour, minute,
## second or their shortenings d, h, m, s.
## (default: 1 day)
# reset_interval = 1 day

## Define the way of notification about fault DIMM module
## Available values: mail, bot, bot-needcall
## The mail is sent to the mail_to address from the global section
## bot and bot-needcall values differs by "needcall" flag in bot request
## (default: bot)
reaction = {{ hw_watcher.reaction.ecc | join(', ') }}
force_sel_check = {{ hw_watcher.ecc.force_sel_check }}

[link]
## Minimum link speed
## (default: 1Gbit)
# min_speed = 1000

## Preferred duplex
## (default: full)
# needed_duplex = full

## Old kernels(such as Lucid's 2.6.32) have no support of sysfs speed and duplex, so
## use ethtool for speed determination
## (default: sudo ethtool)
# ethtool_cmd = sudo ethtool

## Regular expression which defines interfaces that should be used for checks
## (default FreeBSD: (bge|igb|em|bce|ixgbe|ixgb)[0-9]+
## (default Linux: eth[0-9]+)
# interface_regexp=


[raid]
## Path to mdadm
## (default: sudo mdadm)
# mdadm_cmd = sudo mdadm

## Max count of drive reinserts before failing it
##
## If equals to 0 then do not try to reinsert drive
## just fail it immediately
##
## (default: 3)
# max_reinsert_count = 3

## There is the same option as the previous one but for shelf disks
## If equals to 0 then do not try to reinsert drive
## just fail it immediately
##
## (default: 0)
# max_reinsert_count_for_shelf_disk = 1


[smart]
## Path to smartctl
## (default: sudo smartctl)
# smartctl_cmd = sudo smartctl

##
## The options below work only for the disk module
##

## Set lifetime of new disks in hours. Changing of the option should be agreed
## with RnD department.
## (default: 2880)
# new_disk_lifetime_in_hours = 2880

## These options set limits to raw value of checked SMART attributes
## The name of the option corresponds to the name of the attribute.
## Besides there are two option for each attritube for new disks and not.
## The list of options with names of attritubes:
## reallocated_sector, reallocated_sector_new_disk - Reallocated_Sector_Ct
## (default: 15 and 0)
# reallocated_sector = 3
## reallocated_events, reallocated_events_new_disk - Reallocated_Event_Count
## (default: 15 and 0)
# reallocated_events = 3
## pending_sectors, pending_sectors_new_disk - Current_Pending_Sector
## (default: 50 and 0)
# pending_sectors = 10
## offline_uncorrectable_errors, offline_uncorrectable_errors_new_disk - Offline_Uncorrectable
## (default: 50 and 0)
# offline_uncorrectable_errors = 10

## The check saves the value of UDMA_CRC_Error_Count attribute of each disk at the first run
## When the disk is failed, it subtract the saved value from current value of the attribute.
## If the result is greater this option value, the message about defective cable is added to
## failure comment
## (default: 1)
# udma_errors = 3

[drive]
## Path to mdadm
## (default: sudo mdadm)
# sgdisk_cmd = sudo sgdisk

## Path to grub-install
## (default: sudo grub-install)
# grub_install_cmd = sudo grub-install

## Any provider except system and hw_info can be disabled by setting parameter:
##   ${provider_name}_disable = 1
## For example:
# smart_disable = 1

## If count of drives in server is bigger than 8 and shelf_map cannot find shelf -
## hw_watcher don't tries to identify slot number.
## We think that in this case we do not know the type of shelves
# storage_drives_count = 8

[dmesg]
## Path of kernel log with block device errors for parsing
## (default: /var/log/kern.log)
# logfile = /var/log/messages

## Number of errors after which drive is considered broken
## (default: 3)
# max_errors = 3

[disk]
## The disk check  recognizes three type of disk: failsafe, common and system.
## The failsafe disk should be fully reserved by raid arrays (except grub partition),
## replacement of system disk breaks working of operation system,
## and all others are common disks (they contains application data withou reservation)
## There are separated reaction option for each type of disks:
## reaction_on_failsafe_disk, reaction_on_system_disk, reaction (for common disks)
## Available values: mail, bot, bot-needcall, none, unknown
## Additional unknown value allows to set unknown status for such failed disks.  It's used
## to intergration with Wall-E.
## (default: bot [reaction_on_failsafe_disk],  mail [reaction_on_system_disk], mail [reaction])
reaction_on_failsafe_disk = {{ hw_watcher.reaction.disk.failsafe | join(', ') }}
reaction_on_system_disk = {{ hw_watcher.reaction.disk.system | join(', ') }}
reaction = {{ hw_watcher.reaction.disk.default | join(', ') }}

## The time threshold to check periodicity of check execution
## You can set it by using keywords day, hour, minute, second or their shortenings d, h, m, s.
## (default: 3 hours)
# last_check_threshold = 5 hours

## hw-watcher removes failed disk from raid arrays and zeros its super-blocks before reaction on the failure
## The option allows to miss this step (you should do it manually or from hook)
## Available values: yes, true, 1 or no, false, 0
## (default: yes)
# prepare_disk_to_replace = no

## If we cannot remove disk from any array, the failure processing stops and it's set unknown status.
## To ignore success of disk removing, enable this option. It could destroy your array and data.
## Available values: yes, true, 1 or no, false, 0
## (default: no)
# ignore_preparing_success = yes

## hw-watcher replaces several failing disks one by one
## It could set unknown state in such cases by disabling the repair_multiple_problems option
## Available values: yes, true, 1 or no, false, 0
## (default: yes)
# repair_multiple_problems = false

## If hw-watcher has no disk configuration in local cache, but sees broken array and unused disk,
## it could recovery the array with this disk. Enable the repair_raid_with_unused_disk option for this.
## Available values: yes, true, 1 or no, false, 0
## (default: yes [for testing versions 0.3.8.X], no [for stable version 0.3.9.X and upper])
# repair_raid_with_unused_disk = no

## The option manages of checking a set of local disks by bot infarmation
## Available values: yes, true, 1 or no, false, 0
## (default: yes)
# check_by_bot = yes

## Set threshold of raid recovery operation. You get mail notification if it's excited.
## You can set it by using keywords day, hour, minute, second or their shortenings d, h, m, s.
## (default: 14 days)
# recovery_threshold = 10 days

## Atfer disk replacement hw-watcher restores gpt table on new disk from backup, installs grub if necessary and
## adds it to arrays. You could disable it by the enable_builtin_recovery option.
## Available values: yes, true, 1 or no, false, 0
## (default: yes)
# enable_builtin_recovery = no

## To resolve read errors on reserved partition of disk hw-watcher starts the check operation of md array.
## The option allows to disable it and to replace such disks.
## Available values: yes, true, 1 or no, false, 0
# repair_bad_sectors = yes

## On some servers now disk is not detected by system after replacement without manual scsi devices scanning
## The option force_disk_scan turn on such scanning when some disk is disappear
## Available values: yes, true, 1 or no, false, 0
## (default: no)
# force_disk_scan  = yes

## Options server_failed_disks_threshold and shelf_failed_disks_threshold allow to disable disk replacing if
## the number of failed disks reaches the theshold. There are two independent thresholds for server and shelf disks.
## Failed disk are counted separately for each shelf.
## The zere value disables the threhsold.
## (default: 0 for both options)
# server_failed_disks_threshold = 3
# shelf_failed_disks_threshold = 3

## String of hook arguments could be defined by python string template of the format method with named macros.
## There are two options failed_hook_arguments_template and replaced_hook_arguments_template for disk-failed and
## disk-replaced hooks accordingly. The list of available macro is
##   disk - the device path of the disk (e.g. /dev/sda) or None,
##   name - the name of the disk (e.g. sda) or its serial number,
##   location - sysfs path corresponding to disk location or None (e.g. /sys/devices/pci0000:00/0000:00:1f.2/ata6/host6/target6:0:0/6:0:0:0/block)
##   model - the model of the disk or None
##   serial - the serial of the disk or None
##   disk_type - HDD, SSD or None
##   problem_code - 0 for fully reserved failed disk, 1 - for failed disk without reservation, 2 - for disk with system data without reservation, None - for proper disk.
##   size_in_bytes - the size of the disk in bytes or None
##   partition_list - comma-seperated list of the disk partitions (e.g. sda1,sda2,sda3,sda4)
##   shelf - device path of the disk shelf or None (e.g /dev/sg17)
##   shelf_inv - inventory number of the disk shelf or None
##   shelf_vendor - vendor of the disk shelf or None (read from sysfs)
##   shelf_model - model of the disk shelf or None (read from sysfs)
# (default: {disk} for the both options)
# failed_hook_arguments_template = {disk} {slot} {problem_code} {shelf} {model} {serial}