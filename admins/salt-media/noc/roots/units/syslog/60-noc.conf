# vim: ft=jinja
main_queue(
  queue.size="500000"
  queue.filename="main"
  queue.type="FixedArray"
  queue.workerThreads="4" # threads at startup
  queue.workerThreadMinimumMessages="250000"  # 50% queue size
)

### Inputs && Modules
# Collect rsyslog statistics for monitoring purposes
module(
    load="impstats"
    format="json"
    interval="5"
    log.syslog="on"
    ruleset="stats"
    bracketing="on"
    resetCounters="off"
)
# dyn_stats(name="msg_per_host")

# Module parsers
module(load="pmciscoios")

# Listen on UDP default ports
module(load="imudp" threads="4" timeRequery="8" batchSize="128")
input(type="imudp" port="514" ruleset="default" rcvbufSize="1m")
# Listen on TCP, tcp is used by the balancer to check aliveness
module(load="imtcp")
input(type="imtcp" port="514" ruleset="default")

### Output
module(load="omuxsock")

## should be last loaded module
module(load="mmrm1stspace")
### Templates
# Beware of editing: this fields are used in noc/metridat/pkg/webhookeroutput/syslog.go
template(name="jsonoutfmt" type="list" option.jsonf="on") {
    property(outname="timestamp" name="timereported" dateFormat="rfc3339" format="jsonf")
    property(outname="timegenerated" name="timegenerated" dateFormat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    property(outname="fromhost" name="fromhost" format="jsonf")
    property(outname="fromhost-ip" name="fromhost-ip" format="jsonf")
    property(outname="severity" name="syslogseverity" format="jsonf" datatype="number")
    property(outname="facility" name="syslogfacility" format="jsonf" datatype="number")
    property(outname="syslog-tag" name="syslogtag" format="jsonf")
    property(outname="source" name="app-name" format="jsonf" onEmpty="null")
    property(outname="msg" name="msg" format="jsonf")
}
template(name="json-stats" type="list") {
    property(outname="msg" name="$!msg.content")
    property(name="$!msg.suffix")
}

### Parsers
parser(name="custom.rfc3164" type="pmrfc3164" detect.YearAfterTimestamp="on" remove.msgFirstSpace="on")

### Rulesets
ruleset(name="stats") {
    if ($msg == "BEGIN") then {
        set $!msg.content = "{\"time\":\"" & $timegenerated & "\", \"items\":[";
        set $!msg.suffix = "";
    } else if ($msg == "END") then {
        set $!msg.content = "{}]}\n";
        set $!msg.suffix = "";
    } else {
        set $!msg.content = $msg;
        set $!msg.suffix = ",";
    }
    action(name="rsyslog_stats" type="omfile" template="json-stats" file="/var/log/rsyslog/stats.log")
}

# Process incoming syslog message
# Order of parsers is important!! NOCDEV-7655 NOCDEV-7654
ruleset(name="default" parser=["rsyslog.rfc5424", "rsyslog.ciscoios", "custom.rfc3164"]) {
    action(type="mmrm1stspace")  # remove first space in msg
    # set $!inc_status = dyn_inc("msg_per_host", $hostname);

    if ($syslogtag == "rsyslog-juggler-check") then {
        action(name="rsyslog-juggler-check" type="omfile" file="/var/log/rsyslog/checks.log")
    } else {
        action(name="all" type="omfile" file="/var/log/all.log")
    }

    call ua_out
}

# unified_agent output ruleset with queue
ruleset(name="ua_out" queue.filename="ua_out" queue.size="50000" queue.type="LinkedList" queue.dequeueBatchSize="3000") {
    $OMUxSockSocket /tmp/unified_agent.sock
    # output to unified_agent unix datagram socket with json format 'jsonoutfmt'
    *.*	:omuxsock:;jsonoutfmt
}
