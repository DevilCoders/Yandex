// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/admins/zk (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	zk "github.com/go-zookeeper/zk"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Children mocks base method.
func (m *MockClient) Children(arg0 context.Context, arg1 string) ([]string, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Children", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Children indicates an expected call of Children.
func (mr *MockClientMockRecorder) Children(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Children", reflect.TypeOf((*MockClient)(nil).Children), arg0, arg1)
}

// ChildrenW mocks base method.
func (m *MockClient) ChildrenW(arg0 context.Context, arg1 string) ([]string, *zk.Stat, <-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildrenW", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(<-chan zk.Event)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ChildrenW indicates an expected call of ChildrenW.
func (mr *MockClientMockRecorder) ChildrenW(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildrenW", reflect.TypeOf((*MockClient)(nil).ChildrenW), arg0, arg1)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Create mocks base method.
func (m *MockClient) Create(arg0 context.Context, arg1 string, arg2 []byte, arg3 int32, arg4 []zk.ACL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Delete mocks base method.
func (m *MockClient) Delete(arg0 context.Context, arg1 string, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), arg0, arg1, arg2)
}

// EnsureZkPath mocks base method.
func (m *MockClient) EnsureZkPath(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureZkPath", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureZkPath indicates an expected call of EnsureZkPath.
func (mr *MockClientMockRecorder) EnsureZkPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureZkPath", reflect.TypeOf((*MockClient)(nil).EnsureZkPath), arg0, arg1)
}

// EnsureZkPathCached mocks base method.
func (m *MockClient) EnsureZkPathCached(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureZkPathCached", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureZkPathCached indicates an expected call of EnsureZkPathCached.
func (mr *MockClientMockRecorder) EnsureZkPathCached(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureZkPathCached", reflect.TypeOf((*MockClient)(nil).EnsureZkPathCached), arg0, arg1)
}

// Exists mocks base method.
func (m *MockClient) Exists(arg0 context.Context, arg1 string) (bool, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exists indicates an expected call of Exists.
func (mr *MockClientMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClient)(nil).Exists), arg0, arg1)
}

// ExistsW mocks base method.
func (m *MockClient) ExistsW(arg0 context.Context, arg1 string) (bool, *zk.Stat, <-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsW", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(<-chan zk.Event)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ExistsW indicates an expected call of ExistsW.
func (mr *MockClientMockRecorder) ExistsW(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsW", reflect.TypeOf((*MockClient)(nil).ExistsW), arg0, arg1)
}

// Get mocks base method.
func (m *MockClient) Get(arg0 context.Context, arg1 string) ([]byte, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0, arg1)
}

// GetW mocks base method.
func (m *MockClient) GetW(arg0 context.Context, arg1 string) ([]byte, *zk.Stat, <-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetW", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(<-chan zk.Event)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetW indicates an expected call of GetW.
func (mr *MockClientMockRecorder) GetW(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetW", reflect.TypeOf((*MockClient)(nil).GetW), arg0, arg1)
}

// Lock mocks base method.
func (m *MockClient) Lock(arg0 context.Context, arg1 string) (*zk.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1)
	ret0, _ := ret[0].(*zk.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockClientMockRecorder) Lock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockClient)(nil).Lock), arg0, arg1)
}

// LockWithData mocks base method.
func (m *MockClient) LockWithData(arg0 context.Context, arg1 string, arg2 []byte) (*zk.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockWithData", arg0, arg1, arg2)
	ret0, _ := ret[0].(*zk.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockWithData indicates an expected call of LockWithData.
func (mr *MockClientMockRecorder) LockWithData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockWithData", reflect.TypeOf((*MockClient)(nil).LockWithData), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockClient) Set(arg0 context.Context, arg1 string, arg2 []byte, arg3 int32) (*zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*zk.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockClientMockRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClient)(nil).Set), arg0, arg1, arg2, arg3)
}
