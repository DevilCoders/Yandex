---
# delta time for get from logs for parsing
TIME_DELTA: 300
# use multiprocessing for best time running (not sortable output)
USE_MULTIPROCESSING: 1
# workers count for multiprocessing (works only if (USE_MULTIPROCESSING: 1), may works slowly with (WORKER_COUNT: 1)
WORKER_COUNT: 8
# use common time from all logs - time() at start of counter
ATOMIC: 1
# use some delay for get some older data (IMPORTANT: works only with ATOMIC: 1)
TIME_DELAY: 301
LOG_ROOT: /opt/storage
LOG_NAME: nginx/access.log
LINE_REGEXP: \[(?P<TIME_LOCAL>.+) (?P<GMT>.+)\] (?P<HTTP_HOST>.+) (?P<REMOTE_ADDR>.+) \"(?P<REQUEST>.+)\" (?P<STATUS>.+) \"(?P<HTTP_REFERER>.+)\" \"(?P<HTTP_USER_AGENT>.+)\" \"(?P<HTTP_COOKIE>.+)\" (?P<REQUEST_TIME>.+) (?P<UPSTREAM_CACHE_STATUS>.+) (?P<BYTES_SENT>.+) \"(?P<UPSTREAM_ADDR>.+)\" \"(?P<UPSTREAM_STATUS>.+)\" \"(?P<UPSTREAM_RESPONSE_TIME>.+)\"
PROJECTS:
    KASSA:
        kassa_back:
            GROUPS:
                - kassa_back
                - kassa_back-prestable
            HOST_REGEX: '(.*)pers_back_stable\/pers-back(.*)e\.pers\.yandex\.net(.*)nginx\/access\.log$'
            FIELDS:
                - REQUEST_TIME
                - UPSTREAM_RESPONSE_TIME
            PERCENTS:
                - 75
                - 90
                - 93
                - 94
                - 95
                - 96
                - 97
                - 98
                - 99
                - 100
