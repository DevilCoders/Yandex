#! /bin/sh
### BEGIN INIT INFO
# Provides:          @restPackage@
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: distributed storage system for structured data
# Description:       Zookeeper is a ...
### END INIT INFO

# Author: Stepan Koltsov <stepancheg@yandex-team.ru>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="yandex zookeeper-jkp"
NAME="yandex-zookeeper-rest-jkp"
DAEMON=/usr/lib/yandex/zookeeper-jkp/bin/zkRest-yandex.sh
PIDFILE=/var/run/yandex/zookeeper-jkp/zookeeper-rest.pid
DAEMON_ARGS=
SCRIPTNAME=/etc/init.d/@restPackage@
DAEMON_USER=zookeeper
PING_RETRIES=60
PING_DELAY_SECONDS=5
KILL_DELAY_SECONDS=5


# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

mkdir -p $(dirname $PIDFILE)
chown $DAEMON_USER $(dirname $PIDFILE)

mkdir -p /var/log/yandex/zookeeper-jkp
chown -R $DAEMON_USER /var/log/yandex/zookeeper-jkp

wait_for_ping() {
    EXIT_CODE=$1
    if [ $EXIT_CODE -ne 0 ]; then
        log_end_msg $EXIT_CODE
        return $?
    fi

    log_daemon_msg "Will try to ping recently started daemon..." "$NAME"
    for n in `seq 1 $PING_RETRIES`; do
        sleep $PING_DELAY_SECONDS

        if ! $0 status; then
            log_daemon_msg "The process seems to have died :-("
            return 1
        fi

        if curl http://localhost:9998/znodes/v1/ | egrep -q "\"path\":\"/\""; then
            log_daemon_msg "Ping succeeded!"
            return 0
        fi

        log_daemon_msg "Ping failed (still initializing?), will retry in a few seconds."
    done

    log_daemon_msg "Failed to ping recently started daemon." "$NAME"
    $0 stop

    return 1
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --user $DAEMON_USER --quiet --pidfile $PIDFILE --chuid $DAEMON_USER --exec $DAEMON --test > /dev/null \
		|| return 1
	
	start-stop-daemon --start --user $DAEMON_USER --quiet --make-pidfile --background --pidfile $PIDFILE --chuid $DAEMON_USER --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	wait_for_ping $?
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
    status)
        log_daemon_msg "Checking status of $DESC" "$NAME"
        if start-stop-daemon --stop --quiet --pidfile $PIDFILE --test ;  then
            log_progress_msg "running"
            log_end_msg 0
        else
            log_progress_msg "apparently not running"
            log_end_msg 1
        fi
        exit $?
        ;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
