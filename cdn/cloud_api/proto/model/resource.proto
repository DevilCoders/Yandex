syntax = "proto3";

package cdn.cloud_api.proto.model;

import "cdn/cloud_api/proto/model/common.proto";

option go_package = "a.yandex-team.ru/cdn/cloud_api/proto/model";

message Resource {
    string id = 1;
    string folder_id = 2;
    int64 origins_group_id = 3;

    bool active = 4;
    string name = 5;
    // Primary domain of resource.
    string cname = 6;
    // Secondary domains of resource.
    repeated string secondary_hostnames = 7;
    // Protocol to use when proxying requests to origin.
    OriginProtocol origin_protocol = 8;

    // Resource options.
    ResourceOptions options = 9;

    VersionMeta version_meta = 100;
}

// Resource Options
message ResourceOptions {
    // Custom value of Host header.
    optional string custom_host = 1;
    // Custom value of SNI.
    optional string custom_sni = 2;
    // Redirect HTTP requests to HTTPS
    optional bool redirect_to_https = 3;
    repeated AllowedMethod allowed_methods = 4;

    CORSOptions cors = 5;
    BrowserCacheOptions browser_cache = 6;
    EdgeCacheOptions edge_cache = 7;
    ServeStaleOptions serve_stale = 8;
    NormalizeRequestOptions normalize_request = 9;
    CompressionOptions compression = 10;
    StaticHeadersOptions static_headers = 11;
    RewriteHeaders rewrite = 12;


    enum AllowedMethod {
        ALLOWED_METHOD_UNSPECIFIED = 0;
        GET = 1;
        HEAD = 2;
        POST = 3;
        PUT = 4;
        PATCH = 5;
        DELETE = 6;
        OPTIONS = 7;
    }
}

message ResourceRule {
    int64 id = 1;
    string resource_id = 2;

    string name = 3;
    string pattern = 4;
    optional int64 origins_group_id = 5;
    optional OriginProtocol origin_protocol = 6;
    ResourceOptions resource_options = 7;
}

enum OriginProtocol {
    ORIGIN_PROTOCOL_UNSPECIFIED = 0;
    HTTP = 1;
    HTTPS = 2;
    SAME = 3;
}

message CORSOptions {
    optional bool enabled = 1;
    optional bool enable_timing = 2;
    optional CorsMode mode = 3;
    repeated string allowed_origins = 4;
    repeated AllowedMethod allowed_methods = 5;
    repeated string allowed_headers = 6;
    optional int64 max_age = 7;
    repeated string expose_headers = 8;


    enum AllowedMethod {
        ALLOWED_METHOD_UNSPECIFIED = 0;
        GET = 1;
        HEAD = 2;
        POST = 3;
        PUT = 4;
        PATCH = 5;
        DELETE = 6;
        OPTIONS = 7;
        STAR = 8;
    }
}

enum CorsMode {
    CORS_MODE_UNSPECIFIED = 0;
    STAR = 1;
    ORIGIN_ANY = 2;
    FROM_LIST = 3;
}

message BrowserCacheOptions {
    optional bool enabled = 1;
    optional int64 max_age = 2;
}

message EdgeCacheOptions {
    optional bool enabled = 1;
    optional bool use_redirects = 2;
    optional int64 ttl = 3;
    optional bool override = 4;
    repeated OverrideTTLCode override_ttl_codes = 5;
}

message OverrideTTLCode {
    int64 code = 1;
    int64 ttl = 2;
}

message ServeStaleOptions {
    optional bool enabled = 1;
    repeated ServeStaleError errors = 2;
}

enum ServeStaleError {
    SERVE_STALE_ERROR_UNSPECIFIED = 0;
    ERROR = 1;
    TIMEOUT = 2;
    INVALID_HEADER = 3;
    UPDATING = 4;
    HTTP500 = 5;
    HTTP502 = 6;
    HTTP503 = 7;
    HTTP504 = 8;
    HTTP403 = 9;
    HTTP404 = 10;
    HTTP429 = 11;
}

message NormalizeRequestOptions {
    NormalizeRequestCookies cookies = 1;
    NormalizeRequestQueryString query_string = 2;
}

message NormalizeRequestCookies {
    optional bool ignore = 1;
}

message NormalizeRequestQueryString {
    oneof variant {
        bool ignore = 1;
        NormalizeRequestQueryStringWhiteBlackList whitelist = 2;
        NormalizeRequestQueryStringWhiteBlackList blacklist = 3;
    }
}

message NormalizeRequestQueryStringWhiteBlackList {
    repeated string values = 1;
}

message CompressionOptions {
    oneof variant {
        bool fetch_compressed = 1;
        Compress compress = 2;
    }
}

message Compress {
    bool compress = 1;
    repeated CompressCodec codecs = 2;
    repeated string types = 3;
}

enum CompressCodec {
    COMPRESS_CODEC_UNSPECIFIED = 0;
    GZIP = 1;
    BROTLI = 2;
}

message StaticHeadersOptions {
    repeated HeaderOption request = 1;
    repeated HeaderOption response = 2;
}

message HeaderOption {
    string name = 1;
    HeaderAction action = 2;
    string value = 3;
}

enum HeaderAction {
    HEADER_ACTION_UNSPECIFIED = 0;
    SET = 1;
    APPEND = 2;
    REMOVE = 3;
}

message RewriteHeaders {
    optional bool enabled = 1;
    optional string regex = 2;
    optional string replacement = 3;
    optional RewriteFlag flag = 4;
}

enum RewriteFlag {
    REWRITE_FLAG_UNSPECIFIED = 0;
    LAST = 1;
    BREAK = 2;
    REDIRECT = 3;
    PERMANENT = 4;
}
