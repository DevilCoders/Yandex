// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package storage

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson163c17a9DecodeAYandexTeamRuCdnCloudApiPkgStorage(in *jlexer.Lexer, out *NormalizeRequestQueryString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ignore":
			if in.IsNull() {
				in.Skip()
				out.Ignore = nil
			} else {
				if out.Ignore == nil {
					out.Ignore = new(bool)
				}
				*out.Ignore = bool(in.Bool())
			}
		case "whitelist":
			(out.Whitelist).UnmarshalEasyJSON(in)
		case "blacklist":
			(out.Blacklist).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeAYandexTeamRuCdnCloudApiPkgStorage(out *jwriter.Writer, in NormalizeRequestQueryString) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ignore != nil {
		const prefix string = ",\"ignore\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.Ignore))
	}
	if len(in.Whitelist) != 0 {
		const prefix string = ",\"whitelist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Whitelist).MarshalEasyJSON(out)
	}
	if len(in.Blacklist) != 0 {
		const prefix string = ",\"blacklist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Blacklist).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NormalizeRequestQueryString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeAYandexTeamRuCdnCloudApiPkgStorage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NormalizeRequestQueryString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeAYandexTeamRuCdnCloudApiPkgStorage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NormalizeRequestQueryString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeAYandexTeamRuCdnCloudApiPkgStorage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NormalizeRequestQueryString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeAYandexTeamRuCdnCloudApiPkgStorage(l, v)
}
func easyjson163c17a9DecodeAYandexTeamRuCdnCloudApiPkgStorage1(in *jlexer.Lexer, out *CompressionVariant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fetch_compressed":
			if in.IsNull() {
				in.Skip()
				out.FetchCompressed = nil
			} else {
				if out.FetchCompressed == nil {
					out.FetchCompressed = new(bool)
				}
				*out.FetchCompressed = bool(in.Bool())
			}
		case "compress":
			if in.IsNull() {
				in.Skip()
				out.Compress = nil
			} else {
				if out.Compress == nil {
					out.Compress = new(Compress)
				}
				easyjson163c17a9DecodeAYandexTeamRuCdnCloudApiPkgStorage2(in, out.Compress)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeAYandexTeamRuCdnCloudApiPkgStorage1(out *jwriter.Writer, in CompressionVariant) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FetchCompressed != nil {
		const prefix string = ",\"fetch_compressed\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.FetchCompressed))
	}
	if in.Compress != nil {
		const prefix string = ",\"compress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson163c17a9EncodeAYandexTeamRuCdnCloudApiPkgStorage2(out, *in.Compress)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompressionVariant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeAYandexTeamRuCdnCloudApiPkgStorage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompressionVariant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeAYandexTeamRuCdnCloudApiPkgStorage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompressionVariant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeAYandexTeamRuCdnCloudApiPkgStorage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompressionVariant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeAYandexTeamRuCdnCloudApiPkgStorage1(l, v)
}
func easyjson163c17a9DecodeAYandexTeamRuCdnCloudApiPkgStorage2(in *jlexer.Lexer, out *Compress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Compress":
			out.Compress = bool(in.Bool())
		case "Codecs":
			(out.Codecs).UnmarshalEasyJSON(in)
		case "Types":
			(out.Types).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeAYandexTeamRuCdnCloudApiPkgStorage2(out *jwriter.Writer, in Compress) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Compress\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Compress))
	}
	{
		const prefix string = ",\"Codecs\":"
		out.RawString(prefix)
		(in.Codecs).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Types\":"
		out.RawString(prefix)
		(in.Types).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
