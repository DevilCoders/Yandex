// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package storage

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage(in *jlexer.Lexer, out *StringArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StringArray, 0, 4)
			} else {
				*out = StringArray{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 string
			v1 = string(in.String())
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage(out *jwriter.Writer, in StringArray) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StringArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StringArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StringArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StringArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage1(in *jlexer.Lexer, out *ServeStaleErrorArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ServeStaleErrorArray, 0, 8)
			} else {
				*out = ServeStaleErrorArray{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 ServeStaleErrorType
			v4 = ServeStaleErrorType(in.Int64())
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage1(out *jwriter.Writer, in ServeStaleErrorArray) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			out.Int64(int64(v6))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ServeStaleErrorArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServeStaleErrorArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServeStaleErrorArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServeStaleErrorArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage1(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage2(in *jlexer.Lexer, out *OverrideTTLCodeArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(OverrideTTLCodeArray, 0, 4)
			} else {
				*out = OverrideTTLCodeArray{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 OverrideTTLCode
			easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage3(in, &v7)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage2(out *jwriter.Writer, in OverrideTTLCodeArray) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage3(out, v9)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v OverrideTTLCodeArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OverrideTTLCodeArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OverrideTTLCodeArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OverrideTTLCodeArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage2(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage3(in *jlexer.Lexer, out *OverrideTTLCode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = int64(in.Int64())
		case "TTL":
			out.TTL = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage3(out *jwriter.Writer, in OverrideTTLCode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"TTL\":"
		out.RawString(prefix)
		out.Int64(int64(in.TTL))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage4(in *jlexer.Lexer, out *HeaderOptionArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(HeaderOptionArray, 0, 1)
			} else {
				*out = HeaderOptionArray{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 HeaderOption
			easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage5(in, &v10)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage4(out *jwriter.Writer, in HeaderOptionArray) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage5(out, v12)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v HeaderOptionArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeaderOptionArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeaderOptionArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeaderOptionArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage4(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage5(in *jlexer.Lexer, out *HeaderOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Action":
			out.Action = HeaderAction(in.Int64())
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage5(out *jwriter.Writer, in HeaderOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Action\":"
		out.RawString(prefix)
		out.Int64(int64(in.Action))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage6(in *jlexer.Lexer, out *CompressCodecArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CompressCodecArray, 0, 8)
			} else {
				*out = CompressCodecArray{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 CompressCodec
			v13 = CompressCodec(in.Int64())
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage6(out *jwriter.Writer, in CompressCodecArray) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			out.Int64(int64(v15))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CompressCodecArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompressCodecArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompressCodecArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompressCodecArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage6(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage7(in *jlexer.Lexer, out *AllowedMethodArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(AllowedMethodArray, 0, 8)
			} else {
				*out = AllowedMethodArray{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 AllowedMethod
			v16 = AllowedMethod(in.Int64())
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage7(out *jwriter.Writer, in AllowedMethodArray) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			out.Int64(int64(v18))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v AllowedMethodArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllowedMethodArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCdnCloudApiPkgStorage7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllowedMethodArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllowedMethodArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCdnCloudApiPkgStorage7(l, v)
}
