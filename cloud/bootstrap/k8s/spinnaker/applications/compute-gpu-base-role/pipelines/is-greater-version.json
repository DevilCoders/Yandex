{
    "appConfig": {},
    "application": "compute-gpu-base-role",
    "id": "b5d94e01-b838-472f-bfc9-5ac86155d408",
    "index": 9,
    "keepWaitingPipelines": false,
    "limitConcurrent": true,
    "name": "is-greater-version",
    "parameterConfig": [
        {
            "default": "",
            "description": "",
            "hasOptions": false,
            "label": "",
            "name": "first",
            "options": [
                {
                    "value": ""
                }
            ],
            "pinned": true,
            "required": true
        },
        {
            "default": "",
            "description": "",
            "hasOptions": false,
            "label": "",
            "name": "second",
            "options": [
                {
                    "value": ""
                }
            ],
            "pinned": true,
            "required": true
        }
    ],
    "spelEvaluator": "v4",
    "stages": [
        {
            "failOnFailedExpressions": true,
            "name": "[is-greater-version] Split to array",
            "refId": "1",
            "requisiteStageRefIds": [],
            "type": "evaluateVariables",
            "variables": [
                {
                    "key": "firstArr",
                    "value": "${parameters.first.replaceAll('-', '\\.').split('\\.')}"
                },
                {
                    "key": "secondArr",
                    "value": "${parameters.second.replaceAll('-', '\\.').split('\\.')}"
                }
            ]
        },
        {
            "name": "[is-greater-version] Check Array Len",
            "preconditions": [
                {
                    "context": {
                        "expression": "!(firstArr.size() != secondArr.size() \u0026\u0026 firstArr.size() != 4)",
                        "failureMessage": "Incorrect arrays:\nfirst ${firstArr}\nsecond ${secondArr}"
                    },
                    "failPipeline": true,
                    "type": "expression"
                },
                {
                    "context": {
                        "expression": "firstArr[0].matches('[0-9]+') \u0026\u0026\n  firstArr[1].matches('[0-9]+') \u0026\u0026\n  firstArr[2].matches('[0-9]+') \u0026\u0026\n  firstArr[3].matches('[0-9]+')",
                        "failureMessage": "First array has incorrect values ${firstArr}"
                    },
                    "failPipeline": true,
                    "type": "expression"
                },
                {
                    "context": {
                        "expression": "secondArr[0].matches('[0-9]+') \u0026\u0026\n  secondArr[1].matches('[0-9]+') \u0026\u0026\n  secondArr[2].matches('[0-9]+') \u0026\u0026\n  secondArr[3].matches('[0-9]+')",
                        "failureMessage": "Second array has incorrect values ${secondArr}"
                    },
                    "failPipeline": true,
                    "type": "expression"
                }
            ],
            "refId": "2",
            "requisiteStageRefIds": [
                "1"
            ],
            "type": "checkPreconditions"
        },
        {
            "failOnFailedExpressions": true,
            "name": "[is-greater-version] Compare arrays",
            "refId": "3",
            "requisiteStageRefIds": [
                "2"
            ],
            "type": "evaluateVariables",
            "variables": [
                {
                    "key": "returnState",
                    "value": "${\n#toInt(firstArr[0]) \u003c= #toInt(secondArr[0]) \u0026\u0026\n#toInt(firstArr[1]) \u003c= #toInt(secondArr[1]) \u0026\u0026\n  (\n    (#toInt(firstArr[3]) == #toInt(secondArr[2])\n      \u0026\u0026 #toInt(firstArr[3]) \u003c #toInt(secondArr[3])) ||\n    (#toInt(firstArr[2]) \u003c #toInt(secondArr[2])) \n  )   \n}"
                }
            ]
        }
    ],
    "triggers": []
}
