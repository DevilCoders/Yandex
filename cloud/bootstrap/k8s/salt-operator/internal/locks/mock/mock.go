// Code generated by MockGen. DO NOT EDIT.
// Source: internal/locks/locker.go

// Package mock_locks is a generated GoMock package.
package mock_locks

import (
	context "context"
	reflect "reflect"

	ydblock "a.yandex-team.ru/cloud/bootstrap/ydb-lock"
	gomock "github.com/golang/mock/gomock"
)

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// CheckHostLock mocks base method.
func (m *MockLocker) CheckHostLock(ctx context.Context, hostname string, lock *ydblock.Lock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHostLock", ctx, hostname, lock)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHostLock indicates an expected call of CheckHostLock.
func (mr *MockLockerMockRecorder) CheckHostLock(ctx, hostname, lock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHostLock", reflect.TypeOf((*MockLocker)(nil).CheckHostLock), ctx, hostname, lock)
}

// CreateLock mocks base method.
func (m *MockLocker) CreateLock(ctx context.Context, description string, hosts []string, hbTimeout uint64, lockType ydblock.HostLockType) (*ydblock.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLock", ctx, description, hosts, hbTimeout, lockType)
	ret0, _ := ret[0].(*ydblock.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLock indicates an expected call of CreateLock.
func (mr *MockLockerMockRecorder) CreateLock(ctx, description, hosts, hbTimeout, lockType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLock", reflect.TypeOf((*MockLocker)(nil).CreateLock), ctx, description, hosts, hbTimeout, lockType)
}

// ExtendLock mocks base method.
func (m *MockLocker) ExtendLock(ctx context.Context, lock *ydblock.Lock) (*ydblock.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendLock", ctx, lock)
	ret0, _ := ret[0].(*ydblock.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendLock indicates an expected call of ExtendLock.
func (mr *MockLockerMockRecorder) ExtendLock(ctx, lock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendLock", reflect.TypeOf((*MockLocker)(nil).ExtendLock), ctx, lock)
}

// Init mocks base method.
func (m *MockLocker) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockLockerMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLocker)(nil).Init), ctx)
}

// ReleaseLock mocks base method.
func (m *MockLocker) ReleaseLock(ctx context.Context, lock *ydblock.Lock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLock", ctx, lock)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLock indicates an expected call of ReleaseLock.
func (mr *MockLockerMockRecorder) ReleaseLock(ctx, lock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLock", reflect.TypeOf((*MockLocker)(nil).ReleaseLock), ctx, lock)
}
