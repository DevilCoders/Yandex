use hahn;

use hahn;
PRAGMA yt.Pool = 'cloud_analytics_pool';
PRAGMA yson.DisableStrict;

$script = @@

def lifetime_range(start, finish):
    d0 = 1514754000 #2018-01-01 00:00:00
    step = 3600
    if start % step == 0:
        start0 = start
    else:
        start0 = d0 + ((start-d0) // step + 1) * step
    if start0 > finish:
        return []
    else:
        return [start0 + x*step for x in range((finish-start) // step)]

def lifetime_range_5min_str(start, finish):
    d0 = 1514754000 #2018-01-01 00:00:00
    step = 300
    if start % step == 0:
        start0 = start
    else:
        start0 = d0 + ((start-d0) // step + 1) * step
    if start0 > finish:
        return []
    else:
        return ','.join([str(start0 + x*step) for x in range((finish-start) // step)])


def flatten(a):
    res = []
    for a_ in a:
        res += list(a_)
    return sorted(res)

def convolve(a):
    a_flat = flatten(list(a))

    a_short = [a_flat[0]]
    for i in range(1,len(a_flat)-2, 2):
        if a_flat[i] != a_flat[i+1]:
            a_short += [a_flat[i], a_flat[i+1]]
    a_short += [a_flat[-1]]

    return [[a_short[i], a_short[i+1]] for i in range(0,len(a_short), 2)]

def tp_history(created_at, first_paid_cons_at, now):
    step = 3600*24
    d0 = 1514754000 #2018-01-01 00:00:00
    d1 = d0 + ((created_at - d0) // step) * step
    if first_paid_cons_at == None:
        return [['trial',d1 + step*d] for d in range((now-d1) // step + 1)]
    else:
        dp = d0 + ((first_paid_cons_at - d0) // step) * step
        return [['trial',d1 + step*d] for d in range((first_paid_cons_at-d1) // step)] + \
               [['paid',dp + step*d] for d in range((now-dp) // step + 1)]
@@;



$to_start_of_day = ($timestamp) -> {

    $start_of_day = DateTime::ToSeconds(DateTime::MakeDatetime(DateTime::StartOfDay(DateTime::FromSeconds(CAST ($timestamp AS Uint32)))));

    RETURN $start_of_day;

};

$to_start_of_hour = ($timestamp) -> {

    $start_of_hour = DateTime::ToSeconds(DateTime::MakeDatetime(DateTime::StartOf(DateTime::FromSeconds(CAST ($timestamp AS Uint32)),Interval("PT1H"))));

    RETURN $start_of_hour
};

$convolve = Python3::convolve(

    Callable<(List<List<Uint64?>>)->List<List<Uint64>>>,

    $script

);

$lifetime_range = Python3::lifetime_range(

    Callable<(Uint64?,Uint64?)->List<Uint64>>,

    $script

);

$lifetime_range_5min_str = Python3::lifetime_range_5min_str(

    Callable<(Uint64?,Uint64?)->String>,

    $script

);


$tp_history = Python3::tp_history(

    Callable<(Uint64?,Uint64?,Uint64?)->List<Tuple<String,Uint64>>>,

    $script

);

$parse = DateTime::Parse('%Y-%m-%d %H:%M:%S');
$format = DateTime::Format('%Y-%m-%d');
$format_full = DateTime::Format('%Y-%m-%d %H:%M:%S');


DEFINE SUBQUERY $last_non_empty_table($path) AS
    $max_path = (
        SELECT MAX(Path) AS Path
        FROM FOLDER($path, 'row_count')
        WHERE Type = 'table'
            AND Yson::LookupInt64(Attributes, 'row_count') > 0
    );
    SELECT * FROM CONCAT($max_path);
END DEFINE;


$ba_paid_status_hist =  (
    
        SELECT
            billing_account_id,
            d,
            if(sum(real_consumption)>sum(trial_consumption),'paid', 'trial') as ba_paid_status
        FROM (
            SELECT billing_account_id, DateTime::MakeDate($parse(event_time)) as d, real_consumption, trial_consumption 
            FROM `//home/cloud_analytics/cubes/acquisition_cube/cube`
            WHERE event='day_use'
            )
        GROUP BY 
            billing_account_id, d
    
);

$ba_time_dependent_tags = (
SELECT 
    a.d as d, 
    a.billing_account_id as billing_account_id,
    ba_state,
    vm_is_service,
    ba_block_reason,
    ba_sales_name,
    ba_architect,
    ba_paid_status 
FROM (
SELECT
    d,
    billing_account_id,
    AGGREGATE_LIST(ba_state)[0] as ba_state,
    AGGREGATE_LIST(is_service)[0] as vm_is_service,
    AGGREGATE_LIST(block_reason)[0] as ba_block_reason,
    AGGREGATE_LIST(sales_name)[0] as ba_sales_name,
    AGGREGATE_LIST(architect)[0] as ba_architect
    FROM (
        SELECT
            DateTime::MakeDate($parse(event_time)) as d,
            billing_account_id,
            ba_state,
            block_reason,
            if(ba_usage_status = 'service', 'service', 'customer') as is_service,
            sales_name,
            architect
        FROM `//home/cloud_analytics/cubes/acquisition_cube/cube`
        WHERE
            event in ('day_use', 'ba_created', 'first_trial_consumption', 'first_paid_consumption')
    )
    GROUP BY
        d,
        billing_account_id
    ) as a LEFT JOIN $ba_paid_status_hist as b on a.billing_account_id = b.billing_account_id and a.d = b.d

);


$ba_time_independent_tags = (
    SELECT
        billing_account_id,
        MAX_BY(is_fraud, event_time) as is_fraud,
        MAX_BY(ba_name, event_time) as ba_name,
        MAX_BY(ba_person_type, event_time) as ba_person_type,
        MAX_BY(ba_type, event_time) as ba_type,
        MAX_BY(channel, event_time) as channel,
        MAX_BY(segment, event_time) as segment,
        MAX_BY(board_segment, event_time) as board_segment,
        MAX_BY(user_settings_email, event_time) as user_settings_email,
        MAX_BY(account_name, event_time) as account_name,
        $format(DateTime::MakeDate(DateTime::StartOfMonth($parse(MAX_BY(first_ba_created_datetime, event_time))))) as ba_m_cohort,
        $format(DateTime::MakeDate(DateTime::StartOfWeek($parse(MAX_BY(first_ba_created_datetime, event_time))))) as ba_w_cohort
    FROM `//home/cloud_analytics/cubes/acquisition_cube/cube`
    WHERE
        event in ('day_use', 'ba_created', 'first_trial_consumption', 'first_paid_consumption')
    GROUP BY
        billing_account_id



);

$folder_ba = (
    SELECT
        folder_id,
        AGGREGATE_LIST(cloud_id)[0] as cloud_id,
        AGGREGATE_LIST(billing_account_id)[0] as billing_account_id
    FROM (
        SELECT
            folder_id,
            p.cloud_id as cloud_id,
            billing_account_id
        FROM (
            SELECT
                a.folder_id as folder_id,
                COALESCE(a.cloud_id, b.cloud_id_new) as cloud_id
            FROM (
                SELECT DISTINCT
                    folder_id,
                    cloud_id
                FROM
                    RANGE('//home/logfeller/logs/yc-billing-compute-instance/1d', '2018-11-01')
                ) as a
            LEFT JOIN (
                SELECT
                    folder_id,
                    AGGREGATE_LIST(cloud_id)[0] as cloud_id_new
                FROM
                    $last_non_empty_table('//home/cloud_analytics/import/iam/cloud_folders/1h')
                GROUP BY folder_id
                    ) as b
            ON a.folder_id = b.folder_id
        ) as p
        LEFT JOIN (
            SELECT
                cloud_id,
                MAX_BY(billing_account_id,`event_time`) as billing_account_id
            FROM
                `//home/cloud_analytics/cubes/acquisition_cube/cube`
            WHERE event = 'day_use'
            GROUP BY
                cloud_id
        ) as q
        on p.cloud_id = q.cloud_id
    )
    GROUP BY
        folder_id

);

$nodes_stats = (
    SELECT 
            a.start-1 as t,
            a.node_name as node_name,
            cores_total,
            memory_total,
            cores_free,
            memory_free
        FROM  (
            SELECT
                start,
                node_name,
                MAX(`max`) as cores_total
            FROM RANGE('//home/cloud_analytics/import/resources/1mon/max')
            WHERE metric='cores_total'
            GROUP BY start, node_name
            ) as a
    
        LEFT JOIN (
            SELECT
                start,
                node_name,
                MAX(`max`) as memory_total
            FROM RANGE('//home/cloud_analytics/import/resources/1mon/max')
            WHERE metric='memory_total'
            GROUP BY node_name, start
        ) as b 
        ON a.start = b.start and a.node_name = b.node_name
        LEFT JOIN (
            SELECT
                node_name,
                start,
                MAX(`max`) as cores_free
            FROM RANGE('//home/cloud_analytics/import/resources/1mon/max')
            WHERE metric='cores_free'
            GROUP BY node_name, start
        ) as c
        ON a.start = c.start and a.node_name = c.node_name
        LEFT JOIN (
            SELECT
                node_name,
                start,
                MAX(`max`) as memory_free
            FROM RANGE('//home/cloud_analytics/import/resources/1mon/max')
            WHERE metric='memory_free'
            GROUP BY node_name, start
        ) as d
        ON a.start = d.start and a.node_name = d.node_name

);


$vm_lifetime = (
SELECT
    resource_id,
    lifetime_convolved[0] as start,
    lifetime_convolved[1] as finish
FROM (
    SELECT
        resource_id,
        $convolve(AGGREGATE_LIST(lifetime)) as lifetime_convolved
    FROM (
        SELECT
            resource_id,
            AsList(Yson::LookupUint64(usage, 'start'), Yson::LookupUint64(usage, 'finish')) as lifetime,
        FROM RANGE('//home/logfeller/logs/yc-billing-compute-instance/1d','2018-11-01')
        )
    GROUP BY resource_id
    )
FLATTEN BY lifetime_convolved
);




$vm_log_short = (

    SELECT
        a.resource_id as vm_id,
        a.start as vm_start,
        a.finish as vm_finish,
        $lifetime_range(a.start, a.finish) as t,
        $lifetime_range_5min_str(a.start, a.finish) as lifetime_range_5min_str,
        d.cloud_id as cloud_id,
        d.billing_account_id as billing_account_id,
        b.folder_id as folder_id,
        source_id as node_id,
        String::Substring(source_id,0,3) as node_az,
        COALESCE(Yson::LookupUint64(tags, 'cores'),0) as vm_cores,
        COALESCE(Yson::LookupUint64(tags, 'gpus'), 0) as vm_gpus,
        IF(Yson::LookupUint64(tags, 'core_fraction') IS NULL, 100, Yson::LookupUint64(tags, 'core_fraction')) as vm_core_fraction,
        Yson::LookupUint64(tags, 'cores')*IF(Yson::LookupUint64(tags, 'core_fraction') IS NULL, 100, Yson::LookupUint64(tags, 'core_fraction'))/100.0 as vm_cores_real,
        COALESCE(Yson::LookupUint64(tags, 'memory'),0)/1024/1024/1024.0 as vm_memory,
        'c'||CAST(Yson::LookupUint64(tags, 'cores') AS String)||'_m'||CAST(Yson::LookupUint64(tags, 'memory')/1024/1024/1024 AS String) || '_cf' ||CAST(IF(Yson::LookupUint64(tags, 'core_fraction') IS NULL, 100, Yson::LookupUint64(tags, 'core_fraction')) AS String) as vm_config,
        Yson::LookupUint64(tags, 'memory')/1024/1024/1024.0 / Yson::LookupUint64(tags, 'cores') as vm_memory_to_cores_ratio,
        Yson::LookupString(tags, 'platform_id') as node_platform,
        IF(Yson::LookupBool(tags, 'preemptible') IS NULL, 0, 1) as vm_preemptible,
        Yson::LookupUint64(tags, 'public_fips') as vm_public_fips,
        String::JoinFromList(Yson::ConvertToStringList(Yson::Lookup(tags, 'product_ids')),',') as vm_product_ids,
        Yson::ConvertToStringList(Yson::Lookup(tags, 'product_ids'))[0] as vm_product_id,
        coalesce(product_name, 'Other') as vm_product_name,
        String::JoinFromList(ListMap(DictItems(Yson::ConvertToStringDict(labels)), ($x) -> {RETURN $x.0||':'||$x.1}), ';') as vm_labels_str,
        labels as vm_labels,
        Yson::LookupString(labels, 'managed-kubernetes-cluster-id') as  vm_managed_kubernetes_cluster_id,
        if (Yson::LookupString(labels, 'managed-kubernetes-cluster-id') is not null, 'mk8s', 'other') as vm_origin,
        is_fraud as ba_is_fraud,
        ba_name,
        ba_person_type,
        ba_type,
        channel as ba_channel,
        segment as ba_segment,
        board_segment as ba_board_segment,
        user_settings_email as ba_user_email,
        if(account_name='unknown', ba_name, account_name) as ba_client_name,
        ba_m_cohort,
        ba_w_cohort,
        price_cpu as vm_price_1h_cpu,
        price_ram as vm_price_1h_ram,
        price_gpu as vm_price_1h_gpu,
        (a.finish - a.start) / 3600.0 * (price_cpu*COALESCE(Yson::LookupUint64(tags, 'cores'),0) + price_ram*COALESCE(Yson::LookupUint64(tags, 'memory'),0)/1024/1024/1024 + price_gpu*COALESCE(Yson::LookupUint64(tags, 'gpus'), 0)) as vm_price_lifetime,
        price_cpu*COALESCE(Yson::LookupUint64(tags, 'cores'),0) + price_ram*COALESCE(Yson::LookupUint64(tags, 'memory'),0)/1024/1024/1024 + price_gpu*COALESCE(Yson::LookupUint64(tags, 'gpus'), 0) as vm_price_1h,
        4*(price_cpu*COALESCE(Yson::LookupUint64(tags, 'cores'),0) + price_ram*COALESCE(Yson::LookupUint64(tags, 'memory'),0)/1024/1024/1024 + price_gpu*COALESCE(Yson::LookupUint64(tags, 'gpus'), 0)) as vm_price_4h
    FROM $vm_lifetime as a
    LEFT JOIN RANGE('//home/logfeller/logs/yc-billing-compute-instance/1d', '2018-11-01') as b
    ON (a.resource_id = b.resource_id) and (a.start = Yson::LookupUint64(b.usage, 'start'))
    LEFT JOIN `//home/cloud_analytics/compute_logs/product_name` as c
    on Yson::ConvertToStringList(Yson::Lookup(b.tags, 'product_ids'))[0] = c.product_id
    LEFT JOIN $folder_ba as d 
    on b.folder_id = d.folder_id
    LEFT JOIN $ba_time_independent_tags as e 
    ON d.billing_account_id = e.billing_account_id
    LEFT JOIN `//home/cloud_analytics/compute_logs/compute_prices` as f 
    ON (IF(Yson::LookupUint64(b.tags, 'core_fraction') IS NULL, 100, Yson::LookupUint64(b.tags, 'core_fraction')) = f.core_fraction) AND (Yson::LookupString(b.tags, 'platform_id') = f.platform) AND (IF(Yson::LookupBool(b.tags, 'preemptible') IS NULL, 0, 1) = f.preemptible)
);

$vm_log_1hr = (
    SELECT
        vm_id,
        vm_start,
        vm_finish,
        p.t as slice_time,
        $format_full(DateTime::FromSeconds(CAST (p.t AS Uint32))) as slice_time_str,
        p.t - vm_start as vm_age,
        Math::Floor((p.t - vm_start) / 3600.0 / 24.0  /365.0*12.0) as vm_age_months,
        Math::Floor((p.t - vm_start) / 3600.0 / 24.0  /7.0) as vm_age_weeks,
        Math::Floor((p.t - vm_start) / 3600.0 / 24.0  ) as vm_age_days,
        DateTime::MakeDate(DateTime::FromSeconds(CAST (p.t AS Uint32))) as slice_time_day,
        DateTime::MakeDate(DateTime::StartOfWeek(DateTime::FromSeconds(CAST (p.t AS Uint32)))) as slice_time_week,
        DateTime::MakeDate(DateTime::StartOfMonth(DateTime::FromSeconds(CAST (p.t AS Uint32)))) as slice_time_month,
        DateTime::MakeDate(DateTime::StartOfQuarter(DateTime::FromSeconds(CAST (p.t AS Uint32)))) as slice_time_quarter,
        p.billing_account_id as ba_id,
        cloud_id,
        folder_id,
        node_id,
        node_az,
        vm_cores,
        vm_gpus,
        vm_core_fraction,
        vm_cores_real,
        vm_memory,
        vm_config,
        vm_memory_to_cores_ratio,
        node_platform,
        vm_preemptible,
        vm_public_fips,
        vm_product_ids,
        vm_product_id,
        vm_product_name,
        vm_labels_str,
        vm_labels,
        vm_managed_kubernetes_cluster_id,
        vm_origin,
        coalesce(ba_is_fraud, 0) AS ba_is_fraud, 
        coalesce(ba_name, 'Unknown') AS ba_name, 
        coalesce(ba_person_type, 'Unknown') AS ba_person_type, 
        coalesce(ba_type, 'Unknown') AS ba_type, 
        coalesce(ba_channel, 'Unknown') AS ba_channel, 
        coalesce(ba_segment, 'Unknown') AS ba_segment, 
        coalesce(ba_board_segment, 'Unknown') AS ba_board_segment, 
        coalesce(ba_user_email, 'Unknown') AS ba_user_email, 
        coalesce(ba_client_name, 'Unknown') AS ba_client_name, 
        coalesce(ba_state, 'Unknown') AS ba_state, 
        coalesce(vm_is_service, 'Unknown') AS  vm_is_service, 
        coalesce(ba_block_reason, 'Unknown') AS ba_block_reason, 
        coalesce(ba_sales_name, 'Unknown') AS ba_sales_name, 
        coalesce(ba_architect, 'Unknown') AS ba_architect, 
        coalesce(ba_paid_status, 'Unknown') AS ba_paid_status, 
        ba_m_cohort,
        ba_w_cohort,
        cores_total as node_cores_total,
        memory_total/1024/1024/1024.0 as node_memory_total,
        cores_free as node_cores_free,
        memory_free/1024/1024/1024.0 as node_memory_free,
        vm_price_1h_cpu,
        vm_price_1h_ram,
        vm_price_1h_gpu,
        vm_price_lifetime,
        vm_price_1h,
        vm_price_4h
    FROM (
        SELECT *
        FROM $vm_log_short
        FLATTEN BY t
        --WHERE t = $to_start_of_hour(t)
    ) as p 
    LEFT JOIN $ba_time_dependent_tags as q 
    ON p.billing_account_id = q.billing_account_id and DateTime::MakeDate(DateTime::FromSeconds(CAST (p.t AS Uint32))) = q.d
    LEFT JOIN $nodes_stats as r 
    ON p.node_id = r.node_name and p.t = r.t
        
);

$vm_list = (

SELECT
    vm_id,
    vm_start,
    vm_finish,
    lifetime_range_5min_str,
    cloud_id,
    a.billing_account_id as ba_id,
    folder_id,
    node_id,
    node_az,
    vm_cores,
    vm_gpus,
    vm_core_fraction,
    vm_cores_real,
    vm_memory,
    vm_config,
    vm_memory_to_cores_ratio,
    node_platform,
    vm_preemptible,
    vm_public_fips,
    vm_product_ids,
    vm_product_id,
    vm_product_name,
    vm_labels_str,
    vm_labels,
    vm_managed_kubernetes_cluster_id,
    vm_origin,
    ba_is_fraud,
    ba_name,
    ba_person_type,
    ba_type,
    ba_channel,
    ba_segment,
    ba_board_segment,
    ba_user_email,
    ba_client_name,
    ba_state,
    vm_is_service,
    ba_block_reason as ba_block_reason,
    ba_sales_name as ba_sales_name,
    ba_architect as ba_architect,
    ba_paid_status as ba_paid_status,
    ba_m_cohort,
    ba_w_cohort,
    vm_price_1h_cpu,
    vm_price_1h_ram,
    vm_price_1h_gpu,
    vm_price_1h,
    vm_price_4h,
    vm_price_lifetime,
FROM $vm_log_short as a 
LEFT JOIN (
SELECT 
    billing_account_id,
    MAX_BY(ba_state, d) AS ba_state,
    MAX_BY(vm_is_service, d) AS vm_is_service,
    MAX_BY(ba_block_reason, d) AS ba_block_reason,
    MAX_BY(ba_sales_name, d) AS ba_sales_name,
    MAX_BY(ba_architect, d) AS ba_architect,
    MAX_BY(ba_paid_status, d) AS ba_paid_status,
FROM $ba_time_dependent_tags
WHERE ba_paid_status is not null
GROUP BY billing_account_id
) as b
ON a.billing_account_id = b.billing_account_id

);


INSERT INTO `//home/cloud_analytics/compute_logs/vm_cube/other_slices/vm_cube_sliced_1h` WITH TRUNCATE
SELECT * FROM $vm_log_1hr;

$formatH = DateTime::Format('%H');

$today = $format(DateTime::FromMicroseconds(YQL::Now()));

$vm_cube_4h_history_path = '//home/cloud_analytics/compute_logs/vm_cube/history/vm_cube_sliced_4h/' || $today;

$vm_list_history_path = '//home/cloud_analytics/compute_logs/vm_cube/history/vm_cube/' || $today;

INSERT INTO `//home/cloud_analytics/compute_logs/vm_cube/vm_cube_sliced_4h` WITH TRUNCATE
SELECT * FROM $vm_log_1hr
WHERE (CAST ($formatH(DateTime::FromSeconds(CAST (slice_time AS Uint32))) AS Integer)) % 4 = 0;

INSERT INTO $vm_cube_4h_history_path WITH TRUNCATE
SELECT * FROM $vm_log_1hr
WHERE( CAST ($formatH(DateTime::FromSeconds(CAST (slice_time AS Uint32))) AS Integer)) % 4 = 0;

INSERT INTO `//home/cloud_analytics/compute_logs/vm_cube/vm_cube` WITH TRUNCATE
SELECT
    * 
FROM $vm_list;

INSERT INTO $vm_list_history_path WITH TRUNCATE
SELECT
    * 
FROM $vm_list