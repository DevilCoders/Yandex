USE hahn;

$to_decimal = ($amount) -> {
    RETURN CAST($amount AS Decimal(22,9));
};

$to_double = ($amount) -> {
    RETURN CAST($amount AS Double);
};

-- Set thresholds
-- Rubles, >= 0 to find consumption increase && < 0 to find decrease
$threshold_abs = $to_decimal("500");
-- Percents, > 1 to find consumption increase && < 1 to find decrease
$threshold_pct = $to_decimal("0.10");

-- Set timeframe
-- As we never have full data to display today()
$last_day = CurrentUtcDate() - DateTime::IntervalFromDays(1);
$first_day = $last_day - DateTime::IntervalFromDays(7);
$generated_at = AddTimezone(CurrentUtcDateTime(), "Europe/Moscow");

-- Workaround Decimal <> null comparison
$nvl = ($lead) -> {
    RETURN $to_decimal(NVL($to_decimal($lead), $to_decimal(0)))
};

-- Workaround "Can't compare different decimals"
$delta_abs = ($prev, $next) -> {
    RETURN $to_decimal($prev) - NVL($to_decimal($next), $to_decimal(0));
};

-- Revenue is not falling if we have no consumption in the future
-- but is falling if we had consumption and don't have now within the timeframe
$fall_abs = ($prev, $next, $date) -> {
    $fall = IF (
        CAST($date AS date) == $last_day,
        $to_decimal(0),
        $delta_abs($prev, $next)

    );
    RETURN $fall;
};

$fall_pct = ($prev, $next, $date) -> {
    RETURN ABS($fall_abs($prev, $next, $date) / $to_decimal($next));
};

-- Revenue is not growing if we have no consumption in the past
-- but is growing if we had no consumption within timeframe and now we have
$grow_abs = ($prev, $next, $date) -> {
    $grow = IF (
        $date == $first_day,
        $to_decimal(0),
        $delta_abs($prev, $next)

    );
    RETURN $grow;
};

$grow_pct = ($prev, $next, $date) -> {
    RETURN ABS($grow_abs($prev, $next, $date) / $to_decimal($next));
};

-- Resolve folders into latest tables
DEFINE SUBQUERY $last_non_empty_table($path) AS
    $max_path = (
        SELECT MAX(Path) AS Path
        FROM FOLDER($path, "row_count")
        WHERE Type = "table"
            AND Yson::LookupInt64(Attributes, "row_count") > 0
    );
    SELECT * FROM CONCAT($max_path);
END DEFINE;

-- Export-snapshot tables
$skus_table = "//home/logfeller/logs/yc-billing-export-sku/1h";
$usage_reports_table = "//home/logfeller/logs/yc-billing-export-usage-reports/1h";
$services_table = "//home/logfeller/logs/yc-billing-export-services/1h";
$accounts_table = "//home/logfeller/logs/yc-billing-export-billing-accounts/1h";
$clouds_table = "//home/logfeller/logs/yc-billing-export-clouds/1h";
-- Static table w person data
$persons = "//home/cloud_analytics/import/balance/latest";

-- Join SKU with Services to enrich SKU with service name
$skus_services = (
    SELECT
        skus.id AS id,
        svcs.name AS service,
        svcs.id
    FROM $last_non_empty_table($skus_table) AS skus
    JOIN $last_non_empty_table($services_table) AS svcs
    ON skus.service_id = svcs.id
);

-- Group reports by service-date-account
$grouped_reports = (
    SELECT
        skus.service AS service,
        cast(usage_reports.date AS date) AS date,
        usage_reports.billing_account_id AS billing_account_id,

        SUM($to_decimal(usage_reports.cost) +  $to_decimal(usage_reports.credit)) AS total,
        SUM($to_decimal(usage_reports.cost)) AS cost

    FROM $last_non_empty_table($usage_reports_table) AS usage_reports

    JOIN $skus_services AS skus
    ON skus.id = usage_reports.sku_id

    WHERE CAST(usage_reports.date AS date) BETWEEN $first_day AND $last_day

    GROUP BY
        skus.service,
        usage_reports.date,
        usage_reports.billing_account_id
);

-- Iterate forward to collect decreased consumption
$decreased_consumption = (
SELECT
    service,
    billing_account_id,

    date,
    LEAD(date) OVER w AS date_changed,

    $fall_abs(LEAD(cost) OVER w, cost, date) AS delta_cost,
    $fall_pct(LEAD(cost) OVER w, cost, date) as delta_cost_pct,
    $fall_abs(LEAD(total) OVER w, total, date) AS delta_total,
    $fall_pct(LEAD(total) OVER w, total, date) as delta_total_pct

FROM $grouped_reports

WINDOW w AS (
    PARTITION BY service, billing_account_id
    ORDER BY date
));

-- Iterate backward to collect increased consumption
$increased_consumption = (
SELECT
    service,
    billing_account_id,

    date as date_changed,

    $grow_abs(cost, LAG(cost) OVER w, date) AS delta_cost,
    $grow_pct(cost, LAG(cost) OVER w, date) AS delta_cost_pct,
    $grow_abs(total, LAG(total) OVER w, date) AS delta_total,
    $grow_pct(total, LAG(total) OVER w, date) AS delta_total_pct

FROM $grouped_reports

WINDOW w AS (
    PARTITION BY service, billing_account_id
    ORDER BY date
));


-- YQL-298, so union all + group by
$union = (
SELECT * FROM $increased_consumption
UNION ALL
SELECT * FROM $decreased_consumption
);

$deviations = (
SELECT * FROM $union
GROUP BY
    service,
    date_changed,
    billing_account_id,
    delta_cost,
    delta_cost_pct,
    delta_total,
    delta_total_pct

);

-- Apply thresholds
$thresholded = (
SELECT
    service,
    date_changed,
    billing_account_id,
    delta_cost,
    delta_cost_pct,
    delta_total,
    delta_total_pct

FROM $deviations

WHERE
    (ABS(delta_cost) > $threshold_abs AND delta_cost_pct > $threshold_pct)
    OR
    (ABS(delta_total) > $threshold_abs AND delta_total_pct > $threshold_pct)
);

-- Account meta
$accounts = (
    SELECT
        id,
        name,
        state,
        usage_status,
        person_type,
        person_id
    FROM $last_non_empty_table($accounts_table)
    WHERE usage_status != 'service'
);

-- Enrich w account and person data, decimal -> double
$enriched = (
SELECT
    thresholded.service AS service,
    thresholded.billing_account_id AS billing_account_id,
    thresholded.date_changed AS date,

    $to_double(thresholded.delta_cost) AS delta_cost,
    $to_double(thresholded.delta_cost_pct) AS delta_cost_pct,
    $to_double(thresholded.delta_total) AS delta_total,
    $to_double(thresholded.delta_total_pct) AS delta_total_pct,

    accounts.state AS state,
    accounts.usage_status AS usage_status,

    persons.NAME AS name,
    persons.LONGNAME AS longname,

    $generated_at AS generated_at

FROM $thresholded AS thresholded

JOIN $accounts AS accounts
ON thresholded.billing_account_id = accounts.id

JOIN $persons AS persons
ON accounts.person_id = persons.ID

);

-- Submit result
$output_table = "//home/cloud_analytics/export/billing/" || "testing/" || "consumption_deviation";
INSERT INTO $output_table WITH TRUNCATE
SELECT * FROM $enriched;