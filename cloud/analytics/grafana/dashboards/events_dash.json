{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 219785,
  "iteration": 1564132599725,
  "links": [],
  "panels": [
    {
      "content": "## Если у Вас что-то не работает или Вам не хватает функциональности, пожалуйста, [дайте нам знать](https://forms.yandex-team.ru/surveys/21421/).\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 33,
      "links": [],
      "mode": "markdown",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "ch_cloud_analytics",
      "description": "",
      "fill": 1,
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 2
      },
      "id": 9,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "percentage": false,
      "pointradius": 1,
      "points": true,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "dateTimeType": "DATETIME",
          "format": "time_series",
          "formattedQuery": "SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t",
          "intervalFactor": 1,
          "query": "SELECT\n    toInt32(toDateTime(toMonday(date)))*1000 as period,\n    sum(paid_consumption) as paid_consumption\nFROM(\n    SELECT\n        billing_account_id,\n        date,\n        paid_consumption\n    FROM(\n        SELECT\n            DISTINCT billing_account_id\n        FROM\n            cloud_analytics_testing.emailing_cube\n        WHERE \n            (\n                lower(mail_id) LIKE '%follow%'\n                OR lower(mail_id) LIKE '%cloud-up%'\n                OR lower(mail_id) LIKE '%cloud-3%'\n                OR lower(mail_id) LIKE '%ydb-previ%'\n            )\n            AND NOT lower(mail_id) LIKE '%-invit%'\n    ) as t0 \n    ALL INNER JOIN (\n        SELECT\n            billing_account_id,\n            toDate(event_time) as date,\n            SUM(real_consumption) as paid_consumption\n        FROM\n            cloud_analytics_testing.acquisition_cube_test\n        GROUP BY \n            billing_account_id,\n            date\n    ) as t1\n    ON t0.billing_account_id = t1.billing_account_id\n    )\nGROUP BY \n    period\nORDER BY\n    period",
          "rawQuery": "SELECT     toInt32(toDateTime(toMonday(date)))*1000 as period,     sum(paid_consumption) as paid_consumption FROM(     SELECT         billing_account_id,         date,         paid_consumption     FROM(         SELECT             DISTINCT billing_account_id         FROM             cloud_analytics_testing.emailing_cube         WHERE              (                 lower(mail_id) LIKE '%follow%'                 OR lower(mail_id) LIKE '%cloud-up%'                 OR lower(mail_id) LIKE '%cloud-3%'                 OR lower(mail_id) LIKE '%ydb-previ%'             )             AND NOT lower(mail_id) LIKE '%-invit%'     ) as t0      ALL INNER JOIN (         SELECT             billing_account_id,             toDate(event_time) as date,             SUM(real_consumption) as paid_consumption         FROM             cloud_analytics_testing.acquisition_cube_test         GROUP BY              billing_account_id,             date     ) as t1     ON t0.billing_account_id = t1.billing_account_id     ) GROUP BY      period ORDER BY     period",
          "refId": "A",
          "round": "0s"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Paid Consumption From Event Users",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "ch_cloud_analytics",
      "description": "",
      "fill": 1,
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 2
      },
      "id": 25,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "percentage": false,
      "pointradius": 1,
      "points": true,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "dateTimeType": "DATETIME",
          "format": "time_series",
          "formattedQuery": "SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t",
          "intervalFactor": 1,
          "query": "SELECT\n    toInt32(toDateTime(toMonday(date)))*1000 as date,\n    SUM(paid_consumption) as paid_consumption\nFROM\n    (\n    SELECT\n        billing_account_id,\n        date,\n        multiIf(first_paid_consumption_time IS NOT NULL AND multiIf(toDate(first_paid_consumption_time) IS NULL, toDate('1900-01-01 00:00:00'), first_paid_consumption_time) > addDays(mail_date, -3), 1, 0) as start_paid,\n        SUM(paid_consumption) as paid_consumption\n    FROM(\n        SELECT\n            billing_account_id,\n            mail_id,\n            mailing_name,\n            email,\n            cloud_created_time,\n            ba_created_time,\n            first_trial_consumption_time,\n            first_paid_consumption_time,\n            mail_date,\n            mail_date_,\n            date,\n            paid_consumption,\n            multiIf(date >= mail_date_, 'after', 'before') as event_status\n        FROM(\n            SELECT\n                toDate(event_time) as mail_date,\n                addDays(toDate(event_time), -3) as mail_date_,\n                billing_account_id,\n                mail_id,\n                mailing_name,\n                email,\n                cloud_created_time,\n                ba_created_time,\n                first_trial_consumption_time,\n                first_paid_consumption_time\n            FROM\n                cloud_analytics_testing.emailing_cube\n            WHERE \n                (\n                    lower(mail_id) LIKE '%follow%'\n                    OR lower(mail_id) LIKE '%cloud-up%'\n                    OR lower(mail_id) LIKE '%cloud-3%'\n                    OR lower(mail_id) LIKE '%ydb-previ%'\n                )\n                AND NOT lower(mail_id) LIKE '%-invit%'\n        ) as t0 \n        ALL LEFT JOIN (\n            SELECT\n                billing_account_id,\n                toDate(event_time) as date,\n                SUM(real_consumption) as paid_consumption\n            FROM\n                cloud_analytics_testing.acquisition_cube_test\n            GROUP BY \n                billing_account_id,\n                date\n        ) as t1\n        ON t0.billing_account_id = t1.billing_account_id\n        )\n    GROUP BY \n        billing_account_id,\n        date,\n        start_paid\n)\nWHERE \n    start_paid = 1\nGROUP BY\n    date\nORDER BY\n    date",
          "rawQuery": "SELECT     toInt32(toDateTime(toMonday(date)))*1000 as date,     SUM(paid_consumption) as paid_consumption FROM     (     SELECT         billing_account_id,         date,         multiIf(first_paid_consumption_time IS NOT NULL AND multiIf(toDate(first_paid_consumption_time) IS NULL, toDate('1900-01-01 00:00:00'), first_paid_consumption_time) > addDays(mail_date, -3), 1, 0) as start_paid,         SUM(paid_consumption) as paid_consumption     FROM(         SELECT             billing_account_id,             mail_id,             mailing_name,             email,             cloud_created_time,             ba_created_time,             first_trial_consumption_time,             first_paid_consumption_time,             mail_date,             mail_date_,             date,             paid_consumption,             multiIf(date >= mail_date_, 'after', 'before') as event_status         FROM(             SELECT                 toDate(event_time) as mail_date,                 addDays(toDate(event_time), -3) as mail_date_,                 billing_account_id,                 mail_id,                 mailing_name,                 email,                 cloud_created_time,                 ba_created_time,                 first_trial_consumption_time,                 first_paid_consumption_time             FROM                 cloud_analytics_testing.emailing_cube             WHERE                  (                     lower(mail_id) LIKE '%follow%'                     OR lower(mail_id) LIKE '%cloud-up%'                     OR lower(mail_id) LIKE '%cloud-3%'                     OR lower(mail_id) LIKE '%ydb-previ%'                 )                 AND NOT lower(mail_id) LIKE '%-invit%'         ) as t0          ALL LEFT JOIN (             SELECT                 billing_account_id,                 toDate(event_time) as date,                 SUM(real_consumption) as paid_consumption             FROM                 cloud_analytics_testing.acquisition_cube_test             GROUP BY                  billing_account_id,                 date         ) as t1         ON t0.billing_account_id = t1.billing_account_id         )     GROUP BY          billing_account_id,         date,         start_paid ) WHERE      start_paid = 1 GROUP BY     date ORDER BY     date",
          "refId": "A",
          "round": "0s"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Paid Consumption From New Paid Users",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "ch_cloud_analytics",
      "description": "",
      "fill": 1,
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 10
      },
      "id": 26,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "percentage": false,
      "pointradius": 1,
      "points": true,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "dateTimeType": "DATETIME",
          "format": "time_series",
          "formattedQuery": "SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t",
          "intervalFactor": 1,
          "query": "SELECT\n    toInt32(toDateTime(toMonday(date)))*1000 as period,\n    COUNT(DISTINCT billing_account_id) as active_paid_clients\nFROM(\n    SELECT\n        billing_account_id,\n        date,\n        paid_consumption\n    FROM(\n        SELECT\n            DISTINCT billing_account_id\n        FROM\n            cloud_analytics_testing.emailing_cube\n        WHERE \n            (\n                lower(mail_id) LIKE '%follow%'\n                OR lower(mail_id) LIKE '%cloud-up%'\n                OR lower(mail_id) LIKE '%cloud-3%'\n                OR lower(mail_id) LIKE '%ydb-previ%'\n            )\n            AND NOT lower(mail_id) LIKE '%-invit%'\n    ) as t0 \n    ALL INNER JOIN (\n        SELECT\n            billing_account_id,\n            toDate(event_time) as date,\n            SUM(real_consumption) as paid_consumption\n        FROM\n            cloud_analytics_testing.acquisition_cube_test\n        GROUP BY \n            billing_account_id,\n            date\n    ) as t1\n    ON t0.billing_account_id = t1.billing_account_id\n    )\nGROUP BY \n    period\nORDER BY\n    period",
          "rawQuery": "SELECT     toInt32(toDateTime(toMonday(date)))*1000 as period,     COUNT(DISTINCT billing_account_id) as active_paid_clients FROM(     SELECT         billing_account_id,         date,         paid_consumption     FROM(         SELECT             DISTINCT billing_account_id         FROM             cloud_analytics_testing.emailing_cube         WHERE              (                 lower(mail_id) LIKE '%follow%'                 OR lower(mail_id) LIKE '%cloud-up%'                 OR lower(mail_id) LIKE '%cloud-3%'                 OR lower(mail_id) LIKE '%ydb-previ%'             )             AND NOT lower(mail_id) LIKE '%-invit%'     ) as t0      ALL INNER JOIN (         SELECT             billing_account_id,             toDate(event_time) as date,             SUM(real_consumption) as paid_consumption         FROM             cloud_analytics_testing.acquisition_cube_test         GROUP BY              billing_account_id,             date     ) as t1     ON t0.billing_account_id = t1.billing_account_id     ) GROUP BY      period ORDER BY     period",
          "refId": "A",
          "round": "0s"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Active Paid Clients Who Visited Events",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "ch_cloud_analytics",
      "description": "",
      "fill": 1,
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 10
      },
      "id": 27,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "percentage": false,
      "pointradius": 1,
      "points": true,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "dateTimeType": "DATETIME",
          "format": "time_series",
          "formattedQuery": "SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t",
          "intervalFactor": 1,
          "query": "SELECT\n    toInt32(toDateTime(toMonday(date)))*1000 as date,\n    COUNT(DISTINCT billing_account_id) as active_paid_clients\nFROM\n    (\n    SELECT\n        billing_account_id,\n        date,\n        multiIf(first_paid_consumption_time IS NOT NULL AND multiIf(toDate(first_paid_consumption_time) IS NULL, toDate('1900-01-01 00:00:00'), first_paid_consumption_time) > addDays(mail_date, -3), 1, 0) as start_paid,\n        SUM(paid_consumption) as paid_consumption\n    FROM(\n        SELECT\n            billing_account_id,\n            mail_id,\n            mailing_name,\n            email,\n            cloud_created_time,\n            ba_created_time,\n            first_trial_consumption_time,\n            first_paid_consumption_time,\n            mail_date,\n            mail_date_,\n            date,\n            paid_consumption,\n            multiIf(date >= mail_date_, 'after', 'before') as event_status\n        FROM(\n            SELECT\n                toDate(event_time) as mail_date,\n                addDays(toDate(event_time), -3) as mail_date_,\n                billing_account_id,\n                mail_id,\n                mailing_name,\n                email,\n                cloud_created_time,\n                ba_created_time,\n                first_trial_consumption_time,\n                first_paid_consumption_time\n            FROM\n                cloud_analytics_testing.emailing_cube\n            WHERE \n                (\n                    lower(mail_id) LIKE '%follow%'\n                    OR lower(mail_id) LIKE '%cloud-up%'\n                    OR lower(mail_id) LIKE '%cloud-3%'\n                    OR lower(mail_id) LIKE '%ydb-previ%'\n                )\n                AND NOT lower(mail_id) LIKE '%-invit%'\n        ) as t0 \n        ALL LEFT JOIN (\n            SELECT\n                billing_account_id,\n                toDate(event_time) as date,\n                SUM(real_consumption) as paid_consumption\n            FROM\n                cloud_analytics_testing.acquisition_cube_test\n            GROUP BY \n                billing_account_id,\n                date\n        ) as t1\n        ON t0.billing_account_id = t1.billing_account_id\n        )\n    GROUP BY \n        billing_account_id,\n        date,\n        start_paid\n)\nWHERE \n    start_paid = 1\nGROUP BY\n    date\nORDER BY\n    date",
          "rawQuery": "SELECT     toInt32(toDateTime(toMonday(date)))*1000 as date,     COUNT(DISTINCT billing_account_id) as active_paid_clients FROM     (     SELECT         billing_account_id,         date,         multiIf(first_paid_consumption_time IS NOT NULL AND multiIf(toDate(first_paid_consumption_time) IS NULL, toDate('1900-01-01 00:00:00'), first_paid_consumption_time) > addDays(mail_date, -3), 1, 0) as start_paid,         SUM(paid_consumption) as paid_consumption     FROM(         SELECT             billing_account_id,             mail_id,             mailing_name,             email,             cloud_created_time,             ba_created_time,             first_trial_consumption_time,             first_paid_consumption_time,             mail_date,             mail_date_,             date,             paid_consumption,             multiIf(date >= mail_date_, 'after', 'before') as event_status         FROM(             SELECT                 toDate(event_time) as mail_date,                 addDays(toDate(event_time), -3) as mail_date_,                 billing_account_id,                 mail_id,                 mailing_name,                 email,                 cloud_created_time,                 ba_created_time,                 first_trial_consumption_time,                 first_paid_consumption_time             FROM                 cloud_analytics_testing.emailing_cube             WHERE                  (                     lower(mail_id) LIKE '%follow%'                     OR lower(mail_id) LIKE '%cloud-up%'                     OR lower(mail_id) LIKE '%cloud-3%'                     OR lower(mail_id) LIKE '%ydb-previ%'                 )                 AND NOT lower(mail_id) LIKE '%-invit%'         ) as t0          ALL LEFT JOIN (             SELECT                 billing_account_id,                 toDate(event_time) as date,                 SUM(real_consumption) as paid_consumption             FROM                 cloud_analytics_testing.acquisition_cube_test             GROUP BY                  billing_account_id,                 date         ) as t1         ON t0.billing_account_id = t1.billing_account_id         )     GROUP BY          billing_account_id,         date,         start_paid ) WHERE      start_paid = 1 GROUP BY     date ORDER BY     date",
          "refId": "A",
          "round": "0s"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Active Paid Clients Who Started Paid Consumption After Events",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "columns": [],
      "datasource": "ch_cloud_analytics",
      "fontSize": "100%",
      "gridPos": {
        "h": 18,
        "w": 24,
        "x": 0,
        "y": 16
      },
      "id": 24,
      "links": [],
      "pageSize": 10,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 0,
          "pattern": "/.*diff.*/",
          "thresholds": [],
          "type": "number",
          "unit": "percentunit"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 0,
          "mappingType": 1,
          "pattern": "/.*consumption_30.*/",
          "thresholds": [],
          "type": "number",
          "unit": "locale"
        }
      ],
      "targets": [
        {
          "dateTimeType": "DATETIME",
          "format": "table",
          "formattedQuery": "SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t",
          "intervalFactor": 1,
          "query": "SELECT\n    toDate(mail_date) as date,\n    mail_id,\n    COUNT(email) as emails,\n    SUM( multiIf(cloud_created_time IS NOT NULL AND multiIf(toDate(cloud_created_time) IS NULL, toDate('1900-01-01 00:00:00'), cloud_created_time) > addDays(date, -3), 1, 0) ) as clouds,\n    SUM( multiIf(ba_created_time IS NOT NULL AND multiIf(toDate(ba_created_time) IS NULL, toDate('1900-01-01 00:00:00'), ba_created_time) > addDays(date, -3), 1, 0) ) as billing_accounts,\n    SUM( multiIf(first_trial_consumption_time IS NOT NULL AND multiIf(toDate(first_trial_consumption_time) IS NULL, toDate('1900-01-01 00:00:00'), first_trial_consumption_time) > addDays(date, -3), 1, 0) ) as first_trial_consumptions,\n    SUM( multiIf(first_paid_consumption_time IS NOT NULL AND multiIf(toDate(first_paid_consumption_time) IS NULL, toDate('1900-01-01 00:00:00'), first_paid_consumption_time) > addDays(date, -3), 1, 0) ) as first_paid_consumption,\n    SUM(before_paid) paid_consumption_30_days_before_rur,\n    SUM(after_paid) paid_consumption_30_days_after_rur,\n    (SUM(after_paid) - SUM(before_paid))/(SUM(before_paid)+1) as paid_consumption_diff\nFROM\n    (\n    SELECT\n        billing_account_id,\n        mail_id,\n        mailing_name,\n        email,\n        cloud_created_time,\n        ba_created_time,\n        first_trial_consumption_time,\n        first_paid_consumption_time,\n        mail_date,\n        sumIf(paid_consumption, event_status = 'after' AND date <= addDays(mail_date_, 29) ) as after_paid,\n        sumIf(paid_consumption, event_status = 'before' AND date > addDays(mail_date_, -30) ) as before_paid,\n        multiIf(before_paid > 0, 1,0) as have_paid_before\n    FROM(\n        SELECT\n            billing_account_id,\n            mail_id,\n            mailing_name,\n            email,\n            cloud_created_time,\n            ba_created_time,\n            first_trial_consumption_time,\n            first_paid_consumption_time,\n            mail_date,\n            mail_date_,\n            date,\n            paid_consumption,\n            multiIf(date >= mail_date_, 'after', 'before') as event_status\n        FROM(\n            SELECT\n                toDate(event_time) as mail_date,\n                addDays(toDate(event_time), -3) as mail_date_,\n                billing_account_id,\n                mail_id,\n                mailing_name,\n                email,\n                cloud_created_time,\n                ba_created_time,\n                first_trial_consumption_time,\n                first_paid_consumption_time\n            FROM\n                cloud_analytics_testing.emailing_cube\n            WHERE \n                (\n                    lower(mail_id) LIKE '%follow%'\n                    OR lower(mail_id) LIKE '%cloud-up%'\n                    OR lower(mail_id) LIKE '%cloud-3%'\n                    OR lower(mail_id) LIKE '%ydb-previ%'\n                )\n                AND NOT lower(mail_id) LIKE '%-invit%'\n        ) as t0 \n        ALL LEFT JOIN (\n            SELECT\n                billing_account_id,\n                toDate(event_time) as date,\n                SUM(real_consumption) as paid_consumption\n            FROM\n                cloud_analytics_testing.acquisition_cube_test\n            GROUP BY \n                billing_account_id,\n                date\n        ) as t1\n        ON t0.billing_account_id = t1.billing_account_id\n        )\n    GROUP BY \n        billing_account_id,\n        mail_id,\n        mailing_name,\n        email,\n        mail_date,\n        cloud_created_time,\n        ba_created_time,\n        first_trial_consumption_time,\n        first_paid_consumption_time\n)\nGROUP BY\n    date,\n    mail_id\nHAVING \n    emails > 5\nORDER BY\n    date DESC",
          "rawQuery": "SELECT     toDate(mail_date) as date,     mail_id,     COUNT(email) as emails,     SUM( multiIf(cloud_created_time IS NOT NULL AND multiIf(toDate(cloud_created_time) IS NULL, toDate('1900-01-01 00:00:00'), cloud_created_time) > addDays(date, -3), 1, 0) ) as clouds,     SUM( multiIf(ba_created_time IS NOT NULL AND multiIf(toDate(ba_created_time) IS NULL, toDate('1900-01-01 00:00:00'), ba_created_time) > addDays(date, -3), 1, 0) ) as billing_accounts,     SUM( multiIf(first_trial_consumption_time IS NOT NULL AND multiIf(toDate(first_trial_consumption_time) IS NULL, toDate('1900-01-01 00:00:00'), first_trial_consumption_time) > addDays(date, -3), 1, 0) ) as first_trial_consumptions,     SUM( multiIf(first_paid_consumption_time IS NOT NULL AND multiIf(toDate(first_paid_consumption_time) IS NULL, toDate('1900-01-01 00:00:00'), first_paid_consumption_time) > addDays(date, -3), 1, 0) ) as first_paid_consumption,     SUM(before_paid) paid_consumption_30_days_before_rur,     SUM(after_paid) paid_consumption_30_days_after_rur,     (SUM(after_paid) - SUM(before_paid))/(SUM(before_paid)+1) as paid_consumption_diff FROM     (     SELECT         billing_account_id,         mail_id,         mailing_name,         email,         cloud_created_time,         ba_created_time,         first_trial_consumption_time,         first_paid_consumption_time,         mail_date,         sumIf(paid_consumption, event_status = 'after' AND date <= addDays(mail_date_, 29) ) as after_paid,         sumIf(paid_consumption, event_status = 'before' AND date > addDays(mail_date_, -30) ) as before_paid,         multiIf(before_paid > 0, 1,0) as have_paid_before     FROM(         SELECT             billing_account_id,             mail_id,             mailing_name,             email,             cloud_created_time,             ba_created_time,             first_trial_consumption_time,             first_paid_consumption_time,             mail_date,             mail_date_,             date,             paid_consumption,             multiIf(date >= mail_date_, 'after', 'before') as event_status         FROM(             SELECT                 toDate(event_time) as mail_date,                 addDays(toDate(event_time), -3) as mail_date_,                 billing_account_id,                 mail_id,                 mailing_name,                 email,                 cloud_created_time,                 ba_created_time,                 first_trial_consumption_time,                 first_paid_consumption_time             FROM                 cloud_analytics_testing.emailing_cube             WHERE                  (                     lower(mail_id) LIKE '%follow%'                     OR lower(mail_id) LIKE '%cloud-up%'                     OR lower(mail_id) LIKE '%cloud-3%'                     OR lower(mail_id) LIKE '%ydb-previ%'                 )                 AND NOT lower(mail_id) LIKE '%-invit%'         ) as t0          ALL LEFT JOIN (             SELECT                 billing_account_id,                 toDate(event_time) as date,                 SUM(real_consumption) as paid_consumption             FROM                 cloud_analytics_testing.acquisition_cube_test             GROUP BY                  billing_account_id,                 date         ) as t1         ON t0.billing_account_id = t1.billing_account_id         )     GROUP BY          billing_account_id,         mail_id,         mailing_name,         email,         mail_date,         cloud_created_time,         ba_created_time,         first_trial_consumption_time,         first_paid_consumption_time ) GROUP BY     date,     mail_id HAVING      emails > 5 ORDER BY     date DESC",
          "refId": "A",
          "round": "0s"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Events ",
      "transform": "table",
      "type": "table"
    },
    {
      "columns": [],
      "datasource": "ch_cloud_analytics",
      "fontSize": "100%",
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 34
      },
      "id": 29,
      "links": [],
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "number",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "dateTimeType": "DATETIME",
          "format": "time_series",
          "formattedQuery": "SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t",
          "intervalFactor": 1,
          "query": "SELECT\n    event_time as time,\n    billing_account_id,\n    account_name\nFROM(\nSELECT\n    billing_account_id,\n    MIN(event_time) as event_time\nFROM(\n    SELECT\n        event_time,\n        bas as billing_account_id\n    FROM(\n        SELECT\n        \tevent_time,\n        \tsplitByString(',', assumeNotNull(billing_account_id)) as bas\n        FROM\n        \tcloud_analytics_testing.oppt_acc\n        WHERE \n            lower(dimentions) LIKE '%event%'\n    )\n    ARRAY JOIN bas\n    WHERE \n        billing_account_id != 'no_billing_account_id'\n)\nGROUP BY \n    billing_account_id\n) as t0 \nANY LEFT JOIN (\n    SELECT\n        billing_account_id,\n        account_name\n    FROM \n        cloud_analytics_testing.acquisition_cube_test\n    WHERE\n        event = 'ba_created'\n) as t1\nON t0.billing_account_id = t1.billing_account_id\nORDER BY \n    time",
          "rawQuery": "SELECT     event_time as time,     billing_account_id,     account_name FROM( SELECT     billing_account_id,     MIN(event_time) as event_time FROM(     SELECT         event_time,         bas as billing_account_id     FROM(         SELECT         \tevent_time,         \tsplitByString(',', assumeNotNull(billing_account_id)) as bas         FROM         \tcloud_analytics_testing.oppt_acc         WHERE              lower(dimentions) LIKE '%event%'     )     ARRAY JOIN bas     WHERE          billing_account_id != 'no_billing_account_id' ) GROUP BY      billing_account_id ) as t0  ANY LEFT JOIN (     SELECT         billing_account_id,         account_name     FROM          cloud_analytics_testing.acquisition_cube_test     WHERE         event = 'ba_created' ) as t1 ON t0.billing_account_id = t1.billing_account_id ORDER BY      time",
          "refId": "A",
          "round": "0s"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Enterprise Accounts From Events",
      "transform": "timeseries_to_columns",
      "type": "table"
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "ch_cloud_analytics",
      "description": "",
      "fill": 1,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 42
      },
      "id": 30,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "percentage": false,
      "pointradius": 1,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "dateTimeType": "DATETIME",
          "format": "time_series",
          "formattedQuery": "SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t",
          "intervalFactor": 1,
          "query": "SELECT\n    toInt32(toDateTime(toMonday(date)))*1000 as date,\n    SUM(paid) as paid_consumption\nFROM(\n    SELECT\n        billing_account_id,\n        dates as date\n    FROM(\n        SELECT\n            DISTINCT\n            billing_account_id,\n            arrayMap(x -> addWeeks(toMonday(toDate('2019-02-01')), x) ,range(assumeNotNull(toUInt32(  toRelativeWeekNum(toMonday(NOW())) -  toRelativeWeekNum(toMonday(toDate('2019-02-01')))   )))) as dates\n        FROM(\n            SELECT\n                event_time,\n                bas as billing_account_id\n            FROM(\n                SELECT\n                \tevent_time,\n                \tsplitByString(',', assumeNotNull(billing_account_id)) as bas\n                FROM\n                \tcloud_analytics_testing.oppt_acc\n                WHERE \n                    lower(dimentions) LIKE '%event%'\n            )\n            ARRAY JOIN bas\n            WHERE \n                billing_account_id != 'no_billing_account_id'\n        )\n    )\n    ARRAY JOIN dates\n) as t0 \nALL LEFT JOIN (\n    SELECT\n        billing_account_id,\n        toMonday(toDate(event_time)) as date,\n        SUM(real_consumption) as paid,\n        SUM(trial_consumption) as trial\n    FROM \n        cloud_analytics_testing.acquisition_cube_test\n    WHERE\n        event = 'day_use'\n    GROUP BY\n        billing_account_id,\n        date\n) as t1\nON t0.billing_account_id = t1.billing_account_id AND t0.date = t1.date\nGROUP BY\n    date\nORDER BY \n    date",
          "rawQuery": "SELECT     toInt32(toDateTime(toMonday(date)))*1000 as date,     SUM(paid) as paid_consumption FROM(     SELECT         billing_account_id,         dates as date     FROM(         SELECT             DISTINCT             billing_account_id,             arrayMap(x -> addWeeks(toMonday(toDate('2019-02-01')), x) ,range(assumeNotNull(toUInt32(  toRelativeWeekNum(toMonday(NOW())) -  toRelativeWeekNum(toMonday(toDate('2019-02-01')))   )))) as dates         FROM(             SELECT                 event_time,                 bas as billing_account_id             FROM(                 SELECT                 \tevent_time,                 \tsplitByString(',', assumeNotNull(billing_account_id)) as bas                 FROM                 \tcloud_analytics_testing.oppt_acc                 WHERE                      lower(dimentions) LIKE '%event%'             )             ARRAY JOIN bas             WHERE                  billing_account_id != 'no_billing_account_id'         )     )     ARRAY JOIN dates ) as t0  ALL LEFT JOIN (     SELECT         billing_account_id,         toMonday(toDate(event_time)) as date,         SUM(real_consumption) as paid,         SUM(trial_consumption) as trial     FROM          cloud_analytics_testing.acquisition_cube_test     WHERE         event = 'day_use'     GROUP BY         billing_account_id,         date ) as t1 ON t0.billing_account_id = t1.billing_account_id AND t0.date = t1.date GROUP BY     date ORDER BY      date",
          "refId": "A",
          "round": "0s"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Paid Consumption From Event Ent Users",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "ch_cloud_analytics",
      "description": "",
      "fill": 1,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 42
      },
      "id": 31,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "percentage": false,
      "pointradius": 1,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "dateTimeType": "DATETIME",
          "format": "time_series",
          "formattedQuery": "SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t",
          "intervalFactor": 1,
          "query": "SELECT\n    toInt32(toDateTime(toMonday(date)))*1000 as date,\n    SUM(multiIf(paid > 0, 1, 0)) as active_paid_clients\nFROM(\n    SELECT\n        billing_account_id,\n        dates as date\n    FROM(\n        SELECT\n            DISTINCT\n            billing_account_id,\n            arrayMap(x -> addWeeks(toMonday(toDate('2019-02-01')), x) ,range(assumeNotNull(toUInt32(  toRelativeWeekNum(toMonday(NOW())) -  toRelativeWeekNum(toMonday(toDate('2019-02-01')))   )))) as dates\n        FROM(\n            SELECT\n                event_time,\n                bas as billing_account_id\n            FROM(\n                SELECT\n                \tevent_time,\n                \tsplitByString(',', assumeNotNull(billing_account_id)) as bas\n                FROM\n                \tcloud_analytics_testing.oppt_acc\n                WHERE \n                    lower(dimentions) LIKE '%event%'\n            )\n            ARRAY JOIN bas\n            WHERE \n                billing_account_id != 'no_billing_account_id'\n        )\n    )\n    ARRAY JOIN dates\n) as t0 \nALL LEFT JOIN (\n    SELECT\n        billing_account_id,\n        toMonday(toDate(event_time)) as date,\n        SUM(real_consumption) as paid,\n        SUM(trial_consumption) as trial\n    FROM \n        cloud_analytics_testing.acquisition_cube_test\n    WHERE\n        event = 'day_use'\n    GROUP BY\n        billing_account_id,\n        date\n    HAVING \n        paid > 0\n) as t1\nON t0.billing_account_id = t1.billing_account_id AND t0.date = t1.date\nGROUP BY\n    date\nORDER BY \n    date",
          "rawQuery": "SELECT     toInt32(toDateTime(toMonday(date)))*1000 as date,     SUM(multiIf(paid > 0, 1, 0)) as active_paid_clients FROM(     SELECT         billing_account_id,         dates as date     FROM(         SELECT             DISTINCT             billing_account_id,             arrayMap(x -> addWeeks(toMonday(toDate('2019-02-01')), x) ,range(assumeNotNull(toUInt32(  toRelativeWeekNum(toMonday(NOW())) -  toRelativeWeekNum(toMonday(toDate('2019-02-01')))   )))) as dates         FROM(             SELECT                 event_time,                 bas as billing_account_id             FROM(                 SELECT                 \tevent_time,                 \tsplitByString(',', assumeNotNull(billing_account_id)) as bas                 FROM                 \tcloud_analytics_testing.oppt_acc                 WHERE                      lower(dimentions) LIKE '%event%'             )             ARRAY JOIN bas             WHERE                  billing_account_id != 'no_billing_account_id'         )     )     ARRAY JOIN dates ) as t0  ALL LEFT JOIN (     SELECT         billing_account_id,         toMonday(toDate(event_time)) as date,         SUM(real_consumption) as paid,         SUM(trial_consumption) as trial     FROM          cloud_analytics_testing.acquisition_cube_test     WHERE         event = 'day_use'     GROUP BY         billing_account_id,         date     HAVING          paid > 0 ) as t1 ON t0.billing_account_id = t1.billing_account_id AND t0.date = t1.date GROUP BY     date ORDER BY      date",
          "refId": "A",
          "round": "0s"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Active Paid Clients From Event Ent Users",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    }
  ],
  "refresh": false,
  "schemaVersion": 18,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "text": "2019-07-01",
          "value": "2019-07-01"
        },
        "datasource": "ch_cloud_analytics",
        "definition": "SELECT toStartOfMonth(toDate(NOW()))",
        "hide": 2,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "month_0",
        "options": [],
        "query": "SELECT toStartOfMonth(toDate(NOW()))",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "2019-06-01",
          "value": "2019-06-01"
        },
        "datasource": "ch_cloud_analytics",
        "definition": "SELECT addMonths(toStartOfMonth(toDate( NOW() )), -1)",
        "hide": 2,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "month_1",
        "options": [],
        "query": "SELECT addMonths(toStartOfMonth(toDate( NOW() )), -1)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "2019-05-01",
          "value": "2019-05-01"
        },
        "datasource": "ch_cloud_analytics",
        "definition": "SELECT addMonths(toStartOfMonth(toDate( NOW() )), -2)",
        "hide": 2,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "month_2",
        "options": [],
        "query": "SELECT addMonths(toStartOfMonth(toDate( NOW() )), -2)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "2019-04-01",
          "value": "2019-04-01"
        },
        "datasource": "ch_cloud_analytics",
        "definition": "SELECT addMonths(toStartOfMonth(toDate( NOW() )), -3)",
        "hide": 2,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "month_3",
        "options": [],
        "query": "SELECT addMonths(toStartOfMonth(toDate( NOW() )), -3)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-120d",
    "to": "now+7d"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "Events Dash",
  "uid": "0eKFueSZk",
  "version": 23
}
