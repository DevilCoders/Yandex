{% set location = grains["cluster_map"]["hosts"][grains['nodename']]["zone_id"] %}
{% set generic_rfn_config = pillar["generic_rfn_config"] %}
{% set specific_rfn_config = pillar["specific_rfn_config"][grains['nodename']] %}
{% set rfn_fv_peering_loopback_ipv4_address = specific_rfn_config["rfn_fv_peering_loopback_ipv4_address"]%}
{% set rkn_routes_bgp_community =  generic_rfn_config["rkn_routes_bgp_community"] %}
{% set whitelist_bgp_community = generic_rfn_config["whitelist_bgp_community"] %}
{% set blacklist_bgp_community = generic_rfn_config["blacklist_bgp_community"] %}
{% set host_route_bgp_community = generic_rfn_config["host_route_bgp_community"] %}
{% set subnet_route_bgp_community = generic_rfn_config["subnet_route_bgp_community"] %}
{% set geo_bgp_community = pillar["generic_netinfra_config"]["geo_bgp_communities"][location] %}
{% set deployment = pillar["specific_rfn_config"][grains['nodename']]["deployment"] %}


router id {{ rfn_fv_peering_loopback_ipv4_address }};
listen bgp address {{ rfn_fv_peering_loopback_ipv4_address }} port 179;

include "bird.conf.static_routes";
include "bird.conf.root_dns";
include "bird.conf.yandex";
include "bird.conf.yandex_telecom";
include "bird.conf.yandex_cloud";

log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
log stderr all;
log "/var/log/bird.log" all;

table default_route;


function net_subnet_routes() {
        return net ~ [
                0.0.0.0/0{0, 31}
        ];
}

function net_host_routes() {
        return net ~ [
                0.0.0.0/0{32, 32}
        ];
}

function net_all_rkn_routes() {
        return net ~ [
                0.0.0.0/0{0, 32}
        ];
}

function net_geo_community() {
        return net ~ [
                0.0.0.0/0{0, 32}
        ];
}


filter DEFAULT_ROUTE {
        if net = 0.0.0.0/0 then accept;
        reject;
}

filter REDISTRIBUTE_BGP {
        ## MARK WITH RKN communities
        if proto = "rkn_host_routes"          then bgp_community.add(({{ host_route_bgp_community | regex_replace(":", ",") }}));
        if proto = "rkn_subnet_routes"        then bgp_community.add(({{ subnet_route_bgp_community | regex_replace(":", ",") }}));
        if net_blackhole()                then bgp_community.add(({{ blacklist_bgp_community | regex_replace(":", ",") }}));
        if net_all_rkn_routes()           then bgp_community.add(({{ rkn_routes_bgp_community | regex_replace(":", ",") }}));
        if net_geo_community()            then bgp_community.add(({{ geo_bgp_community | regex_replace(":", ",") }}));

        ##REDISTRIBUTE
        if proto = "nginx_loopback" then accept;


        ## FRINDLY NETS WHITELISTING
        if root_dns_servers_whitelisting_backup() then bgp_community.add(({{ whitelist_bgp_community | regex_replace(":", ",") }}));
        if YANDEX_LLC_prefixes_whitelisting_backup() then bgp_community.add(({{ whitelist_bgp_community | regex_replace(":", ",") }}));
        if YANDEX_TELECOM_prefixes_whitelisting_backup() then bgp_community.add(({{ whitelist_bgp_community | regex_replace(":", ",") }}));
        if YANDEX_CLOUD_prefixes_whitelisting_backup() then bgp_community.add(({{ whitelist_bgp_community | regex_replace(":", ",") }}));

        ## WHITELIST ASNS WHITELISTING
        if net_whitelist()                then bgp_community.add(({{ whitelist_bgp_community | regex_replace(":", ",") }}));
        
        ##REDISTRIBUTE STATIC ROUTES
        if proto = "rkn_host_routes" then accept;
        if proto = "rkn_subnet_routes" then accept;
        reject;
}



protocol device {
        scan time 10;
}

protocol direct {
        table default_route;
        interface "gre_*";
}

protocol kernel {
        table default_route;
        scan time 10;
        import none;
        export filter DEFAULT_ROUTE;
}

protocol static loopback {
        route {{ rfn_fv_peering_loopback_ipv4_address }}/32 blackhole;
}


{% for BORDER in pillar["generic_netinfra_config"]["borders"] %}
{%- set local_tunnel_ip =  specific_rfn_config["gre_tunnels"][ BORDER.name ]["local_tunnel_ipv4_address"] -%}
{%- set remote_tunnel_ip = specific_rfn_config["gre_tunnels"][ BORDER.name ]["remote_tunnel_ipv4_address"] -%}
protocol bgp BORDER_{{ BORDER.name }} {
        keepalive time 30;
        hold time 360;
        table default_route;
        neighbor {{ remote_tunnel_ip }} as {{ pillar["generic_netinfra_config"]["border_bgp_asn"] }};
        local {{ local_tunnel_ip }} as {{ generic_rfn_config["local_bgp_asn"] }};
        import filter DEFAULT_ROUTE;
        export none;
        multihop;
};
{% endfor %}


{% for FVRR in pillar["generic_netinfra_config"]["fv_reflectors"][deployment] %}
protocol bgp {{ FVRR.name }} {
        keepalive time 30;
        hold time 360;
        neighbor {{FVRR.ipv4_address}} as {{pillar["generic_netinfra_config"]["fv_reflector_bgp_asn"]}};
        local {{rfn_fv_peering_loopback_ipv4_address}} as {{generic_rfn_config["local_bgp_asn"]}};
        import none;
        export filter REDISTRIBUTE_BGP;
        multihop;
};
{% endfor %}

