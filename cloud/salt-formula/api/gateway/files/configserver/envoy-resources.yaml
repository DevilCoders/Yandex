{%- from "api/gateway/map.jinja" import api_gateway, envoy_listeners, envoy_virtual_hosts, api_adapter with context -%}

listeners:
- name: backend
  address:
    socket_address: { address: 127.0.0.1, port_value: 4433 }
  filter_chains:
  - filters:
    - name: envoy.http_connection_manager
      config:
        stat_prefix: ingress_http
        codec_type: AUTO
        route_config:
          name: api_adapter
          virtual_hosts:
          - name: api_adapter
            domains: ["*"]
            routes:
            - match: { prefix: "/" }
              route:
                cluster: api_adapter
                auto_host_rewrite: true
                timeout: 60s
        http_filters:
        - name: envoy.router
          config:
            upstream_log:
            - name: envoy.http_grpc_access_log
              config:
                common_config:
                  log_name: adapter_upstream_log
                  grpc_service: { envoy_grpc: { cluster_name: als } }
                additional_request_headers_to_log: [X-REQUEST-ID, X-ENVOY-ORIGINAL-PATH, X-CLIENT-REQUEST-ID, X-CLIENT-TRACE-ID]
                additional_response_headers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]
                additional_response_trailers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]

{% if api_gateway.get('container_registry', {}) %}
- name: container_registry
  address:
    socket_address: { address: 127.0.0.1, port_value: 4438 }
  filter_chains:
  - filters:
    - name: envoy.http_connection_manager
      config:
        stat_prefix: ingress_http
        codec_type: AUTO
        route_config:
          name: container_registry
          virtual_hosts:
          - name: container_registry
            domains: ["*"]
            routes:
            - match: { prefix: "/" }
              route:
                cluster: container_registry
                auto_host_rewrite: true
                timeout: 60s
        http_filters:
        - name: envoy.router
          config:
            upstream_log:
            - name: envoy.http_grpc_access_log
              config:
                common_config:
                  log_name: container_registry_upstream_log
                  grpc_service: { envoy_grpc: { cluster_name: als } }
                additional_request_headers_to_log: [X-REQUEST-ID, X-ENVOY-ORIGINAL-PATH, X-CLIENT-REQUEST-ID, X-CLIENT-TRACE-ID]
                additional_response_headers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]
                additional_response_trailers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]

{% endif %}

{% if api_gateway.get('serverless_functions', {}) %}
- name: serverless_functions
  address:
    socket_address: { address: 127.0.0.1, port_value: 4440 }
  filter_chains:
  - filters:
    - name: envoy.http_connection_manager
      config:
        stat_prefix: ingress_http
        codec_type: AUTO
        route_config:
          name: serverless_functions
          virtual_hosts:
          - name: serverless_functions
            domains: ["*"]
            routes:
            - match: { prefix: "/" }
              route:
                cluster: serverless_functions
                auto_host_rewrite: true
                timeout: 60s
        http_filters:
        - name: envoy.router
          config:
            upstream_log:
            - name: envoy.http_grpc_access_log
              config:
                common_config:
                  log_name: serverless_functions_upstream_log
                  grpc_service: { envoy_grpc: { cluster_name: als } }
                additional_request_headers_to_log: [X-REQUEST-ID, X-ENVOY-ORIGINAL-PATH, X-CLIENT-REQUEST-ID, X-CLIENT-TRACE-ID]
                additional_response_headers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]
                additional_response_trailers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]

{% endif %}

{% if api_gateway.get('microcosm_instancegroup', {}) %}
- name: microcosm_instancegroup
  address:
    socket_address: { address: 127.0.0.1, port_value: 4439 }
  filter_chains:
  - filters:
    - name: envoy.http_connection_manager
      config:
        stat_prefix: ingress_http
        codec_type: AUTO
        route_config:
          name: microcosm_instancegroup
          virtual_hosts:
          - name: microcosm_instancegroup
            domains: ["*"]
            routes:
            - match: { prefix: "/" }
              route:
                cluster: microcosm_instancegroup
                auto_host_rewrite: true
                timeout: 60s
        http_filters:
        - name: envoy.router
          config:
            upstream_log:
            - name: envoy.http_grpc_access_log
              config:
                common_config:
                  log_name: microcosm_instancegroup_upstream_log
                  grpc_service: { envoy_grpc: { cluster_name: als } }
                additional_request_headers_to_log: [X-REQUEST-ID, X-ENVOY-ORIGINAL-PATH, X-CLIENT-REQUEST-ID, X-CLIENT-TRACE-ID]
                additional_response_headers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]
                additional_response_trailers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]
{% endif %}

{% if api_gateway.get('managed_kubernetes', {}) %}
- name: managed_kubernetes
  address:
    socket_address: { address: 127.0.0.1, port_value: 4450 }
  filter_chains:
    - filters:
        - name: envoy.http_connection_manager
          config:
            stat_prefix: ingress_http
            codec_type: AUTO
            route_config:
              name: managed_kubernetes
              virtual_hosts:
                - name: managed_kubernetes
                  domains: ["*"]
                  routes:
                    - match: { prefix: "/" }
                      route:
                        cluster: managed_kubernetes
                        auto_host_rewrite: true
                        timeout: 60s
            http_filters:
              - name: envoy.router
                config:
                  upstream_log:
                    - name: envoy.http_grpc_access_log
                      config:
                        common_config:
                          log_name: managed_kubernetes_upstream_log
                          grpc_service: { envoy_grpc: { cluster_name: als } }
                        additional_request_headers_to_log: [X-REQUEST-ID, X-ENVOY-ORIGINAL-PATH, X-CLIENT-REQUEST-ID, X-CLIENT-TRACE-ID]
                        additional_response_headers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]
                        additional_response_trailers_to_log: [content-type, content-length, grpc-service, grpc-method, grpc-status, grpc-status-message]
{% endif %}

- name: healthcheck_v4
  address:
    socket_address: { address: 0.0.0.0, port_value: 4486 }
  filter_chains:
  - filters:
    - name: envoy.http_connection_manager
      config:
        stat_prefix: ingress_http
        codec_type: AUTO
        http_protocol_options:
          accept_http_10: true
        route_config:
          name: healthcheck
          virtual_hosts:
          - name: healthcheck
            domains: ["*"]
            routes:
            - match: { prefix: "/" }
              route:
                cluster: gateway_healthcheck
                timeout: 60s
        http_filters:
        - name: envoy.router

- name: healthcheck_v6
  address:
    socket_address: { address: "::", port_value: 4486 }
  filter_chains:
  - filters:
    - name: envoy.http_connection_manager
      config:
        stat_prefix: ingress_http
        codec_type: AUTO
        http_protocol_options:
          accept_http_10: true
        route_config:
          name: healthcheck
          virtual_hosts:
          - name: healthcheck
            domains: ["*"]
            routes:
            - match: { prefix: "/" }
              route:
                cluster: gateway_healthcheck
                timeout: 60s
        http_filters:
        - name: envoy.router

clusters:
- name: gateway
  connect_timeout: 0.25s
  common_http_protocol_options:
    idle_timeout: 60s
  http2_protocol_options: {}
  type: STATIC
  lb_policy: ROUND_ROBIN
  circuit_breakers:
    thresholds: [{max_requests: 1000}]
  hosts: [{ socket_address: { address: 127.0.0.1, port_value: 9894 }}]

- name: api_adapter
  connect_timeout: 0.25s
  common_http_protocol_options:
    idle_timeout: 45s
  http2_protocol_options: {}
  type: STRICT_DNS
  lb_policy: ROUND_ROBIN
  hosts:
  - socket_address:
      address: {{ api_adapter.host }}
      port_value: {{ api_adapter.port }}

{% if api_gateway.get('container_registry', {}) %}
- name: container_registry
  connect_timeout: 0.25s
  common_http_protocol_options:
    idle_timeout: 45s
  http2_protocol_options: {}
  type: STRICT_DNS
  lb_policy: ROUND_ROBIN
  tls_context:
    common_tls_context:
      alpn_protocols: ["h2,http/1.1]"]
  hosts:
  - socket_address:
      address: {{ api_gateway.container_registry.host }}
      port_value: {{ api_gateway.container_registry.port }}
{% endif %}

{% if api_gateway.get('serverless_functions', {}) %}
- name: serverless_functions
  connect_timeout: 0.25s
  common_http_protocol_options:
    idle_timeout: 45s
  http2_protocol_options: {}
  type: STRICT_DNS
  lb_policy: ROUND_ROBIN
  tls_context:
    common_tls_context:
      alpn_protocols: ["h2,http/1.1]"]
  hosts:
  - socket_address:
      address: {{ api_gateway.serverless_functions.host }}
      port_value: {{ api_gateway.serverless_functions.port }}
{% endif %}

{% if api_gateway.get('microcosm_instancegroup', {}) %}
- name: microcosm_instancegroup
  connect_timeout: 0.25s
  common_http_protocol_options:
    idle_timeout: 60s
  http2_protocol_options: {}
  type: STRICT_DNS
  lb_policy: ROUND_ROBIN
  tls_context:
    common_tls_context:
      alpn_protocols: ["h2,http/1.1]"]
  hosts:
  - socket_address:
      address: {{ api_gateway.microcosm_instancegroup.host }}
      port_value: {{ api_gateway.microcosm_instancegroup.port }}
{% endif %}

{% if api_gateway.get('managed_kubernetes', {}) %}
- name: managed_kubernetes
  connect_timeout: 0.25s
  common_http_protocol_options:
    idle_timeout: 60s
  http2_protocol_options: {}
  type: STRICT_DNS
  lb_policy: ROUND_ROBIN
  tls_context:
    common_tls_context:
      alpn_protocols: ["h2,http/1.1]"]
  hosts:
  - socket_address:
      address: {{ api_gateway.managed_kubernetes.host }}
      port_value: {{ api_gateway.managed_kubernetes.port }}
{% endif %}

- name: gateway_healthcheck
  connect_timeout: 0.25s
  common_http_protocol_options:
    idle_timeout: 60s
  type: STATIC
  lb_policy: ROUND_ROBIN
  circuit_breakers:
    thresholds: [{max_requests: 1000}]
  hosts: [{ socket_address: { address: 127.0.0.1, port_value: 9895 }}]
