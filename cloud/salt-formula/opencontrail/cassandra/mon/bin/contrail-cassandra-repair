#!/usr/bin/env python
# -*-coding: utf-8 -*-
# vim: sw=4 ts=4 expandtab ai

import os

from introspect import STATUS_OK, STATUS_WARN, STATUS_CRIT, load_config, print_for_monitoring
from datetime import datetime, timedelta

"""
To maintain Cassandra we periodically run nodetool repair.
This is done using cron job (see crontab -l for root) that
runs every day on every machine with Cassandra.

The job is scheduled in cron so that it never runs at the same time
on different machines (or repair will hang).

This script simply checks log file of that cron job to ensure
that last repair completed successfully.

If this check fails, then either:
 * it's a new node and repair just haven't run on it yet
 * something wrong with cassandra

What to do, if this check fails:
 * see wiki for some context about cassandra repair: https://wiki.yandex-team.ru/cloud/devel/sdn/opencontrail-cassandra/periodic-maintainance/
 * you may have to disable cron job for a while on all nodes so it won't start another repair
 * you may have to restart cassandra one by one on all nodes to stop hanged repair
 * see cassandra logs to find out why it failed

P.S. And never run /usr/bin/contrail-cassandra-repair on more than one node at a time.
"""


def is_expired(when_str, ttl_hours):
    """when_str example: 2018-01-19 00:19:56,140"""
    when = datetime.strptime(when_str, '%Y-%m-%d %H:%M:%S,%f')
    return when + timedelta(hours=ttl_hours) < datetime.now()


def parse_log_file(filename):
    last_success = '1970-01-01 00:00:00,000'
    last_error = '1970-01-01 00:00:00,000'
    with open(filename) as f:
        for line in f:
            when, loglevel, what = line.split(' - ', 2)
            if 'All repairs finished successfully' in what:
                last_success = when
            if loglevel == 'ERROR':
                last_error = when
    return last_success, last_error


def get_service_status(config):
    logfile = config['repair_logfile']
    ttl_hours = config['repair_must_run_every_hours']

    if not os.path.exists(logfile):
        return STATUS_WARN, 'No log file: repair hasn\'t run yet'

    try:
        last_success, last_error = parse_log_file(logfile)
        if last_error > last_success:
            return STATUS_CRIT, 'Last cassandra repair failed'
        if is_expired(last_success, ttl_hours):
            return STATUS_CRIT, 'Repair haven\'t run for more than {}'.format(ttl_hours)
        return STATUS_OK, None
    except IOError as e:
        return STATUS_CRIT, 'Can\'t read log file: {}'.format(e)


def main():
    try:
        config = load_config('contrail-cassandra-repair.conf')
    except IOError:
        print_for_monitoring('contrail-cassandra', STATUS_CRIT, 'Can\'t load config file for monitoring')
    else:
        status, messages = get_service_status(config)
        print_for_monitoring('contrail-cassandra', status, messages)


if __name__ == '__main__':
    main()
