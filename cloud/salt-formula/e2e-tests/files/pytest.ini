{%- import "common/kikimr/init.sls" as vars with context -%}
{%- set lb_endpoints = grains['cluster_map']['load_balancer']['endpoints'] -%}
{%- set hostname = grains['nodename'] -%}
{%- set zone_id = salt['grains.get']('cluster_map:hosts:%s:location:zone_id' % hostname, pillar['placement']['dc']) -%}
{%- set zone_ids = salt['grains.get']('cluster_map:availability_zones', [zone_id]) -%}

{# NOTE(k-zaitsev): We need dyn-node here or locks will not be global, see CLOUD-9211 for more details #}
{%- set dynamic_nodes = grains['cluster_map']['kikimr']['clusters']['global']['dynamic_nodes'][vars.e2e_database] -%}
{%- set seed_node = grains['cluster_map']['roles'].get('seed', [''])|first -%}
{%- if dynamic_nodes|length == 1 and dynamic_nodes|first == seed_node -%}
    {%- set kikimr_ycloud_hosts = [seed_node] -%}
    {%- set kikimr_ycloud_port = pillar['kikimr_tenant_ports'][vars.e2e_database]['grpc_port'] -%}
{%- else -%}
    {%- set kikimr_ycloud_hosts = dynamic_nodes|reject("equalto", seed_node)|list -%}
    {%- set kikimr_ycloud_port = pillar['kikimr_tenant_ports'][vars.e2e_database]['grpc_port'] if vars.subdomains|length > 1 or vars.base_role == 'cloudvm' else lb_endpoints.ycloud_kikimr_grpc.port -%}
{%- endif -%}
{%- set kikimr_cluster = pillar["e2e-tests"]["ydb_cluster"] -%}
{%- set ydb_domain = vars.kikimr_prefix ~ kikimr_cluster -%}
{%- set environment = grains['cluster_map']['environment'] -%}
[pytest]
; New pytest spams a lot of warnings
addopts= -p no:warnings

; Time to wait for running VM to become available via SSH
wait_vm_up_timeout_sec=120

; Image name to use for test VMs
image_name=e2e-tests

; Names/ids of cloud and folder to which test VMs should belong
{%- if environment == 'prod' or environment == 'pre-prod' %}
cloud_id={{ salt['grains.get']("cluster_map:clouds:yc-e2e-tests:id", "") }}
folder_id={{ salt['grains.get']("cluster_map:clouds:yc-e2e-tests:folders:e2e:id", "") }}

; Network name to spawn test VMs in
; TODO(k-zaitsev): change back to cloudmonnets. See https://st.yandex-team.ru/CLOUD-14122#5c3dab8f7af9d8001bead9de for explanation
network_name=cloudmonnets-high
{%- else %}
cloud_name=yc-e2e-tests
folder_name=e2e

; Network name to spawn test VMs in
network_name=cloudmonnets
{%- endif %}

; Identity endpoint URL
identity_endpoint=https://{{ lb_endpoints.identity_private_tls.host }}:{{ lb_endpoints.identity_private_tls.port }}
identity_private_endpoint=https://{{ lb_endpoints.identity_private_tls.host }}:{{ lb_endpoints.identity_private_tls.port }}

; Gauthling endpoint URL
gauthling_local_endpoint=gauthling.is.not.here.anymore:1234

; Compute endpoint URL
compute_endpoint=https://{{ lb_endpoints['public_api_ssl']['host'] }}:{{ lb_endpoints['public_api_ssl']['port'] }}/compute/external

; Current node's zone id
availability_zone={{ zone_id }}

; Comma-separated list of all available zones
availability_zones={{ zone_ids|join(',') }}

; DNS domain where VMs are spawn, not used now
vm_domain=

; IPv6 address to test external connectivity against
; 2a02:6b8::1 is ns1.yandex.ru
external_target=2a02:6b8::1

; Path to not encrypted private key file for ssh
ssh_private_key=/usr/lib/yc/e2e-tests/conf/testkey

; Logformat string for monrun reporter log
monrun_log_format=%(asctime)s - %(name)s - %(levelname)s - %(message)s

; Snapshot image url
snapshot_image_url=https://s3.mds.yandex.net/yc-bootstrap/cirros-0.3.5-x86_64-disk.img

; Path to save test cache
tests_cache_dir=/var/lib/yc/e2e-tests/

; The time during which the test "test_vm_oldest" will report, sec
test_vm_oldest_timeout=3600

; Compute node hostname for permanent vm placement.
; setup in salt-formula
placement_host={{ grains['nodename'] }}

; full path to secrets
secret_file=/etc/yc/e2e-tests/secrets.ini

; List of skiped tests for this host
; setup in salt-formula
skipped_tests={{ salt['pillar.get']('e2e-tests:skipped_tests', []) | join(",") }}

; kikimr location
{%- if salt['grains.get']('overrides:kikimr_endpoint', None) %}
kikimr_hosts={{salt['grains.get']('overrides:kikimr_endpoint')}}
{%- else %}
kikimr_hosts={% for host in kikimr_ycloud_hosts %}{{host}}:{{kikimr_ycloud_port}}{{'' if loop.last else ','}}{% endfor %}
{%- endif %}
kikimr_root=/{{ ydb_domain }}/{{ vars.e2e_database }}/e2e

; List of targets for ipv4 external connectivity tests
external_ipv4_targets = mail.ru,google.com,amazon.com,baidu.com,qq.com,web.de,t-online.de,welt.de,reddit.com

; Get-My-Ip Yandex service
get_my_ip_uri={{ salt['pillar.get']('e2e-tests:get_my_ip_uri', 'https://ipv4-internet.yandex.net/api/v0/ip') }}
; Martian network
martian_network={{ salt['pillar.get']('e2e-tests:martian_network', '198.18.0.0/15') }}

; Extra targets we ping through yandex
yandex_extra_targets=kassa.yandex.ru,payment.yandex.net
; See https://st.yandex-team.ru/CLOUD-17401 for description of these hosts
netinfra_extra_targets=208.67.220.220,217.10.140.74,185.42.136.158,185.32.189.249,192.172.226.235,76.26.115.194,98.159.46.220,192.102.255.220,170.210.5.200,200.160.6.19,196.10.54.135,37.252.244.78,210.4.208.19,119.17.170.244,1.1.1.1

{# NOTE(k-zaitsev): We've agreed to have a e2e-v1 platform at some point. It would allow running minimal e2e VMs
   on any hw-platform. ETA for this feature is around the same as GPU-platforms. So right now I'm only adding
   a vary simple check here for standard-v2 platform and not moving it to pillars/grains. If e2e-v1 is not here
   by the time we add new platform: I suggest adding these defaults to pillar. #}
{%- set platform_defaults = {'core_fraction': 5, 'cores': 1, 'platform': 'standard-v1'} %}
{%- set gpu = False -%}
{%- for platform in salt["pillar.get"]("hardware_platform")|selectattr("gpu", "equalto", gpu) %}
  {%- if salt["grains.get"]("cpu_model") in platform["cpus"] and platform["name"] == "xeon-gold-6230" %}
    {%- do platform_defaults.update({'cores': 2, 'platform': 'standard-v2'}) %}
  {%- endif %}
{%- endfor %}

default_vm_core_fraction={{ platform_defaults.core_fraction }}
default_vm_cores={{ platform_defaults.cores }}
default_platform={{ platform_defaults.platform }}
