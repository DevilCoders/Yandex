upstream s3-arc {
    server [::]:6666;
#    keepalive 3;
}

upstream s3-arc-system {
    server [::]:6700;
    server [::]:6701;
    server [::]:6702;
    server [::]:6703;
}

map $http_origin $allowed_origin {
    include s3-arc/map_allowed_origins.conf;
}

include s3-arc/blacklist_referer.conf;

server {
    listen 80;
    listen [::]:80;

    listen 127.0.0.1:80;
    listen [::1]:80;

    listen 443 ssl;
    listen [::]:443 ssl;

    server_name *.storage.yandexcloud.net storage.yandexcloud.net *.storage.{{ grains['cluster_map']['public_zone'] }} storage.{{ grains['cluster_map']['public_zone'] }} s3-yc-test.yandex.net *.s3-yc-test.yandex.net;
    ssl_certificate     /etc/nginx/ssl/s3-yc-test.yandex.net.pem;
    ssl_certificate_key /etc/nginx/ssl/s3-yc-test.yandex.net.key;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers kEECDH+AESGCM+AES128:kEECDH+AES128:kRSA+AESGCM+AES128:kRSA+AES128:RC4-SHA:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
    ssl_session_cache    shared:S3_YC_SSL_CACHE:128m;
    ssl_session_timeout  28h;

    include s3-arc/proxy_options.conf;

    client_max_body_size 6g;

    underscores_in_headers on;

    location / {
        if ($bad_referer) {
            return 402;
        }

        proxy_pass    http://s3-arc;

        # header_filter_by_lua_block {
        #     local req_origin = ngx.req.get_headers()["Origin"]
        #     if req_origin ~= nil then
        #         local val = ngx.header['Access-Control-Allow-Origin']
        #         if val == nil or val == "" then
        #             ngx.header['Access-Control-Allow-Origin'] = '*'
        #         end
        #     end
        # }


        include s3-arc/error_page_503.conf;
        log_by_lua_file /etc/nginx/s3-lua/s3-solomon-metrics.lua;
    }

    location @error503 {
        return 503;
        log_by_lua_file /etc/nginx/s3-lua/s3-solomon-metrics.lua;
    }

    location ~ /system/ping/?$ {
        proxy_pass    http://s3-arc-system;
        log_by_lua_block {
            service_tags = {}
            service_tags.request_stat_type = "system"
            increment_solomon_metric(service_tags, 1)
        }
    }

    location /ping {
        rewrite /ping /system/ping last;
        log_by_lua_block {
            service_tags = {}
            service_tags.request_stat_type = "system"
            increment_solomon_metric(service_tags, 1)
        }
    }
}
