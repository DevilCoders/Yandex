{%- set hostname = grains['nodename'] -%}
{%- set host_roles = grains['cluster_map']['hosts'][hostname]['roles'] -%}
{%- set host_tags = grains['cluster_map']['hosts'][hostname].get('tags', []) -%}
{%- set plugin_mapping = {"head": ["compute_api", "compute_worker", "resources", "scheduler", "network_resources"],
                          "billing": ["billing_api", "billing_console_api"],
                          "compute": ["compute_node_api", "instances", "instances_new", "vrouter", "network_sli_checks", "arp_replies"],
                          "cloudgate": ["vpp", "gobgp"],
                          "iam": ["identity"],
                          "oct_db": ["cassandra", "obj_count", "oct_head_process_mem", "named_reconfig_timers", "named_metrics"],
                          "oct_head": ["cassandra", "obj_count", "oct_head_process_mem", "named_reconfig_timers", "named_metrics"],
                          "seed": ["compute_api", "compute_worker", "identity", "resources", "scheduler"],
                          "s3-proxy": ["s3mds", "s3mds_external"]} -%}
{%- set prometheus_configs = pillar.get('solomon-agent', {}).get('prometheus-plugin', {}) -%}
{%- set plugins = [] -%}

{# Always enable plugin for system metrics #}
{%- set service_config_files = ["/etc/yc/solomon-agent-systemd/system-plugin.conf"] -%}

{# Enable plugin for log-reader metrics #}
{%- if grains["cluster_map"]["environment"] == "prod" -%}
    {%- do service_config_files.append("/etc/yc/solomon-agent-systemd/log-reader.conf") -%}
{%- endif -%}

{# Temporary switched off due to https://st.yandex-team.ru/NBS-467
{%- if "compute" in host_roles -%}
    {%- do service_config_files.append("/etc/yc/solomon-agent-systemd/nbs-metrics.conf") -%}
{%- endif -%}
#}

{# pulling metrics from serverless instances #}
{%- if "compute" in host_roles -%}
    {%- do service_config_files.append("/etc/yc/solomon-agent-systemd/serverless-engine.conf") -%}
{%- endif -%}

{%- if "loadbalancer-node" in host_roles -%}
    {%- do service_config_files.append("/etc/yc/solomon-agent-systemd/ylb-metrics.conf") -%}
    {%- do service_config_files.append("/etc/yc/solomon-agent-systemd/ylb-billbro-metrics.conf") -%}
    {%- do service_config_files.append("/etc/yc/solomon-agent-systemd/ylb-vsop.conf") -%}
{%- endif -%}

{%- if 'bgp2vpp' in host_tags %}
    {%- do service_config_files.append("/etc/yc/solomon-agent-systemd/yc-bgp2vpp.conf") -%}
{%- endif -%}

{%- for role in host_roles -%}
    {%- if role in plugin_mapping -%}
        {%- do plugins.extend(plugin_mapping[role]) -%}
    {%- endif -%}
    {%- if role in prometheus_configs -%}
        {%- for service_name in prometheus_configs[role].iterkeys() -%}
            {%- do service_config_files.append("/etc/yc/solomon-agent-systemd/{}-{}-prometheus.conf".format(role, service_name)) -%}
        {%- endfor -%}
    {%- endif -%}
{%- endfor %}

{%- set push_section = {"enabled": False, "service": ""} %}
{%- set push_roles = ["compute", "s3-proxy"] %}

{%- for role in host_roles %}
  {%- if role in push_roles %}
      {%- if role == 's3-proxy' %}
          {%- set _ = push_section.update({"enabled":True, "service": "storage"}) %}
      {%- else %}
          {%- set _ = push_section.update({"enabled":True, "service": role}) %}
      {%- endif %}
  {%- endif %}
{%- endfor %}

Logger {
    LogTo: STDERR
    Level: DEBUG
}

Python2 {
    # defines should agent try to load/write .pyc files (default: false)
    IgnorePycFiles: true
}

HttpServer {
    BindPort: 8080
    MaxConnections: 100
    OutputBufferSize: 256
    MaxQueueSize: 200
    ThreadPoolName: "Io"
}

Storage {
  BufferSize: 2560
}

ConfigLoader {

    {% if service_config_files %}
    FileLoader {
        UpdateInterval: "60s"
        ConfigsFiles: [
        {%- for config_file in service_config_files %}
            "{{ config_file }}"{% if not loop.last %},{% endif %}
        {%- endfor %}
        ]
    }
    {% endif %}

    Python2Loader {
        UpdateInterval: "60s",
        FilePath: "/usr/lib/python2.7/dist-packages/yc_solomon_plugins/common.py",
        ModuleName: "common",
        ClassName: "CommonLoader"

        Params {
          key: "plugins"
          value: "{{ plugins|join(',')}}"
        }
    }
}

{% if push_section.enabled and grains["cluster_map"]["environment"] in ["prod", "pre-prod"] %}
Push {
    Hosts: [
        {
          {% if grains["cluster_map"]["environment"] == "prod" %}
             Url: "https://solomon.cloud.yandex-team.ru/api/v2/push"
          {% else %}
             Url: "https://solomon.cloud-preprod.yandex-team.ru/api/v2/push"
          {% endif %}
        }
    ],

  {% if "compute" in host_roles %}
    Shards: [
        {
            Project: "yandexcloud"
            Service: "compute_new"
        }
    ]
  {% elif "s3-proxy" in host_roles %}
    Shards: [
        {
            Project: "yandexcloud",
            Service: "storage"
        }
    ]
  {% else %}
    AllShards: true
  {% endif %}

    Cluster: "default"

    PushInterval: "30s"
    RetryInterval: "5s"
    RetryTimes: 3
    {% raw %}
    ShardKeyOverride {
        Project: "{{cloud_id}}"
        Cluster: "{{folder_id}}"    {% endraw %}
        Service: "{{push_section.service}}"
    }

}
{% endif %}

# management API server settings
ManagementServer {
    BindAddress: "::"
    BindPort: 8081
    ThreadPoolName: "Io"
}

ThreadPoolProvider {
  ThreadPools: [
    {
      Name: "Io"
      Threads: 4
    },
    {
      Name: "Default"
      Threads: 8
    }
  ]
}

Modules {
    HttpPush {
        BindAddress: "::1"
        BindPort: 10050
        Name: "httpPush"

        Handlers [{
            Service: "e2e-timing"
            Project: "yandexcloud"

            Endpoint: "/e2e_timing"
        }, {
            Service: "pings"
            Project: "yandexcloud"

            Endpoint: "/pings"
        }, {
            Service: "juggler-events"
            Project: "yandexcloud"

            Endpoint: "/juggler_events"
        }]
    }
}
