#!/bin/sh

# summary of how this script can be called:
# * <postinst> `configure' <most-recently-configured-version>
# * <old-postinst> `abort-upgrade' <new version>
# * <conflictor's-postinst> `abort-remove' `in-favour' <package> <new-version>
# * <postinst> `abort-remove'
# * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#   <failed-install-package> <version> `removing'
#   <conflicting-package> <version>
#
# for details, see dh_installdeb(1) or http://www.debian.org/doc/debian-policy/

set -e
set -x

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

gen_grub_configs() {
    echo "Add GRUB configs"
    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT apparmor=1 security=apparmor\"  # apparmor.cfg" >> /etc/default/grub
    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT intel_iommu=on transparent_hugepage=madvise kvm.nx_huge_pages=auto\"  # yc-configuration" >> /etc/default/grub
    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT tsx_async_abort=full tsx=off\"  # tsx.cfg" >> /etc/default/grub
    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT crashkernel=256M\"  # kdump-tools" >> /etc/default/grub
    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT scsi_mod.use_blk_mq=0\"  # scheduler" >> /etc/default/grub
    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT spec_store_bypass_disable=prctl spectre_v2_user=prctl\"  # spectre mitigation" >> /etc/default/grub
    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT nvme_core.admin_timeout=240\"  # nvme core" >> /etc/default/grub
    if [ "$use_hp" = "True" ]
    then
      HPCMD=$(python3 /usr/bin/huge_pages.py -t --hpmincnt "${hp_number:=0}") && echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT $HPCMD\"  # huge pages" >> /etc/default/grub
    fi
    if grep -q "GRUB_TIMEOUT=" /etc/default/grub; then
      sed -i "s/GRUB_TIMEOUT=[0-9]\+/GRUB_TIMEOUT=5/g" /etc/default/grub
    else
      echo "GRUB_TIMEOUT=5" >> /etc/default/grub
    fi
    if grep -q "GRUB_HIDDEN_TIMEOUT=" /etc/default/grub; then
      sed -i "s/GRUB_HIDDEN_TIMEOUT=[0-9]\+/GRUB_HIDDEN_TIMEOUT=/g" /etc/default/grub
    else
      echo "GRUB_HIDDEN_TIMEOUT=" >> /etc/default/grub
    fi

    GPU_PLATFORM=$(python3 /usr/bin/configure_gpu.py get-gpu-type)
    if [ -n "$GPU_PLATFORM" ]
    then
      if [ $GPU_PLATFORM = "hwgpu" ] || [ $GPU_PLATFORM = "vgpu-pt" ] || [ $GPU_PLATFORM = "unknown" ]
      then
        echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT iommu=pt\""  >> /etc/default/grub
      elif [ $GPU_PLATFORM = "vgpu" ]
      then
        echo "Nothing to do. vGPU host shouldn't have iommu GRUB parameter"
      else
        echo "Got wrong gpu type"
        exit 1
      fi
    else
      echo "Couldn't get gpu platform"
      exit 1
    fi

    update-grub
}

set_cpu_isolation() {
    echo "Setup Isolation CPU configuration"
    export IRQAFFINITY_CORES=$(python3 /usr/bin/isolate_cpu.py show --type irqaffinity --string)
    export ALL_ISOLATED_CORES=$(python3 /usr/bin/isolate_cpu.py show --type isolcpus --string)
    export SYSTEMDAFFINITY=$(python3 /usr/bin/isolate_cpu.py show --type systemdaffinity --string)
    export NETWORK_CORES=$(python3 /usr/bin/isolate_cpu.py show --type network --string)
    sed -i "s/[[:print:]]\?CPUAffinity[[:print:]]*/CPUAffinity=${SYSTEMDAFFINITY}/g" /etc/systemd/system.conf
    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\$GRUB_CMDLINE_LINUX_DEFAULT isolcpus=${NETWORK_CORES} nohz_full=${ALL_ISOLATED_CORES} irqaffinity=${IRQAFFINITY_CORES}\"  # isolate CPUs"  >> /etc/default/grub
    update-grub
}

set_default_shell() {
    echo "Set symlink /bin/sh -> /bin/bash"
    update-alternatives --install /bin/sh sh /bin/bash 100
}

configure_journald(){
    echo "Configuration journal..."
    mkdir -p /etc/systemd/journald.conf.d/
    cat > /etc/systemd/journald.conf.d/yc-common.conf << EOF
[Journal]
RateLimitInterval=0
RateLimitBurst=0
EOF
}

configure_repos() {
    echo "Managing repos"
    python3 /usr/bin/manage_apt_repos.py
}

set_network_config() {
    echo "Configure eth0"
    cat > /etc/network/interfaces.d/10_yc_base_cfg << EOF
auto eth0

iface eth0 inet6 manual
    pre-up /sbin/ip link set \$IFACE mtu 9000
    up /usr/bin/yc-inet6-cfg \$IFACE up
    up /sbin/ip route add default via fe80::1 dev eth0 metric 512 mtu 8940 advmss 8880
    down /usr/bin/yc-inet6-cfg \$IFACE down
EOF
}

disable_ipv6_privacy_extensions() {
    echo "Disable IPv6 Privacy Extensions (RFC 4941)"
    cat > /etc/sysctl.d/10-ipv6-privacy.conf << EOF
net.ipv6.conf.all.use_tempaddr = 0
net.ipv6.conf.default.use_tempaddr = 0
EOF
}

configure_vsock() {
    echo "Blacklist module vsock"
    cat > /etc/modprobe.d/blacklist-vmw_vsock_vmci_transport.conf << EOF
blacklist vmw_vsock_vmci_transport
EOF
}

configure_raid() {
    echo "Add restriction for NVME in raid"
    mkdir -p /etc/mdadm.conf.d
    echo 'DEVICE /dev/sd*[a-z]' > /etc/mdadm.conf.d/raid_restriction.conf
}

remove_unnecessary_network_scripts() {
    # CLOUD-37453
    echo "Remove eth-tso-off and intel-card-tun pre up network scripts"
    eth_tso_off_path="/etc/network/if-pre-up.d/eth-tso-off"
    rm -f $eth_tso_off_path
    intel_card_tun_path="/etc/network/if-pre-up.d/intel-card-tun"
    rm -f $intel_card_tun_path
}

check_hostname(){
  set +e
  node_name="$(hostname -f)"
  if [ "$?" -ne 0 ]
  then
    echo 'Node`s FQDN not set. Please, correct it and restart setup'
    echo 'May be Wall-E`s Check DNS helps you'
    exit 1
  fi
  set -e
}

get_current_infra_endpoints() {
  node_name="$(hostname -f)"
  env_file="/etc/profile.d/infra.sh"
  if [ $(echo "${node_name}" | grep -c "gpn") -eq 1 ]; then
    echo "${node_name} is a GPN host. Setting appropriate endpoints"
    INFRA_PROXY="https://infra-proxy.proxy.gpn.yandexcloud.net"
    DIST_URL="dist.proxy.gpn.yandexcloud.net"
    WALLE_URL="https://api.wall-e.proxy.gpn.yandexcloud.net"
  elif [ $(echo "${node_name}" | grep -c "private-testing") -eq 1 ]; then
    echo "${node_name} is a PRIVATE-TESTING host. Setting appropriate endpoints"
    INFRA_PROXY="https://infra-proxy.private-testing-proxy.cloud.yandex.net"
    DIST_URL="dist.private-testing-proxy.cloud.yandex.net"
    WALLE_URL="https://api.wall-e.private-testing-proxy.cloud.yandex.net"
  else
    echo "${node_name} is a usual host. Setting appropriate endpoints"
    INFRA_PROXY="https://infra-proxy.cloud.yandex.net"
    DIST_URL="dist.yandex.ru"
    WALLE_URL="https://api.wall-e.yandex-team.ru"
  fi
  export INFRA_PROXY=${INFRA_PROXY}
  export DIST_URL=${DIST_URL}
  export WALLE_URL=${WALLE_URL}

  if [ ! -f "${env_file}" ]; then
    touch ${env_file}
  fi

  for item in INFRA_PROXY DIST_URL WALLE_URL
  do
    if [ $(grep -c "${item}" "${env_file}") -eq 0 ]; then
      value=$(eval echo \${$item})
      echo "export ${item}=$value" >> ${env_file}
    fi
  done

}

case "$1" in
    configure)
check_hostname
get_current_infra_endpoints
# --strict: Exit with error if project not in /home/nulltime/ya/git/cloud/yc-setup/etc/profile.d/environment_data.yaml
# --output bash: output format for BASH evaluete, or for SOURCE command
$(python3 /usr/bin/env_options.py --strict --output bash)
gen_grub_configs
set_cpu_isolation
VENDOR=`dmidecode | grep -i 'vendor'|head -1|awk -F":" '{print $2}'`
if [ "${VENDOR}" != 'SeaBIOS' ]
then
  set_network_config
  disable_ipv6_privacy_extensions
  configure_vsock
  configure_raid
  remove_unnecessary_network_scripts
fi
set_default_shell
configure_journald
configure_repos


        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        ;;

    *)
        echo "postinst called with unknown argument '$1'" >&2
        exit 1
        ;;
esac

exit 0
