# global logger options
Logger {
    LogTo: STDERR
    Level: ${loglevel}
}

# options of http server which will be used to send sensors to solomon
HttpServer {
    BindAddress: "::"
    BindPort: 8004
    MaxConnections: 100
    OutputBufferSize: 256
    ThreadsCount: 4
    MaxQueueSize: 200
    Shards: [{
        Project: "${project}"
        Service: "${shard_service}"
        PreserveOriginal: false # нужно ли дополнительно передать оригинальный шард, как есть, после разбиения
        ShardKeyOverride {
            Project: "{{cloud_id}}"
            Cluster: "{{folder_id}}"
            Service: "${shard_service}"
        }
    }]
}

# memory storage options
Storage {
    # determines how much historical data is held in memory if a fetcher lags behind
    # measured in chunks which roughly represent the data produced by one
    # module in one call
    BufferSize: 2048
}

ConfigLoader {
    FileLoader {
        UpdateInterval: "10s"
        ConfigsFiles: [
            "${path}/solomon-agent-extra.conf"
        ]
    }
}

AuthProvider {
    ThreadPoolName: "Default"
    AuthMethods: [
        {
            Name: "iam_prod"
            IamConfig {
                ServiceAccountId: "${service_account_id}"
                KeyId: "${sa_key_id}"
                PublicKeyFile: "${sa_public_key_path}"
                PrivateKeyFile: "${sa_private_key_path}"
                Cluster: CLOUD_PROD
            }
        }
    ]
}

Registration {
    Provider: "${shard_service}"
    PullInterval: "15s"

    Endpoints {
	    Type: CLOUD_PROD
	    AuthMethod: "iam_prod"
    }
}

ManagementServer {
    BindAddress: "::"
    BindPort: 8081
}

Modules {
    # Enable module which allow to push data in Solomon specific format (determined
    # by Content-Type header):
    #  - JSON: application/json
    #  - SPACK: application/x-solomon-spack
    #
    HttpPush {
        Name: "PushModule"
        BindAddress: "::"
        BindPort: 8003
        ThreadCount: 4

        Handlers [{
              # mandatory labels
              Project: "${project}"
              Service: "${service}"
              Endpoint: "/proxy"
          },
          {
              # mandatory labels
              Project: "${project}"
              Service: "${shard_service}"
              Endpoint: "/cloud"
          }]
    }
}

Cluster: "${cluster}"
