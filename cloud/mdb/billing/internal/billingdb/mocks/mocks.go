// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/billing/internal/billingdb (interfaces: BillingDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	billingdb "a.yandex-team.ru/cloud/mdb/billing/internal/billingdb"
	gomock "github.com/golang/mock/gomock"
	hasql "golang.yandex/hasql"
)

// MockBillingDB is a mock of BillingDB interface.
type MockBillingDB struct {
	ctrl     *gomock.Controller
	recorder *MockBillingDBMockRecorder
}

// MockBillingDBMockRecorder is the mock recorder for MockBillingDB.
type MockBillingDBMockRecorder struct {
	mock *MockBillingDB
}

// NewMockBillingDB creates a new mock instance.
func NewMockBillingDB(ctrl *gomock.Controller) *MockBillingDB {
	mock := &MockBillingDB{ctrl: ctrl}
	mock.recorder = &MockBillingDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingDB) EXPECT() *MockBillingDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockBillingDB) Begin(arg0 context.Context, arg1 hasql.NodeStateCriteria) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockBillingDBMockRecorder) Begin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockBillingDB)(nil).Begin), arg0, arg1)
}

// Close mocks base method.
func (m *MockBillingDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBillingDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBillingDB)(nil).Close))
}

// Commit mocks base method.
func (m *MockBillingDB) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockBillingDBMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockBillingDB)(nil).Commit), arg0)
}

// CompleteBatch mocks base method.
func (m *MockBillingDB) CompleteBatch(arg0 context.Context, arg1 string, arg2, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteBatch indicates an expected call of CompleteBatch.
func (mr *MockBillingDBMockRecorder) CompleteBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteBatch", reflect.TypeOf((*MockBillingDB)(nil).CompleteBatch), arg0, arg1, arg2, arg3)
}

// DequeueBatch mocks base method.
func (m *MockBillingDB) DequeueBatch(arg0 context.Context, arg1 billingdb.BillType) (billingdb.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueBatch", arg0, arg1)
	ret0, _ := ret[0].(billingdb.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueBatch indicates an expected call of DequeueBatch.
func (mr *MockBillingDBMockRecorder) DequeueBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueBatch", reflect.TypeOf((*MockBillingDB)(nil).DequeueBatch), arg0, arg1)
}

// EnqueueMetrics mocks base method.
func (m *MockBillingDB) EnqueueMetrics(arg0 context.Context, arg1 billingdb.Metrics, arg2 billingdb.BillType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueMetrics", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueMetrics indicates an expected call of EnqueueMetrics.
func (mr *MockBillingDBMockRecorder) EnqueueMetrics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueMetrics", reflect.TypeOf((*MockBillingDB)(nil).EnqueueMetrics), arg0, arg1, arg2)
}

// IsReady mocks base method.
func (m *MockBillingDB) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockBillingDBMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockBillingDB)(nil).IsReady), arg0)
}

// PostponeBatch mocks base method.
func (m *MockBillingDB) PostponeBatch(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostponeBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostponeBatch indicates an expected call of PostponeBatch.
func (mr *MockBillingDBMockRecorder) PostponeBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostponeBatch", reflect.TypeOf((*MockBillingDB)(nil).PostponeBatch), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockBillingDB) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockBillingDBMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockBillingDB)(nil).Rollback), arg0)
}

// Tracks mocks base method.
func (m *MockBillingDB) Tracks(arg0 context.Context, arg1 billingdb.BillType) ([]billingdb.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tracks", arg0, arg1)
	ret0, _ := ret[0].([]billingdb.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tracks indicates an expected call of Tracks.
func (mr *MockBillingDBMockRecorder) Tracks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracks", reflect.TypeOf((*MockBillingDB)(nil).Tracks), arg0, arg1)
}

// TryGetLock mocks base method.
func (m *MockBillingDB) TryGetLock(arg0 context.Context, arg1 billingdb.BillType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryGetLock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryGetLock indicates an expected call of TryGetLock.
func (mr *MockBillingDBMockRecorder) TryGetLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryGetLock", reflect.TypeOf((*MockBillingDB)(nil).TryGetLock), arg0, arg1)
}

// UpdateClusterTrack mocks base method.
func (m *MockBillingDB) UpdateClusterTrack(arg0 context.Context, arg1 string, arg2 time.Time, arg3 billingdb.BillType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterTrack", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterTrack indicates an expected call of UpdateClusterTrack.
func (mr *MockBillingDBMockRecorder) UpdateClusterTrack(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterTrack", reflect.TypeOf((*MockBillingDB)(nil).UpdateClusterTrack), arg0, arg1, arg2, arg3)
}
