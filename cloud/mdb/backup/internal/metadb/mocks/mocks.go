// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/backup/internal/metadb (interfaces: MetaDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	metadb "a.yandex-team.ru/cloud/mdb/backup/internal/metadb"
	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	gomock "github.com/golang/mock/gomock"
	hasql "golang.yandex/hasql"
)

// MockMetaDB is a mock of MetaDB interface.
type MockMetaDB struct {
	ctrl     *gomock.Controller
	recorder *MockMetaDBMockRecorder
}

// MockMetaDBMockRecorder is the mock recorder for MockMetaDB.
type MockMetaDBMockRecorder struct {
	mock *MockMetaDB
}

// NewMockMetaDB creates a new mock instance.
func NewMockMetaDB(ctrl *gomock.Controller) *MockMetaDB {
	mock := &MockMetaDB{ctrl: ctrl}
	mock.recorder = &MockMetaDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaDB) EXPECT() *MockMetaDBMockRecorder {
	return m.recorder
}

// AddBackup mocks base method.
func (m *MockMetaDB) AddBackup(arg0 context.Context, arg1 metadb.CreateBackupArgs) (metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBackup", arg0, arg1)
	ret0, _ := ret[0].(metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBackup indicates an expected call of AddBackup.
func (mr *MockMetaDBMockRecorder) AddBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBackup", reflect.TypeOf((*MockMetaDB)(nil).AddBackup), arg0, arg1)
}

// BackupSchedule mocks base method.
func (m *MockMetaDB) BackupSchedule(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupSchedule", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupSchedule indicates an expected call of BackupSchedule.
func (mr *MockMetaDBMockRecorder) BackupSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupSchedule", reflect.TypeOf((*MockMetaDB)(nil).BackupSchedule), arg0, arg1)
}

// BackupServiceEnabled mocks base method.
func (m *MockMetaDB) BackupServiceEnabled(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupServiceEnabled", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupServiceEnabled indicates an expected call of BackupServiceEnabled.
func (mr *MockMetaDBMockRecorder) BackupServiceEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupServiceEnabled", reflect.TypeOf((*MockMetaDB)(nil).BackupServiceEnabled), arg0, arg1)
}

// Begin mocks base method.
func (m *MockMetaDB) Begin(arg0 context.Context, arg1 hasql.NodeStateCriteria) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockMetaDBMockRecorder) Begin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockMetaDB)(nil).Begin), arg0, arg1)
}

// Close mocks base method.
func (m *MockMetaDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetaDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetaDB)(nil).Close))
}

// Cluster mocks base method.
func (m *MockMetaDB) Cluster(arg0 context.Context, arg1 string) (metadb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0, arg1)
	ret0, _ := ret[0].(metadb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMetaDBMockRecorder) Cluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMetaDB)(nil).Cluster), arg0, arg1)
}

// ClusterBucket mocks base method.
func (m *MockMetaDB) ClusterBucket(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterBucket", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterBucket indicates an expected call of ClusterBucket.
func (mr *MockMetaDBMockRecorder) ClusterBucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterBucket", reflect.TypeOf((*MockMetaDB)(nil).ClusterBucket), arg0, arg1)
}

// ClusterStatusIsIn mocks base method.
func (m *MockMetaDB) ClusterStatusIsIn(arg0 context.Context, arg1 string, arg2 []metadb.ClusterStatus) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterStatusIsIn", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterStatusIsIn indicates an expected call of ClusterStatusIsIn.
func (mr *MockMetaDBMockRecorder) ClusterStatusIsIn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterStatusIsIn", reflect.TypeOf((*MockMetaDB)(nil).ClusterStatusIsIn), arg0, arg1, arg2)
}

// ClusterVersions mocks base method.
func (m *MockMetaDB) ClusterVersions(arg0 context.Context, arg1 string) (map[string]metadb.ComponentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterVersions", arg0, arg1)
	ret0, _ := ret[0].(map[string]metadb.ComponentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterVersions indicates an expected call of ClusterVersions.
func (mr *MockMetaDBMockRecorder) ClusterVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterVersions", reflect.TypeOf((*MockMetaDB)(nil).ClusterVersions), arg0, arg1)
}

// ClusterVersionsAtTS mocks base method.
func (m *MockMetaDB) ClusterVersionsAtTS(arg0 context.Context, arg1 string, arg2 time.Time) (map[string]metadb.ComponentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterVersionsAtTS", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]metadb.ComponentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterVersionsAtTS indicates an expected call of ClusterVersionsAtTS.
func (mr *MockMetaDBMockRecorder) ClusterVersionsAtTS(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterVersionsAtTS", reflect.TypeOf((*MockMetaDB)(nil).ClusterVersionsAtTS), arg0, arg1, arg2)
}

// Commit mocks base method.
func (m *MockMetaDB) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockMetaDBMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockMetaDB)(nil).Commit), arg0)
}

// CompleteBackupCreation mocks base method.
func (m *MockMetaDB) CompleteBackupCreation(arg0 context.Context, arg1 string, arg2 optional.Time, arg3 metadb.BackupMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteBackupCreation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteBackupCreation indicates an expected call of CompleteBackupCreation.
func (mr *MockMetaDBMockRecorder) CompleteBackupCreation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteBackupCreation", reflect.TypeOf((*MockMetaDB)(nil).CompleteBackupCreation), arg0, arg1, arg2, arg3)
}

// CompleteBackupCreationStart mocks base method.
func (m *MockMetaDB) CompleteBackupCreationStart(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteBackupCreationStart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteBackupCreationStart indicates an expected call of CompleteBackupCreationStart.
func (mr *MockMetaDBMockRecorder) CompleteBackupCreationStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteBackupCreationStart", reflect.TypeOf((*MockMetaDB)(nil).CompleteBackupCreationStart), arg0, arg1, arg2)
}

// CompleteBackupDeletion mocks base method.
func (m *MockMetaDB) CompleteBackupDeletion(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteBackupDeletion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteBackupDeletion indicates an expected call of CompleteBackupDeletion.
func (mr *MockMetaDBMockRecorder) CompleteBackupDeletion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteBackupDeletion", reflect.TypeOf((*MockMetaDB)(nil).CompleteBackupDeletion), arg0, arg1)
}

// CompleteBackupDeletionStart mocks base method.
func (m *MockMetaDB) CompleteBackupDeletionStart(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteBackupDeletionStart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteBackupDeletionStart indicates an expected call of CompleteBackupDeletionStart.
func (mr *MockMetaDBMockRecorder) CompleteBackupDeletionStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteBackupDeletionStart", reflect.TypeOf((*MockMetaDB)(nil).CompleteBackupDeletionStart), arg0, arg1, arg2)
}

// CreatingBackup mocks base method.
func (m *MockMetaDB) CreatingBackup(arg0 context.Context) (metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatingBackup", arg0)
	ret0, _ := ret[0].(metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatingBackup indicates an expected call of CreatingBackup.
func (mr *MockMetaDBMockRecorder) CreatingBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatingBackup", reflect.TypeOf((*MockMetaDB)(nil).CreatingBackup), arg0)
}

// DelayPendingBackupUntil mocks base method.
func (m *MockMetaDB) DelayPendingBackupUntil(arg0 context.Context, arg1 string, arg2 time.Time, arg3 metadb.Errors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelayPendingBackupUntil", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelayPendingBackupUntil indicates an expected call of DelayPendingBackupUntil.
func (mr *MockMetaDBMockRecorder) DelayPendingBackupUntil(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelayPendingBackupUntil", reflect.TypeOf((*MockMetaDB)(nil).DelayPendingBackupUntil), arg0, arg1, arg2, arg3)
}

// DeletingBackup mocks base method.
func (m *MockMetaDB) DeletingBackup(arg0 context.Context) (metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletingBackup", arg0)
	ret0, _ := ret[0].(metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletingBackup indicates an expected call of DeletingBackup.
func (mr *MockMetaDBMockRecorder) DeletingBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletingBackup", reflect.TypeOf((*MockMetaDB)(nil).DeletingBackup), arg0)
}

// FailBackupCreation mocks base method.
func (m *MockMetaDB) FailBackupCreation(arg0 context.Context, arg1 string, arg2 metadb.Errors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailBackupCreation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailBackupCreation indicates an expected call of FailBackupCreation.
func (mr *MockMetaDBMockRecorder) FailBackupCreation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailBackupCreation", reflect.TypeOf((*MockMetaDB)(nil).FailBackupCreation), arg0, arg1, arg2)
}

// FailBackupDeletion mocks base method.
func (m *MockMetaDB) FailBackupDeletion(arg0 context.Context, arg1 string, arg2 metadb.Errors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailBackupDeletion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailBackupDeletion indicates an expected call of FailBackupDeletion.
func (mr *MockMetaDBMockRecorder) FailBackupDeletion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailBackupDeletion", reflect.TypeOf((*MockMetaDB)(nil).FailBackupDeletion), arg0, arg1, arg2)
}

// GetBackupBlanks mocks base method.
func (m *MockMetaDB) GetBackupBlanks(arg0 context.Context, arg1 []metadb.ClusterType, arg2, arg3 time.Duration) ([]metadb.BackupBlank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupBlanks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]metadb.BackupBlank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupBlanks indicates an expected call of GetBackupBlanks.
func (mr *MockMetaDBMockRecorder) GetBackupBlanks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupBlanks", reflect.TypeOf((*MockMetaDB)(nil).GetBackupBlanks), arg0, arg1, arg2, arg3)
}

// GetClustersForImport mocks base method.
func (m *MockMetaDB) GetClustersForImport(arg0 context.Context, arg1 int, arg2 []metadb.ClusterType, arg3 time.Duration) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClustersForImport", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClustersForImport indicates an expected call of GetClustersForImport.
func (mr *MockMetaDBMockRecorder) GetClustersForImport(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClustersForImport", reflect.TypeOf((*MockMetaDB)(nil).GetClustersForImport), arg0, arg1, arg2, arg3)
}

// HostsPillarByPath mocks base method.
func (m *MockMetaDB) HostsPillarByPath(arg0 context.Context, arg1, arg2 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostsPillarByPath", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostsPillarByPath indicates an expected call of HostsPillarByPath.
func (mr *MockMetaDBMockRecorder) HostsPillarByPath(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostsPillarByPath", reflect.TypeOf((*MockMetaDB)(nil).HostsPillarByPath), arg0, arg1, arg2)
}

// ImportBackup mocks base method.
func (m *MockMetaDB) ImportBackup(arg0 context.Context, arg1 metadb.ImportBackupArgs) (metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportBackup", arg0, arg1)
	ret0, _ := ret[0].(metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportBackup indicates an expected call of ImportBackup.
func (mr *MockMetaDBMockRecorder) ImportBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBackup", reflect.TypeOf((*MockMetaDB)(nil).ImportBackup), arg0, arg1)
}

// IsReady mocks base method.
func (m *MockMetaDB) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockMetaDBMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockMetaDB)(nil).IsReady), arg0)
}

// ListBackups mocks base method.
func (m *MockMetaDB) ListBackups(arg0 context.Context, arg1 string, arg2, arg3 optional.String, arg4 []metadb.BackupStatus, arg5 []metadb.BackupInitiator) ([]metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockMetaDBMockRecorder) ListBackups(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockMetaDB)(nil).ListBackups), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListHosts mocks base method.
func (m *MockMetaDB) ListHosts(arg0 context.Context, arg1 string, arg2, arg3 optional.String) ([]metadb.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]metadb.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHosts indicates an expected call of ListHosts.
func (mr *MockMetaDBMockRecorder) ListHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockMetaDB)(nil).ListHosts), arg0, arg1, arg2, arg3)
}

// ListParentBackups mocks base method.
func (m *MockMetaDB) ListParentBackups(arg0 context.Context, arg1 string) ([]metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParentBackups", arg0, arg1)
	ret0, _ := ret[0].([]metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParentBackups indicates an expected call of ListParentBackups.
func (mr *MockMetaDBMockRecorder) ListParentBackups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParentBackups", reflect.TypeOf((*MockMetaDB)(nil).ListParentBackups), arg0, arg1)
}

// ListShards mocks base method.
func (m *MockMetaDB) ListShards(arg0 context.Context, arg1 string) ([]metadb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShards", arg0, arg1)
	ret0, _ := ret[0].([]metadb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShards indicates an expected call of ListShards.
func (mr *MockMetaDBMockRecorder) ListShards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockMetaDB)(nil).ListShards), arg0, arg1)
}

// ListSubClusters mocks base method.
func (m *MockMetaDB) ListSubClusters(arg0 context.Context, arg1 string) ([]metadb.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubClusters", arg0, arg1)
	ret0, _ := ret[0].([]metadb.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubClusters indicates an expected call of ListSubClusters.
func (mr *MockMetaDBMockRecorder) ListSubClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubClusters", reflect.TypeOf((*MockMetaDB)(nil).ListSubClusters), arg0, arg1)
}

// LockBackups mocks base method.
func (m *MockMetaDB) LockBackups(arg0 context.Context, arg1 string, arg2, arg3 optional.String, arg4 []metadb.BackupStatus, arg5 []metadb.BackupInitiator, arg6 []string) ([]metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockBackups", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockBackups indicates an expected call of LockBackups.
func (mr *MockMetaDBMockRecorder) LockBackups(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockBackups", reflect.TypeOf((*MockMetaDB)(nil).LockBackups), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ObsoleteAutomatedBackups mocks base method.
func (m *MockMetaDB) ObsoleteAutomatedBackups(arg0 context.Context, arg1 []metadb.ClusterType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObsoleteAutomatedBackups", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsoleteAutomatedBackups indicates an expected call of ObsoleteAutomatedBackups.
func (mr *MockMetaDBMockRecorder) ObsoleteAutomatedBackups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsoleteAutomatedBackups", reflect.TypeOf((*MockMetaDB)(nil).ObsoleteAutomatedBackups), arg0, arg1)
}

// ObsoleteBackup mocks base method.
func (m *MockMetaDB) ObsoleteBackup(arg0 context.Context) (metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObsoleteBackup", arg0)
	ret0, _ := ret[0].(metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsoleteBackup indicates an expected call of ObsoleteBackup.
func (mr *MockMetaDBMockRecorder) ObsoleteBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsoleteBackup", reflect.TypeOf((*MockMetaDB)(nil).ObsoleteBackup), arg0)
}

// ObsoleteFailedBackups mocks base method.
func (m *MockMetaDB) ObsoleteFailedBackups(arg0 context.Context, arg1 []metadb.ClusterType, arg2 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObsoleteFailedBackups", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsoleteFailedBackups indicates an expected call of ObsoleteFailedBackups.
func (mr *MockMetaDBMockRecorder) ObsoleteFailedBackups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsoleteFailedBackups", reflect.TypeOf((*MockMetaDB)(nil).ObsoleteFailedBackups), arg0, arg1, arg2)
}

// PlannedBackup mocks base method.
func (m *MockMetaDB) PlannedBackup(arg0 context.Context) (metadb.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlannedBackup", arg0)
	ret0, _ := ret[0].(metadb.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlannedBackup indicates an expected call of PlannedBackup.
func (mr *MockMetaDBMockRecorder) PlannedBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlannedBackup", reflect.TypeOf((*MockMetaDB)(nil).PlannedBackup), arg0)
}

// PurgeDeletedBackups mocks base method.
func (m *MockMetaDB) PurgeDeletedBackups(arg0 context.Context, arg1 []metadb.ClusterType, arg2 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeDeletedBackups", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeDeletedBackups indicates an expected call of PurgeDeletedBackups.
func (mr *MockMetaDBMockRecorder) PurgeDeletedBackups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeDeletedBackups", reflect.TypeOf((*MockMetaDB)(nil).PurgeDeletedBackups), arg0, arg1, arg2)
}

// Rollback mocks base method.
func (m *MockMetaDB) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockMetaDBMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockMetaDB)(nil).Rollback), arg0)
}

// SequentialObsoleteAutomatedBackups mocks base method.
func (m *MockMetaDB) SequentialObsoleteAutomatedBackups(arg0 context.Context, arg1 []metadb.ClusterType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SequentialObsoleteAutomatedBackups", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SequentialObsoleteAutomatedBackups indicates an expected call of SequentialObsoleteAutomatedBackups.
func (mr *MockMetaDBMockRecorder) SequentialObsoleteAutomatedBackups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequentialObsoleteAutomatedBackups", reflect.TypeOf((*MockMetaDB)(nil).SequentialObsoleteAutomatedBackups), arg0, arg1)
}

// SequentialObsoleteFailedBackups mocks base method.
func (m *MockMetaDB) SequentialObsoleteFailedBackups(arg0 context.Context, arg1 []metadb.ClusterType, arg2 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SequentialObsoleteFailedBackups", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SequentialObsoleteFailedBackups indicates an expected call of SequentialObsoleteFailedBackups.
func (mr *MockMetaDBMockRecorder) SequentialObsoleteFailedBackups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequentialObsoleteFailedBackups", reflect.TypeOf((*MockMetaDB)(nil).SequentialObsoleteFailedBackups), arg0, arg1, arg2)
}

// SetBackupServiceEnabled mocks base method.
func (m *MockMetaDB) SetBackupServiceEnabled(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBackupServiceEnabled", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBackupServiceEnabled indicates an expected call of SetBackupServiceEnabled.
func (mr *MockMetaDBMockRecorder) SetBackupServiceEnabled(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackupServiceEnabled", reflect.TypeOf((*MockMetaDB)(nil).SetBackupServiceEnabled), arg0, arg1, arg2)
}

// SetBackupSize mocks base method.
func (m *MockMetaDB) SetBackupSize(arg0 context.Context, arg1 string, arg2, arg3 int64, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBackupSize", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBackupSize indicates an expected call of SetBackupSize.
func (mr *MockMetaDBMockRecorder) SetBackupSize(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackupSize", reflect.TypeOf((*MockMetaDB)(nil).SetBackupSize), arg0, arg1, arg2, arg3, arg4)
}

// UpdateImportHistory mocks base method.
func (m *MockMetaDB) UpdateImportHistory(arg0 context.Context, arg1 string, arg2 error, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImportHistory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImportHistory indicates an expected call of UpdateImportHistory.
func (mr *MockMetaDBMockRecorder) UpdateImportHistory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImportHistory", reflect.TypeOf((*MockMetaDB)(nil).UpdateImportHistory), arg0, arg1, arg2, arg3)
}
