// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/backup/worker/internal/executer (interfaces: Executer)

// Package mocks is a generated GoMock package.
package mocks

import (
	executer "a.yandex-team.ru/cloud/mdb/backup/worker/internal/executer"
	models "a.yandex-team.ru/cloud/mdb/backup/worker/internal/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecuter is a mock of Executer interface.
type MockExecuter struct {
	ctrl     *gomock.Controller
	recorder *MockExecuterMockRecorder
}

// MockExecuterMockRecorder is the mock recorder for MockExecuter.
type MockExecuterMockRecorder struct {
	mock *MockExecuter
}

// NewMockExecuter creates a new mock instance.
func NewMockExecuter(ctrl *gomock.Controller) *MockExecuter {
	mock := &MockExecuter{ctrl: ctrl}
	mock.recorder = &MockExecuterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecuter) EXPECT() *MockExecuterMockRecorder {
	return m.recorder
}

// CompleteCreating mocks base method.
func (m *MockExecuter) CompleteCreating(arg0 context.Context, arg1 models.BackupJob) []executer.Resulter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteCreating", arg0, arg1)
	ret0, _ := ret[0].([]executer.Resulter)
	return ret0
}

// CompleteCreating indicates an expected call of CompleteCreating.
func (mr *MockExecuterMockRecorder) CompleteCreating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteCreating", reflect.TypeOf((*MockExecuter)(nil).CompleteCreating), arg0, arg1)
}

// CompleteDeleting mocks base method.
func (m *MockExecuter) CompleteDeleting(arg0 context.Context, arg1 models.BackupJob) []executer.Resulter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteDeleting", arg0, arg1)
	ret0, _ := ret[0].([]executer.Resulter)
	return ret0
}

// CompleteDeleting indicates an expected call of CompleteDeleting.
func (mr *MockExecuterMockRecorder) CompleteDeleting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteDeleting", reflect.TypeOf((*MockExecuter)(nil).CompleteDeleting), arg0, arg1)
}

// StartCreation mocks base method.
func (m *MockExecuter) StartCreation(arg0 context.Context, arg1 models.BackupJob) []executer.Resulter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCreation", arg0, arg1)
	ret0, _ := ret[0].([]executer.Resulter)
	return ret0
}

// StartCreation indicates an expected call of StartCreation.
func (mr *MockExecuterMockRecorder) StartCreation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCreation", reflect.TypeOf((*MockExecuter)(nil).StartCreation), arg0, arg1)
}

// StartDeletion mocks base method.
func (m *MockExecuter) StartDeletion(arg0 context.Context, arg1 models.BackupJob) []executer.Resulter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeletion", arg0, arg1)
	ret0, _ := ret[0].([]executer.Resulter)
	return ret0
}

// StartDeletion indicates an expected call of StartDeletion.
func (mr *MockExecuterMockRecorder) StartDeletion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeletion", reflect.TypeOf((*MockExecuter)(nil).StartDeletion), arg0, arg1)
}
