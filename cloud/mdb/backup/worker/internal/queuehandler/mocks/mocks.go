// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/backup/worker/internal/queuehandler (interfaces: QueueHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "a.yandex-team.ru/cloud/mdb/backup/worker/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQueueHandler is a mock of QueueHandler interface.
type MockQueueHandler struct {
	ctrl     *gomock.Controller
	recorder *MockQueueHandlerMockRecorder
}

// MockQueueHandlerMockRecorder is the mock recorder for MockQueueHandler.
type MockQueueHandlerMockRecorder struct {
	mock *MockQueueHandler
}

// NewMockQueueHandler creates a new mock instance.
func NewMockQueueHandler(ctrl *gomock.Controller) *MockQueueHandler {
	mock := &MockQueueHandler{ctrl: ctrl}
	mock.recorder = &MockQueueHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueHandler) EXPECT() *MockQueueHandlerMockRecorder {
	return m.recorder
}

// HandleQueue mocks base method.
func (m *MockQueueHandler) HandleQueue(arg0 chan models.BackupJob) chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleQueue", arg0)
	ret0, _ := ret[0].(chan error)
	return ret0
}

// HandleQueue indicates an expected call of HandleQueue.
func (mr *MockQueueHandlerMockRecorder) HandleQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleQueue", reflect.TypeOf((*MockQueueHandler)(nil).HandleQueue), arg0)
}
