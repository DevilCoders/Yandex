// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-secrets/internal/secretsdb (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	secretsdb "a.yandex-team.ru/cloud/mdb/mdb-secrets/internal/secretsdb"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CertificateURL mocks base method.
func (m *MockService) CertificateURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertificateURL indicates an expected call of CertificateURL.
func (mr *MockServiceMockRecorder) CertificateURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateURL", reflect.TypeOf((*MockService)(nil).CertificateURL), arg0, arg1)
}

// DeleteCert mocks base method.
func (m *MockService) DeleteCert(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCert indicates an expected call of DeleteCert.
func (mr *MockServiceMockRecorder) DeleteCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCert", reflect.TypeOf((*MockService)(nil).DeleteCert), arg0, arg1)
}

// DeleteGpg mocks base method.
func (m *MockService) DeleteGpg(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGpg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGpg indicates an expected call of DeleteGpg.
func (mr *MockServiceMockRecorder) DeleteGpg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGpg", reflect.TypeOf((*MockService)(nil).DeleteGpg), arg0, arg1)
}

// GetCert mocks base method.
func (m *MockService) GetCert(arg0 context.Context, arg1 string) (*secretsdb.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCert", arg0, arg1)
	ret0, _ := ret[0].(*secretsdb.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCert indicates an expected call of GetCert.
func (mr *MockServiceMockRecorder) GetCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCert", reflect.TypeOf((*MockService)(nil).GetCert), arg0, arg1)
}

// GetGpg mocks base method.
func (m *MockService) GetGpg(arg0 context.Context, arg1 string) (*secretsdb.EncryptedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpg", arg0, arg1)
	ret0, _ := ret[0].(*secretsdb.EncryptedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGpg indicates an expected call of GetGpg.
func (mr *MockServiceMockRecorder) GetGpg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpg", reflect.TypeOf((*MockService)(nil).GetGpg), arg0, arg1)
}

// InsertDummyCert mocks base method.
func (m *MockService) InsertDummyCert(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDummyCert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDummyCert indicates an expected call of InsertDummyCert.
func (mr *MockServiceMockRecorder) InsertDummyCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDummyCert", reflect.TypeOf((*MockService)(nil).InsertDummyCert), arg0, arg1)
}

// InsertNewCert mocks base method.
func (m *MockService) InsertNewCert(arg0 context.Context, arg1, arg2 string, arg3 []string, arg4 secretsdb.CertUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewCert", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewCert indicates an expected call of InsertNewCert.
func (mr *MockServiceMockRecorder) InsertNewCert(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewCert", reflect.TypeOf((*MockService)(nil).InsertNewCert), arg0, arg1, arg2, arg3, arg4)
}

// IsReady mocks base method.
func (m *MockService) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockServiceMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockService)(nil).IsReady), arg0)
}

// PutGpg mocks base method.
func (m *MockService) PutGpg(arg0 context.Context, arg1, arg2 string) (*secretsdb.EncryptedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGpg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*secretsdb.EncryptedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGpg indicates an expected call of PutGpg.
func (mr *MockServiceMockRecorder) PutGpg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGpg", reflect.TypeOf((*MockService)(nil).PutGpg), arg0, arg1, arg2)
}

// RemoveCertificateURL mocks base method.
func (m *MockService) RemoveCertificateURL(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCertificateURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCertificateURL indicates an expected call of RemoveCertificateURL.
func (mr *MockServiceMockRecorder) RemoveCertificateURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCertificateURL", reflect.TypeOf((*MockService)(nil).RemoveCertificateURL), arg0, arg1)
}

// SetCertificateURL mocks base method.
func (m *MockService) SetCertificateURL(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCertificateURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCertificateURL indicates an expected call of SetCertificateURL.
func (mr *MockServiceMockRecorder) SetCertificateURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCertificateURL", reflect.TypeOf((*MockService)(nil).SetCertificateURL), arg0, arg1, arg2)
}

// UpdateCert mocks base method.
func (m *MockService) UpdateCert(arg0 context.Context, arg1, arg2 string, arg3 func(context.Context) (*secretsdb.CertUpdate, error), arg4 func(*secretsdb.Cert) bool) (*secretsdb.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCert", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*secretsdb.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCert indicates an expected call of UpdateCert.
func (mr *MockServiceMockRecorder) UpdateCert(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCert", reflect.TypeOf((*MockService)(nil).UpdateCert), arg0, arg1, arg2, arg3, arg4)
}
