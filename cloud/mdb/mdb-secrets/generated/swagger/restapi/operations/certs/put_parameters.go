// Code generated by go-swagger; DO NOT EDIT.

package certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPutParams creates a new PutParams object
// with the default values initialized.
func NewPutParams() PutParams {

	var (
		// initialize parameters with default values

		forceDefault = bool(false)
	)

	return PutParams{
		Force: &forceDefault,
	}
}

// PutParams contains all the bound params for the put operation
// typically these are obtained from a http.Request
//
// swagger:parameters Put
type PutParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.
	  In: header
	*/
	Authorization *string
	/*Unique request ID (must be generated for each separate request, even retries)
	  In: header
	*/
	XRequestID *string
	/*Target alt names
	  Min Items: 0
	  In: query
	*/
	AltNames []string
	/*Certificate authority name. Ex. InternalCA
	  Required: true
	  In: query
	*/
	Ca string
	/*Update Certificates without check exists
	  In: query
	  Default: false
	*/
	Force *bool
	/*Target hostname
	  Required: true
	  In: query
	*/
	Hostname string
	/*Certificate type. Ex. host
	  Required: true
	  In: query
	*/
	Type string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutParams() beforehand.
func (o *PutParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-Id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qAltNames, qhkAltNames, _ := qs.GetOK("alt_names")
	if err := o.bindAltNames(qAltNames, qhkAltNames, route.Formats); err != nil {
		res = append(res, err)
	}

	qCa, qhkCa, _ := qs.GetOK("ca")
	if err := o.bindCa(qCa, qhkCa, route.Formats); err != nil {
		res = append(res, err)
	}

	qForce, qhkForce, _ := qs.GetOK("force")
	if err := o.bindForce(qForce, qhkForce, route.Formats); err != nil {
		res = append(res, err)
	}

	qHostname, qhkHostname, _ := qs.GetOK("hostname")
	if err := o.bindHostname(qHostname, qhkHostname, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *PutParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Authorization = &raw

	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *PutParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.XRequestID = &raw

	return nil
}

// bindAltNames binds and validates array parameter AltNames from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *PutParams) bindAltNames(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvAltNames string
	if len(rawData) > 0 {
		qvAltNames = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	altNamesIC := swag.SplitByFormat(qvAltNames, "")
	if len(altNamesIC) == 0 {
		return nil
	}

	var altNamesIR []string
	for _, altNamesIV := range altNamesIC {
		altNamesI := altNamesIV

		altNamesIR = append(altNamesIR, altNamesI)
	}

	o.AltNames = altNamesIR
	if err := o.validateAltNames(formats); err != nil {
		return err
	}

	return nil
}

// validateAltNames carries on validations for parameter AltNames
func (o *PutParams) validateAltNames(formats strfmt.Registry) error {

	altNamesSize := int64(len(o.AltNames))

	// minItems: 0
	if err := validate.MinItems("alt_names", "query", altNamesSize, 0); err != nil {
		return err
	}
	return nil
}

// bindCa binds and validates parameter Ca from query.
func (o *PutParams) bindCa(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ca", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("ca", "query", raw); err != nil {
		return err
	}
	o.Ca = raw

	return nil
}

// bindForce binds and validates parameter Force from query.
func (o *PutParams) bindForce(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPutParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("force", "query", "bool", raw)
	}
	o.Force = &value

	return nil
}

// bindHostname binds and validates parameter Hostname from query.
func (o *PutParams) bindHostname(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("hostname", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("hostname", "query", raw); err != nil {
		return err
	}
	o.Hostname = raw

	return nil
}

// bindType binds and validates parameter Type from query.
func (o *PutParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("type", "query", raw); err != nil {
		return err
	}
	o.Type = raw

	return nil
}
