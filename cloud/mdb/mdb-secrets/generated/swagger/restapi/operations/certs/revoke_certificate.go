// Code generated by go-swagger; DO NOT EDIT.

package certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RevokeCertificateHandlerFunc turns a function with the right signature into a revoke certificate handler
type RevokeCertificateHandlerFunc func(RevokeCertificateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RevokeCertificateHandlerFunc) Handle(params RevokeCertificateParams) middleware.Responder {
	return fn(params)
}

// RevokeCertificateHandler interface for that can handle valid revoke certificate params
type RevokeCertificateHandler interface {
	Handle(RevokeCertificateParams) middleware.Responder
}

// NewRevokeCertificate creates a new http.Handler for the revoke certificate operation
func NewRevokeCertificate(ctx *middleware.Context, handler RevokeCertificateHandler) *RevokeCertificate {
	return &RevokeCertificate{Context: ctx, Handler: handler}
}

/* RevokeCertificate swagger:route DELETE /v1/cert certs revokeCertificate

Revoke certificate by hostname and delete from mdb-secrets

*/
type RevokeCertificate struct {
	Context *middleware.Context
	Handler RevokeCertificateHandler
}

func (o *RevokeCertificate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRevokeCertificateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RevokeCertificateOKBody Use for an empty response
//
// swagger:model RevokeCertificateOKBody
type RevokeCertificateOKBody struct {

	// message for user
	Message string `json:"message,omitempty"`
}

// Validate validates this revoke certificate o k body
func (o *RevokeCertificateOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this revoke certificate o k body based on context it is used
func (o *RevokeCertificateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RevokeCertificateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RevokeCertificateOKBody) UnmarshalBinary(b []byte) error {
	var res RevokeCertificateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
