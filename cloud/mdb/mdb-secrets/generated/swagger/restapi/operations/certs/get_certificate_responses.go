// Code generated by go-swagger; DO NOT EDIT.

package certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"a.yandex-team.ru/cloud/mdb/mdb-secrets/generated/swagger/models"
)

// GetCertificateOKCode is the HTTP code returned for type GetCertificateOK
const GetCertificateOKCode int = 200

/*GetCertificateOK Certificate for host

swagger:response getCertificateOK
*/
type GetCertificateOK struct {

	/*
	  In: Body
	*/
	Payload *models.CertResponse `json:"body,omitempty"`
}

// NewGetCertificateOK creates GetCertificateOK with default headers values
func NewGetCertificateOK() *GetCertificateOK {

	return &GetCertificateOK{}
}

// WithPayload adds the payload to the get certificate o k response
func (o *GetCertificateOK) WithPayload(payload *models.CertResponse) *GetCertificateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get certificate o k response
func (o *GetCertificateOK) SetPayload(payload *models.CertResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCertificateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCertificateUnauthorizedCode is the HTTP code returned for type GetCertificateUnauthorized
const GetCertificateUnauthorizedCode int = 401

/*GetCertificateUnauthorized Unauthorized

swagger:response getCertificateUnauthorized
*/
type GetCertificateUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCertificateUnauthorized creates GetCertificateUnauthorized with default headers values
func NewGetCertificateUnauthorized() *GetCertificateUnauthorized {

	return &GetCertificateUnauthorized{}
}

// WithPayload adds the payload to the get certificate unauthorized response
func (o *GetCertificateUnauthorized) WithPayload(payload *models.Error) *GetCertificateUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get certificate unauthorized response
func (o *GetCertificateUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCertificateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCertificateForbiddenCode is the HTTP code returned for type GetCertificateForbidden
const GetCertificateForbiddenCode int = 403

/*GetCertificateForbidden Forbidden

swagger:response getCertificateForbidden
*/
type GetCertificateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCertificateForbidden creates GetCertificateForbidden with default headers values
func NewGetCertificateForbidden() *GetCertificateForbidden {

	return &GetCertificateForbidden{}
}

// WithPayload adds the payload to the get certificate forbidden response
func (o *GetCertificateForbidden) WithPayload(payload *models.Error) *GetCertificateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get certificate forbidden response
func (o *GetCertificateForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCertificateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCertificateNotFoundCode is the HTTP code returned for type GetCertificateNotFound
const GetCertificateNotFoundCode int = 404

/*GetCertificateNotFound Not found

swagger:response getCertificateNotFound
*/
type GetCertificateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCertificateNotFound creates GetCertificateNotFound with default headers values
func NewGetCertificateNotFound() *GetCertificateNotFound {

	return &GetCertificateNotFound{}
}

// WithPayload adds the payload to the get certificate not found response
func (o *GetCertificateNotFound) WithPayload(payload *models.Error) *GetCertificateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get certificate not found response
func (o *GetCertificateNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCertificateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCertificateInternalServerErrorCode is the HTTP code returned for type GetCertificateInternalServerError
const GetCertificateInternalServerErrorCode int = 500

/*GetCertificateInternalServerError Internal server error

swagger:response getCertificateInternalServerError
*/
type GetCertificateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCertificateInternalServerError creates GetCertificateInternalServerError with default headers values
func NewGetCertificateInternalServerError() *GetCertificateInternalServerError {

	return &GetCertificateInternalServerError{}
}

// WithPayload adds the payload to the get certificate internal server error response
func (o *GetCertificateInternalServerError) WithPayload(payload *models.Error) *GetCertificateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get certificate internal server error response
func (o *GetCertificateInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCertificateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCertificateServiceUnavailableCode is the HTTP code returned for type GetCertificateServiceUnavailable
const GetCertificateServiceUnavailableCode int = 503

/*GetCertificateServiceUnavailable Service unavailable (dependency down)

swagger:response getCertificateServiceUnavailable
*/
type GetCertificateServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCertificateServiceUnavailable creates GetCertificateServiceUnavailable with default headers values
func NewGetCertificateServiceUnavailable() *GetCertificateServiceUnavailable {

	return &GetCertificateServiceUnavailable{}
}

// WithPayload adds the payload to the get certificate service unavailable response
func (o *GetCertificateServiceUnavailable) WithPayload(payload *models.Error) *GetCertificateServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get certificate service unavailable response
func (o *GetCertificateServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCertificateServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
