// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for working with secrets.",
    "title": "MDB Secrets",
    "contact": {
      "email": "mdb@yandex-team.ru"
    },
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/v1/cert": {
      "get": {
        "tags": [
          "certs"
        ],
        "summary": "Retrieves host certificate",
        "operationId": "GetCertificate",
        "parameters": [
          {
            "$ref": "#/parameters/RequestIdHeader"
          },
          {
            "$ref": "#/parameters/Hostname"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate for host",
            "schema": {
              "$ref": "#/definitions/CertResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable (dependency down)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "certs"
        ],
        "summary": "Retrieves or generates host certificate",
        "operationId": "Put",
        "parameters": [
          {
            "$ref": "#/parameters/RequestIdHeader"
          },
          {
            "$ref": "#/parameters/Hostname"
          },
          {
            "$ref": "#/parameters/Altnames"
          },
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/CertificateAuthority"
          },
          {
            "$ref": "#/parameters/CertificateType"
          },
          {
            "$ref": "#/parameters/Force"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate for host",
            "schema": {
              "$ref": "#/definitions/CertResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable (dependency down)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "certs"
        ],
        "summary": "Revoke certificate by hostname and delete from mdb-secrets",
        "operationId": "RevokeCertificate",
        "parameters": [
          {
            "$ref": "#/parameters/RequestIdHeader"
          },
          {
            "$ref": "#/parameters/Hostname"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/v1/gpg": {
      "put": {
        "tags": [
          "gpg"
        ],
        "summary": "Retrieves or generates gpg key",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "Key for cluster",
            "schema": {
              "$ref": "#/definitions/GpgKeyResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable (dependency down)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "gpg"
        ],
        "summary": "Delete gpg key for cluster",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "Gpg deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable (dependency down)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/ClusterId"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/ping": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Reports service status",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "Service is alive and well"
          },
          "503": {
            "description": "Service unavailable (database or other dependency is offline)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CertResponse": {
      "description": "Certificate with encrypted armored private key",
      "type": "object",
      "properties": {
        "cert": {
          "type": "string"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        },
        "key": {
          "$ref": "#/definitions/EncryptedMessage"
        }
      }
    },
    "EncryptedMessage": {
      "type": "object",
      "properties": {
        "data": {
          "description": "encrypted data encoded in url-safe base64",
          "type": "string"
        },
        "version": {
          "description": "encryption version",
          "type": "integer",
          "example": 1
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        }
      }
    },
    "GpgKeyResponse": {
      "description": "Encrypted armored private key",
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/EncryptedMessage"
        }
      }
    }
  },
  "parameters": {
    "Altnames": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Target alt names",
      "name": "alt_names",
      "in": "query"
    },
    "Authorization": {
      "type": "string",
      "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
      "name": "Authorization",
      "in": "header"
    },
    "CertificateAuthority": {
      "type": "string",
      "description": "Certificate authority name. Ex. InternalCA",
      "name": "ca",
      "in": "query",
      "required": true
    },
    "CertificateType": {
      "type": "string",
      "description": "Certificate type. Ex. host",
      "name": "type",
      "in": "query",
      "required": true
    },
    "ClusterId": {
      "type": "string",
      "description": "ClusterId",
      "name": "cid",
      "in": "query",
      "required": true
    },
    "Force": {
      "type": "boolean",
      "default": false,
      "description": "Update Certificates without check exists",
      "name": "force",
      "in": "query"
    },
    "Hostname": {
      "type": "string",
      "description": "Target hostname",
      "name": "hostname",
      "in": "query",
      "required": true
    },
    "RequestIdHeader": {
      "type": "string",
      "description": "Unique request ID (must be generated for each separate request, even retries)",
      "name": "X-Request-Id",
      "in": "header"
    }
  },
  "responses": {
    "Error": {
      "description": "Base Error Response",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "OK": {
      "description": "Base OK Response",
      "schema": {
        "description": "Use for an empty response",
        "type": "object",
        "properties": {
          "message": {
            "description": "message for user",
            "type": "string"
          }
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for working with secrets.",
    "title": "MDB Secrets",
    "contact": {
      "email": "mdb@yandex-team.ru"
    },
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/v1/cert": {
      "get": {
        "tags": [
          "certs"
        ],
        "summary": "Retrieves host certificate",
        "operationId": "GetCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID (must be generated for each separate request, even retries)",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Target hostname",
            "name": "hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
            "name": "Authorization",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate for host",
            "schema": {
              "$ref": "#/definitions/CertResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable (dependency down)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "certs"
        ],
        "summary": "Retrieves or generates host certificate",
        "operationId": "Put",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID (must be generated for each separate request, even retries)",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Target hostname",
            "name": "hostname",
            "in": "query",
            "required": true
          },
          {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Target alt names",
            "name": "alt_names",
            "in": "query"
          },
          {
            "type": "string",
            "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Certificate authority name. Ex. InternalCA",
            "name": "ca",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Certificate type. Ex. host",
            "name": "type",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Update Certificates without check exists",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate for host",
            "schema": {
              "$ref": "#/definitions/CertResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable (dependency down)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "certs"
        ],
        "summary": "Revoke certificate by hostname and delete from mdb-secrets",
        "operationId": "RevokeCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID (must be generated for each separate request, even retries)",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Target hostname",
            "name": "hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
            "name": "Authorization",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Base OK Response",
            "schema": {
              "description": "Use for an empty response",
              "type": "object",
              "properties": {
                "message": {
                  "description": "message for user",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Base Error Response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/gpg": {
      "put": {
        "tags": [
          "gpg"
        ],
        "summary": "Retrieves or generates gpg key",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "Key for cluster",
            "schema": {
              "$ref": "#/definitions/GpgKeyResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable (dependency down)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "gpg"
        ],
        "summary": "Delete gpg key for cluster",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "Gpg deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable (dependency down)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "ClusterId",
          "name": "cid",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/ping": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Reports service status",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "Service is alive and well"
          },
          "503": {
            "description": "Service unavailable (database or other dependency is offline)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CertResponse": {
      "description": "Certificate with encrypted armored private key",
      "type": "object",
      "properties": {
        "cert": {
          "type": "string"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        },
        "key": {
          "$ref": "#/definitions/EncryptedMessage"
        }
      }
    },
    "EncryptedMessage": {
      "type": "object",
      "properties": {
        "data": {
          "description": "encrypted data encoded in url-safe base64",
          "type": "string"
        },
        "version": {
          "description": "encryption version",
          "type": "integer",
          "example": 1
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        }
      }
    },
    "GpgKeyResponse": {
      "description": "Encrypted armored private key",
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/EncryptedMessage"
        }
      }
    }
  },
  "parameters": {
    "Altnames": {
      "minItems": 0,
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Target alt names",
      "name": "alt_names",
      "in": "query"
    },
    "Authorization": {
      "type": "string",
      "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
      "name": "Authorization",
      "in": "header"
    },
    "CertificateAuthority": {
      "type": "string",
      "description": "Certificate authority name. Ex. InternalCA",
      "name": "ca",
      "in": "query",
      "required": true
    },
    "CertificateType": {
      "type": "string",
      "description": "Certificate type. Ex. host",
      "name": "type",
      "in": "query",
      "required": true
    },
    "ClusterId": {
      "type": "string",
      "description": "ClusterId",
      "name": "cid",
      "in": "query",
      "required": true
    },
    "Force": {
      "type": "boolean",
      "default": false,
      "description": "Update Certificates without check exists",
      "name": "force",
      "in": "query"
    },
    "Hostname": {
      "type": "string",
      "description": "Target hostname",
      "name": "hostname",
      "in": "query",
      "required": true
    },
    "RequestIdHeader": {
      "type": "string",
      "description": "Unique request ID (must be generated for each separate request, even retries)",
      "name": "X-Request-Id",
      "in": "header"
    }
  },
  "responses": {
    "Error": {
      "description": "Base Error Response",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "OK": {
      "description": "Base OK Response",
      "schema": {
        "description": "Use for an empty response",
        "type": "object",
        "properties": {
          "message": {
            "description": "message for user",
            "type": "string"
          }
        }
      }
    }
  }
}`))
}
