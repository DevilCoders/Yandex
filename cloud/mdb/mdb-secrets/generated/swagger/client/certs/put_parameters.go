// Code generated by go-swagger; DO NOT EDIT.

package certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPutParams creates a new PutParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutParams() *PutParams {
	return &PutParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutParamsWithTimeout creates a new PutParams object
// with the ability to set a timeout on a request.
func NewPutParamsWithTimeout(timeout time.Duration) *PutParams {
	return &PutParams{
		timeout: timeout,
	}
}

// NewPutParamsWithContext creates a new PutParams object
// with the ability to set a context for a request.
func NewPutParamsWithContext(ctx context.Context) *PutParams {
	return &PutParams{
		Context: ctx,
	}
}

// NewPutParamsWithHTTPClient creates a new PutParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutParamsWithHTTPClient(client *http.Client) *PutParams {
	return &PutParams{
		HTTPClient: client,
	}
}

/* PutParams contains all the parameters to send to the API endpoint
   for the put operation.

   Typically these are written to a http.Request.
*/
type PutParams struct {

	/* Authorization.

	   OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.
	*/
	Authorization *string

	/* XRequestID.

	   Unique request ID (must be generated for each separate request, even retries)
	*/
	XRequestID *string

	/* AltNames.

	   Target alt names
	*/
	AltNames []string

	/* Ca.

	   Certificate authority name. Ex. InternalCA
	*/
	Ca string

	/* Force.

	   Update Certificates without check exists
	*/
	Force *bool

	/* Hostname.

	   Target hostname
	*/
	Hostname string

	/* Type.

	   Certificate type. Ex. host
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutParams) WithDefaults() *PutParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutParams) SetDefaults() {
	var (
		forceDefault = bool(false)
	)

	val := PutParams{
		Force: &forceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the put params
func (o *PutParams) WithTimeout(timeout time.Duration) *PutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put params
func (o *PutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put params
func (o *PutParams) WithContext(ctx context.Context) *PutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put params
func (o *PutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put params
func (o *PutParams) WithHTTPClient(client *http.Client) *PutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put params
func (o *PutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the put params
func (o *PutParams) WithAuthorization(authorization *string) *PutParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the put params
func (o *PutParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithXRequestID adds the xRequestID to the put params
func (o *PutParams) WithXRequestID(xRequestID *string) *PutParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the put params
func (o *PutParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithAltNames adds the altNames to the put params
func (o *PutParams) WithAltNames(altNames []string) *PutParams {
	o.SetAltNames(altNames)
	return o
}

// SetAltNames adds the altNames to the put params
func (o *PutParams) SetAltNames(altNames []string) {
	o.AltNames = altNames
}

// WithCa adds the ca to the put params
func (o *PutParams) WithCa(ca string) *PutParams {
	o.SetCa(ca)
	return o
}

// SetCa adds the ca to the put params
func (o *PutParams) SetCa(ca string) {
	o.Ca = ca
}

// WithForce adds the force to the put params
func (o *PutParams) WithForce(force *bool) *PutParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the put params
func (o *PutParams) SetForce(force *bool) {
	o.Force = force
}

// WithHostname adds the hostname to the put params
func (o *PutParams) WithHostname(hostname string) *PutParams {
	o.SetHostname(hostname)
	return o
}

// SetHostname adds the hostname to the put params
func (o *PutParams) SetHostname(hostname string) {
	o.Hostname = hostname
}

// WithType adds the typeVar to the put params
func (o *PutParams) WithType(typeVar string) *PutParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the put params
func (o *PutParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.AltNames != nil {

		// binding items for alt_names
		joinedAltNames := o.bindParamAltNames(reg)

		// query array param alt_names
		if err := r.SetQueryParam("alt_names", joinedAltNames...); err != nil {
			return err
		}
	}

	// query param ca
	qrCa := o.Ca
	qCa := qrCa
	if qCa != "" {

		if err := r.SetQueryParam("ca", qCa); err != nil {
			return err
		}
	}

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	// query param hostname
	qrHostname := o.Hostname
	qHostname := qrHostname
	if qHostname != "" {

		if err := r.SetQueryParam("hostname", qHostname); err != nil {
			return err
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {

		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPut binds the parameter alt_names
func (o *PutParams) bindParamAltNames(formats strfmt.Registry) []string {
	altNamesIR := o.AltNames

	var altNamesIC []string
	for _, altNamesIIR := range altNamesIR { // explode []string

		altNamesIIV := altNamesIIR // string as string
		altNamesIC = append(altNamesIC, altNamesIIV)
	}

	// items.CollectionFormat: ""
	altNamesIS := swag.JoinByFormat(altNamesIC, "")

	return altNamesIS
}
