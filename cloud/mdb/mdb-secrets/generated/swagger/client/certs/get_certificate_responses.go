// Code generated by go-swagger; DO NOT EDIT.

package certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"a.yandex-team.ru/cloud/mdb/mdb-secrets/generated/swagger/models"
)

// GetCertificateReader is a Reader for the GetCertificate structure.
type GetCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCertificateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCertificateOK creates a GetCertificateOK with default headers values
func NewGetCertificateOK() *GetCertificateOK {
	return &GetCertificateOK{}
}

/* GetCertificateOK describes a response with status code 200, with default header values.

Certificate for host
*/
type GetCertificateOK struct {
	Payload *models.CertResponse
}

func (o *GetCertificateOK) Error() string {
	return fmt.Sprintf("[GET /v1/cert][%d] getCertificateOK  %+v", 200, o.Payload)
}
func (o *GetCertificateOK) GetPayload() *models.CertResponse {
	return o.Payload
}

func (o *GetCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateUnauthorized creates a GetCertificateUnauthorized with default headers values
func NewGetCertificateUnauthorized() *GetCertificateUnauthorized {
	return &GetCertificateUnauthorized{}
}

/* GetCertificateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCertificateUnauthorized struct {
	Payload *models.Error
}

func (o *GetCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/cert][%d] getCertificateUnauthorized  %+v", 401, o.Payload)
}
func (o *GetCertificateUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateForbidden creates a GetCertificateForbidden with default headers values
func NewGetCertificateForbidden() *GetCertificateForbidden {
	return &GetCertificateForbidden{}
}

/* GetCertificateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCertificateForbidden struct {
	Payload *models.Error
}

func (o *GetCertificateForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/cert][%d] getCertificateForbidden  %+v", 403, o.Payload)
}
func (o *GetCertificateForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateNotFound creates a GetCertificateNotFound with default headers values
func NewGetCertificateNotFound() *GetCertificateNotFound {
	return &GetCertificateNotFound{}
}

/* GetCertificateNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetCertificateNotFound struct {
	Payload *models.Error
}

func (o *GetCertificateNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/cert][%d] getCertificateNotFound  %+v", 404, o.Payload)
}
func (o *GetCertificateNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateInternalServerError creates a GetCertificateInternalServerError with default headers values
func NewGetCertificateInternalServerError() *GetCertificateInternalServerError {
	return &GetCertificateInternalServerError{}
}

/* GetCertificateInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetCertificateInternalServerError struct {
	Payload *models.Error
}

func (o *GetCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/cert][%d] getCertificateInternalServerError  %+v", 500, o.Payload)
}
func (o *GetCertificateInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateServiceUnavailable creates a GetCertificateServiceUnavailable with default headers values
func NewGetCertificateServiceUnavailable() *GetCertificateServiceUnavailable {
	return &GetCertificateServiceUnavailable{}
}

/* GetCertificateServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable (dependency down)
*/
type GetCertificateServiceUnavailable struct {
	Payload *models.Error
}

func (o *GetCertificateServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v1/cert][%d] getCertificateServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetCertificateServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCertificateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
