// Code generated by go-swagger; DO NOT EDIT.

package certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"a.yandex-team.ru/cloud/mdb/mdb-secrets/generated/swagger/models"
)

// RevokeCertificateReader is a Reader for the RevokeCertificate structure.
type RevokeCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRevokeCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRevokeCertificateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRevokeCertificateOK creates a RevokeCertificateOK with default headers values
func NewRevokeCertificateOK() *RevokeCertificateOK {
	return &RevokeCertificateOK{}
}

/* RevokeCertificateOK describes a response with status code 200, with default header values.

Base OK Response
*/
type RevokeCertificateOK struct {
	Payload *RevokeCertificateOKBody
}

func (o *RevokeCertificateOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/cert][%d] revokeCertificateOK  %+v", 200, o.Payload)
}
func (o *RevokeCertificateOK) GetPayload() *RevokeCertificateOKBody {
	return o.Payload
}

func (o *RevokeCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RevokeCertificateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeCertificateDefault creates a RevokeCertificateDefault with default headers values
func NewRevokeCertificateDefault(code int) *RevokeCertificateDefault {
	return &RevokeCertificateDefault{
		_statusCode: code,
	}
}

/* RevokeCertificateDefault describes a response with status code -1, with default header values.

Base Error Response
*/
type RevokeCertificateDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the revoke certificate default response
func (o *RevokeCertificateDefault) Code() int {
	return o._statusCode
}

func (o *RevokeCertificateDefault) Error() string {
	return fmt.Sprintf("[DELETE /v1/cert][%d] RevokeCertificate default  %+v", o._statusCode, o.Payload)
}
func (o *RevokeCertificateDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeCertificateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RevokeCertificateOKBody Use for an empty response
swagger:model RevokeCertificateOKBody
*/
type RevokeCertificateOKBody struct {

	// message for user
	Message string `json:"message,omitempty"`
}

// Validate validates this revoke certificate o k body
func (o *RevokeCertificateOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this revoke certificate o k body based on context it is used
func (o *RevokeCertificateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RevokeCertificateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RevokeCertificateOKBody) UnmarshalBinary(b []byte) error {
	var res RevokeCertificateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
