CREATE TYPE dbaas.placement_group_status AS ENUM (
    'DESCRIBED',
    'CREATING',
    'CREATE-ERROR',
    'COMPLETE',
    'DELETING',
    'DELETE-ERROR',
    'DELETED'
);

CREATE TABLE dbaas.placement_groups (
    pg_id                       bigint GENERATED BY DEFAULT AS IDENTITY,
    cid                         text NOT NULL,
    local_id                    bigint NOT NULL,
    disk_placement_group_id     text,
    status                      dbaas.placement_group_status NOT NULL,

    CONSTRAINT pk_placement_groups PRIMARY KEY (pg_id),

    CONSTRAINT fk_placement_groups_clusters FOREIGN KEY (cid)
        REFERENCES dbaas.clusters (cid) ON DELETE RESTRICT
);

CREATE UNIQUE INDEX uk_placement_groups_cid_local_id ON dbaas.placement_groups (cid, local_id);
CREATE UNIQUE INDEX uk_placement_groups_disk_placement_group_id ON dbaas.placement_groups (disk_placement_group_id) WHERE (disk_placement_group_id IS NOT NULL);

comment on column dbaas.placement_groups.disk_placement_group_id is 'The placement group id from API';
comment on column dbaas.placement_groups.local_id is 'local ID of placement group in cluster';

CREATE TABLE dbaas.placement_groups_revs (
    rev                         bigint NOT NULL,
    pg_id                       bigint NOT NULL,
    cid                         text NOT NULL,
    local_id                    bigint NOT NULL,
    disk_placement_group_id     text,
    status                      dbaas.placement_group_status NOT NULL,

    CONSTRAINT pk_placement_groups_revs PRIMARY KEY (pg_id, rev),

    CONSTRAINT fk_placement_groups_revs_clusters_revs FOREIGN KEY (cid, rev)
        REFERENCES dbaas.clusters_revs (cid, rev) ON DELETE CASCADE
);

CREATE INDEX i_placement_groups_revs_cid_rev
    ON dbaas.placement_groups_revs(cid, rev);


CREATE TYPE dbaas.disk_status AS ENUM (
    'DESCRIBED',
    'CREATING',
    'CREATE-ERROR',
    'COMPLETE',
    'DELETING',
    'DELETE-ERROR',
    'DELETED'
);

CREATE TABLE dbaas.disks (
    d_id                        bigint GENERATED BY DEFAULT AS IDENTITY,
    pg_id                       bigint NOT NULL,
    fqdn                        text NOT NULL,
    mount_point                 text NOT NULL,
    disk_id                     text,
    host_disk_id                text,
    status                      dbaas.disk_status NOT NULL,
    cid                         text NOT NULL,
    
    CONSTRAINT pk_disks PRIMARY KEY (d_id),

    CONSTRAINT fk_disks_placement_groups FOREIGN KEY (pg_id)
        REFERENCES dbaas.placement_groups (pg_id) ON DELETE RESTRICT,
    CONSTRAINT fk_disks_hosts FOREIGN KEY (fqdn)
        REFERENCES dbaas.hosts (fqdn) ON DELETE RESTRICT,
    CONSTRAINT fk_disks_clusters FOREIGN KEY (cid)
        REFERENCES dbaas.clusters (cid) ON DELETE RESTRICT     
);

CREATE UNIQUE INDEX uk_disks_fqdn_mount_point ON dbaas.disks (fqdn, mount_point);


CREATE INDEX i_disks_cid
    ON dbaas.disks(cid);

comment on column dbaas.disks.disk_id is 'The disk id from API';
comment on column dbaas.disks.host_disk_id is 'Host device name like `/dev/vdb1`';

CREATE TABLE dbaas.disks_revs (
    rev                         bigint NOT NULL,
    d_id                        bigint NOT NULL,
    pg_id                       bigint NOT NULL,
    fqdn                        text NOT NULL,
    mount_point                 text NOT NULL,
    disk_id                     text,
    host_disk_id                text,
    status                      dbaas.disk_status NOT NULL,
    cid                         text NOT NULL,
    
    CONSTRAINT pk_disks_revs PRIMARY KEY (d_id, rev),

    CONSTRAINT disks_revs_clusters_revs FOREIGN KEY (cid, rev)
        REFERENCES dbaas.clusters_revs (cid, rev) ON DELETE CASCADE,
    CONSTRAINT disks_revs_hosts_revs FOREIGN KEY (fqdn, rev)
        REFERENCES dbaas.hosts_revs (fqdn, rev) ON DELETE CASCADE
);

CREATE INDEX i_disks_revs_cid_rev
    ON dbaas.disks_revs(cid, rev);
