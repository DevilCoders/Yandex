// Code generated by MockGen. DO NOT EDIT.
// Source: ./states.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	states "a.yandex-team.ru/cloud/mdb/redis-caesar/internal/app/states"
	gomock "github.com/golang/mock/gomock"
)

// MockAppState is a mock of AppState interface.
type MockAppState struct {
	ctrl     *gomock.Controller
	recorder *MockAppStateMockRecorder
}

// MockAppStateMockRecorder is the mock recorder for MockAppState.
type MockAppStateMockRecorder struct {
	mock *MockAppState
}

// NewMockAppState creates a new mock instance.
func NewMockAppState(ctrl *gomock.Controller) *MockAppState {
	mock := &MockAppState{ctrl: ctrl}
	mock.recorder = &MockAppStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppState) EXPECT() *MockAppStateMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockAppState) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAppStateMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAppState)(nil).Name))
}

// Run mocks base method.
func (m *MockAppState) Run() (states.AppState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(states.AppState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockAppStateMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAppState)(nil).Run))
}
