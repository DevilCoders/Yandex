// Code generated by MockGen. DO NOT EDIT.
// Source: ./dcs.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDCS is a mock of DCS interface.
type MockDCS struct {
	ctrl     *gomock.Controller
	recorder *MockDCSMockRecorder
}

// MockDCSMockRecorder is the mock recorder for MockDCS.
type MockDCSMockRecorder struct {
	mock *MockDCS
}

// NewMockDCS creates a new mock instance.
func NewMockDCS(ctrl *gomock.Controller) *MockDCS {
	mock := &MockDCS{ctrl: ctrl}
	mock.recorder = &MockDCSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDCS) EXPECT() *MockDCSMockRecorder {
	return m.recorder
}

// AcquireManagerLock mocks base method.
func (m *MockDCS) AcquireManagerLock() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireManagerLock")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcquireManagerLock indicates an expected call of AcquireManagerLock.
func (mr *MockDCSMockRecorder) AcquireManagerLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireManagerLock", reflect.TypeOf((*MockDCS)(nil).AcquireManagerLock))
}

// GetDatabasesInfo mocks base method.
func (m *MockDCS) GetDatabasesInfo() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetDatabasesInfo")
}

// GetDatabasesInfo indicates an expected call of GetDatabasesInfo.
func (mr *MockDCSMockRecorder) GetDatabasesInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabasesInfo", reflect.TypeOf((*MockDCS)(nil).GetDatabasesInfo))
}

// Initialize mocks base method.
func (m *MockDCS) Initialize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize")
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDCSMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDCS)(nil).Initialize))
}

// IsConnected mocks base method.
func (m *MockDCS) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockDCSMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockDCS)(nil).IsConnected))
}

// WaitConnected mocks base method.
func (m *MockDCS) WaitConnected(timeout time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitConnected", timeout)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitConnected indicates an expected call of WaitConnected.
func (mr *MockDCSMockRecorder) WaitConnected(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitConnected", reflect.TypeOf((*MockDCS)(nil).WaitConnected), timeout)
}
