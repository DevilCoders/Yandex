// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-maintenance/internal/metadb (interfaces: MetaDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	"time"
	models "a.yandex-team.ru/cloud/mdb/mdb-maintenance/internal/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetaDB is a mock of MetaDB interface.
type MockMetaDB struct {
	ctrl     *gomock.Controller
	recorder *MockMetaDBMockRecorder
}

// MockMetaDBMockRecorder is the mock recorder for MockMetaDB.
type MockMetaDBMockRecorder struct {
	mock *MockMetaDB
}

// NewMockMetaDB creates a new mock instance.
func NewMockMetaDB(ctrl *gomock.Controller) *MockMetaDB {
	mock := &MockMetaDB{ctrl: ctrl}
	mock.recorder = &MockMetaDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaDB) EXPECT() *MockMetaDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockMetaDB) Begin(arg0 context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockMetaDBMockRecorder) Begin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockMetaDB)(nil).Begin), arg0)
}

// ChangePillar mocks base method.
func (m *MockMetaDB) ChangePillar(arg0 context.Context, arg1 string, arg2 models.MaintenanceTaskConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePillar", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePillar indicates an expected call of ChangePillar.
func (mr *MockMetaDBMockRecorder) ChangePillar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePillar", reflect.TypeOf((*MockMetaDB)(nil).ChangePillar), arg0, arg1, arg2)
}

// Commit mocks base method.
func (m *MockMetaDB) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockMetaDBMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockMetaDB)(nil).Commit), arg0)
}

// CompleteClusterChange mocks base method.
func (m *MockMetaDB) CompleteClusterChange(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteClusterChange", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteClusterChange indicates an expected call of CompleteClusterChange.
func (mr *MockMetaDBMockRecorder) CompleteClusterChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteClusterChange", reflect.TypeOf((*MockMetaDB)(nil).CompleteClusterChange), arg0, arg1, arg2)
}

// CompleteFutureClusterChange mocks base method.
func (m *MockMetaDB) CompleteFutureClusterChange(arg0 context.Context, arg1 string, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteFutureClusterChange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteFutureClusterChange indicates an expected call of CompleteFutureClusterChange.
func (mr *MockMetaDBMockRecorder) CompleteFutureClusterChange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteFutureClusterChange", reflect.TypeOf((*MockMetaDB)(nil).CompleteFutureClusterChange), arg0, arg1, arg2, arg3)
}

// CompleteMaintenanceTask mocks base method.
func (m *MockMetaDB) CompleteMaintenanceTask(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMaintenanceTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteMaintenanceTask indicates an expected call of CompleteMaintenanceTask.
func (mr *MockMetaDBMockRecorder) CompleteMaintenanceTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMaintenanceTask", reflect.TypeOf((*MockMetaDB)(nil).CompleteMaintenanceTask), arg0, arg1, arg2)
}

// GetClusterByInstanceID mocks base method.
func (m *MockMetaDB) GetClusterByInstanceID(arg0 context.Context, arg1, arg2 string) (models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterByInstanceID", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterByInstanceID indicates an expected call of GetClusterByInstanceID.
func (mr *MockMetaDBMockRecorder) GetClusterByInstanceID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterByInstanceID", reflect.TypeOf((*MockMetaDB)(nil).GetClusterByInstanceID), arg0, arg1, arg2)
}

// IsReady mocks base method.
func (m *MockMetaDB) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockMetaDBMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockMetaDB)(nil).IsReady), arg0)
}

// LockCluster mocks base method.
func (m *MockMetaDB) LockCluster(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCluster", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCluster indicates an expected call of LockCluster.
func (mr *MockMetaDBMockRecorder) LockCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCluster", reflect.TypeOf((*MockMetaDB)(nil).LockCluster), arg0, arg1)
}

// LockFutureCluster mocks base method.
func (m *MockMetaDB) LockFutureCluster(arg0 context.Context, arg1 string) (models.ClusterRevs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockFutureCluster", arg0, arg1)
	ret0, _ := ret[0].(models.ClusterRevs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockFutureCluster indicates an expected call of LockFutureCluster.
func (mr *MockMetaDBMockRecorder) LockFutureCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockFutureCluster", reflect.TypeOf((*MockMetaDB)(nil).LockFutureCluster), arg0, arg1)
}

// MaintenanceTasks mocks base method.
func (m *MockMetaDB) MaintenanceTasks(arg0 context.Context, arg1 string) ([]models.MaintenanceTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintenanceTasks", arg0, arg1)
	ret0, _ := ret[0].([]models.MaintenanceTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaintenanceTasks indicates an expected call of MaintenanceTasks.
func (mr *MockMetaDBMockRecorder) MaintenanceTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintenanceTasks", reflect.TypeOf((*MockMetaDB)(nil).MaintenanceTasks), arg0, arg1)
}

// MaintenanceTasksByCIDs mocks base method.
func (m *MockMetaDB) MaintenanceTasksByCIDs(arg0 context.Context, arg1 []string) ([]models.MaintenanceTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintenanceTasksByCIDs", arg0, arg1)
	ret0, _ := ret[0].([]models.MaintenanceTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaintenanceTasksByCIDs indicates an expected call of MaintenanceTasksByCIDs.
func (mr *MockMetaDBMockRecorder) MaintenanceTasksByCIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintenanceTasksByCIDs", reflect.TypeOf((*MockMetaDB)(nil).MaintenanceTasksByCIDs), arg0, arg1)
}

// PlanMaintenanceTask mocks base method.
func (m *MockMetaDB) PlanMaintenanceTask(arg0 context.Context, arg1 models.PlanMaintenanceTaskRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanMaintenanceTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlanMaintenanceTask indicates an expected call of PlanMaintenanceTask.
func (mr *MockMetaDBMockRecorder) PlanMaintenanceTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanMaintenanceTask", reflect.TypeOf((*MockMetaDB)(nil).PlanMaintenanceTask), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockMetaDB) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockMetaDBMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockMetaDB)(nil).Rollback), arg0)
}

// SelectClusters mocks base method.
func (m *MockMetaDB) SelectClusters(arg0 context.Context, arg1 models.MaintenanceTaskConfig) ([]models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectClusters", arg0, arg1)
	ret0, _ := ret[0].([]models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectClusters indicates an expected call of SelectClusters.
func (mr *MockMetaDBMockRecorder) SelectClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectClusters", reflect.TypeOf((*MockMetaDB)(nil).SelectClusters), arg0, arg1)
}

// SelectTaskArgs mocks base method.
func (m *MockMetaDB) SelectTaskArgs(arg0 context.Context, arg1 string, arg2 models.MaintenanceTaskConfig) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTaskArgs", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTaskArgs indicates an expected call of SelectTaskArgs.
func (mr *MockMetaDBMockRecorder) SelectTaskArgs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTaskArgs", reflect.TypeOf((*MockMetaDB)(nil).SelectTaskArgs), arg0, arg1, arg2)
}

func (m *MockMetaDB) SelectTimeout(arg0 context.Context, arg1 string, arg2 models.MaintenanceTaskConfig) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTimeout", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

