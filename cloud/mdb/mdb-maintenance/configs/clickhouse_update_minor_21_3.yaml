# Generated by "make generate" from cloud/mdb/clickhouse/versions
info: Minor update of ClickHouse version to 21.3.20.1
repeatable: true
supports_offline: true
clusters_selection:
  db: >-
    WITH clusters AS (
        SELECT
            c.cid,
            CAST(string_to_array(p.value #>> '{data,clickhouse,ch_version}', '.') AS int[]) AS version_nums
         FROM dbaas.subclusters sc
         JOIN dbaas.clusters c USING(cid)
         JOIN dbaas.pillar p USING(subcid)
        WHERE c.status IN ('RUNNING', 'STOPPED')
          AND sc.roles && '{clickhouse_cluster}'
          AND CAST(p.value #>> '{data,clickhouse,unmanaged,minor_updates_disabled}' AS bool) IS DISTINCT FROM true
    )
    SELECT c.cid
      FROM clusters c
     WHERE c.version_nums > ARRAY[21, 3]
       AND c.version_nums < ARRAY[21, 3, 20, 1]
pillar_change: >-
  UPDATE dbaas.pillar p
     SET value = jsonb_set(value, '{data,clickhouse,ch_version}', to_jsonb(CAST('21.3.20.1' AS text)))
    FROM dbaas.subclusters sc
   WHERE p.subcid=sc.subcid
     AND sc.cid=:cid
     AND sc.roles && '{clickhouse_cluster}'
worker:
  operation_type: clickhouse_cluster_modify
  task_type: clickhouse_cluster_maintenance
  task_args_query: >-
    SELECT
        jsonb_build_object(
            'restart', true,
            'version_from', p.value #>> '{data,clickhouse,ch_version}',
            'version_to', '21.3.20.1'
        )
      FROM dbaas.clusters c
      JOIN dbaas.subclusters sc USING (cid)
      JOIN dbaas.pillar p USING (subcid)
     WHERE sc.roles && '{clickhouse_cluster}'
       AND c.cid = :cid
  timeout_query: >-
    SELECT
      CONCAT(
        CASE
          WHEN count(*) < 16
            THEN floor(log(2, count(*))) + 1
            ELSE floor((count(*) + 34) / 10)
          END * 2,
        'h')
      FROM dbaas.shards s
      JOIN dbaas.subclusters sc
      USING (subcid)
    WHERE sc.cid = :cid
      AND sc.roles && '{clickhouse_cluster}'
max_delay_days: 21
min_days: 7
