# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})
{% block global_tags %}
# Global tags can be specified here in key="value" format.
[global_tags]
    cid = "{{ salt['pillar.get']('data:dbaas:cluster_id', '') }}"
    dc = "nodc"
{% endblock %}
{% block agent %}
# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  logfile = "C:/Logs/Telegraf.log"

  logfile_rotation_interval = "24h"
  logfile_rotation_max_archives = 7
  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Override default hostname, if empty use os.Hostname()
  hostname = "{{ salt['pillar.get']('data:dbaas:fqdn', '') }}"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

{% endblock %}
###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
{%block output_plugins%}
# Configuration for MdbHealth server to send metrics to
[[outputs.mdb_health]]
    mdb_health_agent = "https://{{ salt['pillar.get']('data:mdb_health:host', 'health.db.yandex.net') }}/v1/hostshealth"
    mdbhealth_ca_path = 'C:\ProgramData\yandex\allCAs.pem'
    mdbhealth_cluster_key_file = 'C:\ProgramData\telegraf\cluster_key.pem'
    target_sli_metric_name = "{{ sli_metric_name|default('cluster_membership') }}"

{% block output_plugins_yandex_monitoring %}
[[outputs.yandex_monitoring]]
    project = "{{ salt['pillar.get']('data:dbaas:cloud:cloud_ext_id') }}"
    service = 'managed-sqlserver'
    cluster = "{{ salt['pillar.get']('data:dbaas:folder:folder_ext_id') }}"
    resource_id = "{{ salt['pillar.get']('data:dbaas:cluster_id', '') }}"
    resource_type = 'cluster'
    ca_path = 'C:\ProgramData\yandex\allCAs.pem'
    push_url = "{{ salt['pillar.get']('data:solomon_cloud:push_url') }}"
    namepass = [
            'win_disk',
            'win_cpu',
            'win_net'
    ]
    http_timeout = 10
    tagpass = [ 'instance', 'object', 'objectname' ]
    auth_token_path = 'C:\ProgramData\IAMTokenReissuer\iam_token.txt'
    flush_interval = "20s"
    enable_old_metric_name = true

[[outputs.yandex_monitoring]]
    project = "yandexcloud"
    service = "yandexcloud_dbaas"
    cluster = "mdb_{{ salt['pillar.get']('data:dbaas:cluster_id', '') }}"
    resource_id = "{{ salt['pillar.get']('data:dbaas:cluster_id', '') }}"
    resource_type = 'cluster'
    ca_path = 'C:\ProgramData\yandex\allCAs.pem'
    push_url = "{{ salt['pillar.get']('data:solomon_cloud:push_url') }}"
    namepass = [
            'win_disk',
            'win_cpu',
            'win_net'
    ]
    http_timeout = 10
    tagpass = [ 'instance', 'object', 'objectname' ]
    auth_token_path = 'C:\ProgramData\IAMTokenReissuer\iam_token.txt'
    flush_interval = "20s"
    enable_old_metric_name = true
{% endblock %}
[[outputs.state_file]]
    path = 'C:\ProgramData\telegraf\current.json'

[[outputs.mdb_dns_upper]]
    ca_path = 'C:\ProgramData\yandex\allCAs.pem'
    cluster_key_file = 'C:\ProgramData\telegraf\cluster_key.pem'
    push_url = "https://{{ salt['pillar.get']('data:mdb_dns:host', 'mdb-dns-test.db.yandex.net') }}/v1/dns"

[[outputs.juggler_search]]
    ca_path = 'C:\ProgramData\yandex\allCAs.pem'
    push_url = 'http://juggler-push.search.yandex.net:80/events'
    namepass = [ 'juggler_event' ]
    hostname = "{{ salt.dbaas.managed_hostname() }}"
    http_timeout = 10
    send_interval = 60 # seconds

{% endblock %}
###############################################################################
#                            PROCESSOR PLUGINS                                #
###############################################################################
{% block processor_plugins %}
{% endblock %}
###############################################################################
#                            AGGREGATOR PLUGINS                               #
###############################################################################
{% block aggregator_plugins %}
{% endblock %}
###############################################################################
#                            CONNECTION POOL                                  #
###############################################################################
{% block connection_pool %}
{% endblock %}
###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
{% block input_plugins %}

# Windows performance stats
[[inputs.win_perf_counters]]
    UseWildcardsExpansion=true
    UsePerfCounterTime=true
    CountersRefreshInterval="1s"

    [[inputs.win_perf_counters.object]]
        ObjectName = "Processor"
        Instances = [ "*" ]
        Counters = [ "% Idle Time", "% Interrupt Time", "% Privileged Time", "% User Time", "% Processor Time"]
        Measurement = "win_cpu"
        IncludeTotal=true

    [[inputs.win_perf_counters.object]]
        ObjectName = "LogicalDisk"
        Instances = ["*"]
        Counters = [
            "*",
        ]
        Measurement = "win_disk"
        IncludeTotal=true

    [[inputs.win_perf_counters.object]]
        ObjectName = "Network Interface"
        Instances = ["Red Hat VirtIO Ethernet Adapter _2"]
        Counters = [
            "Bytes Received/sec",
            "Bytes Sent/sec",
            "Packets Received/sec",
            "Packets Sent/sec",
            "Packets Received Discarded",
            "Packets Outbound Discarded",
            "Packets Received Errors",
            "Packets Outbound Errors",
        ]
        Measurement = "win_net"
        IncludeTotal=true

{% endblock%}
###############################################################################
#                            CHECKS                                           #
###############################################################################
{% block checks %}
[[inputs.juggler_runner]]
    [[inputs.juggler_runner.Checks]]
        service = "META"
        random_sleep = 45
        execution_interval = 60
        execution_timeout = 50
        name = "meta_check"

    [[inputs.juggler_runner.Checks]]
        service = "unispace_rootfs"
        random_sleep = 45
        execution_interval = 60
        execution_timeout = 50
        command = '&"C:\Program Files\MDB\juggler\unispace.ps1" -crit_limit 97 -warn_limit 94 -disk_name C'

    [[inputs.juggler_runner.Checks]] 
        service = "unispace"
        random_sleep = 45
        execution_interval = 60
        execution_timeout = 50
        command = '&"C:\Program Files\MDB\juggler\unispace.ps1" -crit_limit 97 -warn_limit 94 -disk_name D'

    [[inputs.juggler_runner.Checks]]
        service = "sqlserver_billing_lag"
        execution_interval = 60
        execution_timeout = 10
        name = "mdb_sqlserver_billing_check"
        [inputs.juggler_runner.Checks.args]
            warn_timeout = 1800 # 30 mins
            crit_timeout = 43200 # 12 hours
            state_file_path = 'C:\ProgramData\mdbbilling\data\send.state.json'

    [[inputs.juggler_runner.Checks]]
        service = "salt_minion_status"
        random_sleep = 45
        execution_interval = 1200
        execution_timeout = 60
        command = '&"C:\Program Files\MDB\juggler\service.ps1" -service_name salt-minion'

{% endblock %}
