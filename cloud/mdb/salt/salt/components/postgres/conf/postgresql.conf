{% from "components/postgres/pg.jinja" import pg with context %}
{% set environment = salt['pillar.get']('yandex:environment', 'dev') %}
# -----------------------------
# PostgreSQL configuration file
# -----------------------------
#
# This file consists of lines of the form:
#
#   name = value
#
# (The "=" is optional.)  Whitespace may be used.  Comments are introduced with
# "#" anywhere on a line.  The complete list of parameter names and allowed
# values can be found in the PostgreSQL documentation.
#
# The commented-out settings shown in this file represent the default values.
# Re-commenting a setting is NOT sufficient to revert it to the default value;
# you need to reload the server.
#
# This file is read on server startup and when the server receives a SIGHUP
# signal.  If you edit the file on a running system, you have to SIGHUP the
# server for the changes to take effect, or use "pg_ctl reload".  Some
# parameters, which are marked below, require a server shutdown and restart to
# take effect.
#
# Any parameter can also be given as a command-line option to the server, e.g.,
# "postgres -c log_connections=on".  Some parameters can be changed at run time
# with the "SET" SQL command.
#
# Memory units:  kB = kilobytes        Time units:  ms  = milliseconds
#                MB = megabytes                     s   = seconds
#                GB = gigabytes                     min = minutes
#                TB = terabytes                     h   = hours
#                                                   d   = days


#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------

# The default values of these variables are driven from the -D command-line
# option or PGDATA environment variable, represented here as ConfigDir.

data_directory = '{{ pg.data }}'		# use data in another directory
					# (change requires restart)
hba_file = '{{ pg.data }}/conf.d/pg_hba.conf'	# host-based authentication file
					# (change requires restart)
#ident_file = 'ConfigDir/pg_ident.conf'	# ident configuration file
					# (change requires restart)

# If external_pid_file is not explicitly set, no extra PID file is written.
external_pid_file = '/var/run/postgresql/{{ pg.version.major }}-data.pid'			# write an extra PID file
					# (change requires restart)


#------------------------------------------------------------------------------
# CONNECTIONS AND AUTHENTICATION
#------------------------------------------------------------------------------

# - Connection Settings -

listen_addresses = '*'		# what IP address(es) to listen on;
					# comma-separated list of addresses;
					# defaults to 'localhost'; use '*' for all
					# (change requires restart)
#port = 5432				# (change requires restart)
max_connections = {{ salt['pillar.get']('data:config:max_connections', [100, 200 * salt['pillar.get']('data:dbaas:flavor:cpu_guarantee', 20)] | max)|int }}			# (change requires restart)
#superuser_reserved_connections = 3	# (change requires restart)
#unix_socket_directories = '/tmp'	# comma-separated list of directories
					# (change requires restart)
#unix_socket_group = ''			# (change requires restart)
#unix_socket_permissions = 0777		# begin with 0 to use octal notation
					# (change requires restart)
#bonjour = off				# advertise server via Bonjour
					# (change requires restart)
#bonjour_name = ''			# defaults to the computer name
					# (change requires restart)

# - Security and Authentication -

{% if salt['pillar.get']('data:pg_ssl', True) %}
ssl = on
ssl_cert_file = '/etc/postgresql/ssl/server.crt'
ssl_key_file = '/etc/postgresql/ssl/server.key'
ssl_ca_file = '/etc/postgresql/ssl/allCAs.pem'
{% endif %}
#authentication_timeout = 1min		# 1s-600s
ssl_ciphers = 'TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256' # allowed SSL ciphers
					# (change requires restart)
#ssl_prefer_server_ciphers = on		# (change requires restart)
#ssl_ecdh_curve = 'prime256v1'		# (change requires restart)
#ssl_crl_file = ''			# (change requires restart)
#password_encryption = on
#db_user_namespace = off
{% if pg.version.major_num >= 905 %}
row_security = {{ 'on' if salt['pillar.get']('data:config:row_security', True) else 'off' }}
{% endif %}

# GSSAPI using Kerberos
#krb_server_keyfile = ''
#krb_caseins_users = off

# - TCP Keepalives -
# see "man 7 tcp" for details

#tcp_keepalives_idle = 0		# TCP_KEEPIDLE, in seconds;
					# 0 selects the system default
#tcp_keepalives_interval = 0		# TCP_KEEPINTVL, in seconds;
					# 0 selects the system default
#tcp_keepalives_count = 0		# TCP_KEEPCNT;
					# 0 selects the system default


#------------------------------------------------------------------------------
# RESOURCE USAGE (except WAL)
#------------------------------------------------------------------------------

# - Memory -
{% set default_shared_buffers = '8GB' %}
{% set memory_limit = salt['pillar.get']('data:dbaas:flavor:memory_limit') %}
{% if memory_limit %}
{% set default_shared_buffers_mb = (memory_limit // 1024 // 1024 // 4)|int %}
{% if default_shared_buffers_mb > 8192 %}
{% set default_shared_buffers = '8GB' %}
{% set default_shared_buffers_mb = 8 * 1024 %}
{% else %}
{% set default_shared_buffers = default_shared_buffers_mb|string + 'MB' %}
{% endif %}
{% endif %}
shared_buffers = {{ salt['pillar.get']('data:config:shared_buffers', default_shared_buffers) }}			# min 128kB
					# (change requires restart)
#huge_pages = try			# on, off, or try
					# (change requires restart)
temp_buffers = {{ salt['pillar.get']('data:config:temp_buffers', '8MB') }}			# min 800kB
max_prepared_transactions = {{ salt['pillar.get']('data:config:max_prepared_transactions', '0') }}		# zero disables the feature
					# (change requires restart)
# Caution: it is not advisable to set max_prepared_transactions nonzero unless
# you actively intend to use prepared transactions.
work_mem = {{ salt['pillar.get']('data:config:work_mem', '16MB') }}				# min 64kB
{% if salt['pillar.get']('data:dbaas:flavor:cpu_limit') %}
{%	set cpu = salt['pillar.get']('data:dbaas:flavor:cpu_limit')|int %}
{% else %}
{% 	set cpu = 10 %}
{% endif %}
{% if cpu > 3 %}
{% 	set default_autovacuum_max_workers = [cpu, 32] | min %}
{% else %}
{%	set default_autovacuum_max_workers = 3 %}
{% endif %}
{% set default_maintenance_work_mem = 64 %}
{% if memory_limit %}
{%  set maint_memory_free_mb = (memory_limit // 1024 // 1024 - default_shared_buffers_mb) // 8 %}
{%  set max_default_maintenance_work_mem = [ maint_memory_free_mb - (default_autovacuum_max_workers + 1) * 1024, maint_memory_free_mb // default_autovacuum_max_workers ] | max %}
{%  set default_maintenance_work_mem = [max_default_maintenance_work_mem, 1024] | min %}
{% endif %}
{% set default_maintenance_work_mem = ((default_maintenance_work_mem // 64) * 64) | string + 'MB' %}
maintenance_work_mem = {{ salt['pillar.get']('data:config:maintenance_work_mem', default_maintenance_work_mem) }}		# min 1MB
{% if pg.version.major_num in [906, 1000] %}
replacement_sort_tuples = {{ salt['pillar.get']('data:config:replacement_sort_tuples', '150000') }}	# limits use of replacement selection sort
{% endif %}
autovacuum_work_mem = {{ salt['pillar.get']('data:config:autovacuum_work_mem', '-1') }}		# min 1MB, or -1 to use maintenance_work_mem
max_stack_depth = {{ salt['pillar.get']('data:config:max_stack_depth', '2MB') }}			# min 100kB
dynamic_shared_memory_type = {{ salt['pillar.get']('data:config:dynamic_shared_memory_type', 'posix') }}	# the default is the first option
					# supported by the operating system:
					#   posix
					#   sysv
					#   windows
					#   mmap
					# use none to disable dynamic shared memory

# - Disk -

temp_file_limit = {{ salt['pillar.get']('data:config:temp_file_limit', '1GB') }}			# limits per-process temp file space
					# in kB, or -1 for no limit

# - Kernel Resource Usage -

#max_files_per_process = 1000		# min 25
					# (change requires restart)
{% set user_shared_preload_libraries = salt['pillar.get']('data:config:user_shared_preload_libraries', []) %}
{% set shared_preload_libraries = salt['pillar.get']('data:config:shared_preload_libraries', '').split(',') %}

{% if pg.use_1c %}
{% do shared_preload_libraries.append('plantuner') %}
{% do shared_preload_libraries.append('online_analyze') %}
online_analyze.threshold = {{ salt['pillar.get']('data:config:online_analyze_threshold', 50) }}
online_analyze.scale_factor = {{ salt['pillar.get']('data:config:online_analyze_scale_factor', 0.1) }}
online_analyze.verbose = {{ 'on' if salt['pillar.get']('data:config:online_analyze_verbose', False) else 'off' }}
online_analyze.local_tracking = {{ 'on' if salt['pillar.get']('data:config:online_analyze_local_tracking', True) else 'off' }}
online_analyze.min_interval = {{ salt['pillar.get']('data:config:online_analyze_min_interval', 10000) }}
online_analyze.table_type = {{ salt['pillar.get']('data:config:online_analyze_table_type', 'temporary') }}
online_analyze.enable = {{ 'on' if salt['pillar.get']('data:config:online_analyze_enable', True) else 'off' }}
plantuner.fix_empty_table = {{ 'on' if salt['pillar.get']('data:config:plantuner_fix_empty_table', True) else 'off' }}
{% endif %}

{% if 'pg_stat_statements' in shared_preload_libraries %}
pg_stat_statements.max = {{ salt['pillar.get']('data:config:pg_stat_statements.max', '10000') }}
pg_stat_statements.track = {{ salt['pillar.get']('data:config:pg_stat_statements.track', 'all') }}
pg_stat_statements.track_utility = {{ salt['pillar.get']('data:config:pg_stat_statements.track_utility', 'off') }}
{% endif %}

{%  if 'pg_stat_kcache' in shared_preload_libraries %}
pg_stat_ucache.max = {{ salt['pillar.get']('data:config:pg_stat_ucache.max', '100') }}
{%      if salt['pillar.get']('data:kcache') %}
pg_stat_kcache.buffer_size = {{ salt['pillar.get']('data:kcache:buffer_size', 100) }}
pg_stat_kcache.stat_time_interval = {{ salt['pillar.get']('data:kcache:stat_time_interval', 86400) }}
{%          if salt['pillar.get']('data:kcache:excluded_keys') %}
pg_stat_kcache.excluded_keys = {{ salt['pillar.get']('data:kcache:excluded_keys') }}
{%          endif %}
{%      endif %}
{%  endif %}

{% if 'auto_explain' in user_shared_preload_libraries %}
{% do shared_preload_libraries.append('auto_explain') %}
auto_explain.log_min_duration = {{ salt['pillar.get']('data:config:auto_explain_log_min_duration', '-1') }}
auto_explain.log_analyze = {{ salt['pillar.get']('data:config:auto_explain_log_analyze', 'false') }}
auto_explain.log_verbose = {{ salt['pillar.get']('data:config:auto_explain_log_verbose', 'false') }}
auto_explain.log_buffers = {{ salt['pillar.get']('data:config:auto_explain_log_buffers', 'false') }}
auto_explain.log_format = {{ salt['pillar.get']('data:config:auto_explain_log_format', 'TEXT') }}
auto_explain.log_timing = {{ salt['pillar.get']('data:config:auto_explain_log_timing', 'false') }}
auto_explain.log_triggers = {{ salt['pillar.get']('data:config:auto_explain_log_triggers', 'false') }}
auto_explain.log_nested_statements = {{ salt['pillar.get']('data:config:auto_explain_log_nested_statements', 'false') }}
auto_explain.sample_rate = {{ salt['pillar.get']('data:config:auto_explain_sample_rate', 1) }}
{% endif %}

{% if not pg.use_1c %}
{% if 'pg_hint_plan' in user_shared_preload_libraries %}
{% do shared_preload_libraries.append('pg_hint_plan') %}
pg_hint_plan.enable_hint = {{ salt['pillar.get']('data:config:pg_hint_plan_enable_hint', 'true') }}
pg_hint_plan.debug_print = {{ salt['pillar.get']('data:config:pg_hint_plan_debug_print', 'false') }}
pg_hint_plan.message_level = {{ salt['pillar.get']('data:config:pg_hint_plan_message_level', 'info') }}
pg_hint_plan.enable_hint_table = {{ salt['pillar.get']('data:config:pg_hint_plan_enable_hint_table', 'false') }}
{% endif %}
{% endif %}
{% if pg.version.major_num < 1400 %}
{% if salt['pillar.get']('data:perf_diag:enable', False) %}
{% do shared_preload_libraries.append('mdb_perf_diag') %}
{% endif %}
{% endif %}

{% do shared_preload_libraries.append('logerrors') %}

{% if pg.version.major_num >= 1100 %}
{% if 'timescaledb' in user_shared_preload_libraries %}
{% do shared_preload_libraries.append('timescaledb') %}
timescaledb.telemetry_level=off
{% endif %}
{% endif %}

{% if 'pg_qualstats' in user_shared_preload_libraries %}
{% do shared_preload_libraries.append('pg_qualstats') %}
pg_qualstats.enabled = {{ salt['pillar.get']('data:config:pg_qualstats_enabled', 'true') }}
pg_qualstats.track_constants = {{ salt['pillar.get']('data:config:pg_qualstats_track_constants', 'true') }}
pg_qualstats.max = {{ salt['pillar.get']('data:config:pg_qualstats_max', '1000') }}
pg_qualstats.resolve_oids = {{ salt['pillar.get']('data:config:pg_qualstats_resolve_oids', 'false') }}
pg_qualstats.sample_rate = {{ salt['pillar.get']('data:config:pg_qualstats_sample_rate', '-1') }}
{% endif %}

{% if 'pg_cron' in user_shared_preload_libraries %}
{% do shared_preload_libraries.append('pg_cron') %}
{% for db in salt['pillar.get']('data:unmanaged_dbs') %}
{% for name, params in db.items() %}
{% if 'pg_cron' in params['extensions'] %}
cron.database_name = '{{ name }}'
{% endif %}
{% endfor %}
{% endfor %}
cron.use_background_workers = on
{% endif %}

{% if 'pg_pathman' in shared_preload_libraries %}
{% do shared_preload_libraries.remove('pg_pathman') %}
{% do shared_preload_libraries.append('pg_pathman') %}
{% endif %}

shared_preload_libraries = '{{ shared_preload_libraries | join(',') }}'   # (change requires restart)

# - Cost-Based Vacuum Delay -

vacuum_cost_delay = {{ salt['pillar.get']('data:config:vacuum_cost_delay', '0') }}			# 0-100 milliseconds
vacuum_cost_page_hit = {{ salt['pillar.get']('data:config:vacuum_cost_page_hit', '1') }}		# 0-10000 credits
vacuum_cost_page_miss = {{ salt['pillar.get']('data:config:vacuum_cost_page_miss', '10') }}		# 0-10000 credits
vacuum_cost_page_dirty = {{ salt['pillar.get']('data:config:vacuum_cost_page_dirty', '20') }}		# 0-10000 credits
vacuum_cost_limit = {{ salt['pillar.get']('data:config:vacuum_cost_limit', '200') }}		# 1-10000 credits

# - Background Writer -

bgwriter_delay = {{ salt['pillar.get']('data:config:bgwriter_delay', '10ms') }}			# 10-10000ms between rounds
bgwriter_lru_maxpages = {{ salt['pillar.get']('data:config:bgwriter_lru_maxpages', '1000') }}		# 0-1000 max buffers written/round
bgwriter_lru_multiplier = {{ '%.10f'|format(salt['pillar.get']('data:config:bgwriter_lru_multiplier', '10.0')|float) }}		# 0-10.0 multiplier on buffers scanned/round
{% if pg.version.major_num >= 906 %}
bgwriter_flush_after = {{ salt['pillar.get']('data:config:bgwriter_flush_after', '0') }}		# measured in pages, 0 disables
{% endif %}

# - Asynchronous Behavior -

effective_io_concurrency = {{ salt['pillar.get']('data:config:effective_io_concurrency', '1') }}		# 1-1000; 0 disables prefetching
{% if 'pg_cron' in shared_preload_libraries %}
max_worker_processes = {{ salt['pillar.get']('data:config:max_worker_processes', '16') }}		# (change requires restart)
{% else %}
max_worker_processes = {{ salt['pillar.get']('data:config:max_worker_processes', '8') }}		# (change requires restart)
{% endif %}
{% if pg.version.major_num >= 906 %}
max_parallel_workers_per_gather = {{ salt['pillar.get']('data:config:max_parallel_workers_per_gather', '2') }}	# taken from max_worker_processes
old_snapshot_threshold = {{ salt['pillar.get']('data:config:old_snapshot_threshold', '-1') }}		# 1min-60d; -1 disables; 0 is immediate
					# (change requires restart)
backend_flush_after = {{ salt['pillar.get']('data:config:backend_flush_after', '0') }}		# measured in pages, 0 disables
{% endif %}
{% if pg.version.major_num >= 1000 %}
max_parallel_workers = {{ salt['pillar.get']('data:config:max_parallel_workers', '8') }}
{% endif %}

{% if pg.version.major_num >= 1100 %}
max_parallel_maintenance_workers = {{ salt['pillar.get']('data:config:max_parallel_maintenance_workers', '2') }}		# taken from max_parallel_workers
parallel_leader_participation = {{ 'on' if salt['pillar.get']('data:config:parallel_leader_participation', True) else 'off' }}
{%    if pg.version.major_num < 1300 %}
vacuum_cleanup_index_scale_factor = {{ '%.10f'|format(salt['pillar.get']('data:config:vacuum_cleanup_index_scale_factor', '0.1')|float) }}	# number of tuple inserts prior to index cleanup as a fraction of reltuples
{%    endif %}
{% endif %}

#------------------------------------------------------------------------------
# WRITE AHEAD LOG
#------------------------------------------------------------------------------

# - Settings -

wal_level = {{ salt['pillar.get']('data:config:wal_level', 'hot_standby') }}			# minimal, replica, or logical
					# (change requires restart)
#fsync = on				# flush data to disk for crash safety
						# (turning this off can cause
						# unrecoverable data corruption)
synchronous_commit = {{ salt['pillar.get']('data:config:synchronous_commit', 'on') }}		# synchronization level;
					# off, local, remote_write, remote_apply, or on
#wal_sync_method = fsync		# the default is the first option
					# supported by the operating system:
					#   open_datasync
					#   fdatasync (default on Linux)
					#   fsync
					#   fsync_writethrough
					#   open_sync
full_page_writes = {{ salt['pillar.get']('data:config:full_page_writes', 'on') }}			# recover from partial page writes
{% if pg.version.major_num >= 905 %}
wal_compression = {{ salt['pillar.get']('data:config:wal_compression', 'on') }}			# enable compression of full-page writes
{% endif %}
wal_log_hints = {{ salt['pillar.get']('data:config:wal_log_hints', 'off') }}			# also do full page writes of non-critical updates
					# (change requires restart)
#wal_buffers = -1			# min 32kB, -1 sets based on shared_buffers
					# (change requires restart)
#wal_writer_delay = 200ms		# 1-10000 milliseconds
{% if pg.version.major_num >= 906 %}
wal_writer_flush_after = {{ salt['pillar.get']('data:config:wal_writer_flush_after', '0') }}		# measured in pages, 0 disables
{% endif %}

#commit_delay = 0			# range 0-100000, in microseconds
#commit_siblings = 5			# range 1-1000

# - Checkpoints -

checkpoint_timeout = {{ salt['pillar.get']('data:config:checkpoint_timeout', '10min') }}		# range 30s-1d
{% if pg.version.major_num >= 905                                                                 %}
{%     if salt['pillar.get']('data:dbaas:flavor')                                                 %}
{# Here we will set min/max wal size explicitly in MEGABYTES, even if it is 120202020MB,          #}
{# because we don't want to handle conversation issues.                                           #}
{# By the way pg correctly handles values like 1200MB                                             #}
{%         set MEGABYTE = 1024 ** 2                                                               %}
{%         set GIGABYTE = 1024 ** 3                                                               %}
{%         set coef_GB_MB = GIGABYTE / MEGABYTE                                                   %}
{%         set space_limit = salt['pillar.get']('data:dbaas:space_limit')                         %}
{%         set default_min_wal_size = [ coef_GB_MB, (space_limit * 0.05 / MEGABYTE)]|min|int|string + 'MB'    %}
{%         set default_max_wal_size = [8 * coef_GB_MB, (space_limit * 0.1 / MEGABYTE)]|min|int|string + 'MB'  %}
{%     else                                                                                       %}
{%         set default_min_wal_size = '1GB'                                                       %}
{%         set default_max_wal_size = '16GB'                                                      %}
{%     endif                                                                                      %}
max_wal_size = {{ salt['pillar.get']('data:config:max_wal_size', default_max_wal_size) }}
min_wal_size = {{ salt['pillar.get']('data:config:min_wal_size', default_min_wal_size) }}
{% else %}
checkpoint_segments = {{ salt['pillar.get']('data:config:checkpoint_segments', '384') }} # in logfile segments, min 1, 16MB each
{% endif %}
checkpoint_completion_target = {{ '%.10f'|format(salt['pillar.get']('data:config:checkpoint_completion_target', '0.8')|float) }}	# checkpoint target duration, 0.0 - 1.0
{% if pg.version.major_num >= 906 %}
checkpoint_flush_after = {{ salt['pillar.get']('data:config:checkpoint_flush_after', '0') }}		# measured in pages, 0 disables
{% endif %}
checkpoint_warning = {{ salt['pillar.get']('data:config:checkpoint_warning', '7min') }}		# 0 disables

# - Archiving -

archive_mode = {{ salt['pillar.get']('data:config:archive_mode', 'on') }}		# enables archiving; off, on, or always
				# (change requires restart)
archive_timeout = {{ salt['pillar.get']('data:config:archive_timeout', '600') }}		# force a logfile segment switch after this
				# number of seconds; 0 disables


#------------------------------------------------------------------------------
# REPLICATION
#------------------------------------------------------------------------------

# - Sending Server(s) -

# Set these on the master and on any standby that will send replication data.

max_wal_senders = {{ salt['pillar.get']('data:config:max_wal_senders', '20') }}		# max number of walsender processes
				# (change requires restart)
{% if pg.version.major_num < 1300 %}
wal_keep_segments = {{ salt['pillar.get']('data:config:wal_keep_segments', '64') }}		# in logfile segments, 16MB each; 0 disables
{% endif %}

{% if environment in ['compute-prod'] %}
wal_sender_timeout = {{ salt['pillar.get']('data:config:wal_sender_timeout', '60s') }}	# in milliseconds; 0 disables
{% else %}
wal_sender_timeout = {{ salt['pillar.get']('data:config:wal_sender_timeout', '600s') }}  # in milliseconds; 0 disables
{% endif %}
max_replication_slots = {{ salt['pillar.get']('data:config:max_replication_slots', '20') }}	# max number of replication slots
				# (change requires restart)
max_logical_replication_workers = {{ salt['pillar.get']('data:config:max_logical_replication_workers', '4') }} # max number of logical replication workers
        # (change requires restart)
{% if pg.version.major_num >= 905 %}
track_commit_timestamp = {{ salt['pillar.get']('data:config:track_commit_timestamp', 'off') }}	# collect timestamp of transaction commit
				# (change requires restart)
{% endif %}

# - Master Server -

# These settings are ignored on a standby server.

synchronous_standby_names = '{{ salt['pillar.get']('data:config:synchronous_standby_names', '') }}'	# standby servers that provide sync rep
				# number of sync standbys and comma-separated list of application_name
				# from standby(s); '*' = all
vacuum_defer_cleanup_age = {{ salt['pillar.get']('data:config:vacuum_defer_cleanup_age', '0') }}	# number of xacts by which cleanup is delayed

# - Standby Servers -

# These settings are ignored on a master server.

hot_standby = on			# "on" allows queries during recovery
					# (change requires restart)
#max_standby_archive_delay = 30s	# max delay before canceling queries
					# when reading WAL from archive;
					# -1 allows indefinite delay
max_standby_streaming_delay = {{ salt['pillar.get']('data:config:max_standby_streaming_delay', '30s') }}	# max delay before canceling queries
					# when reading streaming WAL;
					# -1 allows indefinite delay
wal_receiver_status_interval = 1s	# send replies at least this often
					# 0 disables
hot_standby_feedback = {{ salt['pillar.get']('data:config:hot_standby_feedback', 'on') }}		# send info from standby to prevent
					# query conflicts
#wal_receiver_timeout = 60s		# time that receiver waits for
					# communication from master
					# in milliseconds; 0 disables
{% if pg.version.major_num >= 905 %}
#wal_retrieve_retry_interval = 5s	# time to wait before retrying to
					# retrieve WAL after a failed attempt
{% endif %}


#------------------------------------------------------------------------------
# QUERY TUNING
#------------------------------------------------------------------------------

# - Planner Method Configuration -

enable_bitmapscan = {{ 'on' if salt['pillar.get']('data:config:enable_bitmapscan', True) else 'off' }}
enable_hashagg = {{ 'on' if salt['pillar.get']('data:config:enable_hashagg', True) else 'off' }}
enable_hashjoin = {{ 'on' if salt['pillar.get']('data:config:enable_hashjoin', True) else 'off' }}
enable_indexscan = {{ 'on' if salt['pillar.get']('data:config:enable_indexscan', True) else 'off' }}
enable_indexonlyscan = {{ 'on' if salt['pillar.get']('data:config:enable_indexonlyscan', True) else 'off' }}
enable_material = {{ 'on' if salt['pillar.get']('data:config:enable_material', True) else 'off' }}
enable_mergejoin = {{ 'on' if salt['pillar.get']('data:config:enable_mergejoin', True) else 'off' }}
enable_nestloop = {{ 'on' if salt['pillar.get']('data:config:enable_nestloop', True) else 'off' }}
enable_seqscan = {{ 'on' if salt['pillar.get']('data:config:enable_seqscan', True) else 'off' }}
enable_sort = {{ 'on' if salt['pillar.get']('data:config:enable_sort', True) else 'off' }}
enable_tidscan = {{ 'on' if salt['pillar.get']('data:config:enable_tidscan', True) else 'off' }}
{% if pg.version.major_num >= 1100 %}
enable_parallel_append = {{ 'on' if salt['pillar.get']('data:config:enable_parallel_append', True) else 'off' }}
enable_partitionwise_join = {{ 'on' if salt['pillar.get']('data:config:enable_partitionwise_join', False) else 'off' }}
enable_partitionwise_aggregate = {{ 'on' if salt['pillar.get']('data:config:enable_partitionwise_aggregate', False) else 'off' }}
enable_parallel_hash = {{ 'on' if salt['pillar.get']('data:config:enable_parallel_hash', True) else 'off' }}
enable_partition_pruning = {{ 'on' if salt['pillar.get']('data:config:enable_partition_pruning', True) else 'off' }}
{% endif %}

# - Planner Cost Constants -
seq_page_cost = {{ '%.10f'|format(salt['pillar.get']('data:config:seq_page_cost', '1.0')|float) }}			# measured on an arbitrary scale
random_page_cost = {{ '%.10f'|format(salt['pillar.get']('data:config:random_page_cost', '1.0')|float) }}			# same scale as above
#cpu_tuple_cost = 0.01			# same scale as above
#cpu_index_tuple_cost = 0.005		# same scale as above
#cpu_operator_cost = 0.0025		# same scale as above
{% if pg.version.major_num >= 906 %}
#parallel_tuple_cost = 0.1		# same scale as above
#parallel_setup_cost = 1000.0	# same scale as above
#min_parallel_relation_size = 8MB
{% endif %}
effective_cache_size = {{ salt['pillar.get']('data:config:effective_cache_size', '100GB') }}

# - Genetic Query Optimizer -

geqo = {{ salt['pillar.get']('data:config:geqo', 'on') }}
geqo_threshold = {{ salt['pillar.get']('data:config:geqo_threshold', 12) }}
geqo_effort = {{ salt['pillar.get']('data:config:geqo_pool_size', 5) }}			# range 1-10
geqo_pool_size = {{ salt['pillar.get']('data:config:geqo_pool_size', 0) }}			# selects default based on effort
geqo_generations = {{ salt['pillar.get']('data:config:geqo_generations', 0) }}			# selects default based on effort
geqo_selection_bias = {{ '%.10f'|format(salt['pillar.get']('data:config:geqo_selection_bias', '2.0')|float) }}		# range 1.5-2.0
geqo_seed = {{ '%.10f'|format(salt['pillar.get']('data:config:geqo_seed', '0.0')|float) }}			# range 0.0-1.0

# - Other Planner Options -

{% if pg.version.major_num >= 1200 %}
plan_cache_mode = {{ salt['pillar.get']('data:config:plan_cache_mode', 'auto') }}
{% endif %}
default_statistics_target = {{ salt['pillar.get']('data:config:default_statistics_target', '100') }}	# range 1-10000
constraint_exclusion = {{ salt['pillar.get']('data:config:constraint_exclusion', 'partition') }}	# on, off, or partition
cursor_tuple_fraction = {{ '%.10f'|format(salt['pillar.get']('data:config:cursor_tuple_fraction', '0.1')|float) }}		# range 0.0-1.0
from_collapse_limit = {{ salt['pillar.get']('data:config:from_collapse_limit', '8') }}
join_collapse_limit = {{ salt['pillar.get']('data:config:join_collapse_limit', '8') }}		# 1 disables collapsing of explicit
					# JOIN clauses
{% if pg.version.major_num >= 906 %}
force_parallel_mode = {{ salt['pillar.get']('data:config:force_parallel_mode', 'off') }}
{% endif %}

{% if pg.version.major_num >= 1100 %}
jit = {{ 'on' if salt['pillar.get']('data:config:jit', False) else 'off' }}				# allow JIT compilation
{% endif %}

#------------------------------------------------------------------------------
# ERROR REPORTING AND LOGGING
#------------------------------------------------------------------------------

# - Where to Log -

{% if salt['pillar.get']('data:ship_logs', False) %}
log_destination = 'csvlog'
{% else %}
log_destination = 'stderr'
{% endif %}
                                        # Valid values are combinations of
                                        # stderr, csvlog, syslog, and eventlog,
                                        # depending on platform.  csvlog
                                        # requires logging_collector to be on.

# This is used when logging to stderr:
logging_collector = on                  # Enable capturing of stderr and csvlog
                                        # into log files. Required to be on for
                                        # csvlogs.
                                        # (change requires restart)

# These are only used if logging_collector is on:
log_directory = '/var/log/postgresql'   # directory where log files are written,
                                        # can be absolute or relative to PGDATA
log_filename = '{{ pg.log_file_name }}'  # log file name pattern,
                                        # can include strftime() escapes
log_file_mode = '0640'                  # creation mode for log files,
                                        # begin with 0 to use octal notation
log_truncate_on_rotation = off          # If on, an existing log file with the
                                        # same name as the new log file will be
                                        # truncated rather than appended to.
                                        # But such truncation only occurs on
                                        # time-driven rotation, not on restarts
                                        # or size-driven rotation.  Default is
                                        # off, meaning append to existing files
                                        # in all cases.
log_rotation_age = 0                    # Automatic rotation of logfiles will
                                        # happen after that time.  0 disables.
log_rotation_size = 0                   # Automatic rotation of logfiles will
                                        # happen after that much log output.
                                        # 0 disables.

# These are relevant when logging to syslog:
#syslog_facility = 'LOCAL0'
#syslog_ident = 'postgres'
{% if pg.version.major_num >= 906 %}
#syslog_sequence_numbers = on
#syslog_split_messages = on
{% endif %}

# This is only relevant when logging to eventlog (win32):
#event_source = 'PostgreSQL'

# - When to Log -

client_min_messages = {{ salt['pillar.get']('data:config:client_min_messages', 'notice') }}		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   log
					#   notice
					#   warning
					#   error

log_min_messages = {{ salt['pillar.get']('data:config:log_min_messages', 'warning') }}		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic

log_min_error_statement = {{ salt['pillar.get']('data:config:log_min_error_statement', 'error') }}	# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic (effectively off)

log_min_duration_statement = {{ salt['pillar.get']('data:config:log_min_duration_statement', '-1') }}	# -1 is disabled, 0 logs all statements
					# and their durations, > 0 logs only
					# statements running at least this number
					# of milliseconds


# - What to Log -

#debug_print_parse = off
#debug_print_rewritten = off
#debug_print_plan = off
#debug_pretty_print = on
log_checkpoints = {{ 'on' if salt['pillar.get']('data:config:log_checkpoints', True) else 'off' }}
log_connections = {{ 'on' if salt['pillar.get']('data:config:log_connections', False) else 'off' }}
log_disconnections = {{ 'on' if salt['pillar.get']('data:config:log_disconnections', False) else 'off' }}
log_duration = {{ 'on' if salt['pillar.get']('data:config:log_duration', False) else 'off' }}
log_error_verbosity = {{ salt['pillar.get']('data:config:log_error_verbosity', 'default') }}		# terse, default, or verbose messages
log_hostname = {{ salt['pillar.get']('data:config:log_hostname', 'on') }}
log_line_prefix = '[ %m %a,%u,%d,%p,%e ]:'			# special values:
					#   %a = application name
					#   %u = user name
					#   %d = database name
					#   %r = remote host and port
					#   %h = remote host
					#   %p = process ID
					#   %t = timestamp without milliseconds
					#   %m = timestamp with milliseconds
					#   %n = timestamp with milliseconds (as a Unix epoch)
					#   %i = command tag
					#   %e = SQL state
					#   %c = session ID
					#   %l = session line number
					#   %s = session start timestamp
					#   %v = virtual transaction ID
					#   %x = transaction ID (0 if none)
					#   %q = stop here in non-session
					#        processes
					#   %% = '%'
					# e.g. '<%u%%%d> '
log_lock_waits = {{ 'on' if salt['pillar.get']('data:config:log_lock_waits', True) else 'off' }}			# log lock waits >= deadlock_timeout
log_statement = '{{ salt['pillar.get']('data:config:log_statement', 'ddl') }}'			# none, ddl, mod, all
{% if pg.version.major_num >= 905 %}
log_replication_commands = {{ salt['pillar.get']('data:config:log_replication_commands', 'off') }}
{% endif %}
log_temp_files = {{ salt['pillar.get']('data:config:log_temp_files', '0') }}			# log temporary files equal or larger
					# than the specified size in kilobytes;
					# -1 disables, 0 logs all temp files
log_timezone = 'Europe/Moscow'


# - Process Title -

{% if pg.version.major_num >= 905 %}
cluster_name = '{{ salt['pillar.get']('data:config:cluster_name', '') }}'			# added to process titles if nonempty
					# (change requires restart)
{% endif %}
#update_process_title = on


#------------------------------------------------------------------------------
# RUNTIME STATISTICS
#------------------------------------------------------------------------------

# - Query/Index Statistics Collector -

#track_activities = on
#track_counts = on
track_io_timing = on
track_functions = all			# none, pl, all
track_activity_query_size = {{ salt['pillar.get']('data:config:track_activity_query_size', 1024) }}	# (change requires restart)
stats_temp_directory = '{{ salt['pillar.get']('data:config:stats_temp_directory', 'pg_stat_tmp') }}'


# - Statistics Monitoring -

#log_parser_stats = off
#log_planner_stats = off
#log_executor_stats = off
#log_statement_stats = off


#------------------------------------------------------------------------------
# AUTOVACUUM PARAMETERS
#------------------------------------------------------------------------------


        
{% set default_autovacuum_vacuum_cost_delay = -5 * cpu + 55 %}
{% if default_autovacuum_vacuum_cost_delay < 5 %}
    {% set default_autovacuum_vacuum_cost_delay = 5 %}
{% endif %}
{% set default_autovacuum_vacuum_cost_limit = [150 * cpu  + 400, 10000] | min %}
#autovacuum = on			# Enable autovacuum subprocess?  'on'
					# requires track_counts to also be on.
log_autovacuum_min_duration = {{ salt['pillar.get']('data:config:log_autovacuum_min_duration', '1000') }}	# -1 disables, 0 logs all actions and
					# their durations, > 0 logs only
					# actions running at least this number
					# of milliseconds.
autovacuum_max_workers = {{ salt['pillar.get']('data:config:autovacuum_max_workers', default_autovacuum_max_workers) }}		# max number of autovacuum subprocesses
					# (change requires restart)
autovacuum_naptime = {{ salt['pillar.get']('data:config:autovacuum_naptime', '15s') }}		# time between autovacuum runs
autovacuum_vacuum_threshold = {{ salt['pillar.get']('data:config:autovacuum_vacuum_threshold', '200') }}	# min number of row updates before
					# vacuum
#autovacuum_analyze_threshold = 50	# min number of row updates before
					# analyze
autovacuum_vacuum_scale_factor = {{ '%.10f'|format(salt['pillar.get']('data:config:autovacuum_vacuum_scale_factor', '0.00001')|float) }}	# fraction of table size before vacuum
autovacuum_analyze_scale_factor = {{ '%.10f'|format(salt['pillar.get']('data:config:autovacuum_analyze_scale_factor', '0.0001')|float) }}	# fraction of table size before analyze
autovacuum_freeze_max_age = {{ salt['pillar.get']('data:config:autovacuum_freeze_max_age', '200000000') }}	# maximum XID age before forced vacuum
					# (change requires restart)
autovacuum_multixact_freeze_max_age = {{ salt['pillar.get']('data:config:autovacuum_multixact_freeze_max_age', '200000000') }} # maximum multixact age
					# before forced vacuum
					# (change requires restart)
autovacuum_vacuum_cost_delay = {{ salt['pillar.get']('data:config:autovacuum_vacuum_cost_delay', default_autovacuum_vacuum_cost_delay) }}	# default vacuum cost delay for
					# autovacuum, in milliseconds;
					# -1 means use vacuum_cost_delay
autovacuum_vacuum_cost_limit = {{ salt['pillar.get']('data:config:autovacuum_vacuum_cost_limit', default_autovacuum_vacuum_cost_limit) }}	# default vacuum cost limit for
					# autovacuum, -1 means use
					# vacuum_cost_limit


#------------------------------------------------------------------------------
# CLIENT CONNECTION DEFAULTS
#------------------------------------------------------------------------------

# - Statement Behavior -

search_path = {{ salt['pillar.get']('data:config:search_path', '"$user", public').replace('\n', ' ')|yaml_squote }}	# schema names
#default_tablespace = ''		# a tablespace name, '' uses the default
#temp_tablespaces = ''			# a list of tablespace names, '' uses
					# only default tablespace
#check_function_bodies = on
default_transaction_isolation = '{{ salt['pillar.get']('data:config:default_transaction_isolation', 'read committed') }}'
default_transaction_read_only = {{ 'on' if salt['pillar.get']('data:config:default_transaction_read_only', False) else 'off' }}
#default_transaction_deferrable = off
#session_replication_role = 'origin'
statement_timeout = {{ salt['pillar.get']('data:config:statement_timeout', '0') }}			# in milliseconds, 0 is disabled
lock_timeout = {{ salt['pillar.get']('data:config:lock_timeout', '1s') }}			# in milliseconds, 0 is disabled
{% if pg.version.major_num >= 906 %}
idle_in_transaction_session_timeout = {{ salt['pillar.get']('data:config:idle_in_transaction_session_timeout', '0') }}		# in milliseconds, 0 is disabled
{% endif %}
#vacuum_freeze_min_age = 50000000
vacuum_freeze_table_age = {{ salt['pillar.get']('data:config:vacuum_freeze_table_age', '150000000') }}
#vacuum_multixact_freeze_min_age = 5000000
vacuum_multixact_freeze_table_age = {{ salt['pillar.get']('data:config:vacuum_multixact_freeze_table_age', '75000000') }}
bytea_output = '{{ salt['pillar.get']('data:config:bytea_output', 'hex') }}'			# hex, escape
xmlbinary = '{{ salt['pillar.get']('data:config:xmlbinary', 'base64') }}'
xmloption = '{{ salt['pillar.get']('data:config:xmloption', 'content') }}'
#gin_fuzzy_search_limit = 0
{% if pg.version.major_num >= 905 %}
gin_pending_list_limit = {{ salt['pillar.get']('data:config:gin_pending_list_limit', '4MB') }}
{% endif %}

# - Locale and Formatting -

datestyle = 'iso, dmy'
#intervalstyle = 'postgres'
timezone = '{{ salt['pillar.get']('data:config:timezone', 'Europe/Moscow') }}'
#timezone_abbreviations = 'Default'     # Select the set of available time zone
					# abbreviations.  Currently, there are
					#   Default
					#   Australia (historical usage)
					#   India
					# You can create your own file in
					# share/timezonesets/.
#extra_float_digits = 0			# min -15, max 3
#client_encoding = sql_ascii		# actually, defaults to database
					# encoding

# These settings are initialized by initdb, but they can be changed.
lc_messages = 'en_US.UTF-8'			# locale for system error message
					# strings
lc_monetary = 'en_US.UTF-8'			# locale for monetary formatting
lc_numeric = 'en_US.UTF-8'			# locale for number formatting
lc_time = 'en_US.UTF-8'				# locale for time formatting

# default configuration for text search
default_text_search_config = 'pg_catalog.english'

# - Other Defaults -

#dynamic_library_path = '$libdir'
#local_preload_libraries = ''
#session_preload_libraries = ''


#------------------------------------------------------------------------------
# LOCK MANAGEMENT
#------------------------------------------------------------------------------

deadlock_timeout = {{ salt['pillar.get']('data:config:deadlock_timeout', '1s') }}
max_locks_per_transaction = {{ salt['pillar.get']('data:config:max_locks_per_transaction', '64') }}		# min 10
					# (change requires restart)
max_pred_locks_per_transaction = {{ salt['pillar.get']('data:config:max_pred_locks_per_transaction', '64') }}	# min 10
					# (change requires restart)


#------------------------------------------------------------------------------
# VERSION/PLATFORM COMPATIBILITY
#------------------------------------------------------------------------------

# - Previous PostgreSQL Versions -

array_nulls = {{ 'on' if salt['pillar.get']('data:config:array_nulls', True) else 'off' }}
backslash_quote = {{ salt['pillar.get']('data:config:backslash_quote', 'safe_encoding') }}	# on, off, or safe_encoding
default_with_oids = {{ 'on' if salt['pillar.get']('data:config:default_with_oids', False) else 'off' }}
escape_string_warning = {{ 'on' if salt['pillar.get']('data:config:escape_string_warning', True) else 'off' }}
lo_compat_privileges = {{ 'on' if salt['pillar.get']('data:config:lo_compat_privileges', False) else 'off' }}
{% if pg.version.major_num < 1400 %}
operator_precedence_warning = {{ 'on' if salt['pillar.get']('data:config:operator_precedence_warning', False) else 'off' }}
{% endif %}
quote_all_identifiers = {{ 'on' if salt['pillar.get']('data:config:quote_all_identifiers', False) else 'off' }}
{% if pg.version.major_num <= 906 %}
sql_inheritance = {{ salt['pillar.get']('data:config:sql_inheritance', 'on') }}
{% endif %}
standard_conforming_strings = {{ 'on' if salt['pillar.get']('data:config:standard_conforming_strings', True) else 'off' }}
synchronize_seqscans = {{ 'on' if salt['pillar.get']('data:config:synchronize_seqscans', True) else 'off' }}

# - Other Platforms and Clients -

transform_null_equals = {{ 'on' if salt['pillar.get']('data:config:transform_null_equals', False) else 'off' }}


#------------------------------------------------------------------------------
# ERROR HANDLING
#------------------------------------------------------------------------------

exit_on_error = {{ 'on' if salt['pillar.get']('data:config:exit_on_error', False) else 'off' }}			# terminate session on any error?
#restart_after_crash = on		# reinitialize after backend crash?


#------------------------------------------------------------------------------
# CONFIG FILE INCLUDES
#------------------------------------------------------------------------------

# These options allow settings to be loaded from files other than the
# default postgresql.conf.

#include_dir = 'conf.d'			# include files ending in '.conf' from
					# directory 'conf.d'
#include_if_exists = 'exists.conf'	# include file only if it exists
#include = 'special.conf'		# include file

{% if pg.version.major_num >= 1200 and salt['pillar.get']('data:use_walg', True) %}
# This row must be placed before `include_if_exists = 'recovery.conf'`
restore_command = '/usr/bin/timeout -s SIGQUIT 60 /usr/bin/wal-g wal-fetch "%f" "%p" --config /etc/wal-g/wal-g.yaml'
{% endif %}
{% if pg.version.major_num >= 1200 %}
include_if_exists = 'recovery.conf'
{% endif %}

#------------------------------------------------------------------------------
# CUSTOMIZED OPTIONS
#------------------------------------------------------------------------------

# Add settings for extensions here

# Option to tell pgcheck do not use this host
pgcheck.closed = false
# Option to tell pgaas-proxy to fail checks on this host
dbaas.closed = false

{% if salt['pillar.get']('data:config:archive_command') %}
archive_command = '{{ salt['pillar.get']('data:config:archive_command') }}'
{% elif salt['pillar.get']('data:use_walg', True) %}
archive_command = '/usr/bin/timeout 60 /usr/bin/wal-g wal-push %p --config /etc/wal-g/wal-g.yaml'
{% endif %}
{% if pg.version.major_num > 1200 %}
hash_mem_multiplier = {{ '%.10f'|format(salt['pillar.get']('data:config:hash_mem_multiplier', '1.0')|float) }}             # 1-1000.0 multiplier on hash table work_mem
logical_decoding_work_mem = {{ salt['pillar.get']('data:config:logical_decoding_work_mem', '64MB') }}       # min 64kB
maintenance_io_concurrency = {{ salt['pillar.get']('data:config:maintenance_io_concurrency', '10') }}        # 1-1000; 0 disables prefetching
max_slot_wal_keep_size = {{ salt['pillar.get']('data:config:max_slot_wal_keep_size', '-1') }}    # in megabytes; -1 disables
wal_keep_size = {{ salt['pillar.get']('data:config:wal_keep_size', '0') }}              # in megabytes; 0 disables
enable_incremental_sort = {{ 'on' if salt['pillar.get']('data:config:enable_incremental_sort', True) else 'off' }}
autovacuum_vacuum_insert_threshold = {{ salt['pillar.get']('data:config:autovacuum_vacuum_insert_threshold', '1000') }}      # min number of row inserts
                                        # before vacuum; -1 disables insert
                                        # vacuums

autovacuum_vacuum_insert_scale_factor = {{ '%.10f'|format(salt['pillar.get']('data:config:autovacuum_vacuum_insert_scale_factor', '0.2')|float) }}    # fraction of inserts over table
                                        # size before insert vacuum

log_min_duration_sample = {{ salt['pillar.get']('data:config:log_min_duration_sample', '-1') }}           # -1 is disabled, 0 logs a sample of statements
                                        # and their durations, > 0 logs only a sample of
                                        # statements running at least this number
                                        # of milliseconds;
                                        # sample fraction is determined by log_statement_sample_rate

log_statement_sample_rate = {{ '%.10f'|format(salt['pillar.get']('data:config:log_statement_sample_rate', '0.0')|float) }}        # fraction of logged statements exceeding
                                        # log_min_duration_sample to be logged;
                                        # 1.0 logs all such statements, 0.0 never logs

log_parameter_max_length = {{ salt['pillar.get']('data:config:log_parameter_max_length', '-1') }}          # when logging statements, limit logged
                                        # bind-parameter values to N bytes;
                                        # -1 means print in full, 0 disables

log_parameter_max_length_on_error = {{ salt['pillar.get']('data:config:log_parameter_max_length_on_error', '0') }}  # when logging an error, limit logged
                                        # bind-parameter values to N bytes;
                                        # -1 means print in full, 0 disables
{% endif %}

{% if pg.version.major_num > 1300 %}
client_connection_check_interval = {{ salt['pillar.get']('data:config:client_connection_check_interval', '0') }}     # 0 - disable connection checks
enable_async_append = {{ 'on' if salt['pillar.get']('data:config:enable_async_append', True) else 'off' }}
enable_gathermerge = {{ 'on' if salt['pillar.get']('data:config:enable_gathermerge', True) else 'off' }}
enable_memoize = {{ 'on' if salt['pillar.get']('data:config:enable_memoize', True) else 'off' }}
log_recovery_conflict_waits = {{ 'on' if salt['pillar.get']('data:config:enable_memoize') else 'off' }}
vacuum_failsafe_age = {{ salt['pillar.get']('data:config:vacuum_failsafe_age', '1600000000') }}                      # from zero to 2.1 billion
vacuum_multixact_failsafe_age = {{ salt['pillar.get']('data:config:vacuum_multixact_failsafe_age', '1600000000') }}  # from zero to 2.1 billion
{% endif %}
