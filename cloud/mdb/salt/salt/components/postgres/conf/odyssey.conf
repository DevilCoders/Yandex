# odyssey configuration file.
#

{% from "components/postgres/pg.jinja" import pg with context %}
{% set fqdn = salt['pillar.get']('data:dbaas:fqdn', salt['grains.get']('fqdn', 'unknown')) %}
{% set my_dc = salt['grains.get']('ya:short_dc', fqdn[:3]) %}
{% set yandex_env = salt['pillar.get']('yandex:environment', 'dev') %}
{% set default_pool_size = 0 %}
{% set use_pool_size_limit = salt['pillar.get']('data:config:odyssey:use_pool_size_limit', True) %}
{% set application_name_add_host = salt['pillar.get']('data:config:odyssey:application_name_add_host', True) %}
{% set pool_timeout = salt['pillar.get']('data:config:odyssey:pool_timeout', '1000') %}
{% set pool_ttl = salt['pillar.get']('data:config:odyssey:pool_ttl', '20') %}

{% set pool_smart_discard = salt['pillar.get']('data:config:odyssey:pool_smart_discard', 'yes') %}

{% set pool_discard = 'no' %}
{%  if salt['pillar.get']('data:config:odyssey:pool_discard') %}
{%      set pool_discard = salt['pillar.get']('data:config:odyssey:pool_discard') %}
{%  else %}
{%      set pgbouncer_reset_query_always = salt['pillar.get']('data:config:server_reset_query_always', 0) %}
{%      if pgbouncer_reset_query_always > 0 %}
{%          set pool_discard = 'yes' %}
{%      endif %}
{% endif %}

{% if salt['pillar.get']('data:config:odyssey:client_max_routing', '0') != '0' %}
    client_max_routing = salt['pillar.get']('data:config:odyssey:client_max_routing')
{% endif %}

{% set pool_cancel = salt['pillar.get']('data:config:odyssey:pool_cancel', 'yes') %}
{% set pool_rollback = salt['pillar.get']('data:config:odyssey:pool_rollback', 'yes') %}
{% set client_max = salt['pillar.get']('data:config:odyssey:client_max', '32000') %}
{% set users = salt['pillar.get']('data:config:pgusers', {}) %}
{% set dbs = {} %}
{% for user in users | sort %}
{% set connect_dbs = users[user].get('connect_dbs', []) %}
{% if users[user].get('bouncer') and users[user].get('create') and '*' not in connect_dbs %}
{% for db in connect_dbs | sort %}
{% do dbs.update({db: 1}) %}
{% endfor %}
{% endif %}
{% endfor %}
{% set local_storage = 'local' %}
{% set pg_storage = 'pg_server' %}
{% set default_pool_mode = salt['pillar.get']('data:config:pool_mode', 'transaction') %}
{% if default_pool_mode == 'statement' %}
{% set default_pool_mode = 'transaction' %}
{% endif %}
{% set overrides = salt['pillar.get']('data:config:pgbouncer:override_pool_mode', {}) %}
{% set pgproxy_storages = {} %}
{% set cluster_id = salt['pillar.get']('data:dbaas:cluster_id', salt['grains.get']('id').split('.')[0][:-3]) %}
{% set fqdn = salt['grains.get']('id') %}

{% set workers_default = 1 %}
{% set workers = workers_default %}
{% set cpu_guarantee = salt['pillar.get']('data:dbaas:flavor:cpu_guarantee', workers_default) %}
{% set pgbouncer_count = salt['pillar.get']('data:pgbouncer:count', workers_default) %}
{% if cpu_guarantee > 1 %}
{% set workers = (cpu_guarantee / 2) | int %}
{% else %}
{% set workers = pgbouncer_count %}
{% endif %}

# include "path"

daemonize               yes
# log_syslog            no
# log_syslog_facility   "daemon"
# log_syslog_ident      "odyssey"
pid_file                "/var/run/odyssey/odyssey.pid"
log_file                "/var/log/odyssey/odyssey.log"
log_format              "{{ salt['pillar.get']('data:config:odyssey:log_format', 'tskv\\t%t\\tpid=%p\\tunixtime=%n\\tms=%e\\tlevel=%l\\tcid=%i\\tsid=%s\\tdb=%d\\tuser=%u\\tctx=%c\\tcluster='~ cluster_id ~'\\thostname='~ fqdn ~'\\torigin=odyssey\\tmsg=%M\\n') }}"
log_to_stdout           {{ salt['pillar.get']('data:config:odyssey:log_to_stdout', 'no') }}
log_debug               {{ salt['pillar.get']('data:config:odyssey:log_debug', 'no') }}
log_query               {{ salt['pillar.get']('data:config:odyssey:log_query', 'no') }}
log_config              {{ salt['pillar.get']('data:config:odyssey:log_config', 'yes') }}
log_session             {{ salt['pillar.get']('data:config:odyssey:log_session', 'yes') }}
log_stats               {{ salt['pillar.get']('data:config:odyssey:log_stats', 'yes') }}
stats_interval          {{ salt['pillar.get']('data:config:odyssey:stats_interval', '60') }}
readahead               {{ salt['pillar.get']('data:config:odyssey:readahead', '4096') }}
packet_write_queue      {{ salt['pillar.get']('data:config:odyssey:packet_write_queue', '4') }}
cache_msg_gc_size       {{ salt['pillar.get']('data:config:odyssey:cache_msg_gc_size', '12288') }}
nodelay                 yes
keepalive               {{ salt['pillar.get']('data:config:odyssey:keepalive', '15') }}
keepalive_keep_interval {{ salt['pillar.get']('data:config:odyssey:keepalive_keep_interval', '3') }}
keepalive_probes        {{ salt['pillar.get']('data:config:odyssey:keepalive_probes', '3') }}
client_max              {{ salt['pillar.get']('data:config:odyssey:global_client_max', '32000') }}
resolvers               {{ salt['pillar.get']('data:config:odyssey:resolvers', '1') }}
workers                 {{ workers }}

{% if salt['pillar.get']('data:dbaas:vtype') == 'compute' and not salt['pillar.get']('data:dbaas:assign_public_ip', False) %}
{% set default_client_tls_sslmode = 'allow' %}
{% else %}
{% set default_client_tls_sslmode = 'require' %}
{% endif %}

listen {
    host "*"
    port 6432
    backlog {{ salt['pillar.get']('data:config:odyssey:backlog', '16') }}
    tls "{{ salt['pillar.get']('data:pgbouncer:client_tls_sslmode', default_client_tls_sslmode) }}"
    tls_cert_file "/etc/odyssey/ssl/server.crt"
    tls_key_file "/etc/odyssey/ssl/server.key"
    tls_ca_file "/etc/odyssey/ssl/allCAs.pem"
    tls_protocols "tlsv1.2"
}

storage "{{ local_storage }}" {
    type "local"
}

storage "{{ pg_storage }}" {
    type "remote"
    host "127.0.0.1"
    port 5432
    tls "disable"
#   tls_ca_file ""
#   tls_key_file ""
#   tls_cert_file ""
#   tls_protocols ""
}

database "pgbouncer" {
{% for user in ['monitor'] %}
    user "{{ user }}" {
        authentication "md5"
        password "md5{{ salt['hashutil.md5_digest'](users[user]['password'] + user) }}"
        storage "{{ local_storage }}"
        pool "session"
{% if use_pool_size_limit %}
        pool_size {{ users[user].get('conn_limit', default_pool_size) }}
{% else %}
{#       zero means no limit #}
        pool_size 0
{% endif %}
{% if application_name_add_host %}
        application_name_add_host yes
{% endif %}
        pool_timeout {{ pool_timeout }}
        pool_ttl {{ pool_ttl }}
        pool_discard {{ pool_discard }}
        pool_cancel {{ pool_cancel }}
        pool_rollback {{ pool_rollback }}
        client_max {{ client_max }}
        client_fwd_error yes
        quantiles "0.999,0.99,0.95,0.9,0.75,0.5"
    }
{% endfor %}
    user default {
        authentication "block"
        storage "{{ local_storage }}"
        pool "session"
    }
}

{% set unmanaged_dbs = salt['pillar.get']('data:unmanaged_dbs', {}) %}
{% if pg.use_1c and unmanaged_dbs|length %}
{% set dbname_1c = unmanaged_dbs[0].keys()|first %}
database "template1" {
{% for user in users.keys() %}
{% set connect_dbs = users[user].get('connect_dbs') %}
{% if connect_dbs and users[user].get('bouncer') and users[user].get('create') %}
{%     set dbname_1c = unmanaged_dbs[0].keys()|first if '*' in connect_dbs else connect_dbs[0] %}
  user "{{ user }}" {
    authentication "md5"
    password "md5{{ salt['hashutil.md5_digest'](users[user]['password'] + user) }}"
    storage "{{ pg_storage }}"
    storage_db "{{ dbname_1c }}"
{%     if overrides.get(dbname_1c, default_pool_mode) != default_pool_mode %}
    pool "{{ overrides.get(dbname_1c) }}"
{%     else %}
    pool "{{ default_pool_mode }}"
{%     endif %}
{%     if use_pool_size_limit %}
    pool_size {{ users[user].get('conn_limit', default_pool_size) }}
{%     else %}
{#       zero means no limit #}
    pool_size 0
{%     endif %}
{%     if application_name_add_host %}
    application_name_add_host yes
{%     endif %}
    pool_timeout {{ pool_timeout }}
    pool_ttl {{ pool_ttl }}
    pool_discard {{ pool_discard }}
    pool_cancel {{ pool_cancel }}
    pool_rollback {{ pool_rollback }}
    client_max {{ client_max }}
    client_fwd_error yes
  }
{% endif %}
{% endfor %}
  user default {
    authentication "block"
    storage "{{ pg_storage }}"
    pool "{{ default_pool_mode }}"
  }
}
{% endif %}

{% for dbname in dbs.keys() | sort %}
database "{{ dbname }}" {
{% for user in users.keys() | sort %}
{% set connect_dbs = users[user].get('connect_dbs', []) %}
{% set usr_cathcup_checks = users[user].get('catchup_checks', 1) %}
{% set usr_pool_reserve_prepaped_statements = False %}
{% set usr_cathcup_timeout = 0  %}
{% set usr_pool_mode = default_pool_mode %}
{% if users[user]['settings'] is defined %}
{% set usr_pool_mode = users[user]['settings'].get('pool_mode', usr_pool_mode) %}
{% set usr_pool_reserve_prepaped_statements = users[user]['settings'].get('usr_pool_reserve_prepaped_statements', usr_pool_reserve_prepaped_statements) %}
{% set usr_cathcup_timeout = users[user]['settings'].get('catchup_timeout', usr_cathcup_timeout) %}
{% endif %}
{% if ('*' in connect_dbs or dbname in connect_dbs) and users[user].get('bouncer') and users[user].get('create') %}
    user "{{ user }}" {
        authentication "md5"
        password "md5{{ salt['hashutil.md5_digest'](users[user]['password'] + user) }}"
        storage "{{ pg_storage }}"
{% if usr_pool_reserve_prepaped_statements and usr_pool_mode != 'session' %}
{# use prepared statement reserve feature #}
        pool "{{ usr_pool_mode }}"
        pool_reserve_prepared_statement yes
{% else %}
{%      if overrides.get(dbname, default_pool_mode) != default_pool_mode %}
        pool "{{ overrides.get(dbname) }}"
{%      else %}
        pool "{{ usr_pool_mode }}"
{%      endif %}
{% endif %}
{% if use_pool_size_limit %}
        pool_size {{ users[user].get('conn_limit', default_pool_size) }}
{% else %}
{#       zero means no limit #}
        pool_size 0
{% endif %}
{% if application_name_add_host %}
        application_name_add_host yes
{% endif %}
        pool_timeout {{ pool_timeout }}
        pool_ttl {{ pool_ttl }}
{% if usr_pool_reserve_prepaped_statements and usr_pool_mode != 'session' %}
{# use prepared statement reserve feature #}
        pool_discard no
        pool_smart_discard {{ pool_smart_discard }}
{% else %}
        pool_discard {{ pool_discard }}
{% endif %}
{# lag polling feature #}
{% if usr_cathcup_timeout > 0 %}
        catchup_timeout {{ usr_cathcup_timeout }}
        catchup_checks {{ usr_cathcup_checks  }}
{% endif %}
        pool_cancel {{ pool_cancel }}
        pool_rollback {{ pool_rollback }}
        client_max {{ client_max }}
        client_fwd_error yes
{% if user != "monitor" %}
        quantiles "0.999,0.99,0.95,0.9,0.75,0.5"
{% endif %}
    }
{% endif %}
{% endfor %}
    user default {
        authentication "block"
        storage "{{ pg_storage }}"
        pool "{{ default_pool_mode }}"
    }
}

{% endfor %}
database default
{
{% for user in users.keys() | sort %}
{% set connect_dbs = users[user].get('connect_dbs', []) %}
{% if '*' in connect_dbs and users[user].get('bouncer') and users[user].get('create') %}
    user "{{ user }}" {
        # none, block, clear_text, md5
        authentication "md5"
        password "md5{{ salt['hashutil.md5_digest'](users[user]['password'] + user) }}"
        storage "{{ pg_storage }}"
        pool "{{ default_pool_mode }}"
{% if use_pool_size_limit %}
        pool_size {{ users[user].get('conn_limit', default_pool_size) }}
{% else %}
{#       zero means no limit #}
        pool_size 0
{% endif %}
{% if application_name_add_host %}
        application_name_add_host yes
{% endif %}
        pool_timeout {{ pool_timeout }}
        pool_discard {{ pool_discard }}
        pool_ttl {{ pool_ttl }}
        pool_cancel {{ pool_cancel }}
        pool_rollback {{ pool_rollback }}
        client_max {{ client_max }}
        client_fwd_error yes
    }
{% endif %}
{% endfor %}
    user default {
        # none, block, clear_text, md5
        authentication "block"
        storage "pg_server"
        pool "{{ default_pool_mode }}"
    }
}

locks_dir "/var/run/odyssey"

graceful_die_on_errors yes
enable_online_restart yes
bindwith_reuseport yes
