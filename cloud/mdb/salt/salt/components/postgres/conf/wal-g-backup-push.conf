{% from "components/postgres/pg.jinja" import pg with context %}
{% set zk_lockpath_prefix = salt['pillar.get']('data:pgsync:zk_lockpath_prefix', '/pgsync/' + salt['pillar.get']('data:dbaas:cluster_id', salt['grains.get']('id').split('.')[0][:-1])) + '/' %}
[main]
log_path = /var/log/postgresql/s3-backup.log
election_timeout = {{ salt['pillar.get']('data:walg:backup_election_timeout', 15 * salt['pillar.get']('data:dbaas:cluster_hosts', [1, 2, 3])|length + 15) }}
max_replication_lag = 1800
zk_hosts = {{ salt['pillar.get']('data:pgsync:zk_hosts', 'zk-df-e2e01f.db.yandex.net:2181,zk-df-e2e01h.db.yandex.net:2181,zk-df-e2e01k.db.yandex.net:2181') }}
election_lock = {{ zk_lockpath_prefix }}backup
pgsync_prefix = {{ zk_lockpath_prefix }}
{% if salt['pillar.get']('data:use_pgsync', True) %}
use_pgsync = yes
{% else %}
use_pgsync = no
{% endif %}
pgdata = {{ pg.data }}
keep = {{ salt['pillar.get']('data:backup:retain_period', salt['pillar.get']('data:walg:backup_keep', 7)) }}
timeout = {{ salt['pillar.get']('data:walg:backup_timeout', 172800) }}
sleep = {{ salt['pillar.get']('data:backup:sleep', salt['pillar.get']('data:walg:backup_sleep', 7200)) }}
