# odyssey configuration file.
#
{% set odyssey_user = salt['pillar.get']('data:odyssey:user', 'postgres') %}
{% set fqdn = salt['pillar.get']('data:dbaas:fqdn', salt['grains.get']('fqdn', 'unknown')) %}
{% set my_dc = salt['grains.get']('ya:short_dc', fqdn[:3]) %}
{% set yandex_env = salt['pillar.get']('yandex:environment', 'dev') %}
{% set default_pool_size = salt['pillar.get']('data:config:odyssey:pool_size', 0) %}
{% set use_pool_size_limit = salt['pillar.get']('data:config:odyssey:use_pool_size_limit', True) %}
{% set application_name_add_host = salt['pillar.get']('data:config:odyssey:application_name_add_host', True) %}
{% set pool_timeout = salt['pillar.get']('data:config:odyssey:pool_timeout', '1000') %}
{% set pool_client_idle_timeout = salt['pillar.get']('data:config:odyssey:pool_client_idle_timeout', '0') %}
{% set pool_ttl = salt['pillar.get']('data:config:odyssey:pool_ttl', '20') %}
{% set pool_discard = 'no' %}
{% if salt['pillar.get']('data:config:odyssey:pool_discard') %}
{% set pool_discard = salt['pillar.get']('data:config:odyssey:pool_discard') %}
{% else %}
{% set pgbouncer_reset_query_always = salt['pillar.get']('data:config:server_reset_query_always', 0) %}
{% if pgbouncer_reset_query_always > 0 %}
{% set pool_discard = 'yes' %}
{% endif %}
{% endif %}

{% set pool_cancel = salt['pillar.get']('data:config:odyssey:pool_cancel', 'yes') %}
{% set pool_rollback = salt['pillar.get']('data:config:odyssey:pool_rollback', 'yes') %}
{% set client_max = salt['pillar.get']('data:config:odyssey:client_max', '32000') %}
{% set users = salt['pillar.get']('data:greenplum:users', {}) %}
{% set local_storage = 'local' %}
{% set pg_storage = 'pg_server' %}
{% set default_pool_mode = salt['pillar.get']('data:pool:mode', 'transaction') %}
{% if default_pool_mode == 'statement' %}
{% set default_pool_mode = 'transaction' %}
{% endif %}
{% set cluster_id = salt['pillar.get']('data:dbaas:cluster_id', salt['grains.get']('id').split('.')[0][:-3]) %}
{% set fqdn = salt['grains.get']('id') %}
{% set workers_default = 1 %}
{% set workers = workers_default %}
{% set cpu_guarantee = salt['pillar.get']('data:dbaas:flavor:cpu_guarantee', workers_default) %}
{% if cpu_guarantee > 1 %}
{% set workers = (cpu_guarantee / 2) | int %}
{% endif %}

{% set auth_query_user = salt['pillar.get']('data:config:odyssey:auth_query_user', odyssey_user) %}
{% set auth_query_db = salt['pillar.get']('data:config:odyssey:auth_query_db', 'postgres') %}
{% set auth_query_table = salt['pillar.get']('data:config:odyssey:auth_query_table', 'pg_shadow') %}
# include "path"

daemonize         yes
# log_syslog          no
# log_syslog_facility "daemon"
# log_syslog_ident    "odyssey"
pid_file           "/var/run/odyssey/odyssey.pid"
log_file           "/var/log/odyssey/odyssey.log"
log_format         "{{ salt['pillar.get']('data:config:odyssey:log_format', 'tskv\\t%t\\tpid=%p\\ttimestamp=%n\\tms=%e\\tlevel=%l\\tclient_id=%i\\tserver_id=%s\\tdb=%d\\tuser=%u\\tcontext=%c\\tcluster='~ cluster_id ~'\\thostname='~ fqdn ~'\\torigin=odyssey\\ttext=%M\\n') }}"
log_to_stdout      {{ salt['pillar.get']('data:config:odyssey:log_to_stdout', 'no') }}
log_debug          {{ salt['pillar.get']('data:config:odyssey:log_debug', 'no') }}
log_query          {{ salt['pillar.get']('data:config:odyssey:log_query', 'no') }}
log_config         {{ salt['pillar.get']('data:config:odyssey:log_config', 'yes') }}
log_session        {{ salt['pillar.get']('data:config:odyssey:log_session', 'yes') }}
log_stats          {{ salt['pillar.get']('data:config:odyssey:log_stats', 'yes') }}
stats_interval     {{ salt['pillar.get']('data:config:odyssey:stats_interval', '60') }}
readahead          {{ salt['pillar.get']('data:config:odyssey:readahead', '4096') }}
packet_read_size   {{ salt['pillar.get']('data:config:odyssey:packet_read_size', '4096') }}
packet_write_queue {{ salt['pillar.get']('data:config:odyssey:packet_write_queue', '4') }}
cache_msg_gc_size  {{ salt['pillar.get']('data:config:odyssey:cache_msg_gc_size', '12288') }}
nodelay            yes
keepalive          {{ salt['pillar.get']('data:config:odyssey:keepalive', '15') }}
client_max         {{ salt['pillar.get']('data:config:odyssey:global_client_max', '32000') }}
resolvers          {{ salt['pillar.get']('data:config:odyssey:resolvers', '1') }}
workers            {{ workers }}
coroutine_stack_size {{ salt['pillar.get']('data:config:odyssey:coroutine_stack_size', '16') }}

{% if salt['pillar.get']('data:dbaas:vtype') == 'compute' and not salt['pillar.get']('data:dbaas:assign_public_ip', False) %}
{% set default_client_tls_sslmode = 'allow' %}
{% else %}
{% set default_client_tls_sslmode = 'require' %}
{% endif %}

listen {
    host "*"
    port 6432
    backlog {{ salt['pillar.get']('data:config:odyssey:backlog', '16') }}
    tls "{{ salt['pillar.get']('data:pgbouncer:client_tls_sslmode', default_client_tls_sslmode) }}"
    tls_cert_file "/etc/odyssey/ssl/server.crt"
    tls_key_file "/etc/odyssey/ssl/server.key"
    tls_ca_file "/etc/odyssey/ssl/allCAs.pem"
    tls_protocols "tlsv1.2"
}

storage "{{ local_storage }}" {
    type "local"
}

storage "{{ pg_storage }}" {
    type "remote"
    host "127.0.0.1"
    port 5432
    tls "disable"
#   tls_ca_file ""
#   tls_key_file ""
#   tls_cert_file ""
#   tls_protocols ""
}

database "pgbouncer" {
{% for user in ['monitor'] %}
    user "{{ user }}" {
        authentication "md5"
        password "md5{{ salt['hashutil.md5_digest'](users[user]['password'] + user) }}"
        storage "{{ local_storage }}"
        pool "session"
{% if use_pool_size_limit %}
        pool_size {{ users[user].get('conn_limit', default_pool_size) }}
{% else %}
        pool_size {{ default_pool_size }}
{% endif %}
{% if application_name_add_host %}
        application_name_add_host yes
{% endif %}
        pool_timeout {{ pool_timeout }}
        pool_ttl {{ pool_ttl }}
        pool_discard {{ pool_discard }}
        pool_cancel {{ pool_cancel }}
        pool_rollback {{ pool_rollback }}
        client_max {{ client_max }}
        client_fwd_error yes
        quantiles "0.999,0.99,0.95,0.9,0.75,0.5"
    }
{% endfor %}
    user default {
        authentication "block"
        storage "{{ local_storage }}"
        pool "session"
    }
}

{% if salt.pillar.get('data:ldap_auth', False) %}
{% set ldap_server = salt.pillar.get('data:ldap_settings:ldap_server') %}
{% set ldap_base_dn = salt['mdb_greenplum.ensure_text'](salt.pillar.get('data:ldap_settings:ldap_base_dn')) %}
{% set ldap_bind_dn = salt['mdb_greenplum.ensure_text'](salt.pillar.get('data:ldap_settings:ldap_bind_dn')) %}
{% set ldap_bind_pwd = salt.pillar.get('data:ldap_settings:ldap_bind_pwd') %}
{% set ldap_search_attribute = salt.pillar.get('data:ldap_settings:ldap_search_attribute') %}
{% set ldap_scheme = salt.pillar.get('data:ldap_settings:ldap_scheme', 'ldap') %}
{% set default_ldap_port = '389' %}
{% set ldap_port = salt.pillar.get('data:ldap_settings:ldap_port', default_ldap_port) %}
{%   if ldap_scheme == 'ldaps' %}
{%     set ldap_port = '636' %}
{%   endif %}
ldap_endpoint "ldap" {
    ldapserver "{{ ldap_server }}"
    ldapbasedn "{{ ldap_base_dn }}"
    ldapbinddn "{{ ldap_bind_dn }}"
    ldapbindpasswd "{{ ldap_bind_pwd }}"
    ldapsearchattribute "{{ ldap_search_attribute }}"
    ldapport {{ ldap_port }}
    ldapscheme "{{ ldap_scheme }}"
}
{% endif %}

database default {
{% for user in users %}
{%   if user not in ['gpadmin', 'monitor'] %}
    user "{{ user }}" {
        authentication "md5"
        auth_query "SELECT usename, passwd FROM {{ auth_query_table }} WHERE usename=$1"
        auth_query_user "{{ auth_query_user }}"
        auth_query_db "{{ auth_query_db }}"
        storage_password "md5{{ salt['hashutil.md5_digest'](users[auth_query_user]['password'] + auth_query_user) }}"
        storage "{{ pg_storage }}"
        pool "{{ default_pool_mode }}"
        pool_size {{ default_pool_size }}
{% if application_name_add_host %}
        application_name_add_host yes
{% endif %}
        pool_timeout {{ pool_timeout }}
        pool_discard {{ pool_discard }}
        pool_ttl {{ pool_ttl }}
        pool_cancel {{ pool_cancel }}
        pool_rollback {{ pool_rollback }}
        client_max {{ client_max }}
        client_fwd_error yes
        pool_client_idle_timeout {{ pool_client_idle_timeout }}
        password_passthrough yes
    }
{%   endif %}
{% endfor %}
    user default {
{% if salt.pillar.get('data:ldap_auth', False) %}
        authentication "clear_text"
        ldap_endpoint_name "ldap"
        ldap_pool_size 10
        ldap_pool_timeout 1
{% else %}
        authentication "md5"
        auth_query "SELECT usename, passwd FROM {{ auth_query_table }} WHERE usename=$1"
        auth_query_user "{{ auth_query_user }}"
        auth_query_db "{{ auth_query_db }}"
        storage_password "md5{{ salt['hashutil.md5_digest'](users[auth_query_user]['password'] + auth_query_user) }}"
{% endif %}
        storage "{{ pg_storage }}"
        pool "{{ default_pool_mode }}"
        pool_size {{ default_pool_size }}
{% if application_name_add_host %}
        application_name_add_host yes
{% endif %}
        pool_timeout {{ pool_timeout }}
        pool_discard {{ pool_discard }}
        pool_ttl {{ pool_ttl }}
        pool_cancel {{ pool_cancel }}
        pool_rollback {{ pool_rollback }}
        client_max {{ client_max }}
        client_fwd_error yes
        pool_client_idle_timeout {{ pool_client_idle_timeout }}
        password_passthrough yes
    }
}

locks_dir "/var/run/odyssey"

graceful_die_on_errors yes
enable_online_restart yes
bindwith_reuseport yes
