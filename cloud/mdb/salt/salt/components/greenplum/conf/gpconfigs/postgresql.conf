{% from "components/greenplum/map.jinja" import gpdbvars with context %}
# -----------------------------
# PostgreSQL configuration file
# -----------------------------
#
# This file consists of lines of the form:
#
#   name = value
#
# (The "=" is optional.)  Whitespace may be used.  Comments are introduced with
# "#" anywhere on a line.  The complete list of parameter names and allowed
# values can be found in the PostgreSQL documentation.
#
# The commented-out settings shown in this file represent the default values.
# Re-commenting a setting is NOT sufficient to revert it to the default value;
# you need to reload the server.
#
# This file is read on server startup and when the server receives a SIGHUP
# signal.  If you edit the file on a running system, you have to SIGHUP the
# server for the changes to take effect, or use "pg_ctl reload".  Some
# parameters, which are marked below, require a server shutdown and restart to
# take effect.
#
# Any parameter can also be given as a command-line option to the server, e.g.,
# "postgres -c log_connections=on".  Some parameters can be changed at run time
# with the "SET" SQL command.
#
# Memory units:  kB = kilobytes        Time units:  ms  = milliseconds
#                MB = megabytes                     s   = seconds
#                GB = gigabytes                     min = minutes
#                TB = terabytes                     h   = hours
#                                                   d   = days


#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------

# The default values of these variables are driven from the -D command-line
# option or PGDATA environment variable, represented here as ConfigDir.

#data_directory = 'ConfigDir'		# use data in another directory
					# (change requires restart)
#hba_file = 'ConfigDir/pg_hba.conf'	# host-based authentication file
					# (change requires restart)
#ident_file = 'ConfigDir/pg_ident.conf'	# ident configuration file
					# (change requires restart)

{% if salt.pillar.get('data:dbaas:subcluster_name') == 'master_subcluster' %}
# If external_pid_file is not explicitly set, no extra PID file is written.
external_pid_file = '/var/run/greenplum/gp.pid'			# write an extra PID file
					# (change requires restart)
{% endif %}

#------------------------------------------------------------------------------
# CONNECTIONS AND AUTHENTICATION
#------------------------------------------------------------------------------

# - Connection Settings -

listen_addresses='*' #listen_addresses = '*'			# what IP address(es) to listen on;
					# comma-separated list of addresses;
					# defaults to '*', '*' = all
					# (change requires restart)

port={{ port }} ##port = 5432				# sets the database listener port for
      					# a Greenplum instance. The master and
					# each segment has its own port number.
# note: Port numbers for the Greenplum system must also be changed in the
# gp_configuration catalog. See the Greenplum Database Administrator Guide
# for instructions!
#
# WARNING: YOU MUST SHUT DOWN YOUR GREENPLUM SYSTEM BEFORE CHANGING
# THE PORT NUMBER IN THIS FILE.

#max_connections = 750			# inserted by initdb
#max_connections = 200			# (change requires restart)
#superuser_reserved_connections = 3	# (change requires restart)
#unix_socket_directories = '/tmp'	# comma-separated list of directories
					# (change requires restart)
#unix_socket_group = ''			# (change requires restart)
#unix_socket_permissions = 0777		# begin with 0 to use octal notation
					# (change requires restart)
#bonjour = off				# advertise server via Bonjour
					# (change requires restart)
#bonjour_name = ''			# defaults to the computer name
					# (change requires restart)

# - Security and Authentication -

#authentication_timeout = 1min		# 1s-600s
{% if salt['pillar.get']('data:gpdb_ssl', True) %}
ssl = on
ssl_cert_file = '/etc/greenplum/ssl/server.crt'
ssl_key_file = '/etc/greenplum/ssl/server.key'
ssl_ca_file = '/etc/greenplum/ssl/allCAs.pem'
{% endif %}
ssl_ciphers = 'TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256' # allowed SSL ciphers
#ssl_crl_file = ''			# (change requires restart)
#password_encryption = on
#db_user_namespace = off

# GSSAPI using Kerberos
#krb_server_keyfile = ''
#krb_caseins_users = off

# - TCP Keepalives -
# see "man 7 tcp" for details

#tcp_keepalives_idle = 0		# TCP_KEEPIDLE, in seconds;
					# 0 selects the system default
#tcp_keepalives_interval = 0		# TCP_KEEPINTVL, in seconds;
					# 0 selects the system default
#tcp_keepalives_count = 0		# TCP_KEEPCNT;
					# 0 selects the system default


#------------------------------------------------------------------------------
# RESOURCE USAGE (except WAL)
#------------------------------------------------------------------------------

# - Memory -

shared_buffers = {{ salt['pillar.get']('data:greenplum:config:shared_buffers', '128MB') }}
#shared_buffers = 125MB			# inserted by initdb
#shared_buffers = 128MB			# min 128kB
					# (change requires restart)
#huge_pages = try			# on, off, or try
					# (change requires restart)
temp_buffers = {{ salt['pillar.get']('data:greenplum:config:temp_buffers', '32MB') }}
#temp_buffers = 8MB			# min 800kB
					# (change requires restart)
# Caution: it is not advisable to set max_prepared_transactions nonzero unless
# you actively intend to use prepared transactions.
#work_mem = {{ salt['pillar.get']('data:greenplum:config:work_mem', '32MB') }}
#work_mem = 32MB				# min 64kB
maintenance_work_mem = {{ salt['pillar.get']('data:greenplum:config:maintenance_work_mem', '64MB') }}
#maintenance_work_mem = 64MB		# min 1MB
#autovacuum_work_mem = -1		# min 1MB, or -1 to use maintenance_work_mem
#max_stack_depth = 2MB			# min 100kB
max_stack_depth = {{ salt['pillar.get']('data:greenplum:config:max_stack_depth', '2MB') }}
dynamic_shared_memory_type = posix	# the default is the first option
					# supported by the operating system:
					#   posix
					#   sysv
					#   windows
					#   mmap
					# use none to disable dynamic shared memory
					# (change requires restart)

# - Disk -

#temp_file_limit = -1			# limits per-session temp file space
					# in kB, or -1 for no limit

# - Kernel Resource Usage -

#max_files_per_process = 1000		# min 25
max_files_per_process = {{ salt['pillar.get']('data:greenplum:config:max_files_per_process', 1000) }}
					# (change requires restart)
#shared_preload_libraries = ''		# (change requires restart)

# - Cost-Based Vacuum Delay -

#vacuum_cost_delay = 0			# 0-100 milliseconds
#vacuum_cost_page_hit = 1		# 0-10000 credits
#vacuum_cost_page_miss = 10		# 0-10000 credits
#vacuum_cost_page_dirty = 20		# 0-10000 credits
#vacuum_cost_limit = 200		# 1-10000 credits

# - Asynchronous Behavior -

#effective_io_concurrency = 1		# 1-1000; 0 disables prefetching
#max_worker_processes = 8


#------------------------------------------------------------------------------
# WRITE AHEAD LOG
#------------------------------------------------------------------------------

# - Settings -

wal_level = {{ salt['pillar.get']('data:greenplum:config:wal_level', 'archive') }}			# minimal, replica, or logical
					# (change requires restart)
#fsync = on				# turns forced synchronization on or off
#synchronous_commit = on		# synchronization level;
					# off, local, remote_write, or on
#wal_sync_method = fsync		# the default is the first option
					# supported by the operating system:
					#   open_datasync
					#   fdatasync (default on Linux)
					#   fsync
					#   fsync_writethrough
					#   open_sync
#full_page_writes = on			# recover from partial page writes
#wal_log_hints = off			# also do full page writes of non-critical updates
					# (change requires restart)
#wal_buffers = -1			# min 32kB, -1 sets based on shared_buffers
					# (change requires restart)
#wal_writer_delay = 200ms		# 1-10000 milliseconds

#commit_delay = 0			# range 0-100000, in microseconds
#commit_siblings = 5			# range 1-1000

# - Checkpoints -

#checkpoint_segments = 3		# in logfile segments, min 1, 16MB each
#checkpoint_timeout = 5min		# range 30s-1h
#checkpoint_completion_target = 0.5	# checkpoint target duration, 0.0 - 1.0
#checkpoint_warning = 30s		# 0 disables

# - Archiving -

archive_mode = {{ salt['pillar.get']('data:greenplum:config:archive_mode', 'on') }}		# enables archiving; off, on, or always
				# (change requires restart)
archive_timeout = {{ salt['pillar.get']('data:greenplum:config:archive_timeout', '600') }}		# force a logfile segment switch after this
				# number of seconds; 0 disables

{% if salt['pillar.get']('data:greenplum:config:archive_command') %}
archive_command = '{{ salt['pillar.get']('data:greenplum:config:archive_command') }}'		# command to use to archive a logfile segment
{% else %}
archive_command = '/usr/bin/timeout 60 /usr/bin/wal-g seg wal-push %p --content-id={{ content_id }} --config /etc/wal-g/wal-g.yaml'
{% endif %}


#------------------------------------------------------------------------------
# REPLICATION
#------------------------------------------------------------------------------

# - Sending Server(s) -

# Set these on the master and on any standby that will send replication data.

#max_wal_senders = 0		# max number of walsender processes
				# (change requires restart)
#wal_keep_segments = 0		# in logfile segments, 16MB each; 0 disables
#max_slot_wal_keep_size = -1	# measured in bytes; -1 disables
#wal_sender_timeout = 60s	# in milliseconds; 0 disables

#max_replication_slots = 0	# max number of replication slots
				# (change requires restart)

# - Master Server -

# These settings are ignored on a standby server.

#synchronous_standby_names = ''	# standby servers that provide sync rep
				# comma-separated list of application_name
				# from standby(s); '*' = all
#vacuum_defer_cleanup_age = 0	# number of xacts by which cleanup is delayed

# - Standby Servers -

# These settings are ignored on a master server.

#hot_standby = off			# "on" allows queries during recovery
					# (change requires restart)
#max_standby_archive_delay = 30s	# max delay before canceling queries
					# when reading WAL from archive;
					# -1 allows indefinite delay
#max_standby_streaming_delay = 30s	# max delay before canceling queries
					# when reading streaming WAL;
					# -1 allows indefinite delay
#wal_receiver_status_interval = 10s	# send replies at least this often
					# 0 disables
#hot_standby_feedback = off		# send info from standby to prevent
					# query conflicts
#wal_receiver_timeout = 60s		# time that receiver waits for
					# communication from master
					# in milliseconds; 0 disables


#------------------------------------------------------------------------------
# QUERY TUNING
#------------------------------------------------------------------------------

# - Planner Method Configuration -

#enable_bitmapscan = on
#enable_indexscan = on
#enable_indexonlyscan = on
#enable_material = on
#enable_seqscan = on
#enable_tidscan = on

#enable_hashjoin = on
#enable_mergejoin = off
#enable_nestloop = off

#gp_enable_multiphase_agg = on
#gp_enable_preunique = on
#gp_enable_agg_distinct = on
#gp_enable_agg_distinct_pruning = on
#enable_groupagg = on
#enable_hashagg = on
#gp_selectivity_damping_for_scans = on
#gp_selectivity_damping_for_joins = off

#enable_sort = on
#gp_enable_sort_limit = on
#gp_enable_sort_distinct = on

# - Planner Cost Constants -

#seq_page_cost = 1.0			# measured on an arbitrary scale
#random_page_cost = 100			# same scale as above

#cpu_tuple_cost = 0.01			# same scale as above
#cpu_index_tuple_cost = 0.005		# same scale as above
#cpu_operator_cost = 0.0025		# same scale as above
#gp_motion_cost_per_row = 0.0  # (same) (if 0, 2*cpu_tuple_cost is used)

#effective_cache_size = 16GB

# - Other Planner Options -

#cursor_tuple_fraction = 0.1		# range 0.0-1.0
#from_collapse_limit = 20
#join_collapse_limit = 20		# 1 disables collapsing of explicit
					# JOIN clauses
#gp_segments_for_planner = 0     # if 0, actual number of segments is used

#plan_cache_mode = auto

#------------------------------------------------------------------------------
# ERROR REPORTING AND LOGGING
#------------------------------------------------------------------------------

# - Set gp_reraise_signal to on to generate core files on SIGSEGV

#gp_reraise_signal = off

# - Where to Log -

log_filename = greenplum-{{ gpdbvars.gpmajver }}-data.csv
log_file_mode = 0640			# creation mode for log files,
					# begin with 0 to use octal notation
log_truncate_on_rotation = off		# If on, an existing log file with the
					# same name as the new log file will be
					# truncated rather than appended to.
					# But such truncation only occurs on
					# time-driven rotation, not on restarts
					# or size-driven rotation.  Default is
					# off, meaning append to existing files
					# in all cases.
log_rotation_age = 0     		# Automatic rotation of logfiles will
					# happen after that time.  0 disables.
log_rotation_size = 0   		# Automatic rotation of logfiles will
					# happen after that much log output.
					# 0 disables.

# - When to Log -

log_min_messages = {{ salt['pillar.get']('data:greenplum:config:log_min_messages', 'warning') }}
#log_min_messages = warning		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic

log_min_error_statement = {{ salt['pillar.get']('data:greenplum:config:log_min_error_statement', 'error') }}
#log_min_error_statement = error	# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic (effectively off)
					#
log_min_duration_statement = {{ salt['pillar.get']('data:greenplum:config:log_min_duration_statement', '-1') }}
#log_min_duration_statement = -1	# -1 is disabled, 0 logs all statements
					# and their durations, > 0 logs only
					# statements running at least this number
					# of milliseconds

debug_assertions = {{ 'on' if salt['pillar.get']('data:greenplum:config:debug_assertions', False) else 'off' }}
# - What to Log -

#debug_print_parse = off
#debug_print_rewritten = off
#debug_print_prelim_plan = off
#debug_print_slice_table = off
#debug_print_plan = off
#debug_pretty_print = on
log_checkpoints = {{ 'on' if salt['pillar.get']('data:greenplum:config:log_checkpoints', True) else 'off' }}
#log_checkpoints = off
log_connections = {{ 'on' if salt['pillar.get']('data:greenplum:config:log_connections', False) else 'off' }}
#log_connections = off
log_disconnections = {{ 'on' if salt['pillar.get']('data:greenplum:config:log_disconnections', False) else 'off' }}
#log_disconnections = off
log_dispatch_stats = {{ 'on' if salt['pillar.get']('data:greenplum:config:log_dispatch_stats', False) else 'off' }}
log_error_verbosity = {{ salt['pillar.get']('data:greenplum:config:log_error_verbosity', 'default') }}
#log_error_verbosity = default		# terse, default, or verbose messages
{% if salt.pillar.get('data:dbaas:subcluster_name') == 'master_subcluster' %}
log_hostname = {{ 'on' if salt['pillar.get']('data:greenplum:config:log_hostname', False) else 'off' }}
{% else %}
# causes errors on select statement when enabled on segments
log_hostname = off
{% endif %}

#log_statement = 'none'			# none, mod, ddl, all
#log_temp_files = -1			# Log temporary files equal or larger
					# than the specified number of kilobytes.
					# -1 disables;  0 logs all temp files
log_timezone = 'Europe/Moscow'			# actually, defaults to TZ environment
					# setting

#------------------------------------------------------------------------------
# PL/JAVA
#------------------------------------------------------------------------------
#pljava_classpath = ''                      # ':' separated list of installed jar files
#pljava_vmoptions = ''                      # Options sent to the JVM on startup
#pljava_statement_cache_size = 0            # Size of the prepared statement MRU cache
#pljava_release_lingering_savepoints = off  # on/off to release/abort lingering savepoints


#------------------------------------------------------------------------------
# PERFORMANCE MONITOR
#------------------------------------------------------------------------------

gp_enable_gpperfmon = {{ 'on' if salt['pillar.get']('data:greenplum:config:gpperfmon:enable', False) else 'off' }}
gpperfmon_port = {{ salt['pillar.get']('data:greenplum:config:gpperfmon:port', 8888) }}
{% if salt['pillar.get']('data:greenplum:config:gpperfmon:enable', False) %}
gp_perfmon_log_directory = '{{ gpdbvars.gplog }}'
{% endif %}


#------------------------------------------------------------------------------
# RUNTIME STATISTICS
#------------------------------------------------------------------------------

# - ANALYZE Statistics on Database Contents -

#default_statistics_target = 100	# range 1 - 10000 (target # of
					# histogram bins)

# - Query/Index Statistics Collector -

#track_activities = on
#track_counts = off
#track_io_timing = off
#track_functions = none			# none, pl, all
#track_activity_query_size = 1024	# (change requires restart)
#update_process_title = on
#stats_temp_directory = 'pg_stat_tmp'

#stats_queue_level = off


# - Statistics Monitoring -

#log_parser_stats = off
#log_planner_stats = off
#log_executor_stats = off
log_executor_stats = {{ 'on' if salt['pillar.get']('data:greenplum:config:log_executor_stats', False) else 'off' }}
#log_statement_stats = off

gp_autostats_mode = {{ salt['pillar.get']('data:greenplum:config:gp_autostats_mode', 'on_no_stats') }}
#gp_autostats_mode=on_no_stats		# none, on_no_stats, on_change. see documentation for semantics.
gp_autostats_on_change_threshold = {{ salt['pillar.get']('data:greenplum:config:gp_autostats_on_change_threshold', 2147483647) }}
#gp_autostats_on_change_threshold=2147483647 # [0..INT_MAX]. see documentation for semantics.
log_autostats = {{ 'on' if salt['pillar.get']('data:greenplum:config:log_autostats', False) else 'off' }}
#log_autostats=off	# print additional autostats information

#------------------------------------------------------------------------------
# AUTOVACUUM PARAMETERS
#------------------------------------------------------------------------------

#autovacuum = on			# Enable autovacuum subprocess?  'on'
					# requires track_counts to also be on.
#log_autovacuum_min_duration = -1	# -1 disables, 0 logs all actions and
					# their durations, > 0 logs only
					# actions running at least this number
					# of milliseconds.
#autovacuum_max_workers = 3		# max number of autovacuum subprocesses
					# (change requires restart)
#autovacuum_naptime = 1min		# time between autovacuum runs
#autovacuum_vacuum_threshold = 50	# min number of row updates before
					# vacuum
#autovacuum_analyze_threshold = 50	# min number of row updates before
					# analyze
#autovacuum_vacuum_scale_factor = 0.2	# fraction of table size before vacuum
#autovacuum_analyze_scale_factor = 0.1	# fraction of table size before analyze
#autovacuum_freeze_max_age = 200000000	# maximum XID age before forced vacuum
					# (change requires restart)
#autovacuum_multixact_freeze_max_age = 400000000	# maximum multixact age
					# before forced vacuum
					# (change requires restart)
#autovacuum_vacuum_cost_delay = 20ms	# default vacuum cost delay for
					# autovacuum, in milliseconds;
					# -1 means use vacuum_cost_delay
#autovacuum_vacuum_cost_limit = -1	# default vacuum cost limit for
					# autovacuum, -1 means use
					# vacuum_cost_limit

#------------------------------------------------------------------------------
# CLIENT CONNECTION DEFAULTS
#------------------------------------------------------------------------------

# - Statement Behavior -

#client_min_messages = notice		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   log
					#   notice
					#   warning
					#   error
#search_path = '"$user",public'		# schema names
#default_tablespace = ''		# a tablespace name, '' uses the default
#check_function_bodies = on
#default_transaction_isolation = 'read committed'
#default_transaction_read_only = off
#default_transaction_deferrable = off
#session_replication_role = 'origin'
#gp_vmem_idle_resource_timeout = 18s 	# in milliseconds, 0 is disabled
#statement_timeout = 0			# in milliseconds, 0 is disabled
#lock_timeout = 0			# in milliseconds, 0 is disabled
#vacuum_freeze_min_age = 50000000
#vacuum_freeze_table_age = 150000000
#vacuum_multixact_freeze_min_age = 5000000
#vacuum_multixact_freeze_table_age = 150000000
#bytea_output = 'hex'			# hex, escape
#xmlbinary = 'base64'
#xmloption = 'content'
#gin_fuzzy_search_limit = 0

# - Locale and Formatting -

datestyle = 'iso, mdy'			# inserted by initdb
#datestyle = 'iso, mdy'
#intervalstyle = 'postgres'
timezone = '{{ salt['pillar.get']('data:greenplum:config:timezone', 'Europe/Moscow') }}'
#timezone = 'Europe/Moscow'
#timezone_abbreviations = 'Default'     # Select the set of available time zone
					# abbreviations.  Currently, there are
					#   Default
					#   Australia (historical usage)
					#   India
					# You can create your own file in
					# share/timezonesets/.
#extra_float_digits = 0			# min -15, max 3
#client_encoding = sql_ascii		# actually, defaults to database
					# encoding

# These settings are initialized by initdb, but they can be changed.
lc_messages = 'en_US.utf8'		# inserted by initdb
#lc_messages = 'C'			# locale for system error message
					# strings
lc_monetary = 'en_US.utf8'		# inserted by initdb
#lc_monetary = 'C'			# locale for monetary formatting
lc_numeric = 'en_US.utf8'		# inserted by initdb
#lc_numeric = 'C'			# locale for number formatting
lc_time = 'en_US.utf8'			# inserted by initdb
#lc_time = 'C'				# locale for time formatting

# default configuration for text search
default_text_search_config = 'pg_catalog.english'

# - Other Defaults -

#dynamic_library_path = '$libdir'
#explain_pretty_print = on
#local_preload_libraries = ''
#session_preload_libraries = ''


#------------------------------------------------------------------------------
# LOCK MANAGEMENT
#------------------------------------------------------------------------------

deadlock_timeout = {{ salt['pillar.get']('data:greenplum:config:deadlock_timeout', '1s') }}

max_locks_per_transaction = {{ salt['pillar.get']('data:greenplum:config:max_locks_per_transaction', 128) }}
#max_locks_per_transaction = 128		# min 10
					# (change requires restart)
#max_pred_locks_per_transaction = 64	# min 10
					# (change requires restart)

#---------------------------------------------------------------------------
# RESOURCE SCHEDULING
#---------------------------------------------------------------------------

max_resource_queues = {{ salt['pillar.get']('data:greenplum:config:max_resource_queues', 9) }}
#max_resource_queues = 9		# no. of resource queues to create.
#max_resource_portals_per_transaction = 64	# no. of portals per backend.
#resource_select_only = on		# resource lock SELECT queries only.
#resource_cleanup_gangs_on_wait = on	# Cleanup idle reader gangs before
										# resource lockwait.
gp_resqueue_memory_policy = {{ salt['pillar.get']('data:greenplum:config:gp_resqueue_memory_policy', 'eager_free') }}
#gp_resqueue_memory_policy = 'eager_free'	# memory request based queueing.
									# eager_free, auto or none

#---------------------------------------------------------------------------
# EXTERNAL TABLES
#---------------------------------------------------------------------------
gp_external_enable_exec = {{ 'on' if salt['pillar.get']('data:greenplum:config:gp_external_enable_exec', False) else 'off' }}
#gp_external_enable_exec = on   # enable external tables with EXECUTE.

#---------------------------------------------------------------------------
# APPEND ONLY TABLES
#---------------------------------------------------------------------------
gp_safefswritesize = {{ salt['pillar.get']('data:greenplum:config:gp_safefswritesize', 0) }}
max_appendonly_tables = {{ salt['pillar.get']('data:greenplum:config:max_appendonly_tables', 10000) }}
#max_appendonly_tables = 10000 # Maximum number of append only tables that can
							  # participate in writing data concurrently.
#------------------------------------------------------------------------------
# VERSION/PLATFORM COMPATIBILITY
#------------------------------------------------------------------------------

# - Previous PostgreSQL Versions -

#array_nulls = on
#backslash_quote = safe_encoding	# on, off, or safe_encoding
#escape_string_warning = on
#lo_compat_privileges = off
#quote_all_identifiers = off
#standard_conforming_strings = on
#synchronize_seqscans = on

# - Other Platforms and Clients -

#transform_null_equals = off


#---------------------------------------------------------------------------
# GREENPLUM ARRAY CONFIGURATION
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# GREENPLUM ARRAY TUNING
#---------------------------------------------------------------------------

# - Interconnect -

gp_max_packet_size = {{ salt['pillar.get']('data:greenplum:config:gp_max_packet_size', 8192) }}
#gp_max_packet_size = 8192
{% set gp_interconnect_type = salt['pillar.get']('data:greenplum:config:gp_interconnect_type', 'udpifc') %}
gp_interconnect_type = {{ gp_interconnect_type }}
#gp_interconnect_type=udpifc

# - Worker Process Creation -

gp_segment_connect_timeout = {{ salt['pillar.get']('data:greenplum:config:gp_segment_connect_timeout', '600s') }}
#gp_segment_connect_timeout = 600s

# - Resource limits -
gp_vmem_protect_limit = {{ salt['pillar.get']('data:greenplum:config:gp_vmem_protect_limit', 8192) }}
#gp_vmem_protect_limit = 8192  #Virtual memory limit (in MB).
gp_vmem_idle_resource_timeout = {{ salt['pillar.get']('data:greenplum:config:gp_vmem_idle_resource_timeout', 18000) }}
#gp_vmem_idle_resource_timeout = 18000 # idle-time before gang-release, in milliseconds (zero disables release).
gp_vmem_protect_segworker_cache_limit = {{ salt['pillar.get']('data:greenplum:config:gp_vmem_protect_segworker_cache_limit', 500) }}

#------------------------------------------------------------------------------
# ERROR HANDLING
#------------------------------------------------------------------------------

#exit_on_error = off			# terminate session on any error?
#restart_after_crash = on		# reinitialize after backend crash?
#data_sync_retry = off			# retry or panic on failure to fsync
					# data?
					# (change requires restart)


#------------------------------------------------------------------------------
# CONFIG FILE INCLUDES
#------------------------------------------------------------------------------

# These options allow settings to be loaded from files other than the
# default postgresql.conf.

#include_dir = ''			# include files ending in '.conf' from
					# a directory, e.g., 'conf.d'
#include_if_exists = ''			# include file only if it exists
include = 'internal.auto.conf'		# inserted by initdb
#include = ''				# include file


#------------------------------------------------------------------------------
# CUSTOMIZED OPTIONS
#------------------------------------------------------------------------------

# Add settings for extensions here
# MPP Specific parameters
#----------------------
gp_contentid={{ content_id }}
{% if salt['pillar.get']('data:dbaas:flavor')                                               %}
{%   set MEGABYTE = 1024 ** 2                                                               %}
{%   set space_limit = salt['pillar.get']('data:dbaas:space_limit')                         %}
{%   set segments = salt.pillar.get('data:greenplum:segment_in_host', 1)                    %}
{%   set default_max_slot_wal_keep_size = (space_limit * 0.1 / segments / MEGABYTE)|int|string + 'MB'        %}
{%   set default_gp_workfile_limit_per_segment = (space_limit * 0.1 / segments / MEGABYTE)|int|string + 'MB' %}
{% else                                                                                     %}
{%   set default_max_slot_wal_keep_size = '10GB'                                            %}
{%   set default_gp_workfile_limit_per_segment = '10GB'                                     %}
{% endif                                                                                    %}
max_slot_wal_keep_size = {{ salt['pillar.get']('data:greenplum:config:max_slot_wal_keep_size', default_max_slot_wal_keep_size) }}
gp_workfile_limit_per_segment = {{ salt['pillar.get']('data:greenplum:config:gp_workfile_limit_per_segment', default_gp_workfile_limit_per_segment) }}
gp_workfile_limit_per_query = {{ salt['pillar.get']('data:greenplum:config:gp_workfile_limit_per_query', 0) }}
gp_workfile_limit_files_per_query = {{ salt['pillar.get']('data:greenplum:config:gp_workfile_limit_files_per_query', 10000) }}
gp_resource_manager = {{ salt['pillar.get']('data:greenplum:config:gp_resource_manager', 'group') }} # queue, group
gp_interconnect_tcp_listener_backlog = {{ salt['pillar.get']('data:greenplum:config:gp_interconnect_tcp_listener_backlog', 65535) }}
{% set master_conn_limit = salt.pillar.get('data:greenplum:config:max_connections:master', 350) %}
{% set segment_conn_limit =  master_conn_limit * 5 %}
max_prepared_transactions = {{ salt['pillar.get']('data:greenplum:config:max_prepared_transactions', master_conn_limit) }}
runaway_detector_activation_percent = {{ salt['pillar.get']('data:greenplum:config:runaway_detector_activation_percent', 90) }}
tcp_keepalives_count = {{ salt['pillar.get']('data:greenplum:config:tcp_keepalives_count', 6) }}
tcp_keepalives_interval = {{ salt['pillar.get']('data:greenplum:config:tcp_keepalives_interval', 3) }}
tcp_keepalives_idle = {{ salt['pillar.get']('data:greenplum:config:tcp_keepalives_idle', 0) }}
gp_resource_group_cpu_limit = {{ salt['pillar.get']('data:greenplum:config:gp_resource_group_cpu_limit', '0.7') }}
gp_resource_group_memory_limit = {{ salt['pillar.get']('data:greenplum:config:gp_resource_group_memory_limit', '0.8') }}
readable_external_table_timeout = {{ salt['pillar.get']('data:greenplum:config:readable_external_table_timeout', 1800) }}
gp_interconnect_snd_queue_depth = {{ salt['pillar.get']('data:greenplum:config:gp_interconnect_snd_queue_depth', 2) }}
gp_interconnect_queue_depth = {{ salt['pillar.get']('data:greenplum:config:gp_interconnect_queue_depth', 4) }}
gp_max_local_distributed_cache = {{ salt['pillar.get']('data:greenplum:config:gp_max_local_distributed_cache', 1024) }}
gp_resgroup_memory_policy = {{ salt['pillar.get']('data:greenplum:config:gp_resgroup_memory_policy', 'eager_free') }}
gp_resource_group_cpu_ceiling_enforcement = {{ 'true' if salt['pillar.get']('data:greenplum:config:gp_resource_group_cpu_ceiling_enforcement', False) else 'false' }}
gp_resqueue_priority = {{ 'on' if salt['pillar.get']('data:greenplum:config:gp_resqueue_priority', True) else 'off' }}
gp_resqueue_priority_cpucores_per_segment = {{ salt['pillar.get']('data:greenplum:config:gp_resqueue_priority_cpucores_per_segment', 4.0) }}
gp_resqueue_priority_sweeper_interval = {{ salt['pillar.get']('data:greenplum:config:gp_resqueue_priority_sweeper_interval', 1000) }}
gp_snapshotadd_timeout = {{ salt['pillar.get']('data:greenplum:config:gp_snapshotadd_timeout', '10s') }}
gp_default_storage_options = '{{ salt['pillar.get']('data:greenplum:config:gp_default_storage_options', salt['pillar.get']('data:config:unmanaged:gp_default_storage_options', 'appendonly=false,blocksize=32768,compresstype=none,checksum=true,orientation=row')) }}'

{% if salt.pillar.get('data:dbaas:subcluster_name') == 'master_subcluster' %}
# Greenplum specific configuration parameters for Master instance database
optimizer = {{ 'on' if salt['pillar.get']('data:greenplum:config:optimizer', True) else 'off' }}
max_connections = {{ master_conn_limit }}
log_statement = {{ salt['pillar.get']('data:greenplum:config:log_statement:master', 'ddl') }} # none, mod, ddl, all
optimizer_analyze_root_partition = {{ 'on' if salt['pillar.get']('data:greenplum:config:optimizer_analyze_root_partition', True) else 'off' }}
log_duration = {{ 'on' if salt['pillar.get']('data:greenplum:config:log_duration', False) else 'off' }}
gp_external_max_segs = {{ salt['pillar.get']('data:greenplum:config:gp_external_max_segs', 64) }}
gp_fts_probe_timeout = {{ salt['pillar.get']('data:greenplum:config:gp_fts_probe_timeout', '20s') }}
gp_fts_probe_interval = {{ salt['pillar.get']('data:greenplum:config:gp_fts_probe_interval', '60s') }}
gp_fts_probe_retries = {{ salt['pillar.get']('data:greenplum:config:gp_fts_probe_retries', 5) }}
gp_log_fts = {{ salt['pillar.get']('data:greenplum:config:gp_log_fts', 'TERSE') }}
gp_fts_replication_attempt_count = {{ salt['pillar.get']('data:greenplum:config:gp_fts_replication_attempt_count', 10) }}
gp_global_deadlock_detector_period = {{ salt['pillar.get']('data:greenplum:config:gp_global_deadlock_detector_period', '120s') }}
gp_set_proc_affinity = {{ 'on' if salt['pillar.get']('data:greenplum:config:gp_set_proc_affinity', False) else 'off' }}
dtx_phase2_retry_count = {{ salt['pillar.get']('data:greenplum:config:dtx_phase2_retry_count', 10) }}
gp_connection_send_timeout = {{ salt['pillar.get']('data:greenplum:config:gp_connection_send_timeout', 3600) }}
gp_enable_direct_dispatch = {{ 'on' if salt['pillar.get']('data:greenplum:config:gp_enable_direct_dispatch', True) else 'off' }}
gp_enable_global_deadlock_detector = {{ 'on' if salt['pillar.get']('data:greenplum:config:gp_enable_global_deadlock_detector', False) else 'off' }}
max_resource_portals_per_transaction = {{ salt['pillar.get']('data:greenplum:config:max_resource_portals_per_transaction', 64) }}
resource_cleanup_gangs_on_wait = {{ 'on' if salt['pillar.get']('data:greenplum:config:resource_cleanup_gangs_on_wait', True) else 'off' }}
gp_workfile_compression = {{ 'on' if salt['pillar.get']('data:greenplum:config:gp_workfile_compression', False) else 'off' }}
gp_autostats_mode_in_functions = {{ salt['pillar.get']('data:greenplum:config:gp_autostats_mode_in_functions', 'none') }}
max_statement_mem = {{ salt['pillar.get']('data:greenplum:config:max_statement_mem', '2000MB') }}
{% else %}
# Greenplum specific configuration parameters for Segment instance database
max_connections = {{ salt['pillar.get']('data:greenplum:config:max_connections:segment', segment_conn_limit) }}
log_statement = {{ salt['pillar.get']('data:greenplum:config:log_statement:segment', 'none') }} # none, mod, ddl, all
{% endif %}
{% if gp_interconnect_type == 'proxy' %}
gp_interconnect_proxy_addresses = '{{ salt['mdb_greenplum.get_ic_proxy_adresses_config']() }}'
{% endif %}

{% set shared_preload_libraries = [] %}
{% if gpdbvars.version|int >= 6192 or (gpdbvars.version|int == 6175 and gpdbvars.patch_level|int >= 103) or (gpdbvars.version|int == 6191 and gpdbvars.patch_level|int >= 109) %}
{% do shared_preload_libraries.append('diskquota') %}
{% endif %}
shared_preload_libraries = '{{ shared_preload_libraries | join(',') }}'

{% if 'diskquota' in shared_preload_libraries %}
diskquota.naptime = {{ salt['pillar.get']('data:greenplum:config:diskquota_naptime', 10) }}
diskquota.max_active_tables = {{ salt['pillar.get']('data:greenplum:config:diskquota_max_active_tables', 2097152) }}
{% endif %}
