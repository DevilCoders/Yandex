{% set clusters = salt['pillar.get']('data:envoy:clusters', {}) %}
admin:
  access_log_path: /var/log/envoy/admin_access.log
  address:
    socket_address: 
      address: "::1"
      port_value: 9901

static_resources:
  listeners:
  - address:
      socket_address:
        address: "::"
        port_value: 443
    filter_chains:
      - transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext"
            common_tls_context:
              tls_params:
                tls_minimum_protocol_version: TLSv1_2
              tls_certificate_sds_secret_configs:
              - name: certs
              alpn_protocols: [h2]
        filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
              codec_type: auto
              stat_prefix: ingress_http
              # This timeout must be higher than the one on gateway L7. Otherwise we will get 'Internal' errors on client.
              stream_idle_timeout: 900s
{% if salt['pillar.get']('data:envoy:use_health_map') %}
              http_protocol_options:
                accept_http_10: true
{% endif %}
              access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                    path: "/var/log/envoy/https_access.log"
                    log_format:
                      text_format_source:
                        inline_string: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL% %DOWNSTREAM_TLS_VERSION%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"
              route_config:
                name: local_route
                virtual_hosts:
                  - name: backend
                    domains: ["*"]
                    routes:
{% for cluster, options in clusters.items() %}
                      - match:
                          prefix: {{ options['prefix'] }}
                          grpc: {}
                        route:
                          timeout: 0s
                          cluster: {{ cluster }}
{% endfor %}
              http_filters:
{% if salt['pillar.get']('data:envoy:use_health_map') %}
                - name: envoy.filters.http.lua
                  typed_config:
                    "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
                    inline_code: |
                      function envoy_on_request(request_handle)
                          local headers = request_handle:headers()
                          local enabled = false
                          if headers:get(":path") == "/ping" and headers:get(":method") == "GET" then
                              enabled = true
                          end
                          request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", "mdb.healthmapper", enabled)
                      end

                      function envoy_on_response(response_handle)
                          if response_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.lua")["mdb.healthmapper"] == false then
                              return
                          end

                          local body = response_handle:body()
                          local jsonString = tostring(body:getBytes(0, body:length()))
                          if string.find(jsonString, "NOT_SERVING") then
                            response_handle:headers():replace(":status", 503)
                          end
                      end
                - name: envoy.filters.http.grpc_json_transcoder
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
                    proto_descriptor: "/etc/envoy/health_proto.pb"
                    services: ["grpc.health.v1.Health"]
{% endif %}
                - name: envoy.filters.http.router
{% if salt['pillar.get']('data:envoy:use_health_map') %}
  - address:
      socket_address:
        address: "::"
        port_value: 80
    filter_chains:
      - filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
            codec_type: auto
            stat_prefix: ingress_http_no_tls
            http_protocol_options:
              accept_http_10: true
            access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                  path: "/var/log/envoy/https_access.log"
                  log_format:
                    text_format_source:
                      inline_string: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL% %DOWNSTREAM_TLS_VERSION%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"
            route_config:
              name: local_route
              virtual_hosts:
                - name: backend
                  domains: ["*"]
                  routes:
{% for cluster, options in clusters.items() %}
                    - match:
                        prefix: /grpc.health.v1.Health
                        grpc: {}
                      route:
                        timeout: 0s
                        cluster: {{ cluster }}
{% endfor %}
            http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
                  inline_code: |
                    function envoy_on_response(response_handle)
                        local body = response_handle:body()
                        local jsonString = tostring(body:getBytes(0, body:length()))
                        if string.find(jsonString, "NOT_SERVING") then
                            response_handle:headers():replace(":status", 503)
                        end
                    end
              - name: envoy.filters.http.grpc_json_transcoder
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
                  proto_descriptor: "/etc/envoy/health_proto.pb"
                  services: ["grpc.health.v1.Health"]
              - name: envoy.filters.http.router
{% endif %}
  clusters:
{% for cluster, options in clusters.items() %}
  - name: {{ cluster }}
    connect_timeout: 0.25s
    type: static
    common_http_protocol_options:
      max_connection_duration: 3600s
    http2_protocol_options: {}
    load_assignment:
      cluster_name: {{ cluster }}
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "::"
                    port_value: {{ options['port'] }}
{% endfor %}
  secrets:
  - name: certs
    tls_certificate:
      certificate_chain:
        filename: /etc/envoy/ssl/service.crt
      private_key:
        filename: /etc/envoy/ssl/service.key
