{%- set fqdn = salt['grains.get']('id') -%}
{%- set nodes = salt['pillar.get']('data:kafka:nodes', {}) -%}
{%- set node = salt['pillar.get']('data:kafka:nodes:'+fqdn, {}) -%}
{%- set admin_password = salt['pillar.get']('data:kafka:admin_password') -%}
{%- set config = salt['pillar.get']('data:kafka:config', {}) -%}
{%- set kafka_version = salt['pillar.get']('data:kafka:version', '3.0') -%}
{# disable_custom_authorizer is a global flag for all clusters for emergency disabling custom authorizer at all clusters #}
{%- set use_custom_authorizer = not salt['pillar.get']('data:kafka:disable_custom_authorizer', false) and salt['pillar.get']('data:kafka:use_custom_authorizer_for_cluster', false) -%}
{%- set protocol_version_map = {
    '2.1': '2.1-IV2',
    '2.6': '2.6-IV0',
    '2.8': '2.8-IV0',
    '3.0': '3.0-IV1',
    '3.1': '3.1-IV0',
} -%}
{%- set protocol_version = salt['pillar.get']('data:kafka:inter_broker_protocol_version', protocol_version_map.get(kafka_version, kafka_version + '-IV0')) -%}
{%- set ssl_cipher_suites = salt['mdb_kafka.ssl_cipher_suites']() -%}

broker.id={{ node.get('id') }}
broker.rack={{ node.get('rack') }}

# Listeners config
{% if salt['pillar.get']('data:dbaas:assign_public_ip', false) or salt.dbaas.is_porto() or salt.dbaas.is_aws() %}

{% if node.get('private_fqdn') %}
listeners=SASL_SSL://[::]:9091,PRIVATE_SASL_SSL://[::]:19091
advertised.listeners=SASL_SSL://{{ fqdn }}:9091,PRIVATE_SASL_SSL://{{ node.get('private_fqdn') }}:19091
listener.security.protocol.map:SASL_SSL:SASL_SSL,PRIVATE_SASL_SSL:SASL_SSL
{% else %}
listeners=SASL_SSL://[::]:9091
advertised.listeners=SASL_SSL://{{ fqdn }}:9091
{% endif %}

listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
    username="mdb_admin" \
    password="{{ admin_password }}";
listener.name.sasl_ssl.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
    username="mdb_admin" \
    password="{{ admin_password }}" \
    user_mdb_admin="{{ admin_password }}";

{% else %}
listeners=SASL_SSL://[::]:9091,SASL_PLAINTEXT://[::]:9092
advertised.listeners=SASL_SSL://{{ fqdn }}:9091,SASL_PLAINTEXT://{{ fqdn }}:9092

listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
    username="mdb_admin" \
    password="{{ admin_password }}";
listener.name.sasl_ssl.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
    username="mdb_admin" \
    password="{{ admin_password }}" \
    user_mdb_admin="{{ admin_password }}";
listener.name.sasl_plaintext.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
    username="mdb_admin" \
    password="{{ admin_password }}";
listener.name.sasl_plaintext.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
    username="mdb_admin" \
    password="{{ admin_password }}" \
    user_mdb_admin="{{ admin_password }}";
{% endif %}

sasl.enabled.mechanisms=SCRAM-SHA-512,PLAIN
inter.broker.listener.name=SASL_SSL
{% if salt['pillar.get']('data:kafka:use_plain_sasl', false) %}
sasl.mechanism.inter.broker.protocol=PLAIN
{% else %}
sasl.mechanism.inter.broker.protocol=SCRAM-SHA-512
{% endif %}
inter.broker.protocol.version={{ protocol_version }}
# Keystore config
ssl.keystore.location=/etc/kafka/ssl/server.keystore.jks
ssl.keystore.password={{ admin_password }}
ssl.key.password={{ admin_password }}
ssl.truststore.location=/etc/kafka/ssl/server.truststore.jks
ssl.truststore.password={{ admin_password }}
# ACL
{% if use_custom_authorizer and kafka_version == '2.1' %}
authorizer.class.name=com.yandex.cloud.mdb.kafka.YandexCloudAuthorizerForKafka21
{% elif use_custom_authorizer %}
authorizer.class.name=com.yandex.cloud.mdb.kafka.YandexCloudAuthorizer
{% else %}
authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer
{% endif %}
super.users=User:mdb_admin;
# IO
num.network.threads=8
num.io.threads=16
socket.send.buffer.bytes=-1
socket.receive.buffer.bytes=-1
replica.socket.receive.buffer.bytes=-1
socket.request.max.bytes=104857600

# ISR
min.insync.replicas=1
offsets.topic.replication.factor={{ salt.mdb_kafka.default_replication_factor() }}
default.replication.factor={{ salt.mdb_kafka.default_replication_factor() }}
transaction.state.log.replication.factor={{ salt.mdb_kafka.default_replication_factor() }}
{% if nodes|length > 2 %}
transaction.state.log.min.isr=2
num.replica.fetchers={{ nodes|length }}
{% else %}
transaction.state.log.min.isr=1
{% endif %}

# Logs
log.dirs=/var/lib/kafka
log.segment.bytes=1073741824
log.retention.check.interval.ms=300000

zookeeper.connect={{ salt['mdb_kafka.zk_connect']() }}
zookeeper.connection.timeout.ms=6000

num.recovery.threads.per.data.dir=1
group.initial.rebalance.delay.ms=1000
auto.create.topics.enable=false
broker.id.generation.enable=false
controlled.shutdown.enable=true

# User defined settings
{% for key, val in salt['pillar.get']('data:kafka:config', {}).items() %}
{% if key != 'ssl.cipher.suites' %}
{{ key }}={{ val }}
{% endif %}
{% endfor %}
{% if ssl_cipher_suites != '' %}
ssl.cipher.suites={{ ssl_cipher_suites }}
{% endif %}
