[sources]

[sources.kafka_file_log]
type = "file"
glob_minimum_cooldown_ms = 10000
line_delimiter = "\n"
max_line_bytes = 102400
include = ["/var/log/kafka/server.log", "/var/log/kafka/controller.log"]
read_from = "beginning"

[sources.kafka_file_log.fingerprint]
ignored_header_bytes = 0
strategy = "checksum"

[sources.kafka_file_log.multiline]
mode = "halt_before"
condition_pattern = "^\\[[0-9]{4}-[0-9]{2}-[0-9]{2}"
start_pattern = "^\\[[0-9]{4}-[0-9]{2}-[0-9]{2}"
timeout_ms = 1000

[sinks]

[sinks.to_kafka_dataplane]
type = "vector"
version = "2"
inputs = ["kafka_presink_hook"]
address = "{{ salt['dbaas.pillar']('data:vector:address') }}"

[sinks.to_kafka_dataplane.buffer]
type = "disk"
max_size = 1049000000
when_full = "block"

[sinks.to_kafka_dataplane.healthcheck]
enabled = true


[transforms]

[transforms.kafka_presink_hook]
type = "remap"
inputs = ["kafka_parsed"]
source = """
.context.region = \"{{ salt['dbaas.pillar']('data:dbaas:region') }}\"
.context.cid = \"{{ salt['dbaas.pillar']('data:dbaas:cluster_id') }}\"
"""

[transforms.kafka_parsed]
type = "remap"
inputs = ["kafka_file_log"]
source = """
parsed_msg_field, err = parse_grok(.message, \"^\\\\[(?<timestamp>\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2},\\\\d{3})\\\\]%{SPACE}%{WORD:severity}%{SPACE}(?<message>(.|\\\\r|\\\\n)*)\", false)
if err != null {
    .vector_err = err
    parsed_msg_field = {"message": .message, "severity": "Error", "unparsed": true}
}
timestamp_with_timezone = parsed_msg_field.timestamp + " +0000" ?? ""
.timestamp = parse_timestamp(value: timestamp_with_timezone, format: "%Y.%m.%d %H:%M:%S,%3f %z") ?? now()
del(parsed_msg_field.timestamp)
.severity = upcase!(slice!(parsed_msg_field.severity, 0, 1)) + downcase!(slice!(parsed_msg_field.severity, 1))
del(parsed_msg_field.severity)
.message = parsed_msg_field.message
del(parsed_msg_field.message)
if .file == "/var/log/kafka/server.log" {
    .origin = "server"
} else if .file == "/var/log/kafka/controller.log" {
    .origin = "controller"
}
.context = parsed_msg_field
.context.file = .file
.context.host = .host
del(.source_type)
del(.file)
del(.host)
"""
