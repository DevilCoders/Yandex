{% set yandex_env = salt['pillar.get']('yandex:environment', 'dev') %}
cycles:
  planned:
    enabled: true
    queue_producer:
      pending_interval: 10s
  creating:
    enabled: true
    queue_producer:
      pending_interval: 10s
  obsolete:
    enabled: true
    queue_producer:
      pending_interval: 10s
  deleting:
    enabled: true
    queue_producer:
      pending_interval: 10s


s3:
  host: {{ salt.pillar.get('data:s3:host') }}
  region: RU
  access_key: {{ salt.pillar.get('data:s3:access_key') }}
  secret_key: {{ salt.pillar.get('data:s3:secret_key') }}
app:
  app_name: backup_worker
  environment:
    {{ salt.pillar.get('data:environment') | yaml(False) | indent(4) }}
  logging:
    level: debug
  service_account:
    id: {{ salt.pillar.get('data:mdb-backup:service_account:id') }}
    key_id: {{ salt.pillar.get('data:mdb-backup:service_account:key_id') }}
    private_key: {{ salt.pillar.get('data:mdb-backup:service_account:private_key') | yaml_encode }}
metadb:
  addrs: {{ salt.pillar.get('data:metadb:hosts') | yaml }}
  db: dbaas_metadb
  user: backup_worker
  password: {{ salt.pillar.get('data:config:pgusers:backup_worker:password') | yaml_encode }}
  sslmode: 'verify-full'
  sslrootcert: '/opt/yandex/allCAs.pem'
health:
  host: {{ salt.pillar.get('data:health:address') }}
  tls:
    ca_file: "/opt/yandex/allCAs.pem"
deploy:
  uri: https://{{ salt.pillar.get('data:deploy:api_host') }}
  transport:
    logging:
      enabled: true
    tls:
      ca_file: "/opt/yandex/allCAs.pem"
host_picker:
    cluster_type_settings:
        mysql_cluster:
            config:
                health_max_retries: 3
                host_health_statuses_order: ["Alive", "Degraged", "Unknown"]
                replication_health_service: "mysql"
                priority_args: ["data", "mysql", "backup_priority"]
            host_picker_type: "prefer_replica"
    default_settings:
        config:
            health_max_retries: 3
            host_health_statuses_order: ["Alive", "Degraged", "Unknown"]
        host_picker_type: "healthy"
executer:
    cluster_type_settings:
        postgresql_cluster:
            planned:
                deploy_type: "module"
                cmd_config:
                    type: "mdb_postgresql.run_backup"
                    args: []
                    timeout: 48h
                sync_all_state_timeout: 600s
            creating:
                check_deploy_timeout: '5s'
                update_sizes: true
                assert_update_sizes_errors: false
            deleting:
                check_deploy_timeout: '5s'
                update_sizes: true
                assert_update_sizes_errors: false
