// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/cms/api/internal/tasksclient (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "a.yandex-team.ru/cloud/mdb/cms/api/internal/tasksclient/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateMoveInstanceTask mocks base method.
func (m *MockClient) CreateMoveInstanceTask(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoveInstanceTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMoveInstanceTask indicates an expected call of CreateMoveInstanceTask.
func (mr *MockClientMockRecorder) CreateMoveInstanceTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoveInstanceTask", reflect.TypeOf((*MockClient)(nil).CreateMoveInstanceTask), arg0, arg1, arg2)
}

// TaskStatus mocks base method.
func (m *MockClient) TaskStatus(arg0 context.Context, arg1 string) (models.TaskStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskStatus", arg0, arg1)
	ret0, _ := ret[0].(models.TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskStatus indicates an expected call of TaskStatus.
func (mr *MockClientMockRecorder) TaskStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskStatus", reflect.TypeOf((*MockClient)(nil).TaskStatus), arg0, arg1)
}
