// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/cms/api/internal/logic/autoduty/helpers/mlock (interfaces: Locker)

// Package mocks is a generated GoMock package.
package mocks

import (
	"a.yandex-team.ru/cloud/mdb/cms/api/internal/lockcluster"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// LockCluster mocks base method.
func (m *MockLocker) LockCluster(arg0 context.Context, arg1, arg2 string, arg3 lockcluster.Holder) (*lockcluster.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCluster", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*lockcluster.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCluster indicates an expected call of LockCluster.
func (mr *MockLockerMockRecorder) LockCluster(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCluster", reflect.TypeOf((*MockLocker)(nil).LockCluster), arg0, arg1, arg2, arg3)
}

// ReleaseCluster mocks base method.
func (m *MockLocker) ReleaseCluster(arg0 context.Context, arg1 *lockcluster.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseCluster indicates an expected call of ReleaseCluster.
func (mr *MockLockerMockRecorder) ReleaseCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseCluster", reflect.TypeOf((*MockLocker)(nil).ReleaseCluster), arg0, arg1)
}
