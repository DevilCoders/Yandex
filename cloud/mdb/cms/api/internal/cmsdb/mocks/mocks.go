// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/cms/api/internal/cmsdb (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	cmsdb "a.yandex-team.ru/cloud/mdb/cms/api/internal/cmsdb"
	models "a.yandex-team.ru/cloud/mdb/cms/api/pkg/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	hasql "golang.yandex/hasql"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockClient) Begin(arg0 context.Context, arg1 hasql.NodeStateCriteria) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockClientMockRecorder) Begin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockClient)(nil).Begin), arg0, arg1)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Commit mocks base method.
func (m *MockClient) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockClientMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockClient)(nil).Commit), arg0)
}

// CreateDecision mocks base method.
func (m *MockClient) CreateDecision(arg0 context.Context, arg1 int64, arg2 models.DecisionStatus, arg3 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDecision", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDecision indicates an expected call of CreateDecision.
func (mr *MockClientMockRecorder) CreateDecision(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDecision", reflect.TypeOf((*MockClient)(nil).CreateDecision), arg0, arg1, arg2, arg3)
}

// CreateInstanceOperation mocks base method.
func (m *MockClient) CreateInstanceOperation(arg0 context.Context, arg1 string, arg2 models.InstanceOperationType, arg3, arg4, arg5 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceOperation", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceOperation indicates an expected call of CreateInstanceOperation.
func (mr *MockClientMockRecorder) CreateInstanceOperation(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceOperation", reflect.TypeOf((*MockClient)(nil).CreateInstanceOperation), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateRequests mocks base method.
func (m *MockClient) CreateRequests(arg0 context.Context, arg1 []cmsdb.RequestToCreate) (models.RequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequests", arg0, arg1)
	ret0, _ := ret[0].(models.RequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequests indicates an expected call of CreateRequests.
func (mr *MockClientMockRecorder) CreateRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequests", reflect.TypeOf((*MockClient)(nil).CreateRequests), arg0, arg1)
}

// GetDecisionsByID mocks base method.
func (m *MockClient) GetDecisionsByID(arg0 context.Context, arg1 []int64) (map[int64]models.AutomaticDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecisionsByID", arg0, arg1)
	ret0, _ := ret[0].(map[int64]models.AutomaticDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecisionsByID indicates an expected call of GetDecisionsByID.
func (mr *MockClientMockRecorder) GetDecisionsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecisionsByID", reflect.TypeOf((*MockClient)(nil).GetDecisionsByID), arg0, arg1)
}

// GetDecisionsByRequestID mocks base method.
func (m *MockClient) GetDecisionsByRequestID(arg0 context.Context, arg1 []int64) ([]models.AutomaticDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecisionsByRequestID", arg0, arg1)
	ret0, _ := ret[0].([]models.AutomaticDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecisionsByRequestID indicates an expected call of GetDecisionsByRequestID.
func (mr *MockClientMockRecorder) GetDecisionsByRequestID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecisionsByRequestID", reflect.TypeOf((*MockClient)(nil).GetDecisionsByRequestID), arg0, arg1)
}

// GetDecisionsToCleanup mocks base method.
func (m *MockClient) GetDecisionsToCleanup(arg0 context.Context, arg1 []int64) (models.AutomaticDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecisionsToCleanup", arg0, arg1)
	ret0, _ := ret[0].(models.AutomaticDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecisionsToCleanup indicates an expected call of GetDecisionsToCleanup.
func (mr *MockClientMockRecorder) GetDecisionsToCleanup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecisionsToCleanup", reflect.TypeOf((*MockClient)(nil).GetDecisionsToCleanup), arg0, arg1)
}

// GetDecisionsToFinishAfterWalle mocks base method.
func (m *MockClient) GetDecisionsToFinishAfterWalle(arg0 context.Context, arg1 []int64) (models.AutomaticDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecisionsToFinishAfterWalle", arg0, arg1)
	ret0, _ := ret[0].(models.AutomaticDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecisionsToFinishAfterWalle indicates an expected call of GetDecisionsToFinishAfterWalle.
func (mr *MockClientMockRecorder) GetDecisionsToFinishAfterWalle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecisionsToFinishAfterWalle", reflect.TypeOf((*MockClient)(nil).GetDecisionsToFinishAfterWalle), arg0, arg1)
}

// GetDecisionsToLetGo mocks base method.
func (m *MockClient) GetDecisionsToLetGo(arg0 context.Context, arg1 []int64) (models.AutomaticDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecisionsToLetGo", arg0, arg1)
	ret0, _ := ret[0].(models.AutomaticDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecisionsToLetGo indicates an expected call of GetDecisionsToLetGo.
func (mr *MockClientMockRecorder) GetDecisionsToLetGo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecisionsToLetGo", reflect.TypeOf((*MockClient)(nil).GetDecisionsToLetGo), arg0, arg1)
}

// GetDecisionsToProcess mocks base method.
func (m *MockClient) GetDecisionsToProcess(arg0 context.Context, arg1 []int64) (models.AutomaticDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecisionsToProcess", arg0, arg1)
	ret0, _ := ret[0].(models.AutomaticDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecisionsToProcess indicates an expected call of GetDecisionsToProcess.
func (mr *MockClientMockRecorder) GetDecisionsToProcess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecisionsToProcess", reflect.TypeOf((*MockClient)(nil).GetDecisionsToProcess), arg0, arg1)
}

// GetDecisionsToReturnFromWalle mocks base method.
func (m *MockClient) GetDecisionsToReturnFromWalle(arg0 context.Context, arg1 []int64) (models.AutomaticDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecisionsToReturnFromWalle", arg0, arg1)
	ret0, _ := ret[0].(models.AutomaticDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecisionsToReturnFromWalle indicates an expected call of GetDecisionsToReturnFromWalle.
func (mr *MockClientMockRecorder) GetDecisionsToReturnFromWalle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecisionsToReturnFromWalle", reflect.TypeOf((*MockClient)(nil).GetDecisionsToReturnFromWalle), arg0, arg1)
}

// GetInstanceOperation mocks base method.
func (m *MockClient) GetInstanceOperation(arg0 context.Context, arg1 string) (models.ManagementInstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceOperation", arg0, arg1)
	ret0, _ := ret[0].(models.ManagementInstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceOperation indicates an expected call of GetInstanceOperation.
func (mr *MockClientMockRecorder) GetInstanceOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceOperation", reflect.TypeOf((*MockClient)(nil).GetInstanceOperation), arg0, arg1)
}

// GetLock mocks base method.
func (m *MockClient) GetLock(arg0 context.Context, arg1 cmsdb.LockKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLock indicates an expected call of GetLock.
func (mr *MockClientMockRecorder) GetLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLock", reflect.TypeOf((*MockClient)(nil).GetLock), arg0, arg1)
}

// GetNotFinishedDecisionsByFQDN mocks base method.
func (m *MockClient) GetNotFinishedDecisionsByFQDN(arg0 context.Context, arg1 []string) ([]models.AutomaticDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotFinishedDecisionsByFQDN", arg0, arg1)
	ret0, _ := ret[0].([]models.AutomaticDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotFinishedDecisionsByFQDN indicates an expected call of GetNotFinishedDecisionsByFQDN.
func (mr *MockClientMockRecorder) GetNotFinishedDecisionsByFQDN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotFinishedDecisionsByFQDN", reflect.TypeOf((*MockClient)(nil).GetNotFinishedDecisionsByFQDN), arg0, arg1)
}

// GetRequests mocks base method.
func (m *MockClient) GetRequests(arg0 context.Context) ([]models.ManagementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequests", arg0)
	ret0, _ := ret[0].([]models.ManagementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequests indicates an expected call of GetRequests.
func (mr *MockClientMockRecorder) GetRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequests", reflect.TypeOf((*MockClient)(nil).GetRequests), arg0)
}

// GetRequestsByID mocks base method.
func (m *MockClient) GetRequestsByID(arg0 context.Context, arg1 []int64) (map[int64]models.ManagementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByID", arg0, arg1)
	ret0, _ := ret[0].(map[int64]models.ManagementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsByID indicates an expected call of GetRequestsByID.
func (mr *MockClientMockRecorder) GetRequestsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByID", reflect.TypeOf((*MockClient)(nil).GetRequestsByID), arg0, arg1)
}

// GetRequestsByTaskID mocks base method.
func (m *MockClient) GetRequestsByTaskID(arg0 context.Context, arg1 []string) (map[string]models.ManagementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByTaskID", arg0, arg1)
	ret0, _ := ret[0].(map[string]models.ManagementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsByTaskID indicates an expected call of GetRequestsByTaskID.
func (mr *MockClientMockRecorder) GetRequestsByTaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByTaskID", reflect.TypeOf((*MockClient)(nil).GetRequestsByTaskID), arg0, arg1)
}

// GetRequestsStatInWindow mocks base method.
func (m *MockClient) GetRequestsStatInWindow(arg0 context.Context, arg1 time.Duration) ([]models.ManagementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsStatInWindow", arg0, arg1)
	ret0, _ := ret[0].([]models.ManagementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsStatInWindow indicates an expected call of GetRequestsStatInWindow.
func (mr *MockClientMockRecorder) GetRequestsStatInWindow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsStatInWindow", reflect.TypeOf((*MockClient)(nil).GetRequestsStatInWindow), arg0, arg1)
}

// GetRequestsToConsider mocks base method.
func (m *MockClient) GetRequestsToConsider(arg0 context.Context, arg1 int) ([]models.ManagementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsToConsider", arg0, arg1)
	ret0, _ := ret[0].([]models.ManagementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsToConsider indicates an expected call of GetRequestsToConsider.
func (mr *MockClientMockRecorder) GetRequestsToConsider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsToConsider", reflect.TypeOf((*MockClient)(nil).GetRequestsToConsider), arg0, arg1)
}

// GetRequestsWithDeletedByID mocks base method.
func (m *MockClient) GetRequestsWithDeletedByID(arg0 context.Context, arg1 []int64) (map[int64]models.ManagementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsWithDeletedByID", arg0, arg1)
	ret0, _ := ret[0].(map[int64]models.ManagementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsWithDeletedByID indicates an expected call of GetRequestsWithDeletedByID.
func (mr *MockClientMockRecorder) GetRequestsWithDeletedByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsWithDeletedByID", reflect.TypeOf((*MockClient)(nil).GetRequestsWithDeletedByID), arg0, arg1)
}

// GetResetupRequests mocks base method.
func (m *MockClient) GetResetupRequests(arg0 context.Context, arg1 time.Duration) ([]models.ManagementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetupRequests", arg0, arg1)
	ret0, _ := ret[0].([]models.ManagementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetupRequests indicates an expected call of GetResetupRequests.
func (mr *MockClientMockRecorder) GetResetupRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetupRequests", reflect.TypeOf((*MockClient)(nil).GetResetupRequests), arg0, arg1)
}

// GetUnfinishedRequests mocks base method.
func (m *MockClient) GetUnfinishedRequests(arg0 context.Context, arg1 time.Duration) ([]models.ManagementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfinishedRequests", arg0, arg1)
	ret0, _ := ret[0].([]models.ManagementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfinishedRequests indicates an expected call of GetUnfinishedRequests.
func (mr *MockClientMockRecorder) GetUnfinishedRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfinishedRequests", reflect.TypeOf((*MockClient)(nil).GetUnfinishedRequests), arg0, arg1)
}

// InstanceOperationsToAlarm mocks base method.
func (m *MockClient) InstanceOperationsToAlarm(arg0 context.Context) ([]models.ManagementInstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceOperationsToAlarm", arg0)
	ret0, _ := ret[0].([]models.ManagementInstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceOperationsToAlarm indicates an expected call of InstanceOperationsToAlarm.
func (mr *MockClientMockRecorder) InstanceOperationsToAlarm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceOperationsToAlarm", reflect.TypeOf((*MockClient)(nil).InstanceOperationsToAlarm), arg0)
}

// InstanceOperationsToProcess mocks base method.
func (m *MockClient) InstanceOperationsToProcess(arg0 context.Context, arg1 int) ([]models.ManagementInstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceOperationsToProcess", arg0, arg1)
	ret0, _ := ret[0].([]models.ManagementInstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceOperationsToProcess indicates an expected call of InstanceOperationsToProcess.
func (mr *MockClientMockRecorder) InstanceOperationsToProcess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceOperationsToProcess", reflect.TypeOf((*MockClient)(nil).InstanceOperationsToProcess), arg0, arg1)
}

// IsReady mocks base method.
func (m *MockClient) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockClientMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockClient)(nil).IsReady), arg0)
}

// ListInstanceOperations mocks base method.
func (m *MockClient) ListInstanceOperations(arg0 context.Context) ([]models.ManagementInstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceOperations", arg0)
	ret0, _ := ret[0].([]models.ManagementInstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceOperations indicates an expected call of ListInstanceOperations.
func (mr *MockClientMockRecorder) ListInstanceOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceOperations", reflect.TypeOf((*MockClient)(nil).ListInstanceOperations), arg0)
}

// MarkRequestsAnalysedByAutoDuty mocks base method.
func (m *MockClient) MarkRequestsAnalysedByAutoDuty(arg0 context.Context, arg1 []models.AutomaticDecision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRequestsAnalysedByAutoDuty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRequestsAnalysedByAutoDuty indicates an expected call of MarkRequestsAnalysedByAutoDuty.
func (mr *MockClientMockRecorder) MarkRequestsAnalysedByAutoDuty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRequestsAnalysedByAutoDuty", reflect.TypeOf((*MockClient)(nil).MarkRequestsAnalysedByAutoDuty), arg0, arg1)
}

// MarkRequestsCameBack mocks base method.
func (m *MockClient) MarkRequestsCameBack(arg0 context.Context, arg1 []models.AutomaticDecision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRequestsCameBack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRequestsCameBack indicates an expected call of MarkRequestsCameBack.
func (mr *MockClientMockRecorder) MarkRequestsCameBack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRequestsCameBack", reflect.TypeOf((*MockClient)(nil).MarkRequestsCameBack), arg0, arg1)
}

// MarkRequestsDeletedByTaskID mocks base method.
func (m *MockClient) MarkRequestsDeletedByTaskID(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRequestsDeletedByTaskID", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkRequestsDeletedByTaskID indicates an expected call of MarkRequestsDeletedByTaskID.
func (mr *MockClientMockRecorder) MarkRequestsDeletedByTaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRequestsDeletedByTaskID", reflect.TypeOf((*MockClient)(nil).MarkRequestsDeletedByTaskID), arg0, arg1)
}

// MarkRequestsFinishedByAutoDuty mocks base method.
func (m *MockClient) MarkRequestsFinishedByAutoDuty(arg0 context.Context, arg1 []models.AutomaticDecision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRequestsFinishedByAutoDuty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRequestsFinishedByAutoDuty indicates an expected call of MarkRequestsFinishedByAutoDuty.
func (mr *MockClientMockRecorder) MarkRequestsFinishedByAutoDuty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRequestsFinishedByAutoDuty", reflect.TypeOf((*MockClient)(nil).MarkRequestsFinishedByAutoDuty), arg0, arg1)
}

// MarkRequestsResolvedByAutoDuty mocks base method.
func (m *MockClient) MarkRequestsResolvedByAutoDuty(arg0 context.Context, arg1 []models.AutomaticDecision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRequestsResolvedByAutoDuty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRequestsResolvedByAutoDuty indicates an expected call of MarkRequestsResolvedByAutoDuty.
func (mr *MockClientMockRecorder) MarkRequestsResolvedByAutoDuty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRequestsResolvedByAutoDuty", reflect.TypeOf((*MockClient)(nil).MarkRequestsResolvedByAutoDuty), arg0, arg1)
}

// MoveDecisionsToStatus mocks base method.
func (m *MockClient) MoveDecisionsToStatus(arg0 context.Context, arg1 []int64, arg2 models.DecisionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveDecisionsToStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveDecisionsToStatus indicates an expected call of MoveDecisionsToStatus.
func (mr *MockClientMockRecorder) MoveDecisionsToStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDecisionsToStatus", reflect.TypeOf((*MockClient)(nil).MoveDecisionsToStatus), arg0, arg1, arg2)
}

// Rollback mocks base method.
func (m *MockClient) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockClientMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockClient)(nil).Rollback), arg0)
}

// SetAutoDutyResolution mocks base method.
func (m *MockClient) SetAutoDutyResolution(arg0 context.Context, arg1 []int64, arg2 models.AutoResolution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAutoDutyResolution", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAutoDutyResolution indicates an expected call of SetAutoDutyResolution.
func (mr *MockClientMockRecorder) SetAutoDutyResolution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoDutyResolution", reflect.TypeOf((*MockClient)(nil).SetAutoDutyResolution), arg0, arg1, arg2)
}

// StaleInstanceOperations mocks base method.
func (m *MockClient) StaleInstanceOperations(arg0 context.Context) ([]models.ManagementInstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaleInstanceOperations", arg0)
	ret0, _ := ret[0].([]models.ManagementInstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StaleInstanceOperations indicates an expected call of StaleInstanceOperations.
func (mr *MockClientMockRecorder) StaleInstanceOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaleInstanceOperations", reflect.TypeOf((*MockClient)(nil).StaleInstanceOperations), arg0)
}

// UpdateDecisionFields mocks base method.
func (m *MockClient) UpdateDecisionFields(arg0 context.Context, arg1 models.AutomaticDecision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDecisionFields", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDecisionFields indicates an expected call of UpdateDecisionFields.
func (mr *MockClientMockRecorder) UpdateDecisionFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDecisionFields", reflect.TypeOf((*MockClient)(nil).UpdateDecisionFields), arg0, arg1)
}

// UpdateInstanceOperationFields mocks base method.
func (m *MockClient) UpdateInstanceOperationFields(arg0 context.Context, arg1 models.ManagementInstanceOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceOperationFields", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceOperationFields indicates an expected call of UpdateInstanceOperationFields.
func (mr *MockClientMockRecorder) UpdateInstanceOperationFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceOperationFields", reflect.TypeOf((*MockClient)(nil).UpdateInstanceOperationFields), arg0, arg1)
}

// UpdateRequestFields mocks base method.
func (m *MockClient) UpdateRequestFields(arg0 context.Context, arg1 models.ManagementRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequestFields", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRequestFields indicates an expected call of UpdateRequestFields.
func (mr *MockClientMockRecorder) UpdateRequestFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestFields", reflect.TypeOf((*MockClient)(nil).UpdateRequestFields), arg0, arg1)
}
