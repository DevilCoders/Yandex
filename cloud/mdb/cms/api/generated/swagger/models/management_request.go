// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ManagementRequest management request
//
// swagger:model ManagementRequest
type ManagementRequest struct {

	// Requested action
	// Required: true
	// Enum: [prepare deactivate power-off reboot profile redeploy repair-link change-disk temporary-unreachable]
	Action *string `json:"action"`

	// optional comment from task's author
	Comment string `json:"comment,omitempty"`

	// additional task parameters
	Extra interface{} `json:"extra,omitempty"`

	// optional failure type
	FailureType string `json:"failure_type,omitempty"`

	// Hosts to process the action on
	// Required: true
	// Min Items: 1
	Hosts []Fqdn `json:"hosts"`

	// id
	// Required: true
	ID *ManagementRequestID `json:"id"`

	// Action issuer, a login or anything like wall-e for example
	// Required: true
	// Min Length: 1
	Issuer *string `json:"issuer"`

	// scenario info
	ScenarioInfo *ManagementRequestScenarioInfo `json:"scenario_info,omitempty"`

	// Task type
	// Required: true
	// Enum: [manual automated]
	Type *string `json:"type"`

	// management request additional properties
	ManagementRequestAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *ManagementRequest) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Requested action
		// Required: true
		// Enum: [prepare deactivate power-off reboot profile redeploy repair-link change-disk temporary-unreachable]
		Action *string `json:"action"`

		// optional comment from task's author
		Comment string `json:"comment,omitempty"`

		// additional task parameters
		Extra interface{} `json:"extra,omitempty"`

		// optional failure type
		FailureType string `json:"failure_type,omitempty"`

		// Hosts to process the action on
		// Required: true
		// Min Items: 1
		Hosts []Fqdn `json:"hosts"`

		// id
		// Required: true
		ID *ManagementRequestID `json:"id"`

		// Action issuer, a login or anything like wall-e for example
		// Required: true
		// Min Length: 1
		Issuer *string `json:"issuer"`

		// scenario info
		ScenarioInfo *ManagementRequestScenarioInfo `json:"scenario_info,omitempty"`

		// Task type
		// Required: true
		// Enum: [manual automated]
		Type *string `json:"type"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ManagementRequest

	rcv.Action = stage1.Action
	rcv.Comment = stage1.Comment
	rcv.Extra = stage1.Extra
	rcv.FailureType = stage1.FailureType
	rcv.Hosts = stage1.Hosts
	rcv.ID = stage1.ID
	rcv.Issuer = stage1.Issuer
	rcv.ScenarioInfo = stage1.ScenarioInfo
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "action")
	delete(stage2, "comment")
	delete(stage2, "extra")
	delete(stage2, "failure_type")
	delete(stage2, "hosts")
	delete(stage2, "id")
	delete(stage2, "issuer")
	delete(stage2, "scenario_info")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ManagementRequestAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m ManagementRequest) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Requested action
		// Required: true
		// Enum: [prepare deactivate power-off reboot profile redeploy repair-link change-disk temporary-unreachable]
		Action *string `json:"action"`

		// optional comment from task's author
		Comment string `json:"comment,omitempty"`

		// additional task parameters
		Extra interface{} `json:"extra,omitempty"`

		// optional failure type
		FailureType string `json:"failure_type,omitempty"`

		// Hosts to process the action on
		// Required: true
		// Min Items: 1
		Hosts []Fqdn `json:"hosts"`

		// id
		// Required: true
		ID *ManagementRequestID `json:"id"`

		// Action issuer, a login or anything like wall-e for example
		// Required: true
		// Min Length: 1
		Issuer *string `json:"issuer"`

		// scenario info
		ScenarioInfo *ManagementRequestScenarioInfo `json:"scenario_info,omitempty"`

		// Task type
		// Required: true
		// Enum: [manual automated]
		Type *string `json:"type"`
	}

	stage1.Action = m.Action
	stage1.Comment = m.Comment
	stage1.Extra = m.Extra
	stage1.FailureType = m.FailureType
	stage1.Hosts = m.Hosts
	stage1.ID = m.ID
	stage1.Issuer = m.Issuer
	stage1.ScenarioInfo = m.ScenarioInfo
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ManagementRequestAdditionalProperties) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ManagementRequestAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this management request
func (m *ManagementRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScenarioInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var managementRequestTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["prepare","deactivate","power-off","reboot","profile","redeploy","repair-link","change-disk","temporary-unreachable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		managementRequestTypeActionPropEnum = append(managementRequestTypeActionPropEnum, v)
	}
}

const (

	// ManagementRequestActionPrepare captures enum value "prepare"
	ManagementRequestActionPrepare string = "prepare"

	// ManagementRequestActionDeactivate captures enum value "deactivate"
	ManagementRequestActionDeactivate string = "deactivate"

	// ManagementRequestActionPowerDashOff captures enum value "power-off"
	ManagementRequestActionPowerDashOff string = "power-off"

	// ManagementRequestActionReboot captures enum value "reboot"
	ManagementRequestActionReboot string = "reboot"

	// ManagementRequestActionProfile captures enum value "profile"
	ManagementRequestActionProfile string = "profile"

	// ManagementRequestActionRedeploy captures enum value "redeploy"
	ManagementRequestActionRedeploy string = "redeploy"

	// ManagementRequestActionRepairDashLink captures enum value "repair-link"
	ManagementRequestActionRepairDashLink string = "repair-link"

	// ManagementRequestActionChangeDashDisk captures enum value "change-disk"
	ManagementRequestActionChangeDashDisk string = "change-disk"

	// ManagementRequestActionTemporaryDashUnreachable captures enum value "temporary-unreachable"
	ManagementRequestActionTemporaryDashUnreachable string = "temporary-unreachable"
)

// prop value enum
func (m *ManagementRequest) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, managementRequestTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ManagementRequest) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *ManagementRequest) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts", "body", m.Hosts); err != nil {
		return err
	}

	iHostsSize := int64(len(m.Hosts))

	if err := validate.MinItems("hosts", "body", iHostsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Hosts); i++ {

		if err := m.Hosts[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ManagementRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementRequest) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("issuer", "body", m.Issuer); err != nil {
		return err
	}

	if err := validate.MinLength("issuer", "body", *m.Issuer, 1); err != nil {
		return err
	}

	return nil
}

func (m *ManagementRequest) validateScenarioInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ScenarioInfo) { // not required
		return nil
	}

	if m.ScenarioInfo != nil {
		if err := m.ScenarioInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scenario_info")
			}
			return err
		}
	}

	return nil
}

var managementRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["manual","automated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		managementRequestTypeTypePropEnum = append(managementRequestTypeTypePropEnum, v)
	}
}

const (

	// ManagementRequestTypeManual captures enum value "manual"
	ManagementRequestTypeManual string = "manual"

	// ManagementRequestTypeAutomated captures enum value "automated"
	ManagementRequestTypeAutomated string = "automated"
)

// prop value enum
func (m *ManagementRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, managementRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ManagementRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this management request based on the context it is used
func (m *ManagementRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScenarioInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagementRequest) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hosts); i++ {

		if err := m.Hosts[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ManagementRequest) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if m.ID != nil {
		if err := m.ID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementRequest) contextValidateScenarioInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ScenarioInfo != nil {
		if err := m.ScenarioInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scenario_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManagementRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManagementRequest) UnmarshalBinary(b []byte) error {
	var res ManagementRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ManagementRequestScenarioInfo scenario information https://st.yandex-team.ru/WALLE-4194#617fe59a8a0a1c07b57bd687
//
// swagger:model ManagementRequestScenarioInfo
type ManagementRequestScenarioInfo struct {

	// scenario id
	ScenarioID int64 `json:"scenario_id,omitempty"`

	// scenario type
	// Enum: [itdc-maintenance noc-hard noc-soft etc]
	ScenarioType string `json:"scenario_type,omitempty"`

	// management request scenario info additional properties
	ManagementRequestScenarioInfoAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *ManagementRequestScenarioInfo) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// scenario id
		ScenarioID int64 `json:"scenario_id,omitempty"`

		// scenario type
		// Enum: [itdc-maintenance noc-hard noc-soft etc]
		ScenarioType string `json:"scenario_type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ManagementRequestScenarioInfo

	rcv.ScenarioID = stage1.ScenarioID
	rcv.ScenarioType = stage1.ScenarioType
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "scenario_id")
	delete(stage2, "scenario_type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ManagementRequestScenarioInfoAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m ManagementRequestScenarioInfo) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// scenario id
		ScenarioID int64 `json:"scenario_id,omitempty"`

		// scenario type
		// Enum: [itdc-maintenance noc-hard noc-soft etc]
		ScenarioType string `json:"scenario_type,omitempty"`
	}

	stage1.ScenarioID = m.ScenarioID
	stage1.ScenarioType = m.ScenarioType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ManagementRequestScenarioInfoAdditionalProperties) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ManagementRequestScenarioInfoAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this management request scenario info
func (m *ManagementRequestScenarioInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScenarioType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var managementRequestScenarioInfoTypeScenarioTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["itdc-maintenance","noc-hard","noc-soft","etc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		managementRequestScenarioInfoTypeScenarioTypePropEnum = append(managementRequestScenarioInfoTypeScenarioTypePropEnum, v)
	}
}

const (

	// ManagementRequestScenarioInfoScenarioTypeItdcDashMaintenance captures enum value "itdc-maintenance"
	ManagementRequestScenarioInfoScenarioTypeItdcDashMaintenance string = "itdc-maintenance"

	// ManagementRequestScenarioInfoScenarioTypeNocDashHard captures enum value "noc-hard"
	ManagementRequestScenarioInfoScenarioTypeNocDashHard string = "noc-hard"

	// ManagementRequestScenarioInfoScenarioTypeNocDashSoft captures enum value "noc-soft"
	ManagementRequestScenarioInfoScenarioTypeNocDashSoft string = "noc-soft"

	// ManagementRequestScenarioInfoScenarioTypeEtc captures enum value "etc"
	ManagementRequestScenarioInfoScenarioTypeEtc string = "etc"
)

// prop value enum
func (m *ManagementRequestScenarioInfo) validateScenarioTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, managementRequestScenarioInfoTypeScenarioTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ManagementRequestScenarioInfo) validateScenarioType(formats strfmt.Registry) error {
	if swag.IsZero(m.ScenarioType) { // not required
		return nil
	}

	// value enum
	if err := m.validateScenarioTypeEnum("scenario_info"+"."+"scenario_type", "body", m.ScenarioType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this management request scenario info based on context it is used
func (m *ManagementRequestScenarioInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ManagementRequestScenarioInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManagementRequestScenarioInfo) UnmarshalBinary(b []byte) error {
	var res ManagementRequestScenarioInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
