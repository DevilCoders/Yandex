// Code generated by go-swagger; DO NOT EDIT.

package monrun

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"a.yandex-team.ru/cloud/mdb/cms/api/generated/swagger/models"
)

// SendEventsReader is a Reader for the SendEvents structure.
type SendEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSendEventsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSendEventsOK creates a SendEventsOK with default headers values
func NewSendEventsOK() *SendEventsOK {
	return &SendEventsOK{}
}

/* SendEventsOK describes a response with status code 200, with default header values.

Events were sent successfully
*/
type SendEventsOK struct {
}

func (o *SendEventsOK) Error() string {
	return fmt.Sprintf("[GET /monrun/v1/send_events][%d] sendEventsOK ", 200)
}

func (o *SendEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSendEventsDefault creates a SendEventsDefault with default headers values
func NewSendEventsDefault(code int) *SendEventsDefault {
	return &SendEventsDefault{
		_statusCode: code,
	}
}

/* SendEventsDefault describes a response with status code -1, with default header values.

Error
*/
type SendEventsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the send events default response
func (o *SendEventsDefault) Code() int {
	return o._statusCode
}

func (o *SendEventsDefault) Error() string {
	return fmt.Sprintf("[GET /monrun/v1/send_events][%d] SendEvents default  %+v", o._statusCode, o.Payload)
}
func (o *SendEventsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *SendEventsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
