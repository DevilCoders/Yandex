// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"a.yandex-team.ru/cloud/mdb/cms/api/generated/swagger/models"
)

// NewRegisterRequestToManageNodesParams creates a new RegisterRequestToManageNodesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRegisterRequestToManageNodesParams() *RegisterRequestToManageNodesParams {
	return &RegisterRequestToManageNodesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterRequestToManageNodesParamsWithTimeout creates a new RegisterRequestToManageNodesParams object
// with the ability to set a timeout on a request.
func NewRegisterRequestToManageNodesParamsWithTimeout(timeout time.Duration) *RegisterRequestToManageNodesParams {
	return &RegisterRequestToManageNodesParams{
		timeout: timeout,
	}
}

// NewRegisterRequestToManageNodesParamsWithContext creates a new RegisterRequestToManageNodesParams object
// with the ability to set a context for a request.
func NewRegisterRequestToManageNodesParamsWithContext(ctx context.Context) *RegisterRequestToManageNodesParams {
	return &RegisterRequestToManageNodesParams{
		Context: ctx,
	}
}

// NewRegisterRequestToManageNodesParamsWithHTTPClient creates a new RegisterRequestToManageNodesParams object
// with the ability to set a custom HTTPClient for a request.
func NewRegisterRequestToManageNodesParamsWithHTTPClient(client *http.Client) *RegisterRequestToManageNodesParams {
	return &RegisterRequestToManageNodesParams{
		HTTPClient: client,
	}
}

/* RegisterRequestToManageNodesParams contains all the parameters to send to the API endpoint
   for the register request to manage nodes operation.

   Typically these are written to a http.Request.
*/
type RegisterRequestToManageNodesParams struct {

	/* XRequestID.

	   Unique request ID (must be generated for each separate request, even retries)
	*/
	XRequestID *string

	/* XYaServiceTicket.

	   TVM2 ticket.
	*/
	XYaServiceTicket *string

	// Body.
	Body *models.ManagementRequest

	// DryRun.
	DryRun *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the register request to manage nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RegisterRequestToManageNodesParams) WithDefaults() *RegisterRequestToManageNodesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the register request to manage nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RegisterRequestToManageNodesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) WithTimeout(timeout time.Duration) *RegisterRequestToManageNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) WithContext(ctx context.Context) *RegisterRequestToManageNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) WithHTTPClient(client *http.Client) *RegisterRequestToManageNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) WithXRequestID(xRequestID *string) *RegisterRequestToManageNodesParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithXYaServiceTicket adds the xYaServiceTicket to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) WithXYaServiceTicket(xYaServiceTicket *string) *RegisterRequestToManageNodesParams {
	o.SetXYaServiceTicket(xYaServiceTicket)
	return o
}

// SetXYaServiceTicket adds the xYaServiceTicket to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) SetXYaServiceTicket(xYaServiceTicket *string) {
	o.XYaServiceTicket = xYaServiceTicket
}

// WithBody adds the body to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) WithBody(body *models.ManagementRequest) *RegisterRequestToManageNodesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) SetBody(body *models.ManagementRequest) {
	o.Body = body
}

// WithDryRun adds the dryRun to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) WithDryRun(dryRun *bool) *RegisterRequestToManageNodesParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the register request to manage nodes params
func (o *RegisterRequestToManageNodesParams) SetDryRun(dryRun *bool) {
	o.DryRun = dryRun
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterRequestToManageNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.XYaServiceTicket != nil {

		// header param X-Ya-Service-Ticket
		if err := r.SetHeaderParam("X-Ya-Service-Ticket", *o.XYaServiceTicket); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.DryRun != nil {

		// query param dry_run
		var qrDryRun bool

		if o.DryRun != nil {
			qrDryRun = *o.DryRun
		}
		qDryRun := swag.FormatBool(qrDryRun)
		if qDryRun != "" {

			if err := r.SetQueryParam("dry_run", qDryRun); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
