// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTask(params *DeleteTaskParams, opts ...ClientOption) (*DeleteTaskNoContent, error)

	GetRequestStatus(params *GetRequestStatusParams, opts ...ClientOption) (*GetRequestStatusOK, error)

	ListUnhandledManagementRequests(params *ListUnhandledManagementRequestsParams, opts ...ClientOption) (*ListUnhandledManagementRequestsOK, error)

	RegisterRequestToManageNodes(params *RegisterRequestToManageNodesParams, opts ...ClientOption) (*RegisterRequestToManageNodesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteTask deletes specific request
*/
func (a *Client) DeleteTask(params *DeleteTaskParams, opts ...ClientOption) (*DeleteTaskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTask",
		Method:             "DELETE",
		PathPattern:        "/walle/v1.4/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRequestStatus returns status of a specific request
*/
func (a *Client) GetRequestStatus(params *GetRequestStatusParams, opts ...ClientOption) (*GetRequestStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRequestStatus",
		Method:             "GET",
		PathPattern:        "/walle/v1.4/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRequestStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRequestStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListUnhandledManagementRequests lists of management requests awaiting to be handled if none found 404
*/
func (a *Client) ListUnhandledManagementRequests(params *ListUnhandledManagementRequestsParams, opts ...ClientOption) (*ListUnhandledManagementRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUnhandledManagementRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListUnhandledManagementRequests",
		Method:             "GET",
		PathPattern:        "/walle/v1.4/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUnhandledManagementRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUnhandledManagementRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUnhandledManagementRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RegisterRequestToManageNodes registers request to manage nodes
*/
func (a *Client) RegisterRequestToManageNodes(params *RegisterRequestToManageNodesParams, opts ...ClientOption) (*RegisterRequestToManageNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterRequestToManageNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterRequestToManageNodes",
		Method:             "POST",
		PathPattern:        "/walle/v1.4/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterRequestToManageNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterRequestToManageNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterRequestToManageNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
