// Code generated by go-swagger; DO NOT EDIT.

package monrun

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AlertChecksHandlerFunc turns a function with the right signature into a alert checks handler
type AlertChecksHandlerFunc func(AlertChecksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AlertChecksHandlerFunc) Handle(params AlertChecksParams) middleware.Responder {
	return fn(params)
}

// AlertChecksHandler interface for that can handle valid alert checks params
type AlertChecksHandler interface {
	Handle(AlertChecksParams) middleware.Responder
}

// NewAlertChecks creates a new http.Handler for the alert checks operation
func NewAlertChecks(ctx *middleware.Context, handler AlertChecksHandler) *AlertChecks {
	return &AlertChecks{Context: ctx, Handler: handler}
}

/* AlertChecks swagger:route GET /v1/stats/monrun_checks monrun stats alertChecks

Return stats of service for monitoring, ad-hoc

*/
type AlertChecks struct {
	Context *middleware.Context
	Handler AlertChecksHandler
}

func (o *AlertChecks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAlertChecksParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
