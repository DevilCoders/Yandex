// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"a.yandex-team.ru/cloud/mdb/cms/api/generated/swagger/models"
)

// RegisterRequestToManageNodesOKCode is the HTTP code returned for type RegisterRequestToManageNodesOK
const RegisterRequestToManageNodesOKCode int = 200

/*RegisterRequestToManageNodesOK Get status of a request

swagger:response registerRequestToManageNodesOK
*/
type RegisterRequestToManageNodesOK struct {

	/*
	  In: Body
	*/
	Payload *models.ManagementRequestStatusResponse `json:"body,omitempty"`
}

// NewRegisterRequestToManageNodesOK creates RegisterRequestToManageNodesOK with default headers values
func NewRegisterRequestToManageNodesOK() *RegisterRequestToManageNodesOK {

	return &RegisterRequestToManageNodesOK{}
}

// WithPayload adds the payload to the register request to manage nodes o k response
func (o *RegisterRequestToManageNodesOK) WithPayload(payload *models.ManagementRequestStatusResponse) *RegisterRequestToManageNodesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register request to manage nodes o k response
func (o *RegisterRequestToManageNodesOK) SetPayload(payload *models.ManagementRequestStatusResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterRequestToManageNodesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*RegisterRequestToManageNodesDefault Error

swagger:response registerRequestToManageNodesDefault
*/
type RegisterRequestToManageNodesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRegisterRequestToManageNodesDefault creates RegisterRequestToManageNodesDefault with default headers values
func NewRegisterRequestToManageNodesDefault(code int) *RegisterRequestToManageNodesDefault {
	if code <= 0 {
		code = 500
	}

	return &RegisterRequestToManageNodesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the register request to manage nodes default response
func (o *RegisterRequestToManageNodesDefault) WithStatusCode(code int) *RegisterRequestToManageNodesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the register request to manage nodes default response
func (o *RegisterRequestToManageNodesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the register request to manage nodes default response
func (o *RegisterRequestToManageNodesDefault) WithPayload(payload *models.Error) *RegisterRequestToManageNodesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register request to manage nodes default response
func (o *RegisterRequestToManageNodesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterRequestToManageNodesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
