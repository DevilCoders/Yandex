// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListUnhandledManagementRequestsHandlerFunc turns a function with the right signature into a list unhandled management requests handler
type ListUnhandledManagementRequestsHandlerFunc func(ListUnhandledManagementRequestsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListUnhandledManagementRequestsHandlerFunc) Handle(params ListUnhandledManagementRequestsParams) middleware.Responder {
	return fn(params)
}

// ListUnhandledManagementRequestsHandler interface for that can handle valid list unhandled management requests params
type ListUnhandledManagementRequestsHandler interface {
	Handle(ListUnhandledManagementRequestsParams) middleware.Responder
}

// NewListUnhandledManagementRequests creates a new http.Handler for the list unhandled management requests operation
func NewListUnhandledManagementRequests(ctx *middleware.Context, handler ListUnhandledManagementRequestsHandler) *ListUnhandledManagementRequests {
	return &ListUnhandledManagementRequests{Context: ctx, Handler: handler}
}

/* ListUnhandledManagementRequests swagger:route GET /walle/v1.4/tasks tasks listUnhandledManagementRequests

List of management requests awaiting to be handled. If none found - 404.

*/
type ListUnhandledManagementRequests struct {
	Context *middleware.Context
	Handler ListUnhandledManagementRequestsHandler
}

func (o *ListUnhandledManagementRequests) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListUnhandledManagementRequestsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
