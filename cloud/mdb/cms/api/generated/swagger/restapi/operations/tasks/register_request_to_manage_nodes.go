// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RegisterRequestToManageNodesHandlerFunc turns a function with the right signature into a register request to manage nodes handler
type RegisterRequestToManageNodesHandlerFunc func(RegisterRequestToManageNodesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterRequestToManageNodesHandlerFunc) Handle(params RegisterRequestToManageNodesParams) middleware.Responder {
	return fn(params)
}

// RegisterRequestToManageNodesHandler interface for that can handle valid register request to manage nodes params
type RegisterRequestToManageNodesHandler interface {
	Handle(RegisterRequestToManageNodesParams) middleware.Responder
}

// NewRegisterRequestToManageNodes creates a new http.Handler for the register request to manage nodes operation
func NewRegisterRequestToManageNodes(ctx *middleware.Context, handler RegisterRequestToManageNodesHandler) *RegisterRequestToManageNodes {
	return &RegisterRequestToManageNodes{Context: ctx, Handler: handler}
}

/* RegisterRequestToManageNodes swagger:route POST /walle/v1.4/tasks tasks registerRequestToManageNodes

Register request to manage nodes

*/
type RegisterRequestToManageNodes struct {
	Context *middleware.Context
	Handler RegisterRequestToManageNodesHandler
}

func (o *RegisterRequestToManageNodes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterRequestToManageNodesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
