// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/cms/api/pkg/instanceclient (interfaces: InstanceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	cmsv1 "a.yandex-team.ru/cloud/mdb/cms/api/grpcapi/v1"
	models "a.yandex-team.ru/cloud/mdb/cms/api/pkg/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInstanceClient is a mock of InstanceClient interface.
type MockInstanceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceClientMockRecorder
}

// MockInstanceClientMockRecorder is the mock recorder for MockInstanceClient.
type MockInstanceClientMockRecorder struct {
	mock *MockInstanceClient
}

// NewMockInstanceClient creates a new mock instance.
func NewMockInstanceClient(ctrl *gomock.Controller) *MockInstanceClient {
	mock := &MockInstanceClient{ctrl: ctrl}
	mock.recorder = &MockInstanceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceClient) EXPECT() *MockInstanceClientMockRecorder {
	return m.recorder
}

// AlarmOperations mocks base method.
func (m *MockInstanceClient) AlarmOperations(arg0 context.Context) (*cmsv1.AlarmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlarmOperations", arg0)
	ret0, _ := ret[0].(*cmsv1.AlarmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlarmOperations indicates an expected call of AlarmOperations.
func (mr *MockInstanceClientMockRecorder) AlarmOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlarmOperations", reflect.TypeOf((*MockInstanceClient)(nil).AlarmOperations), arg0)
}

// ChangeOperationStatus mocks base method.
func (m *MockInstanceClient) ChangeOperationStatus(arg0 context.Context, arg1 string, arg2 models.InstanceOperationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOperationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOperationStatus indicates an expected call of ChangeOperationStatus.
func (mr *MockInstanceClientMockRecorder) ChangeOperationStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOperationStatus", reflect.TypeOf((*MockInstanceClient)(nil).ChangeOperationStatus), arg0, arg1, arg2)
}

// CreateMoveInstanceOperation mocks base method.
func (m *MockInstanceClient) CreateMoveInstanceOperation(arg0 context.Context, arg1, arg2 string, arg3 bool) (*cmsv1.InstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoveInstanceOperation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*cmsv1.InstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMoveInstanceOperation indicates an expected call of CreateMoveInstanceOperation.
func (mr *MockInstanceClientMockRecorder) CreateMoveInstanceOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoveInstanceOperation", reflect.TypeOf((*MockInstanceClient)(nil).CreateMoveInstanceOperation), arg0, arg1, arg2)
}

// CreateWhipPrimaryOperation mocks base method.
func (m *MockInstanceClient) CreateWhipPrimaryOperation(arg0 context.Context, arg1, arg2 string) (*cmsv1.InstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWhipPrimaryOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cmsv1.InstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWhipPrimaryOperation indicates an expected call of CreateWhipPrimaryOperation.
func (mr *MockInstanceClientMockRecorder) CreateWhipPrimaryOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWhipPrimaryOperation", reflect.TypeOf((*MockInstanceClient)(nil).CreateWhipPrimaryOperation), arg0, arg1, arg2)
}

// Dom0Instances mocks base method.
func (m *MockInstanceClient) Dom0Instances(arg0 context.Context, arg1 string) (*cmsv1.Dom0InstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dom0Instances", arg0, arg1)
	ret0, _ := ret[0].(*cmsv1.Dom0InstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dom0Instances indicates an expected call of Dom0Instances.
func (mr *MockInstanceClientMockRecorder) Dom0Instances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dom0Instances", reflect.TypeOf((*MockInstanceClient)(nil).Dom0Instances), arg0, arg1)
}

// GetInstanceOperation mocks base method.
func (m *MockInstanceClient) GetInstanceOperation(arg0 context.Context, arg1 string) (*cmsv1.InstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceOperation", arg0, arg1)
	ret0, _ := ret[0].(*cmsv1.InstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceOperation indicates an expected call of GetInstanceOperation.
func (mr *MockInstanceClientMockRecorder) GetInstanceOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceOperation", reflect.TypeOf((*MockInstanceClient)(nil).GetInstanceOperation), arg0, arg1)
}

// List mocks base method.
func (m *MockInstanceClient) List(arg0 context.Context) (*cmsv1.ListInstanceOperationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*cmsv1.ListInstanceOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInstanceClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstanceClient)(nil).List), arg0)
}

// ResolveInstancesByDom0 mocks base method.
func (m *MockInstanceClient) ResolveInstancesByDom0(arg0 context.Context, arg1 []string) (*cmsv1.InstanceListResponce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveInstancesByDom0", arg0, arg1)
	ret0, _ := ret[0].(*cmsv1.InstanceListResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveInstancesByDom0 indicates an expected call of ResolveInstancesByDom0.
func (mr *MockInstanceClientMockRecorder) ResolveInstancesByDom0(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveInstancesByDom0", reflect.TypeOf((*MockInstanceClient)(nil).ResolveInstancesByDom0), arg0, arg1)
}
