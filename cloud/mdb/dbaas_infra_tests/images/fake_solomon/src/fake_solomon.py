#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import datetime
import random
import time
from copy import deepcopy
from random import SystemRandom

from flask import abort, jsonify, make_response, request
from marshmallow.validate import OneOf
from webargs.fields import Boolean, Integer, List, Nested, Str
from webargs.flaskparser import use_args

from server_mock import ServerMock, check_auth

APP = ServerMock('fake_solomon')

SHARDS = {}
CLUSTERS = {}


def make_shard_key(project_id, shard_id):
    """
    Returns key for Solomon Shard
    """
    return '{project}_{shard}'.format(project=project_id, shard=shard_id)


def make_cluster_key(project_id, cluster_id):
    """
    Returns key for Solomon Shard
    """
    return '{project}_{cluster}'.format(project=project_id, cluster=cluster_id)


def is_autogenerated_cluster_id(project_id, cluster_id):
    return cluster_id.startswith('{project}_'.format(project=project_id))


def is_autogenerated_shard_id(project_id, shard_id, service_label='yandexcloud_dbaas'):
    return shard_id.startswith('{project}_'.format(project=project_id)) and \
           shard_id.endswith('_{service_label}'.format(service_label=service_label))


@APP.reset_handler
def drop_state():
    """
    Cleanup all in-memory state
    """
    for i in [SHARDS, CLUSTERS]:
        i.clear()


@APP.route('/api/v2/projects/<project_id>/clusters', methods=['POST'])
@use_args(
    {
        # Solomon cluster id (or dbaas cluster_id)
        'id':
            Str(required=True),
        # Human readable name
        'name':
            Str(required=True),
        'conductorGroups':
            List(
                Nested({
                    'group': Str(required=True),
                    'labels': List(Str(required=False), required=True),
                },
                       location='json',
                       required=True),
                required=True,
            ),
    },
    locations=('json', ))
@check_auth
def create_cluster(args, project_id):
    key = make_cluster_key(project_id, args['id'])
    if key in CLUSTERS.keys():
        return make_response(jsonify(code=400, message='cluster with id {} already exist'.format(args['id'])), 400)

    date = datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%dT%H:%M:%SZ')

    ret = {
        'id': args['id'],
        'name': args['name'],
        'projecId': project_id,
        'conductorGroups': args['conductorGroups'],
        'state': 'ACTIVE',
        'version': 0,
        'createdAt': date,
        'updatedAt': date,
        'updatedBy': deepcopy(APP.config['ROBOT_NAME']),
    }
    CLUSTERS[key] = ret
    return make_response(jsonify(ret), 200)


@APP.route('/api/v2/projects/<project_id>/clusters/<cluster_id>', methods=['GET'])
@check_auth
def get_cluster(project_id, cluster_id):
    if is_autogenerated_cluster_id(project_id, cluster_id):
        return make_response(jsonify({
            'id': cluster_id,
            'projectId': project_id,
            'state': 'ACTIVE',
        }), 200)
    key = make_cluster_key(project_id, cluster_id)
    if key not in CLUSTERS:
        msg = "no cluster with id '{cluster}' in project '{project}'".format(cluster=cluster_id, project=project_id)
        return make_response(jsonify(code=404, message=msg), 404)
    return make_response(jsonify(CLUSTERS[key]), 200)


@APP.route('/api/v2/projects/<project_id>/clusters/<cluster_id>', methods=['DELETE'])
@check_auth
def delete_cluster(project_id, cluster_id):
    if is_autogenerated_cluster_id(project_id, cluster_id):
        return make_response('', 204)
    key = make_cluster_key(project_id, cluster_id)
    if key not in CLUSTERS.keys():
        return make_response(jsonify({
            'message': 'cluster was not found',
            'code': 404,
        }), 404)
    del CLUSTERS[key]
    return make_response('', 204)


@APP.route('/api/v2/projects/<project_id>/shards', methods=['POST'])
@use_args(
    {
        # Solomon shard id
        'id': Str(required=True),
        'projectId': Str(required=True),
        'clusterId': Str(required=True),
        'serviceId': Str(required=True),
    },
    locations=('json', ))
def create_shard(args, project_id):
    project_id = args['projectId']
    service_id = args['serviceId']
    cluster_id = args['clusterId']
    shard_id = args['id']
    key = make_cluster_key(project_id, cluster_id)
    shard_key = make_shard_key(project_id, shard_id)
    if key not in CLUSTERS:
        return make_response(jsonify({
            'message': 'cluster {} is not exists'.format(cluster_id),
            'code': 400,
        }), 400)
    if shard_key in SHARDS:
        return make_response(
            jsonify({
                'message': 'shard with id {} already exist'.format(shard_id),
                'code': 400,
            }), 400)
    date = datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%dT%H:%M:%SZ')
    quotas = {
        'maxSensorsPerUrl': 4000,
        'maxFileSensors': 100000,
        'maxMemSensors': 100000,
        'maxResponseSizeMb': 10,
    }
    hosts = [
        'solomon-stp-lon-00.amazon.net',
        'solomon-stp-sfr-26.google.net',
    ]
    ret = {
        'id': shard_id,
        'numId': random.randint(1000, 100000),
        'projectId': project_id,
        'clusterId': cluster_id,
        'serviceId': service_id,
        'quotas': quotas,
        'hosts': hosts,
        'createdAt': date,
        'updatedAt': date,
        'updatedBy': deepcopy(APP.config['ROBOT_NAME']),
        'state': 'ACTIVE',
        'version': 0,
        'clusterName': project_id,
        'serviceName': service_id,
    }
    SHARDS[shard_key] = ret
    return make_response(jsonify(ret), 200)


@APP.route('/api/v2/projects/<project_id>/shards/<shard_id>', methods=['GET'])
@check_auth
def get_shard(project_id, shard_id):
    if is_autogenerated_shard_id(project_id, shard_id):
        return make_response(jsonify({
            'id': shard_id,
            'projectId': project_id,
        }), 200)
    key = make_shard_key(project_id, shard_id)
    if key not in SHARDS:
        msg = "no shard with id '{shard}' in project '{project}'".format(shard=shard_id, project=project_id)
        return make_response(jsonify(code=404, message=msg), 404)
    return make_response(jsonify(SHARDS[key]), 200)


@APP.route('/api/v2/projects/<project_id>/shards/<shard_id>', methods=['DELETE'])
@check_auth
def delete_shard(project_id, shard_id):
    if is_autogenerated_shard_id(project_id, shard_id):
        return make_response('', 204)
    shard_key = make_shard_key(project_id, shard_id)
    if shard_key not in SHARDS:
        return make_response(
            jsonify({
                'message': 'no shard with id \'{}\' in project \'{}\''.format(shard_id, project_id),
                'error': 404,
            }))
    del SHARDS[shard_key]
    return make_response('', 204)


if __name__ == '__main__':
    APP.run(host='0.0.0.0', debug=True)
