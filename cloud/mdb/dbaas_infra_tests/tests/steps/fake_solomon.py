"""
Steps related to Fake Solomon.
"""

from behave import then
from hamcrest import assert_that, has_entries, has_items, has_key

from tests.helpers.mock import MockClient
from tests.helpers.step_helpers import step_require


@then('shard was created in Solomon')
@step_require('cluster')
def step_solomon_created(context):
    mock = MockClient(context, 'fake_solomon')
    invocations = mock.get_invocations()
    cluster = context.cluster
    assert_that(cluster, has_key('id'))
    assert_that(
        invocations,
        has_items(
            has_entries({
                'method': 'GET',
                'path': '/api/v2/projects/yandexcloud/clusters/mdb_{cid}'.format(cid=cluster['id']),
                'status_code': 404,
            }), has_entries({
                'method': 'POST',
                'path': '/api/v2/projects/yandexcloud/clusters',
                'status_code': 200,
            }),
            has_entries({
                'method': 'GET',
                'path': '/api/v2/projects/yandexcloud/shards/mdb_{cid}'.format(cid=cluster['id']),
                'status_code': 404,
            }), has_entries({
                'method': 'POST',
                'path': '/api/v2/projects/yandexcloud/shards',
                'status_code': 200,
            })))


@then('autogenerated shard was deleted from Solomon')
@step_require('cluster')
def step_solomon_deleted(context):
    mock = MockClient(context, 'fake_solomon')
    invocations = mock.get_invocations()
    cluster = context.cluster
    assert_that(
        invocations,
        has_items(
            has_entries({
                'method': 'GET',
                'path': '/api/v2/projects/yandexcloud/shards/mdb_{cid}'.format(cid=cluster['id']),
                'status_code': 404,
            }),
            has_entries({
                'method':
                    'GET',
                'path':
                    '/api/v2/projects/yandexcloud/shards/yandexcloud_mdb_{cid}_yandexcloud_dbaas'.format(
                        cid=cluster['id']),
                'status_code':
                    200,
            }),
            has_entries({
                'method':
                    'DELETE',
                'path':
                    '/api/v2/projects/yandexcloud/shards/yandexcloud_mdb_{cid}_yandexcloud_dbaas'.format(
                        cid=cluster['id']),
                'status_code':
                    204,
            }),
            has_entries({
                'method': 'GET',
                'path': '/api/v2/projects/yandexcloud/clusters/mdb_{cid}'.format(cid=cluster['id']),
                'status_code': 404,
            }),
            has_entries({
                'method': 'GET',
                'path': '/api/v2/projects/yandexcloud/clusters/yandexcloud_mdb_{cid}'.format(cid=cluster['id']),
                'status_code': 200,
            }),
            has_entries({
                'method': 'DELETE',
                'path': '/api/v2/projects/yandexcloud/clusters/yandexcloud_mdb_{cid}'.format(cid=cluster['id']),
                'status_code': 204,
            }),
        ),
    )
