// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/metadb (interfaces: Backend)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	json "encoding/json"
	reflect "reflect"
	time "time"

	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	metadb "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/metadb"
	models "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models"
	backups "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/backups"
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	console "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/console"
	environment "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/environment"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	pillars "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/pillars"
	resources "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/resources"
	tasks "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/tasks"
	gomock "github.com/golang/mock/gomock"
	opentracing "github.com/opentracing/opentracing-go"
	hasql "golang.yandex/hasql"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AddBackupSchedule mocks base method.
func (m *MockBackend) AddBackupSchedule(arg0 context.Context, arg1 string, arg2 backups.BackupSchedule, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBackupSchedule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBackupSchedule indicates an expected call of AddBackupSchedule.
func (mr *MockBackendMockRecorder) AddBackupSchedule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBackupSchedule", reflect.TypeOf((*MockBackend)(nil).AddBackupSchedule), arg0, arg1, arg2, arg3)
}

// AddClusterPillar mocks base method.
func (m *MockBackend) AddClusterPillar(arg0 context.Context, arg1 string, arg2 int64, arg3 json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterPillar", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClusterPillar indicates an expected call of AddClusterPillar.
func (mr *MockBackendMockRecorder) AddClusterPillar(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterPillar", reflect.TypeOf((*MockBackend)(nil).AddClusterPillar), arg0, arg1, arg2, arg3)
}

// AddDisk mocks base method.
func (m *MockBackend) AddDisk(arg0 context.Context, arg1 models.AddDiskArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDisk", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDisk indicates an expected call of AddDisk.
func (mr *MockBackendMockRecorder) AddDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisk", reflect.TypeOf((*MockBackend)(nil).AddDisk), arg0, arg1)
}

// AddDiskPlacementGroup mocks base method.
func (m *MockBackend) AddDiskPlacementGroup(arg0 context.Context, arg1 models.AddDiskPlacementGroupArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDiskPlacementGroup", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDiskPlacementGroup indicates an expected call of AddDiskPlacementGroup.
func (mr *MockBackendMockRecorder) AddDiskPlacementGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiskPlacementGroup", reflect.TypeOf((*MockBackend)(nil).AddDiskPlacementGroup), arg0, arg1)
}

// AddHost mocks base method.
func (m *MockBackend) AddHost(arg0 context.Context, arg1 models.AddHostArgs) (hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHost", arg0, arg1)
	ret0, _ := ret[0].(hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHost indicates an expected call of AddHost.
func (mr *MockBackendMockRecorder) AddHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockBackend)(nil).AddHost), arg0, arg1)
}

// AddHostPillar mocks base method.
func (m *MockBackend) AddHostPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHostPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHostPillar indicates an expected call of AddHostPillar.
func (mr *MockBackendMockRecorder) AddHostPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHostPillar", reflect.TypeOf((*MockBackend)(nil).AddHostPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddPillar mocks base method.
func (m *MockBackend) AddPillar(arg0 context.Context, arg1 string, arg2 int64, arg3 json.RawMessage, arg4 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPillar indicates an expected call of AddPillar.
func (mr *MockBackendMockRecorder) AddPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPillar", reflect.TypeOf((*MockBackend)(nil).AddPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddPlacementGroup mocks base method.
func (m *MockBackend) AddPlacementGroup(arg0 context.Context, arg1 models.AddPlacementGroupArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlacementGroup", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlacementGroup indicates an expected call of AddPlacementGroup.
func (mr *MockBackendMockRecorder) AddPlacementGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlacementGroup", reflect.TypeOf((*MockBackend)(nil).AddPlacementGroup), arg0, arg1)
}

// AddShardPillar mocks base method.
func (m *MockBackend) AddShardPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShardPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShardPillar indicates an expected call of AddShardPillar.
func (mr *MockBackendMockRecorder) AddShardPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShardPillar", reflect.TypeOf((*MockBackend)(nil).AddShardPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddSubClusterPillar mocks base method.
func (m *MockBackend) AddSubClusterPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubClusterPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubClusterPillar indicates an expected call of AddSubClusterPillar.
func (mr *MockBackendMockRecorder) AddSubClusterPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubClusterPillar", reflect.TypeOf((*MockBackend)(nil).AddSubClusterPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddTargetPillar mocks base method.
func (m *MockBackend) AddTargetPillar(arg0 context.Context, arg1 string, arg2 json.RawMessage, arg3 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTargetPillar", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTargetPillar indicates an expected call of AddTargetPillar.
func (mr *MockBackendMockRecorder) AddTargetPillar(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTargetPillar", reflect.TypeOf((*MockBackend)(nil).AddTargetPillar), arg0, arg1, arg2, arg3)
}

// BackupByID mocks base method.
func (m *MockBackend) BackupByID(arg0 context.Context, arg1 string) (backups.ManagedBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupByID", arg0, arg1)
	ret0, _ := ret[0].(backups.ManagedBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupByID indicates an expected call of BackupByID.
func (mr *MockBackendMockRecorder) BackupByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupByID", reflect.TypeOf((*MockBackend)(nil).BackupByID), arg0, arg1)
}

// BackupsByClusterID mocks base method.
func (m *MockBackend) BackupsByClusterID(arg0 context.Context, arg1 string) ([]backups.ManagedBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupsByClusterID", arg0, arg1)
	ret0, _ := ret[0].([]backups.ManagedBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupsByClusterID indicates an expected call of BackupsByClusterID.
func (mr *MockBackendMockRecorder) BackupsByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupsByClusterID", reflect.TypeOf((*MockBackend)(nil).BackupsByClusterID), arg0, arg1)
}

// Begin mocks base method.
func (m *MockBackend) Begin(arg0 context.Context, arg1 hasql.NodeStateCriteria) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockBackendMockRecorder) Begin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockBackend)(nil).Begin), arg0, arg1)
}

// Close mocks base method.
func (m *MockBackend) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBackend)(nil).Close))
}

// CloudByCloudExtID mocks base method.
func (m *MockBackend) CloudByCloudExtID(arg0 context.Context, arg1 string) (metadb.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudByCloudExtID", arg0, arg1)
	ret0, _ := ret[0].(metadb.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudByCloudExtID indicates an expected call of CloudByCloudExtID.
func (mr *MockBackendMockRecorder) CloudByCloudExtID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudByCloudExtID", reflect.TypeOf((*MockBackend)(nil).CloudByCloudExtID), arg0, arg1)
}

// CloudByCloudID mocks base method.
func (m *MockBackend) CloudByCloudID(arg0 context.Context, arg1 string) (metadb.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudByCloudID", arg0, arg1)
	ret0, _ := ret[0].(metadb.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudByCloudID indicates an expected call of CloudByCloudID.
func (mr *MockBackendMockRecorder) CloudByCloudID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudByCloudID", reflect.TypeOf((*MockBackend)(nil).CloudByCloudID), arg0, arg1)
}

// ClusterByClusterID mocks base method.
func (m *MockBackend) ClusterByClusterID(arg0 context.Context, arg1 string, arg2 models.Visibility) (metadb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterByClusterID", arg0, arg1, arg2)
	ret0, _ := ret[0].(metadb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterByClusterID indicates an expected call of ClusterByClusterID.
func (mr *MockBackendMockRecorder) ClusterByClusterID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterByClusterID", reflect.TypeOf((*MockBackend)(nil).ClusterByClusterID), arg0, arg1, arg2)
}

// ClusterByClusterIDAtRevision mocks base method.
func (m *MockBackend) ClusterByClusterIDAtRevision(arg0 context.Context, arg1 string, arg2 int64) (metadb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterByClusterIDAtRevision", arg0, arg1, arg2)
	ret0, _ := ret[0].(metadb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterByClusterIDAtRevision indicates an expected call of ClusterByClusterIDAtRevision.
func (mr *MockBackendMockRecorder) ClusterByClusterIDAtRevision(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterByClusterIDAtRevision", reflect.TypeOf((*MockBackend)(nil).ClusterByClusterIDAtRevision), arg0, arg1, arg2)
}

// ClusterIDByBackupID mocks base method.
func (m *MockBackend) ClusterIDByBackupID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterIDByBackupID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterIDByBackupID indicates an expected call of ClusterIDByBackupID.
func (mr *MockBackendMockRecorder) ClusterIDByBackupID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterIDByBackupID", reflect.TypeOf((*MockBackend)(nil).ClusterIDByBackupID), arg0, arg1)
}

// ClusterRevisionByTime mocks base method.
func (m *MockBackend) ClusterRevisionByTime(arg0 context.Context, arg1 string, arg2 time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRevisionByTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterRevisionByTime indicates an expected call of ClusterRevisionByTime.
func (mr *MockBackendMockRecorder) ClusterRevisionByTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRevisionByTime", reflect.TypeOf((*MockBackend)(nil).ClusterRevisionByTime), arg0, arg1, arg2)
}

// ClusterTypePillar mocks base method.
func (m *MockBackend) ClusterTypePillar(arg0 context.Context, arg1 clusters.Type, arg2 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterTypePillar", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClusterTypePillar indicates an expected call of ClusterTypePillar.
func (mr *MockBackendMockRecorder) ClusterTypePillar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterTypePillar", reflect.TypeOf((*MockBackend)(nil).ClusterTypePillar), arg0, arg1, arg2)
}

// ClusterUsesBackupService mocks base method.
func (m *MockBackend) ClusterUsesBackupService(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterUsesBackupService", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterUsesBackupService indicates an expected call of ClusterUsesBackupService.
func (mr *MockBackendMockRecorder) ClusterUsesBackupService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterUsesBackupService", reflect.TypeOf((*MockBackend)(nil).ClusterUsesBackupService), arg0, arg1)
}

// Clusters mocks base method.
func (m *MockBackend) Clusters(arg0 context.Context, arg1 models.ListClusterArgs) ([]metadb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters", arg0, arg1)
	ret0, _ := ret[0].([]metadb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clusters indicates an expected call of Clusters.
func (mr *MockBackendMockRecorder) Clusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBackend)(nil).Clusters), arg0, arg1)
}

// ClustersCountInFolder mocks base method.
func (m *MockBackend) ClustersCountInFolder(arg0 context.Context, arg1 int64) (map[clusters.Type]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClustersCountInFolder", arg0, arg1)
	ret0, _ := ret[0].(map[clusters.Type]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClustersCountInFolder indicates an expected call of ClustersCountInFolder.
func (mr *MockBackendMockRecorder) ClustersCountInFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClustersCountInFolder", reflect.TypeOf((*MockBackend)(nil).ClustersCountInFolder), arg0, arg1)
}

// Commit mocks base method.
func (m *MockBackend) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockBackendMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockBackend)(nil).Commit), arg0)
}

// CompleteClusterChange mocks base method.
func (m *MockBackend) CompleteClusterChange(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteClusterChange", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteClusterChange indicates an expected call of CompleteClusterChange.
func (mr *MockBackendMockRecorder) CompleteClusterChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteClusterChange", reflect.TypeOf((*MockBackend)(nil).CompleteClusterChange), arg0, arg1, arg2)
}

// CreateCloud mocks base method.
func (m *MockBackend) CreateCloud(arg0 context.Context, arg1 string, arg2 metadb.Resources, arg3 string) (metadb.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloud", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(metadb.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloud indicates an expected call of CreateCloud.
func (mr *MockBackendMockRecorder) CreateCloud(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloud", reflect.TypeOf((*MockBackend)(nil).CreateCloud), arg0, arg1, arg2, arg3)
}

// CreateCluster mocks base method.
func (m *MockBackend) CreateCluster(arg0 context.Context, arg1 string, arg2 models.CreateClusterArgs) (metadb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(metadb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockBackendMockRecorder) CreateCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockBackend)(nil).CreateCluster), arg0, arg1, arg2)
}

// CreateFinishedTask mocks base method.
func (m *MockBackend) CreateFinishedTask(arg0 context.Context, arg1 tasks.CreateFinishedTaskArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFinishedTask", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFinishedTask indicates an expected call of CreateFinishedTask.
func (mr *MockBackendMockRecorder) CreateFinishedTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFinishedTask", reflect.TypeOf((*MockBackend)(nil).CreateFinishedTask), arg0, arg1)
}

// CreateFinishedTaskAtCurrentRev mocks base method.
func (m *MockBackend) CreateFinishedTaskAtCurrentRev(arg0 context.Context, arg1 tasks.CreateFinishedTaskArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFinishedTaskAtCurrentRev", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFinishedTaskAtCurrentRev indicates an expected call of CreateFinishedTaskAtCurrentRev.
func (mr *MockBackendMockRecorder) CreateFinishedTaskAtCurrentRev(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFinishedTaskAtCurrentRev", reflect.TypeOf((*MockBackend)(nil).CreateFinishedTaskAtCurrentRev), arg0, arg1)
}

// CreateFolder mocks base method.
func (m *MockBackend) CreateFolder(arg0 context.Context, arg1 string, arg2 int64) (metadb.FolderCoords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].(metadb.FolderCoords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockBackendMockRecorder) CreateFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockBackend)(nil).CreateFolder), arg0, arg1, arg2)
}

// CreateKubernetesSubCluster mocks base method.
func (m *MockBackend) CreateKubernetesSubCluster(arg0 context.Context, arg1 models.CreateSubClusterArgs) (metadb.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKubernetesSubCluster", arg0, arg1)
	ret0, _ := ret[0].(metadb.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKubernetesSubCluster indicates an expected call of CreateKubernetesSubCluster.
func (mr *MockBackendMockRecorder) CreateKubernetesSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubernetesSubCluster", reflect.TypeOf((*MockBackend)(nil).CreateKubernetesSubCluster), arg0, arg1)
}

// CreateSearchQueueDoc mocks base method.
func (m *MockBackend) CreateSearchQueueDoc(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSearchQueueDoc", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSearchQueueDoc indicates an expected call of CreateSearchQueueDoc.
func (mr *MockBackendMockRecorder) CreateSearchQueueDoc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSearchQueueDoc", reflect.TypeOf((*MockBackend)(nil).CreateSearchQueueDoc), arg0, arg1)
}

// CreateShard mocks base method.
func (m *MockBackend) CreateShard(arg0 context.Context, arg1 models.CreateShardArgs) (metadb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShard", arg0, arg1)
	ret0, _ := ret[0].(metadb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShard indicates an expected call of CreateShard.
func (mr *MockBackendMockRecorder) CreateShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShard", reflect.TypeOf((*MockBackend)(nil).CreateShard), arg0, arg1)
}

// CreateSubCluster mocks base method.
func (m *MockBackend) CreateSubCluster(arg0 context.Context, arg1 models.CreateSubClusterArgs) (metadb.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubCluster", arg0, arg1)
	ret0, _ := ret[0].(metadb.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubCluster indicates an expected call of CreateSubCluster.
func (mr *MockBackendMockRecorder) CreateSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubCluster", reflect.TypeOf((*MockBackend)(nil).CreateSubCluster), arg0, arg1)
}

// CreateTask mocks base method.
func (m *MockBackend) CreateTask(arg0 context.Context, arg1 tasks.CreateTaskArgs, arg2 opentracing.TextMapCarrier) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockBackendMockRecorder) CreateTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockBackend)(nil).CreateTask), arg0, arg1, arg2)
}

// CreateWorkerQueueEvent mocks base method.
func (m *MockBackend) CreateWorkerQueueEvent(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerQueueEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkerQueueEvent indicates an expected call of CreateWorkerQueueEvent.
func (mr *MockBackendMockRecorder) CreateWorkerQueueEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerQueueEvent", reflect.TypeOf((*MockBackend)(nil).CreateWorkerQueueEvent), arg0, arg1, arg2)
}

// DefaultFeatureFlags mocks base method.
func (m *MockBackend) DefaultFeatureFlags(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultFeatureFlags", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultFeatureFlags indicates an expected call of DefaultFeatureFlags.
func (mr *MockBackendMockRecorder) DefaultFeatureFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultFeatureFlags", reflect.TypeOf((*MockBackend)(nil).DefaultFeatureFlags), arg0)
}

// DeleteHosts mocks base method.
func (m *MockBackend) DeleteHosts(arg0 context.Context, arg1 string, arg2 []string, arg3 int64) ([]hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHosts indicates an expected call of DeleteHosts.
func (mr *MockBackendMockRecorder) DeleteHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHosts", reflect.TypeOf((*MockBackend)(nil).DeleteHosts), arg0, arg1, arg2, arg3)
}

// DeleteShard mocks base method.
func (m *MockBackend) DeleteShard(arg0 context.Context, arg1, arg2 string, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShard", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShard indicates an expected call of DeleteShard.
func (mr *MockBackendMockRecorder) DeleteShard(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShard", reflect.TypeOf((*MockBackend)(nil).DeleteShard), arg0, arg1, arg2, arg3)
}

// DeleteSubCluster mocks base method.
func (m *MockBackend) DeleteSubCluster(arg0 context.Context, arg1 models.DeleteSubClusterArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubCluster indicates an expected call of DeleteSubCluster.
func (mr *MockBackendMockRecorder) DeleteSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubCluster", reflect.TypeOf((*MockBackend)(nil).DeleteSubCluster), arg0, arg1)
}

// DiskIOLimit mocks base method.
func (m *MockBackend) DiskIOLimit(arg0 context.Context, arg1 int64, arg2, arg3 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskIOLimit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskIOLimit indicates an expected call of DiskIOLimit.
func (mr *MockBackendMockRecorder) DiskIOLimit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskIOLimit", reflect.TypeOf((*MockBackend)(nil).DiskIOLimit), arg0, arg1, arg2, arg3)
}

// DiskTypeExtIDByResourcePreset mocks base method.
func (m *MockBackend) DiskTypeExtIDByResourcePreset(arg0 context.Context, arg1 clusters.Type, arg2 hosts.Role, arg3 string, arg4, arg5 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskTypeExtIDByResourcePreset", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskTypeExtIDByResourcePreset indicates an expected call of DiskTypeExtIDByResourcePreset.
func (mr *MockBackendMockRecorder) DiskTypeExtIDByResourcePreset(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskTypeExtIDByResourcePreset", reflect.TypeOf((*MockBackend)(nil).DiskTypeExtIDByResourcePreset), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DiskTypes mocks base method.
func (m *MockBackend) DiskTypes(arg0 context.Context) (resources.DiskTypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskTypes", arg0)
	ret0, _ := ret[0].(resources.DiskTypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskTypes indicates an expected call of DiskTypes.
func (mr *MockBackendMockRecorder) DiskTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskTypes", reflect.TypeOf((*MockBackend)(nil).DiskTypes), arg0)
}

// FailedTaskID mocks base method.
func (m *MockBackend) FailedTaskID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailedTaskID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailedTaskID indicates an expected call of FailedTaskID.
func (mr *MockBackendMockRecorder) FailedTaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailedTaskID", reflect.TypeOf((*MockBackend)(nil).FailedTaskID), arg0, arg1)
}

// FolderCoordsByClusterID mocks base method.
func (m *MockBackend) FolderCoordsByClusterID(arg0 context.Context, arg1 string, arg2 models.Visibility) (metadb.FolderCoords, int64, clusters.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderCoordsByClusterID", arg0, arg1, arg2)
	ret0, _ := ret[0].(metadb.FolderCoords)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(clusters.Type)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// FolderCoordsByClusterID indicates an expected call of FolderCoordsByClusterID.
func (mr *MockBackendMockRecorder) FolderCoordsByClusterID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderCoordsByClusterID", reflect.TypeOf((*MockBackend)(nil).FolderCoordsByClusterID), arg0, arg1, arg2)
}

// FolderCoordsByFolderExtID mocks base method.
func (m *MockBackend) FolderCoordsByFolderExtID(arg0 context.Context, arg1 string) (metadb.FolderCoords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderCoordsByFolderExtID", arg0, arg1)
	ret0, _ := ret[0].(metadb.FolderCoords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FolderCoordsByFolderExtID indicates an expected call of FolderCoordsByFolderExtID.
func (mr *MockBackendMockRecorder) FolderCoordsByFolderExtID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderCoordsByFolderExtID", reflect.TypeOf((*MockBackend)(nil).FolderCoordsByFolderExtID), arg0, arg1)
}

// FolderCoordsByOperationID mocks base method.
func (m *MockBackend) FolderCoordsByOperationID(arg0 context.Context, arg1 string) (metadb.FolderCoords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderCoordsByOperationID", arg0, arg1)
	ret0, _ := ret[0].(metadb.FolderCoords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FolderCoordsByOperationID indicates an expected call of FolderCoordsByOperationID.
func (mr *MockBackendMockRecorder) FolderCoordsByOperationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderCoordsByOperationID", reflect.TypeOf((*MockBackend)(nil).FolderCoordsByOperationID), arg0, arg1)
}

// GetCloudsByClusterType mocks base method.
func (m *MockBackend) GetCloudsByClusterType(arg0 context.Context, arg1 clusters.Type, arg2, arg3 int64) ([]console.Cloud, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudsByClusterType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]console.Cloud)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCloudsByClusterType indicates an expected call of GetCloudsByClusterType.
func (mr *MockBackendMockRecorder) GetCloudsByClusterType(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudsByClusterType", reflect.TypeOf((*MockBackend)(nil).GetCloudsByClusterType), arg0, arg1, arg2, arg3)
}

// GetClusterQuotaUsage mocks base method.
func (m *MockBackend) GetClusterQuotaUsage(arg0 context.Context, arg1 string) (metadb.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterQuotaUsage", arg0, arg1)
	ret0, _ := ret[0].(metadb.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterQuotaUsage indicates an expected call of GetClusterQuotaUsage.
func (mr *MockBackendMockRecorder) GetClusterQuotaUsage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterQuotaUsage", reflect.TypeOf((*MockBackend)(nil).GetClusterQuotaUsage), arg0, arg1)
}

// GetClusterVersions mocks base method.
func (m *MockBackend) GetClusterVersions(arg0 context.Context, arg1 string) ([]console.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterVersions", arg0, arg1)
	ret0, _ := ret[0].([]console.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterVersions indicates an expected call of GetClusterVersions.
func (mr *MockBackendMockRecorder) GetClusterVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterVersions", reflect.TypeOf((*MockBackend)(nil).GetClusterVersions), arg0, arg1)
}

// GetClusterVersionsAtRevision mocks base method.
func (m *MockBackend) GetClusterVersionsAtRevision(arg0 context.Context, arg1 string, arg2 int64) ([]console.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterVersionsAtRevision", arg0, arg1, arg2)
	ret0, _ := ret[0].([]console.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterVersionsAtRevision indicates an expected call of GetClusterVersionsAtRevision.
func (mr *MockBackendMockRecorder) GetClusterVersionsAtRevision(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterVersionsAtRevision", reflect.TypeOf((*MockBackend)(nil).GetClusterVersionsAtRevision), arg0, arg1, arg2)
}

// GetDefaultVersions mocks base method.
func (m *MockBackend) GetDefaultVersions(arg0 context.Context, arg1 clusters.Type, arg2 environment.SaltEnv, arg3 string) ([]console.DefaultVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultVersions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]console.DefaultVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultVersions indicates an expected call of GetDefaultVersions.
func (mr *MockBackendMockRecorder) GetDefaultVersions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultVersions", reflect.TypeOf((*MockBackend)(nil).GetDefaultVersions), arg0, arg1, arg2, arg3)
}

// GetResourcePreset mocks base method.
func (m *MockBackend) GetResourcePreset(arg0 context.Context, arg1 clusters.Type, arg2 hosts.Role, arg3, arg4, arg5 optional.String, arg6 optional.Int64, arg7 optional.Float64, arg8, arg9, arg10 []string) (resources.DefaultPreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePreset", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(resources.DefaultPreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePreset indicates an expected call of GetResourcePreset.
func (mr *MockBackendMockRecorder) GetResourcePreset(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePreset", reflect.TypeOf((*MockBackend)(nil).GetResourcePreset), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// GetResourcePresetsByCloudRegion mocks base method.
func (m *MockBackend) GetResourcePresetsByCloudRegion(arg0 context.Context, arg1 environment.CloudType, arg2 string, arg3 clusters.Type, arg4 []string) ([]console.ResourcePreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePresetsByCloudRegion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]console.ResourcePreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePresetsByCloudRegion indicates an expected call of GetResourcePresetsByCloudRegion.
func (mr *MockBackendMockRecorder) GetResourcePresetsByCloudRegion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePresetsByCloudRegion", reflect.TypeOf((*MockBackend)(nil).GetResourcePresetsByCloudRegion), arg0, arg1, arg2, arg3, arg4)
}

// GetResourcePresetsByClusterType mocks base method.
func (m *MockBackend) GetResourcePresetsByClusterType(arg0 context.Context, arg1 clusters.Type, arg2 []string) ([]console.ResourcePreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePresetsByClusterType", arg0, arg1, arg2)
	ret0, _ := ret[0].([]console.ResourcePreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePresetsByClusterType indicates an expected call of GetResourcePresetsByClusterType.
func (mr *MockBackendMockRecorder) GetResourcePresetsByClusterType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePresetsByClusterType", reflect.TypeOf((*MockBackend)(nil).GetResourcePresetsByClusterType), arg0, arg1, arg2)
}

// GetUsedResources mocks base method.
func (m *MockBackend) GetUsedResources(arg0 context.Context, arg1 []string) ([]console.UsedResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedResources", arg0, arg1)
	ret0, _ := ret[0].([]console.UsedResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsedResources indicates an expected call of GetUsedResources.
func (mr *MockBackendMockRecorder) GetUsedResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedResources", reflect.TypeOf((*MockBackend)(nil).GetUsedResources), arg0, arg1)
}

// HostPillar mocks base method.
func (m *MockBackend) HostPillar(arg0 context.Context, arg1 string, arg2 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostPillar", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HostPillar indicates an expected call of HostPillar.
func (mr *MockBackendMockRecorder) HostPillar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostPillar", reflect.TypeOf((*MockBackend)(nil).HostPillar), arg0, arg1, arg2)
}

// HostsByClusterIDRoleAtRevision mocks base method.
func (m *MockBackend) HostsByClusterIDRoleAtRevision(arg0 context.Context, arg1 string, arg2 hosts.Role, arg3 int64) ([]hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostsByClusterIDRoleAtRevision", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostsByClusterIDRoleAtRevision indicates an expected call of HostsByClusterIDRoleAtRevision.
func (mr *MockBackendMockRecorder) HostsByClusterIDRoleAtRevision(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostsByClusterIDRoleAtRevision", reflect.TypeOf((*MockBackend)(nil).HostsByClusterIDRoleAtRevision), arg0, arg1, arg2, arg3)
}

// HostsByClusterIDShardNameAtRevision mocks base method.
func (m *MockBackend) HostsByClusterIDShardNameAtRevision(arg0 context.Context, arg1, arg2 string, arg3 int64) ([]hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostsByClusterIDShardNameAtRevision", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostsByClusterIDShardNameAtRevision indicates an expected call of HostsByClusterIDShardNameAtRevision.
func (mr *MockBackendMockRecorder) HostsByClusterIDShardNameAtRevision(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostsByClusterIDShardNameAtRevision", reflect.TypeOf((*MockBackend)(nil).HostsByClusterIDShardNameAtRevision), arg0, arg1, arg2, arg3)
}

// HostsByShardID mocks base method.
func (m *MockBackend) HostsByShardID(arg0 context.Context, arg1, arg2 string) ([]hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostsByShardID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostsByShardID indicates an expected call of HostsByShardID.
func (mr *MockBackendMockRecorder) HostsByShardID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostsByShardID", reflect.TypeOf((*MockBackend)(nil).HostsByShardID), arg0, arg1, arg2)
}

// IsReady mocks base method.
func (m *MockBackend) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockBackendMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockBackend)(nil).IsReady), arg0)
}

// KubernetesNodeGroup mocks base method.
func (m *MockBackend) KubernetesNodeGroup(arg0 context.Context, arg1 string) (metadb.KubernetesNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesNodeGroup", arg0, arg1)
	ret0, _ := ret[0].(metadb.KubernetesNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesNodeGroup indicates an expected call of KubernetesNodeGroup.
func (mr *MockBackendMockRecorder) KubernetesNodeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesNodeGroup", reflect.TypeOf((*MockBackend)(nil).KubernetesNodeGroup), arg0, arg1)
}

// ListClusterIDs mocks base method.
func (m *MockBackend) ListClusterIDs(arg0 context.Context, arg1 models.ListClusterIDsArgs) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterIDs indicates an expected call of ListClusterIDs.
func (mr *MockBackendMockRecorder) ListClusterIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterIDs", reflect.TypeOf((*MockBackend)(nil).ListClusterIDs), arg0, arg1)
}

// ListHosts mocks base method.
func (m *MockBackend) ListHosts(arg0 context.Context, arg1 string, arg2 int64, arg3 optional.Int64) ([]hosts.Host, int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListHosts indicates an expected call of ListHosts.
func (mr *MockBackendMockRecorder) ListHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockBackend)(nil).ListHosts), arg0, arg1, arg2, arg3)
}

// ListZones mocks base method.
func (m *MockBackend) ListZones(arg0 context.Context) ([]environment.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListZones", arg0)
	ret0, _ := ret[0].([]environment.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZones indicates an expected call of ListZones.
func (mr *MockBackendMockRecorder) ListZones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZones", reflect.TypeOf((*MockBackend)(nil).ListZones), arg0)
}

// LockCloud mocks base method.
func (m *MockBackend) LockCloud(arg0 context.Context, arg1 int64) (metadb.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCloud", arg0, arg1)
	ret0, _ := ret[0].(metadb.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCloud indicates an expected call of LockCloud.
func (mr *MockBackendMockRecorder) LockCloud(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCloud", reflect.TypeOf((*MockBackend)(nil).LockCloud), arg0, arg1)
}

// LockCluster mocks base method.
func (m *MockBackend) LockCluster(arg0 context.Context, arg1, arg2 string) (metadb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(metadb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCluster indicates an expected call of LockCluster.
func (mr *MockBackendMockRecorder) LockCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCluster", reflect.TypeOf((*MockBackend)(nil).LockCluster), arg0, arg1, arg2)
}

// MaintenanceInfoByClusterID mocks base method.
func (m *MockBackend) MaintenanceInfoByClusterID(arg0 context.Context, arg1 string) (clusters.MaintenanceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintenanceInfoByClusterID", arg0, arg1)
	ret0, _ := ret[0].(clusters.MaintenanceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaintenanceInfoByClusterID indicates an expected call of MaintenanceInfoByClusterID.
func (mr *MockBackendMockRecorder) MaintenanceInfoByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintenanceInfoByClusterID", reflect.TypeOf((*MockBackend)(nil).MaintenanceInfoByClusterID), arg0, arg1)
}

// MarkBackupObsolete mocks base method.
func (m *MockBackend) MarkBackupObsolete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkBackupObsolete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkBackupObsolete indicates an expected call of MarkBackupObsolete.
func (mr *MockBackendMockRecorder) MarkBackupObsolete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkBackupObsolete", reflect.TypeOf((*MockBackend)(nil).MarkBackupObsolete), arg0, arg1)
}

// ModifyHost mocks base method.
func (m *MockBackend) ModifyHost(arg0 context.Context, arg1 models.ModifyHostArgs) (hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyHost", arg0, arg1)
	ret0, _ := ret[0].(hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyHost indicates an expected call of ModifyHost.
func (mr *MockBackendMockRecorder) ModifyHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyHost", reflect.TypeOf((*MockBackend)(nil).ModifyHost), arg0, arg1)
}

// ModifyHostPublicIP mocks base method.
func (m *MockBackend) ModifyHostPublicIP(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 bool) (hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyHostPublicIP", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyHostPublicIP indicates an expected call of ModifyHostPublicIP.
func (mr *MockBackendMockRecorder) ModifyHostPublicIP(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyHostPublicIP", reflect.TypeOf((*MockBackend)(nil).ModifyHostPublicIP), arg0, arg1, arg2, arg3, arg4)
}

// MostRecentInitiatedByUserOperationByClusterID mocks base method.
func (m *MockBackend) MostRecentInitiatedByUserOperationByClusterID(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MostRecentInitiatedByUserOperationByClusterID", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MostRecentInitiatedByUserOperationByClusterID indicates an expected call of MostRecentInitiatedByUserOperationByClusterID.
func (mr *MockBackendMockRecorder) MostRecentInitiatedByUserOperationByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MostRecentInitiatedByUserOperationByClusterID", reflect.TypeOf((*MockBackend)(nil).MostRecentInitiatedByUserOperationByClusterID), arg0, arg1)
}

// OperationByID mocks base method.
func (m *MockBackend) OperationByID(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationByID", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationByID indicates an expected call of OperationByID.
func (mr *MockBackendMockRecorder) OperationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationByID", reflect.TypeOf((*MockBackend)(nil).OperationByID), arg0, arg1)
}

// OperationIDByIdempotenceID mocks base method.
func (m *MockBackend) OperationIDByIdempotenceID(arg0 context.Context, arg1, arg2 string, arg3 int64) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationIDByIdempotenceID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OperationIDByIdempotenceID indicates an expected call of OperationIDByIdempotenceID.
func (mr *MockBackendMockRecorder) OperationIDByIdempotenceID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationIDByIdempotenceID", reflect.TypeOf((*MockBackend)(nil).OperationIDByIdempotenceID), arg0, arg1, arg2, arg3)
}

// OperationsByClusterID mocks base method.
func (m *MockBackend) OperationsByClusterID(arg0 context.Context, arg1 string, arg2, arg3, arg4 int64) ([]operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsByClusterID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsByClusterID indicates an expected call of OperationsByClusterID.
func (mr *MockBackendMockRecorder) OperationsByClusterID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsByClusterID", reflect.TypeOf((*MockBackend)(nil).OperationsByClusterID), arg0, arg1, arg2, arg3, arg4)
}

// OperationsByFolderID mocks base method.
func (m *MockBackend) OperationsByFolderID(arg0 context.Context, arg1 int64, arg2 models.ListOperationsArgs) ([]operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsByFolderID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsByFolderID indicates an expected call of OperationsByFolderID.
func (mr *MockBackendMockRecorder) OperationsByFolderID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsByFolderID", reflect.TypeOf((*MockBackend)(nil).OperationsByFolderID), arg0, arg1, arg2)
}

// RegionByName mocks base method.
func (m *MockBackend) RegionByName(arg0 context.Context, arg1 string) (environment.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionByName", arg0, arg1)
	ret0, _ := ret[0].(environment.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionByName indicates an expected call of RegionByName.
func (mr *MockBackendMockRecorder) RegionByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionByName", reflect.TypeOf((*MockBackend)(nil).RegionByName), arg0, arg1)
}

// RescheduleMaintenanceTask mocks base method.
func (m *MockBackend) RescheduleMaintenanceTask(arg0 context.Context, arg1, arg2 string, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleMaintenanceTask", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescheduleMaintenanceTask indicates an expected call of RescheduleMaintenanceTask.
func (mr *MockBackendMockRecorder) RescheduleMaintenanceTask(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleMaintenanceTask", reflect.TypeOf((*MockBackend)(nil).RescheduleMaintenanceTask), arg0, arg1, arg2, arg3)
}

// ResourcePresetByExtID mocks base method.
func (m *MockBackend) ResourcePresetByExtID(arg0 context.Context, arg1 string) (resources.Preset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetByExtID", arg0, arg1)
	ret0, _ := ret[0].(resources.Preset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetByExtID indicates an expected call of ResourcePresetByExtID.
func (mr *MockBackendMockRecorder) ResourcePresetByExtID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetByExtID", reflect.TypeOf((*MockBackend)(nil).ResourcePresetByExtID), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockBackend) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockBackendMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockBackend)(nil).Rollback), arg0)
}

// RunningTaskID mocks base method.
func (m *MockBackend) RunningTaskID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunningTaskID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunningTaskID indicates an expected call of RunningTaskID.
func (mr *MockBackendMockRecorder) RunningTaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningTaskID", reflect.TypeOf((*MockBackend)(nil).RunningTaskID), arg0, arg1)
}

// ScheduleBackupForNow mocks base method.
func (m *MockBackend) ScheduleBackupForNow(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 backups.BackupMethod, arg6 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleBackupForNow", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleBackupForNow indicates an expected call of ScheduleBackupForNow.
func (mr *MockBackendMockRecorder) ScheduleBackupForNow(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBackupForNow", reflect.TypeOf((*MockBackend)(nil).ScheduleBackupForNow), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SetDefaultVersionCluster mocks base method.
func (m *MockBackend) SetDefaultVersionCluster(arg0 context.Context, arg1 string, arg2 clusters.Type, arg3 environment.SaltEnv, arg4, arg5 string, arg6 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultVersionCluster", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultVersionCluster indicates an expected call of SetDefaultVersionCluster.
func (mr *MockBackendMockRecorder) SetDefaultVersionCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultVersionCluster", reflect.TypeOf((*MockBackend)(nil).SetDefaultVersionCluster), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SetLabelsOnCluster mocks base method.
func (m *MockBackend) SetLabelsOnCluster(arg0 context.Context, arg1 string, arg2 map[string]string, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLabelsOnCluster", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLabelsOnCluster indicates an expected call of SetLabelsOnCluster.
func (mr *MockBackendMockRecorder) SetLabelsOnCluster(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabelsOnCluster", reflect.TypeOf((*MockBackend)(nil).SetLabelsOnCluster), arg0, arg1, arg2, arg3)
}

// SetMaintenanceWindowSettings mocks base method.
func (m *MockBackend) SetMaintenanceWindowSettings(arg0 context.Context, arg1 string, arg2 int64, arg3 clusters.MaintenanceWindow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaintenanceWindowSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaintenanceWindowSettings indicates an expected call of SetMaintenanceWindowSettings.
func (mr *MockBackendMockRecorder) SetMaintenanceWindowSettings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaintenanceWindowSettings", reflect.TypeOf((*MockBackend)(nil).SetMaintenanceWindowSettings), arg0, arg1, arg2, arg3)
}

// ShardByShardID mocks base method.
func (m *MockBackend) ShardByShardID(arg0 context.Context, arg1 string) (metadb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardByShardID", arg0, arg1)
	ret0, _ := ret[0].(metadb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardByShardID indicates an expected call of ShardByShardID.
func (mr *MockBackendMockRecorder) ShardByShardID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardByShardID", reflect.TypeOf((*MockBackend)(nil).ShardByShardID), arg0, arg1)
}

// ShardByShardName mocks base method.
func (m *MockBackend) ShardByShardName(arg0 context.Context, arg1, arg2 string) (metadb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardByShardName", arg0, arg1, arg2)
	ret0, _ := ret[0].(metadb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardByShardName indicates an expected call of ShardByShardName.
func (mr *MockBackendMockRecorder) ShardByShardName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardByShardName", reflect.TypeOf((*MockBackend)(nil).ShardByShardName), arg0, arg1, arg2)
}

// ShardsByClusterID mocks base method.
func (m *MockBackend) ShardsByClusterID(arg0 context.Context, arg1 string) ([]metadb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardsByClusterID", arg0, arg1)
	ret0, _ := ret[0].([]metadb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardsByClusterID indicates an expected call of ShardsByClusterID.
func (mr *MockBackendMockRecorder) ShardsByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardsByClusterID", reflect.TypeOf((*MockBackend)(nil).ShardsByClusterID), arg0, arg1)
}

// SubClustersByClusterID mocks base method.
func (m *MockBackend) SubClustersByClusterID(arg0 context.Context, arg1 string) ([]metadb.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubClustersByClusterID", arg0, arg1)
	ret0, _ := ret[0].([]metadb.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubClustersByClusterID indicates an expected call of SubClustersByClusterID.
func (mr *MockBackendMockRecorder) SubClustersByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubClustersByClusterID", reflect.TypeOf((*MockBackend)(nil).SubClustersByClusterID), arg0, arg1)
}

// SubClustersByClusterIDAtRevision mocks base method.
func (m *MockBackend) SubClustersByClusterIDAtRevision(arg0 context.Context, arg1 string, arg2 int64) ([]metadb.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubClustersByClusterIDAtRevision", arg0, arg1, arg2)
	ret0, _ := ret[0].([]metadb.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubClustersByClusterIDAtRevision indicates an expected call of SubClustersByClusterIDAtRevision.
func (mr *MockBackendMockRecorder) SubClustersByClusterIDAtRevision(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubClustersByClusterIDAtRevision", reflect.TypeOf((*MockBackend)(nil).SubClustersByClusterIDAtRevision), arg0, arg1, arg2)
}

// UpdateCloudQuota mocks base method.
func (m *MockBackend) UpdateCloudQuota(arg0 context.Context, arg1 string, arg2 metadb.Resources, arg3 string) (metadb.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudQuota", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(metadb.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCloudQuota indicates an expected call of UpdateCloudQuota.
func (mr *MockBackendMockRecorder) UpdateCloudQuota(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudQuota", reflect.TypeOf((*MockBackend)(nil).UpdateCloudQuota), arg0, arg1, arg2, arg3)
}

// UpdateCloudUsedQuota mocks base method.
func (m *MockBackend) UpdateCloudUsedQuota(arg0 context.Context, arg1 int64, arg2 metadb.Resources, arg3 string) (metadb.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudUsedQuota", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(metadb.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCloudUsedQuota indicates an expected call of UpdateCloudUsedQuota.
func (mr *MockBackendMockRecorder) UpdateCloudUsedQuota(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudUsedQuota", reflect.TypeOf((*MockBackend)(nil).UpdateCloudUsedQuota), arg0, arg1, arg2, arg3)
}

// UpdateClusterDescription mocks base method.
func (m *MockBackend) UpdateClusterDescription(arg0 context.Context, arg1, arg2 string, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterDescription", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterDescription indicates an expected call of UpdateClusterDescription.
func (mr *MockBackendMockRecorder) UpdateClusterDescription(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterDescription", reflect.TypeOf((*MockBackend)(nil).UpdateClusterDescription), arg0, arg1, arg2, arg3)
}

// UpdateClusterFolder mocks base method.
func (m *MockBackend) UpdateClusterFolder(arg0 context.Context, arg1 string, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterFolder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterFolder indicates an expected call of UpdateClusterFolder.
func (mr *MockBackendMockRecorder) UpdateClusterFolder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterFolder", reflect.TypeOf((*MockBackend)(nil).UpdateClusterFolder), arg0, arg1, arg2, arg3)
}

// UpdateClusterName mocks base method.
func (m *MockBackend) UpdateClusterName(arg0 context.Context, arg1, arg2 string, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterName indicates an expected call of UpdateClusterName.
func (mr *MockBackendMockRecorder) UpdateClusterName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterName", reflect.TypeOf((*MockBackend)(nil).UpdateClusterName), arg0, arg1, arg2, arg3)
}

// UpdateClusterPillar mocks base method.
func (m *MockBackend) UpdateClusterPillar(arg0 context.Context, arg1 string, arg2 int64, arg3 json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterPillar", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterPillar indicates an expected call of UpdateClusterPillar.
func (mr *MockBackendMockRecorder) UpdateClusterPillar(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterPillar", reflect.TypeOf((*MockBackend)(nil).UpdateClusterPillar), arg0, arg1, arg2, arg3)
}

// UpdateDeletionProtection mocks base method.
func (m *MockBackend) UpdateDeletionProtection(arg0 context.Context, arg1 string, arg2 bool, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeletionProtection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeletionProtection indicates an expected call of UpdateDeletionProtection.
func (mr *MockBackendMockRecorder) UpdateDeletionProtection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeletionProtection", reflect.TypeOf((*MockBackend)(nil).UpdateDeletionProtection), arg0, arg1, arg2, arg3)
}

// UpdateHostPillar mocks base method.
func (m *MockBackend) UpdateHostPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHostPillar indicates an expected call of UpdateHostPillar.
func (mr *MockBackendMockRecorder) UpdateHostPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostPillar", reflect.TypeOf((*MockBackend)(nil).UpdateHostPillar), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePillar mocks base method.
func (m *MockBackend) UpdatePillar(arg0 context.Context, arg1 string, arg2 int64, arg3 json.RawMessage, arg4 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePillar indicates an expected call of UpdatePillar.
func (mr *MockBackendMockRecorder) UpdatePillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePillar", reflect.TypeOf((*MockBackend)(nil).UpdatePillar), arg0, arg1, arg2, arg3, arg4)
}

// UpdateShardPillar mocks base method.
func (m *MockBackend) UpdateShardPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShardPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShardPillar indicates an expected call of UpdateShardPillar.
func (mr *MockBackendMockRecorder) UpdateShardPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShardPillar", reflect.TypeOf((*MockBackend)(nil).UpdateShardPillar), arg0, arg1, arg2, arg3, arg4)
}

// UpdateSubClusterPillar mocks base method.
func (m *MockBackend) UpdateSubClusterPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubClusterPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubClusterPillar indicates an expected call of UpdateSubClusterPillar.
func (mr *MockBackendMockRecorder) UpdateSubClusterPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubClusterPillar", reflect.TypeOf((*MockBackend)(nil).UpdateSubClusterPillar), arg0, arg1, arg2, arg3, arg4)
}

// ValidResources mocks base method.
func (m *MockBackend) ValidResources(arg0 context.Context, arg1 []string, arg2 clusters.Type, arg3 hosts.Role, arg4, arg5, arg6 optional.String) ([]resources.Valid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidResources", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]resources.Valid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidResources indicates an expected call of ValidResources.
func (mr *MockBackendMockRecorder) ValidResources(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidResources", reflect.TypeOf((*MockBackend)(nil).ValidResources), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
