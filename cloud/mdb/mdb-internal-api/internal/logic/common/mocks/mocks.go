// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/common (interfaces: Health,Logs,Operations)

// Package mocks is a generated GoMock package.
package mocks

import (
	common "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/common"
	metadb "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/metadb"
	models "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models"
	logs "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/logs"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHealth is a mock of Health interface.
type MockHealth struct {
	ctrl     *gomock.Controller
	recorder *MockHealthMockRecorder
}

// MockHealthMockRecorder is the mock recorder for MockHealth.
type MockHealthMockRecorder struct {
	mock *MockHealth
}

// NewMockHealth creates a new mock instance.
func NewMockHealth(ctrl *gomock.Controller) *MockHealth {
	mock := &MockHealth{ctrl: ctrl}
	mock.recorder = &MockHealthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealth) EXPECT() *MockHealthMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockHealth) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockHealthMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockHealth)(nil).IsReady), arg0)
}

// MockLogs is a mock of Logs interface.
type MockLogs struct {
	ctrl     *gomock.Controller
	recorder *MockLogsMockRecorder
}

// MockLogsMockRecorder is the mock recorder for MockLogs.
type MockLogsMockRecorder struct {
	mock *MockLogs
}

// NewMockLogs creates a new mock instance.
func NewMockLogs(ctrl *gomock.Controller) *MockLogs {
	mock := &MockLogs{ctrl: ctrl}
	mock.recorder = &MockLogsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogs) EXPECT() *MockLogsMockRecorder {
	return m.recorder
}

// Logs mocks base method.
func (m *MockLogs) Logs(arg0 context.Context, arg1 string, arg2 logs.ServiceType, arg3 int64, arg4 common.LogsOptions) ([]logs.Message, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]logs.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Logs indicates an expected call of Logs.
func (mr *MockLogsMockRecorder) Logs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockLogs)(nil).Logs), arg0, arg1, arg2, arg3, arg4)
}

// Stream mocks base method.
func (m *MockLogs) Stream(arg0 context.Context, arg1 string, arg2 logs.ServiceType, arg3 common.LogsOptions) (<-chan common.LogsBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(<-chan common.LogsBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockLogsMockRecorder) Stream(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockLogs)(nil).Stream), arg0, arg1, arg2, arg3)
}

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// Operation mocks base method.
func (m *MockOperations) Operation(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operation", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operation indicates an expected call of Operation.
func (mr *MockOperationsMockRecorder) Operation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operation", reflect.TypeOf((*MockOperations)(nil).Operation), arg0, arg1)
}

// OperationWithFolderCoords mocks base method.
func (m *MockOperations) OperationWithFolderCoords(arg0 context.Context, arg1 string) (operations.Operation, metadb.FolderCoords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationWithFolderCoords", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(metadb.FolderCoords)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OperationWithFolderCoords indicates an expected call of OperationWithFolderCoords.
func (mr *MockOperationsMockRecorder) OperationWithFolderCoords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationWithFolderCoords", reflect.TypeOf((*MockOperations)(nil).OperationWithFolderCoords), arg0, arg1)
}

// OperationsByClusterID mocks base method.
func (m *MockOperations) OperationsByClusterID(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsByClusterID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsByClusterID indicates an expected call of OperationsByClusterID.
func (mr *MockOperationsMockRecorder) OperationsByClusterID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsByClusterID", reflect.TypeOf((*MockOperations)(nil).OperationsByClusterID), arg0, arg1, arg2, arg3)
}

// OperationsByFolderID mocks base method.
func (m *MockOperations) OperationsByFolderID(arg0 context.Context, arg1 string, arg2 models.ListOperationsArgs) ([]operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsByFolderID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsByFolderID indicates an expected call of OperationsByFolderID.
func (mr *MockOperationsMockRecorder) OperationsByFolderID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsByFolderID", reflect.TypeOf((*MockOperations)(nil).OperationsByFolderID), arg0, arg1, arg2)
}
