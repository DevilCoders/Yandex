// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/redis (interfaces: Redis)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rmodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/redis/rmodels"
	backups "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/backups"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	pagination "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/pagination"
	gomock "github.com/golang/mock/gomock"
)

// MockRedis is a mock of Redis interface.
type MockRedis struct {
	ctrl     *gomock.Controller
	recorder *MockRedisMockRecorder
}

// MockRedisMockRecorder is the mock recorder for MockRedis.
type MockRedisMockRecorder struct {
	mock *MockRedis
}

// NewMockRedis creates a new mock instance.
func NewMockRedis(ctrl *gomock.Controller) *MockRedis {
	mock := &MockRedis{ctrl: ctrl}
	mock.recorder = &MockRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedis) EXPECT() *MockRedisMockRecorder {
	return m.recorder
}

// AddHosts mocks base method.
func (m *MockRedis) AddHosts(arg0 context.Context, arg1 string, arg2 []rmodels.HostSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHosts indicates an expected call of AddHosts.
func (mr *MockRedisMockRecorder) AddHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHosts", reflect.TypeOf((*MockRedis)(nil).AddHosts), arg0, arg1, arg2)
}

// Backup mocks base method.
func (m *MockRedis) Backup(arg0 context.Context, arg1 string) (backups.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", arg0, arg1)
	ret0, _ := ret[0].(backups.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Backup indicates an expected call of Backup.
func (mr *MockRedisMockRecorder) Backup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockRedis)(nil).Backup), arg0, arg1)
}

// BackupCluster mocks base method.
func (m *MockRedis) BackupCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupCluster indicates an expected call of BackupCluster.
func (mr *MockRedisMockRecorder) BackupCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupCluster", reflect.TypeOf((*MockRedis)(nil).BackupCluster), arg0, arg1)
}

// ClusterBackups mocks base method.
func (m *MockRedis) ClusterBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterBackups indicates an expected call of ClusterBackups.
func (mr *MockRedisMockRecorder) ClusterBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterBackups", reflect.TypeOf((*MockRedis)(nil).ClusterBackups), arg0, arg1, arg2, arg3)
}

// FolderBackups mocks base method.
func (m *MockRedis) FolderBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FolderBackups indicates an expected call of FolderBackups.
func (mr *MockRedisMockRecorder) FolderBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderBackups", reflect.TypeOf((*MockRedis)(nil).FolderBackups), arg0, arg1, arg2, arg3)
}

// ListHosts mocks base method.
func (m *MockRedis) ListHosts(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]hosts.HostExtended, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHosts indicates an expected call of ListHosts.
func (mr *MockRedisMockRecorder) ListHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockRedis)(nil).ListHosts), arg0, arg1, arg2, arg3)
}

// MoveCluster mocks base method.
func (m *MockRedis) MoveCluster(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCluster indicates an expected call of MoveCluster.
func (mr *MockRedisMockRecorder) MoveCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCluster", reflect.TypeOf((*MockRedis)(nil).MoveCluster), arg0, arg1, arg2)
}

// Rebalance mocks base method.
func (m *MockRedis) Rebalance(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebalance", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rebalance indicates an expected call of Rebalance.
func (mr *MockRedisMockRecorder) Rebalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebalance", reflect.TypeOf((*MockRedis)(nil).Rebalance), arg0, arg1)
}

// StartCluster mocks base method.
func (m *MockRedis) StartCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockRedisMockRecorder) StartCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockRedis)(nil).StartCluster), arg0, arg1)
}

// StartFailover mocks base method.
func (m *MockRedis) StartFailover(arg0 context.Context, arg1 string, arg2 []string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFailover", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFailover indicates an expected call of StartFailover.
func (mr *MockRedisMockRecorder) StartFailover(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFailover", reflect.TypeOf((*MockRedis)(nil).StartFailover), arg0, arg1, arg2)
}

// StopCluster mocks base method.
func (m *MockRedis) StopCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockRedisMockRecorder) StopCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockRedis)(nil).StopCluster), arg0, arg1)
}
