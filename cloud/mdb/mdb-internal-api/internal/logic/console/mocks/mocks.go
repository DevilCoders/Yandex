// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/console (interfaces: Console)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	featureflags "a.yandex-team.ru/cloud/mdb/internal/featureflags"
	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	models "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models"
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	console "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/console"
	environment "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/environment"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	resources "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/resources"
	gomock "github.com/golang/mock/gomock"
)

// MockConsole is a mock of Console interface.
type MockConsole struct {
	ctrl     *gomock.Controller
	recorder *MockConsoleMockRecorder
}

// MockConsoleMockRecorder is the mock recorder for MockConsole.
type MockConsoleMockRecorder struct {
	mock *MockConsole
}

// NewMockConsole creates a new mock instance.
func NewMockConsole(ctrl *gomock.Controller) *MockConsole {
	mock := &MockConsole{ctrl: ctrl}
	mock.recorder = &MockConsoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsole) EXPECT() *MockConsoleMockRecorder {
	return m.recorder
}

// FolderStats mocks base method.
func (m *MockConsole) FolderStats(arg0 context.Context, arg1 string) (console.FolderStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderStats", arg0, arg1)
	ret0, _ := ret[0].(console.FolderStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FolderStats indicates an expected call of FolderStats.
func (mr *MockConsoleMockRecorder) FolderStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderStats", reflect.TypeOf((*MockConsole)(nil).FolderStats), arg0, arg1)
}

// GetCloudsByClusterType mocks base method.
func (m *MockConsole) GetCloudsByClusterType(arg0 context.Context, arg1 clusters.Type, arg2, arg3 int64) ([]console.Cloud, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudsByClusterType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]console.Cloud)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCloudsByClusterType indicates an expected call of GetCloudsByClusterType.
func (mr *MockConsoleMockRecorder) GetCloudsByClusterType(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudsByClusterType", reflect.TypeOf((*MockConsole)(nil).GetCloudsByClusterType), arg0, arg1, arg2, arg3)
}

// GetClusterConfig mocks base method.
func (m *MockConsole) GetClusterConfig(arg0 context.Context, arg1 string, arg2 clusters.Type) (console.ClustersConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(console.ClustersConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterConfig indicates an expected call of GetClusterConfig.
func (mr *MockConsoleMockRecorder) GetClusterConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterConfig", reflect.TypeOf((*MockConsole)(nil).GetClusterConfig), arg0, arg1, arg2)
}

// GetConnectionDomain mocks base method.
func (m *MockConsole) GetConnectionDomain(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionDomain", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionDomain indicates an expected call of GetConnectionDomain.
func (mr *MockConsoleMockRecorder) GetConnectionDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionDomain", reflect.TypeOf((*MockConsole)(nil).GetConnectionDomain), arg0)
}

// GetDefaultResourcesByClusterType mocks base method.
func (m *MockConsole) GetDefaultResourcesByClusterType(arg0 clusters.Type, arg1 hosts.Role) (console.DefaultResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultResourcesByClusterType", arg0, arg1)
	ret0, _ := ret[0].(console.DefaultResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultResourcesByClusterType indicates an expected call of GetDefaultResourcesByClusterType.
func (mr *MockConsoleMockRecorder) GetDefaultResourcesByClusterType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultResourcesByClusterType", reflect.TypeOf((*MockConsole)(nil).GetDefaultResourcesByClusterType), arg0, arg1)
}

// GetDefaultVersions mocks base method.
func (m *MockConsole) GetDefaultVersions(arg0 context.Context, arg1 clusters.Type, arg2 environment.SaltEnv, arg3 string) ([]console.DefaultVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultVersions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]console.DefaultVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultVersions indicates an expected call of GetDefaultVersions.
func (mr *MockConsoleMockRecorder) GetDefaultVersions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultVersions", reflect.TypeOf((*MockConsole)(nil).GetDefaultVersions), arg0, arg1, arg2, arg3)
}

// GetDiskIOLimit mocks base method.
func (m *MockConsole) GetDiskIOLimit(arg0 context.Context, arg1 int64, arg2, arg3 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskIOLimit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskIOLimit indicates an expected call of GetDiskIOLimit.
func (mr *MockConsoleMockRecorder) GetDiskIOLimit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskIOLimit", reflect.TypeOf((*MockConsole)(nil).GetDiskIOLimit), arg0, arg1, arg2, arg3)
}

// GetFeatureFlags mocks base method.
func (m *MockConsole) GetFeatureFlags(arg0 context.Context, arg1 string) (featureflags.FeatureFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureFlags", arg0, arg1)
	ret0, _ := ret[0].(featureflags.FeatureFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureFlags indicates an expected call of GetFeatureFlags.
func (mr *MockConsoleMockRecorder) GetFeatureFlags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureFlags", reflect.TypeOf((*MockConsole)(nil).GetFeatureFlags), arg0, arg1)
}

// GetNetworksByCloudExtID mocks base method.
func (m *MockConsole) GetNetworksByCloudExtID(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworksByCloudExtID", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworksByCloudExtID indicates an expected call of GetNetworksByCloudExtID.
func (mr *MockConsoleMockRecorder) GetNetworksByCloudExtID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworksByCloudExtID", reflect.TypeOf((*MockConsole)(nil).GetNetworksByCloudExtID), arg0, arg1)
}

// GetPlatforms mocks base method.
func (m *MockConsole) GetPlatforms(arg0 context.Context) ([]console.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms", arg0)
	ret0, _ := ret[0].([]console.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatforms indicates an expected call of GetPlatforms.
func (mr *MockConsoleMockRecorder) GetPlatforms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockConsole)(nil).GetPlatforms), arg0)
}

// GetResourcePresetsByCloudRegion mocks base method.
func (m *MockConsole) GetResourcePresetsByCloudRegion(arg0 context.Context, arg1 environment.CloudType, arg2 string, arg3 clusters.Type, arg4 string) ([]console.ResourcePreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePresetsByCloudRegion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]console.ResourcePreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePresetsByCloudRegion indicates an expected call of GetResourcePresetsByCloudRegion.
func (mr *MockConsoleMockRecorder) GetResourcePresetsByCloudRegion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePresetsByCloudRegion", reflect.TypeOf((*MockConsole)(nil).GetResourcePresetsByCloudRegion), arg0, arg1, arg2, arg3, arg4)
}

// GetResourcePresetsByClusterType mocks base method.
func (m *MockConsole) GetResourcePresetsByClusterType(arg0 context.Context, arg1 clusters.Type, arg2 string, arg3 bool) ([]console.ResourcePreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePresetsByClusterType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]console.ResourcePreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePresetsByClusterType indicates an expected call of GetResourcePresetsByClusterType.
func (mr *MockConsoleMockRecorder) GetResourcePresetsByClusterType(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePresetsByClusterType", reflect.TypeOf((*MockConsole)(nil).GetResourcePresetsByClusterType), arg0, arg1, arg2, arg3)
}

// GetUsedResources mocks base method.
func (m *MockConsole) GetUsedResources(arg0 context.Context, arg1 []string) ([]console.UsedResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedResources", arg0, arg1)
	ret0, _ := ret[0].([]console.UsedResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsedResources indicates an expected call of GetUsedResources.
func (mr *MockConsoleMockRecorder) GetUsedResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedResources", reflect.TypeOf((*MockConsole)(nil).GetUsedResources), arg0, arg1)
}

// InitResourcesIfEmpty mocks base method.
func (m *MockConsole) InitResourcesIfEmpty(arg0 *models.ClusterResources, arg1 hosts.Role, arg2 clusters.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitResourcesIfEmpty", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitResourcesIfEmpty indicates an expected call of InitResourcesIfEmpty.
func (mr *MockConsoleMockRecorder) InitResourcesIfEmpty(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitResourcesIfEmpty", reflect.TypeOf((*MockConsole)(nil).InitResourcesIfEmpty), arg0, arg1, arg2)
}

// ListClusters mocks base method.
func (m *MockConsole) ListClusters(arg0 context.Context, arg1 string, arg2 optional.Int64, arg3 clusters.ClusterPageToken) ([]console.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]console.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockConsoleMockRecorder) ListClusters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockConsole)(nil).ListClusters), arg0, arg1, arg2, arg3)
}

// ProjectByClusterID mocks base method.
func (m *MockConsole) ProjectByClusterID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectByClusterID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectByClusterID indicates an expected call of ProjectByClusterID.
func (mr *MockConsoleMockRecorder) ProjectByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectByClusterID", reflect.TypeOf((*MockConsole)(nil).ProjectByClusterID), arg0, arg1)
}

// ResourcePresetByExtID mocks base method.
func (m *MockConsole) ResourcePresetByExtID(arg0 context.Context, arg1 string) (resources.Preset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetByExtID", arg0, arg1)
	ret0, _ := ret[0].(resources.Preset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetByExtID indicates an expected call of ResourcePresetByExtID.
func (mr *MockConsoleMockRecorder) ResourcePresetByExtID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetByExtID", reflect.TypeOf((*MockConsole)(nil).ResourcePresetByExtID), arg0, arg1)
}
