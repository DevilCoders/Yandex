package defaults

const (
	AllValidSslCipherSuitesSortedString = "TLS_AKE_WITH_AES_128_GCM_SHA256,TLS_AKE_WITH_AES_256_GCM_SHA384,TLS_AKE_WITH_CHACHA20_POLY1305_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384"
	DefaultMessageMaxBytes              = int64(1048588)
	DefaultReplicaFetchMaxBytes         = int64(1048576)
	// RecordLogOverheadBytes
	// Kafka use "message.max.bytes" property with record log overhead which includes
	// OFFSET_OFFSET (0 bytes) + OFFSET_LENGTH (8 bytes) + SIZE_LENGTH (4 bytes)
	// So default value is 1 mb plus 12 bytes of record log overhead
	RecordLogOverheadBytes = int64(12)
)

var (
	AllValidSslCipherSuitesSortedSlice = []string{
		"TLS_AKE_WITH_AES_128_GCM_SHA256",
		"TLS_AKE_WITH_AES_256_GCM_SHA384",
		"TLS_AKE_WITH_CHACHA20_POLY1305_SHA256",
		"TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
		"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
		"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
		"TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
		"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
		"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
		"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
		"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
		"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
		"TLS_RSA_WITH_AES_128_CBC_SHA",
		"TLS_RSA_WITH_AES_128_CBC_SHA256",
		"TLS_RSA_WITH_AES_128_GCM_SHA256",
		"TLS_RSA_WITH_AES_256_CBC_SHA",
		"TLS_RSA_WITH_AES_256_CBC_SHA256",
		"TLS_RSA_WITH_AES_256_GCM_SHA384",
	}
)

func GetInt64ValueOrDefault(value *int64, defaultValue int64) int64 {
	var result = defaultValue
	if value != nil {
		result = *value
	}
	return result
}

func GetMessageMaxBytesOrDefault(messageMaxBytes *int64) int64 {
	return GetInt64ValueOrDefault(messageMaxBytes, DefaultMessageMaxBytes)
}

func GetReplicaFetchMaxBytesOrDefault(replicaFetchMaxBytes *int64) int64 {
	return GetInt64ValueOrDefault(replicaFetchMaxBytes, DefaultReplicaFetchMaxBytes)
}
