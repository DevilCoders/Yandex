// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/kafka (interfaces: Kafka)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	kafka "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/kafka"
	kfmodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/kafka/kfmodels"
	metadb "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/metadb"
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	console "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/console"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	kafka0 "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/kafka"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	pagination "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/pagination"
	gomock "github.com/golang/mock/gomock"
)

// MockKafka is a mock of Kafka interface.
type MockKafka struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaMockRecorder
}

// MockKafkaMockRecorder is the mock recorder for MockKafka.
type MockKafkaMockRecorder struct {
	mock *MockKafka
}

// NewMockKafka creates a new mock instance.
func NewMockKafka(ctrl *gomock.Controller) *MockKafka {
	mock := &MockKafka{ctrl: ctrl}
	mock.recorder = &MockKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafka) EXPECT() *MockKafkaMockRecorder {
	return m.recorder
}

// Connector mocks base method.
func (m *MockKafka) Connector(arg0 context.Context, arg1, arg2 string) (kfmodels.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connector", arg0, arg1, arg2)
	ret0, _ := ret[0].(kfmodels.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connector indicates an expected call of Connector.
func (mr *MockKafkaMockRecorder) Connector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connector", reflect.TypeOf((*MockKafka)(nil).Connector), arg0, arg1, arg2)
}

// Connectors mocks base method.
func (m *MockKafka) Connectors(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]kfmodels.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connectors", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]kfmodels.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connectors indicates an expected call of Connectors.
func (mr *MockKafkaMockRecorder) Connectors(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connectors", reflect.TypeOf((*MockKafka)(nil).Connectors), arg0, arg1, arg2, arg3)
}

// CreateConnector mocks base method.
func (m *MockKafka) CreateConnector(arg0 context.Context, arg1 string, arg2 kfmodels.ConnectorSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnector indicates an expected call of CreateConnector.
func (mr *MockKafkaMockRecorder) CreateConnector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockKafka)(nil).CreateConnector), arg0, arg1, arg2)
}

// CreateDataCloudCluster mocks base method.
func (m *MockKafka) CreateDataCloudCluster(arg0 context.Context, arg1 kafka.CreateDataCloudClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataCloudCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataCloudCluster indicates an expected call of CreateDataCloudCluster.
func (mr *MockKafkaMockRecorder) CreateDataCloudCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataCloudCluster", reflect.TypeOf((*MockKafka)(nil).CreateDataCloudCluster), arg0, arg1)
}

// CreateMDBCluster mocks base method.
func (m *MockKafka) CreateMDBCluster(arg0 context.Context, arg1 kafka.CreateMDBClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMDBCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMDBCluster indicates an expected call of CreateMDBCluster.
func (mr *MockKafkaMockRecorder) CreateMDBCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMDBCluster", reflect.TypeOf((*MockKafka)(nil).CreateMDBCluster), arg0, arg1)
}

// CreateTopic mocks base method.
func (m *MockKafka) CreateTopic(arg0 context.Context, arg1 string, arg2 kfmodels.TopicSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockKafkaMockRecorder) CreateTopic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockKafka)(nil).CreateTopic), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockKafka) CreateUser(arg0 context.Context, arg1 string, arg2 kfmodels.UserSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockKafkaMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockKafka)(nil).CreateUser), arg0, arg1, arg2)
}

// DataCloudCluster mocks base method.
func (m *MockKafka) DataCloudCluster(arg0 context.Context, arg1 string, arg2 bool) (kfmodels.DataCloudCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataCloudCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(kfmodels.DataCloudCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataCloudCluster indicates an expected call of DataCloudCluster.
func (mr *MockKafkaMockRecorder) DataCloudCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataCloudCluster", reflect.TypeOf((*MockKafka)(nil).DataCloudCluster), arg0, arg1, arg2)
}

// DataCloudClusters mocks base method.
func (m *MockKafka) DataCloudClusters(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]kfmodels.DataCloudCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataCloudClusters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]kfmodels.DataCloudCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataCloudClusters indicates an expected call of DataCloudClusters.
func (mr *MockKafkaMockRecorder) DataCloudClusters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataCloudClusters", reflect.TypeOf((*MockKafka)(nil).DataCloudClusters), arg0, arg1, arg2, arg3)
}

// DeleteCluster mocks base method.
func (m *MockKafka) DeleteCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockKafkaMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockKafka)(nil).DeleteCluster), arg0, arg1)
}

// DeleteConnector mocks base method.
func (m *MockKafka) DeleteConnector(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnector indicates an expected call of DeleteConnector.
func (mr *MockKafkaMockRecorder) DeleteConnector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockKafka)(nil).DeleteConnector), arg0, arg1, arg2)
}

// DeleteTopic mocks base method.
func (m *MockKafka) DeleteTopic(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopic indicates an expected call of DeleteTopic.
func (mr *MockKafkaMockRecorder) DeleteTopic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockKafka)(nil).DeleteTopic), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockKafka) DeleteUser(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockKafkaMockRecorder) DeleteUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockKafka)(nil).DeleteUser), arg0, arg1, arg2)
}

// EstimateCreateCluster mocks base method.
func (m *MockKafka) EstimateCreateCluster(arg0 context.Context, arg1 kafka.CreateMDBClusterArgs) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateCreateCluster", arg0, arg1)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateCreateCluster indicates an expected call of EstimateCreateCluster.
func (mr *MockKafkaMockRecorder) EstimateCreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateCreateCluster", reflect.TypeOf((*MockKafka)(nil).EstimateCreateCluster), arg0, arg1)
}

// EstimateCreateDCCluster mocks base method.
func (m *MockKafka) EstimateCreateDCCluster(arg0 context.Context, arg1 kafka.CreateDataCloudClusterArgs) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateCreateDCCluster", arg0, arg1)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateCreateDCCluster indicates an expected call of EstimateCreateDCCluster.
func (mr *MockKafkaMockRecorder) EstimateCreateDCCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateCreateDCCluster", reflect.TypeOf((*MockKafka)(nil).EstimateCreateDCCluster), arg0, arg1)
}

// GrantUserPermission mocks base method.
func (m *MockKafka) GrantUserPermission(arg0 context.Context, arg1, arg2 string, arg3 kfmodels.Permission) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockKafkaMockRecorder) GrantUserPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockKafka)(nil).GrantUserPermission), arg0, arg1, arg2, arg3)
}

// ListHosts mocks base method.
func (m *MockKafka) ListHosts(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]hosts.HostExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHosts indicates an expected call of ListHosts.
func (mr *MockKafkaMockRecorder) ListHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockKafka)(nil).ListHosts), arg0, arg1, arg2, arg3)
}

// MDBCluster mocks base method.
func (m *MockKafka) MDBCluster(arg0 context.Context, arg1 string) (kfmodels.MDBCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDBCluster", arg0, arg1)
	ret0, _ := ret[0].(kfmodels.MDBCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MDBCluster indicates an expected call of MDBCluster.
func (mr *MockKafkaMockRecorder) MDBCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDBCluster", reflect.TypeOf((*MockKafka)(nil).MDBCluster), arg0, arg1)
}

// MDBClusters mocks base method.
func (m *MockKafka) MDBClusters(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]kfmodels.MDBCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDBClusters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]kfmodels.MDBCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MDBClusters indicates an expected call of MDBClusters.
func (mr *MockKafkaMockRecorder) MDBClusters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDBClusters", reflect.TypeOf((*MockKafka)(nil).MDBClusters), arg0, arg1, arg2, arg3)
}

// ModifyDataCloudCluster mocks base method.
func (m *MockKafka) ModifyDataCloudCluster(arg0 context.Context, arg1 kafka.ModifyDataCloudClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDataCloudCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDataCloudCluster indicates an expected call of ModifyDataCloudCluster.
func (mr *MockKafkaMockRecorder) ModifyDataCloudCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDataCloudCluster", reflect.TypeOf((*MockKafka)(nil).ModifyDataCloudCluster), arg0, arg1)
}

// ModifyMDBCluster mocks base method.
func (m *MockKafka) ModifyMDBCluster(arg0 context.Context, arg1 kafka.ModifyMDBClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyMDBCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyMDBCluster indicates an expected call of ModifyMDBCluster.
func (mr *MockKafkaMockRecorder) ModifyMDBCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMDBCluster", reflect.TypeOf((*MockKafka)(nil).ModifyMDBCluster), arg0, arg1)
}

// MoveCluster mocks base method.
func (m *MockKafka) MoveCluster(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCluster indicates an expected call of MoveCluster.
func (mr *MockKafkaMockRecorder) MoveCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCluster", reflect.TypeOf((*MockKafka)(nil).MoveCluster), arg0, arg1, arg2)
}

// PauseConnector mocks base method.
func (m *MockKafka) PauseConnector(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseConnector", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseConnector indicates an expected call of PauseConnector.
func (mr *MockKafkaMockRecorder) PauseConnector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseConnector", reflect.TypeOf((*MockKafka)(nil).PauseConnector), arg0, arg1, arg2)
}

// RescheduleMaintenance mocks base method.
func (m *MockKafka) RescheduleMaintenance(arg0 context.Context, arg1 string, arg2 clusters.RescheduleType, arg3 optional.Time) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleMaintenance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescheduleMaintenance indicates an expected call of RescheduleMaintenance.
func (mr *MockKafkaMockRecorder) RescheduleMaintenance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleMaintenance", reflect.TypeOf((*MockKafka)(nil).RescheduleMaintenance), arg0, arg1, arg2, arg3)
}

// ResetCredentials mocks base method.
func (m *MockKafka) ResetCredentials(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCredentials", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCredentials indicates an expected call of ResetCredentials.
func (mr *MockKafkaMockRecorder) ResetCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCredentials", reflect.TypeOf((*MockKafka)(nil).ResetCredentials), arg0, arg1)
}

// ResumeConnector mocks base method.
func (m *MockKafka) ResumeConnector(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeConnector", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeConnector indicates an expected call of ResumeConnector.
func (mr *MockKafkaMockRecorder) ResumeConnector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeConnector", reflect.TypeOf((*MockKafka)(nil).ResumeConnector), arg0, arg1, arg2)
}

// RevokeUserPermission mocks base method.
func (m *MockKafka) RevokeUserPermission(arg0 context.Context, arg1, arg2 string, arg3 kfmodels.Permission) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeUserPermission indicates an expected call of RevokeUserPermission.
func (mr *MockKafkaMockRecorder) RevokeUserPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserPermission", reflect.TypeOf((*MockKafka)(nil).RevokeUserPermission), arg0, arg1, arg2, arg3)
}

// StartCluster mocks base method.
func (m *MockKafka) StartCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockKafkaMockRecorder) StartCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockKafka)(nil).StartCluster), arg0, arg1)
}

// StopCluster mocks base method.
func (m *MockKafka) StopCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockKafkaMockRecorder) StopCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockKafka)(nil).StopCluster), arg0, arg1)
}

// SyncTopics mocks base method.
func (m *MockKafka) SyncTopics(arg0 context.Context, arg1 string, arg2 int64, arg3, arg4 []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncTopics", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncTopics indicates an expected call of SyncTopics.
func (mr *MockKafkaMockRecorder) SyncTopics(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTopics", reflect.TypeOf((*MockKafka)(nil).SyncTopics), arg0, arg1, arg2, arg3, arg4)
}

// Topic mocks base method.
func (m *MockKafka) Topic(arg0 context.Context, arg1, arg2 string) (kfmodels.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", arg0, arg1, arg2)
	ret0, _ := ret[0].(kfmodels.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Topic indicates an expected call of Topic.
func (mr *MockKafkaMockRecorder) Topic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockKafka)(nil).Topic), arg0, arg1, arg2)
}

// Topics mocks base method.
func (m *MockKafka) Topics(arg0 context.Context, arg1 string, arg2 int64, arg3 kafka0.TopicPageToken) ([]kfmodels.Topic, kafka0.TopicPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]kfmodels.Topic)
	ret1, _ := ret[1].(kafka0.TopicPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Topics indicates an expected call of Topics.
func (mr *MockKafkaMockRecorder) Topics(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockKafka)(nil).Topics), arg0, arg1, arg2, arg3)
}

// TopicsToSync mocks base method.
func (m *MockKafka) TopicsToSync(arg0 context.Context, arg1 string) (kafka.TopicsToSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicsToSync", arg0, arg1)
	ret0, _ := ret[0].(kafka.TopicsToSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicsToSync indicates an expected call of TopicsToSync.
func (mr *MockKafkaMockRecorder) TopicsToSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicsToSync", reflect.TypeOf((*MockKafka)(nil).TopicsToSync), arg0, arg1)
}

// UpdateConnector mocks base method.
func (m *MockKafka) UpdateConnector(arg0 context.Context, arg1 kafka.UpdateConnectorArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnector", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnector indicates an expected call of UpdateConnector.
func (mr *MockKafkaMockRecorder) UpdateConnector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnector", reflect.TypeOf((*MockKafka)(nil).UpdateConnector), arg0, arg1)
}

// UpdateTopic mocks base method.
func (m *MockKafka) UpdateTopic(arg0 context.Context, arg1 kafka.UpdateTopicArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopic", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopic indicates an expected call of UpdateTopic.
func (mr *MockKafkaMockRecorder) UpdateTopic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopic", reflect.TypeOf((*MockKafka)(nil).UpdateTopic), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockKafka) UpdateUser(arg0 context.Context, arg1 kfmodels.UpdateUserArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockKafkaMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockKafka)(nil).UpdateUser), arg0, arg1)
}

// User mocks base method.
func (m *MockKafka) User(arg0 context.Context, arg1, arg2 string) (kfmodels.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1, arg2)
	ret0, _ := ret[0].(kfmodels.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockKafkaMockRecorder) User(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockKafka)(nil).User), arg0, arg1, arg2)
}

// Users mocks base method.
func (m *MockKafka) Users(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]kfmodels.User, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]kfmodels.User)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Users indicates an expected call of Users.
func (mr *MockKafkaMockRecorder) Users(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockKafka)(nil).Users), arg0, arg1, arg2, arg3)
}

// Version mocks base method.
func (m *MockKafka) Version(arg0 context.Context, arg1 metadb.Backend, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockKafkaMockRecorder) Version(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKafka)(nil).Version), arg0, arg1, arg2)
}
