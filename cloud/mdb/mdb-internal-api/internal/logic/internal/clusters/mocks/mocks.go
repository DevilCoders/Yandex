// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/clusters (interfaces: Operator,Creator,Restorer,Reader,Modifier)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	compute "a.yandex-team.ru/cloud/mdb/internal/compute"
	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/clusters"
	sessions "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/sessions"
	models "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models"
	clusters0 "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	console "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/console"
	environment "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/environment"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	optional0 "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/optional"
	pillars "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/pillars"
	resources "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/resources"
	gomock "github.com/golang/mock/gomock"
)

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOperator) Create(arg0 context.Context, arg1 string, arg2 clusters.CreateFunc, arg3 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOperatorMockRecorder) Create(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOperator)(nil).Create), varargs...)
}

// CreateOnCluster mocks base method.
func (m *MockOperator) CreateOnCluster(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.CreateOnClusterFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOnCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOnCluster indicates an expected call of CreateOnCluster.
func (mr *MockOperatorMockRecorder) CreateOnCluster(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOnCluster", reflect.TypeOf((*MockOperator)(nil).CreateOnCluster), varargs...)
}

// Delete mocks base method.
func (m *MockOperator) Delete(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.DeleteFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOperatorMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOperator)(nil).Delete), varargs...)
}

// DeleteOnCluster mocks base method.
func (m *MockOperator) DeleteOnCluster(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.DeleteOnClusterFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOnCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOnCluster indicates an expected call of DeleteOnCluster.
func (mr *MockOperatorMockRecorder) DeleteOnCluster(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOnCluster", reflect.TypeOf((*MockOperator)(nil).DeleteOnCluster), varargs...)
}

// FakeCreate mocks base method.
func (m *MockOperator) FakeCreate(arg0 context.Context, arg1 string, arg2 clusters.FakeCreateFunc, arg3 ...clusters.OperatorOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FakeCreate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FakeCreate indicates an expected call of FakeCreate.
func (mr *MockOperatorMockRecorder) FakeCreate(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FakeCreate", reflect.TypeOf((*MockOperator)(nil).FakeCreate), varargs...)
}

// ModifyOnCluster mocks base method.
func (m *MockOperator) ModifyOnCluster(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.ModifyOnClusterFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyOnCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyOnCluster indicates an expected call of ModifyOnCluster.
func (mr *MockOperatorMockRecorder) ModifyOnCluster(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOnCluster", reflect.TypeOf((*MockOperator)(nil).ModifyOnCluster), varargs...)
}

// ModifyOnClusterByBackupID mocks base method.
func (m *MockOperator) ModifyOnClusterByBackupID(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.ModifyOnClusterFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyOnClusterByBackupID", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyOnClusterByBackupID indicates an expected call of ModifyOnClusterByBackupID.
func (mr *MockOperatorMockRecorder) ModifyOnClusterByBackupID(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOnClusterByBackupID", reflect.TypeOf((*MockOperator)(nil).ModifyOnClusterByBackupID), varargs...)
}

// ModifyOnClusterWithoutRevChanging mocks base method.
func (m *MockOperator) ModifyOnClusterWithoutRevChanging(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.ModifyOnClusterFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyOnClusterWithoutRevChanging", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyOnClusterWithoutRevChanging indicates an expected call of ModifyOnClusterWithoutRevChanging.
func (mr *MockOperatorMockRecorder) ModifyOnClusterWithoutRevChanging(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOnClusterWithoutRevChanging", reflect.TypeOf((*MockOperator)(nil).ModifyOnClusterWithoutRevChanging), varargs...)
}

// ModifyOnNotRunningCluster mocks base method.
func (m *MockOperator) ModifyOnNotRunningCluster(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.ModifyOnNotRunningClusterFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyOnNotRunningCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyOnNotRunningCluster indicates an expected call of ModifyOnNotRunningCluster.
func (mr *MockOperatorMockRecorder) ModifyOnNotRunningCluster(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOnNotRunningCluster", reflect.TypeOf((*MockOperator)(nil).ModifyOnNotRunningCluster), varargs...)
}

// ModifyOnNotStoppedCluster mocks base method.
func (m *MockOperator) ModifyOnNotStoppedCluster(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.ModifyOnNotStoppedClusterFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyOnNotStoppedCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyOnNotStoppedCluster indicates an expected call of ModifyOnNotStoppedCluster.
func (mr *MockOperatorMockRecorder) ModifyOnNotStoppedCluster(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOnNotStoppedCluster", reflect.TypeOf((*MockOperator)(nil).ModifyOnNotStoppedCluster), varargs...)
}

// MoveCluster mocks base method.
func (m *MockOperator) MoveCluster(arg0 context.Context, arg1, arg2 string, arg3 clusters0.Type, arg4 clusters.MoveClusterFunc) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCluster", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCluster indicates an expected call of MoveCluster.
func (mr *MockOperatorMockRecorder) MoveCluster(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCluster", reflect.TypeOf((*MockOperator)(nil).MoveCluster), arg0, arg1, arg2, arg3, arg4)
}

// ReadCluster mocks base method.
func (m *MockOperator) ReadCluster(arg0 context.Context, arg1 string, arg2 clusters.ReadClusterFunc, arg3 ...clusters.OperatorOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadCluster indicates an expected call of ReadCluster.
func (mr *MockOperatorMockRecorder) ReadCluster(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCluster", reflect.TypeOf((*MockOperator)(nil).ReadCluster), varargs...)
}

// ReadOnCluster mocks base method.
func (m *MockOperator) ReadOnCluster(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 clusters.ReadOnClusterFunc, arg4 ...clusters.OperatorOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadOnCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadOnCluster indicates an expected call of ReadOnCluster.
func (mr *MockOperatorMockRecorder) ReadOnCluster(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnCluster", reflect.TypeOf((*MockOperator)(nil).ReadOnCluster), varargs...)
}

// ReadOnDeletedCluster mocks base method.
func (m *MockOperator) ReadOnDeletedCluster(arg0 context.Context, arg1 string, arg2 clusters.ReadOnDeletedClusterFunc, arg3 ...clusters.OperatorOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadOnDeletedCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadOnDeletedCluster indicates an expected call of ReadOnDeletedCluster.
func (mr *MockOperatorMockRecorder) ReadOnDeletedCluster(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnDeletedCluster", reflect.TypeOf((*MockOperator)(nil).ReadOnDeletedCluster), varargs...)
}

// ReadOnFolder mocks base method.
func (m *MockOperator) ReadOnFolder(arg0 context.Context, arg1 string, arg2 clusters.ReadOnFolderFunc, arg3 ...clusters.OperatorOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadOnFolder", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadOnFolder indicates an expected call of ReadOnFolder.
func (mr *MockOperatorMockRecorder) ReadOnFolder(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnFolder", reflect.TypeOf((*MockOperator)(nil).ReadOnFolder), varargs...)
}

// Restore mocks base method.
func (m *MockOperator) Restore(arg0 context.Context, arg1 string, arg2 clusters.RestoreFunc, arg3 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Restore", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockOperatorMockRecorder) Restore(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockOperator)(nil).Restore), varargs...)
}

// RestoreWithoutBackupService mocks base method.
func (m *MockOperator) RestoreWithoutBackupService(arg0 context.Context, arg1 optional.String, arg2 string, arg3 clusters.RestoreFunc, arg4 ...clusters.OperatorOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreWithoutBackupService", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWithoutBackupService indicates an expected call of RestoreWithoutBackupService.
func (mr *MockOperatorMockRecorder) RestoreWithoutBackupService(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWithoutBackupService", reflect.TypeOf((*MockOperator)(nil).RestoreWithoutBackupService), varargs...)
}

// MockCreator is a mock of Creator interface.
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
}

// MockCreatorMockRecorder is the mock recorder for MockCreator.
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance.
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// AddClusterPillar mocks base method.
func (m *MockCreator) AddClusterPillar(arg0 context.Context, arg1 string, arg2 int64, arg3 clusters.Pillar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterPillar", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClusterPillar indicates an expected call of AddClusterPillar.
func (mr *MockCreatorMockRecorder) AddClusterPillar(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterPillar", reflect.TypeOf((*MockCreator)(nil).AddClusterPillar), arg0, arg1, arg2, arg3)
}

// AddDisk mocks base method.
func (m *MockCreator) AddDisk(arg0 context.Context, arg1 models.AddDiskArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDisk", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDisk indicates an expected call of AddDisk.
func (mr *MockCreatorMockRecorder) AddDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisk", reflect.TypeOf((*MockCreator)(nil).AddDisk), arg0, arg1)
}

// AddDiskPlacementGroup mocks base method.
func (m *MockCreator) AddDiskPlacementGroup(arg0 context.Context, arg1 models.AddDiskPlacementGroupArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDiskPlacementGroup", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDiskPlacementGroup indicates an expected call of AddDiskPlacementGroup.
func (mr *MockCreatorMockRecorder) AddDiskPlacementGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiskPlacementGroup", reflect.TypeOf((*MockCreator)(nil).AddDiskPlacementGroup), arg0, arg1)
}

// AddHostPillar mocks base method.
func (m *MockCreator) AddHostPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHostPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHostPillar indicates an expected call of AddHostPillar.
func (mr *MockCreatorMockRecorder) AddHostPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHostPillar", reflect.TypeOf((*MockCreator)(nil).AddHostPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddHosts mocks base method.
func (m *MockCreator) AddHosts(arg0 context.Context, arg1 []models.AddHostArgs) ([]hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHosts", arg0, arg1)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHosts indicates an expected call of AddHosts.
func (mr *MockCreatorMockRecorder) AddHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHosts", reflect.TypeOf((*MockCreator)(nil).AddHosts), arg0, arg1)
}

// AddPlacementGroup mocks base method.
func (m *MockCreator) AddPlacementGroup(arg0 context.Context, arg1 models.AddPlacementGroupArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlacementGroup", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlacementGroup indicates an expected call of AddPlacementGroup.
func (mr *MockCreatorMockRecorder) AddPlacementGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlacementGroup", reflect.TypeOf((*MockCreator)(nil).AddPlacementGroup), arg0, arg1)
}

// AddShardPillar mocks base method.
func (m *MockCreator) AddShardPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShardPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShardPillar indicates an expected call of AddShardPillar.
func (mr *MockCreatorMockRecorder) AddShardPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShardPillar", reflect.TypeOf((*MockCreator)(nil).AddShardPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddSubClusterPillar mocks base method.
func (m *MockCreator) AddSubClusterPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubClusterPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubClusterPillar indicates an expected call of AddSubClusterPillar.
func (mr *MockCreatorMockRecorder) AddSubClusterPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubClusterPillar", reflect.TypeOf((*MockCreator)(nil).AddSubClusterPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddTargetPillar mocks base method.
func (m *MockCreator) AddTargetPillar(arg0 context.Context, arg1 string, arg2 pillars.Marshaler) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTargetPillar", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTargetPillar indicates an expected call of AddTargetPillar.
func (mr *MockCreatorMockRecorder) AddTargetPillar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTargetPillar", reflect.TypeOf((*MockCreator)(nil).AddTargetPillar), arg0, arg1, arg2)
}

// CreateCluster mocks base method.
func (m *MockCreator) CreateCluster(arg0 context.Context, arg1 models.CreateClusterArgs) (clusters0.Cluster, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(clusters0.Cluster)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockCreatorMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockCreator)(nil).CreateCluster), arg0, arg1)
}

// CreateKubernetesSubCluster mocks base method.
func (m *MockCreator) CreateKubernetesSubCluster(arg0 context.Context, arg1 models.CreateSubClusterArgs) (clusters0.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKubernetesSubCluster", arg0, arg1)
	ret0, _ := ret[0].(clusters0.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKubernetesSubCluster indicates an expected call of CreateKubernetesSubCluster.
func (mr *MockCreatorMockRecorder) CreateKubernetesSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubernetesSubCluster", reflect.TypeOf((*MockCreator)(nil).CreateKubernetesSubCluster), arg0, arg1)
}

// CreateShard mocks base method.
func (m *MockCreator) CreateShard(arg0 context.Context, arg1 models.CreateShardArgs) (clusters0.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShard", arg0, arg1)
	ret0, _ := ret[0].(clusters0.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShard indicates an expected call of CreateShard.
func (mr *MockCreatorMockRecorder) CreateShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShard", reflect.TypeOf((*MockCreator)(nil).CreateShard), arg0, arg1)
}

// CreateSubCluster mocks base method.
func (m *MockCreator) CreateSubCluster(arg0 context.Context, arg1 models.CreateSubClusterArgs) (clusters0.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubCluster", arg0, arg1)
	ret0, _ := ret[0].(clusters0.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubCluster indicates an expected call of CreateSubCluster.
func (mr *MockCreatorMockRecorder) CreateSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubCluster", reflect.TypeOf((*MockCreator)(nil).CreateSubCluster), arg0, arg1)
}

// DiskTypeExtIDByResourcePreset mocks base method.
func (m *MockCreator) DiskTypeExtIDByResourcePreset(arg0 context.Context, arg1 clusters0.Type, arg2 hosts.Role, arg3 string, arg4, arg5 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskTypeExtIDByResourcePreset", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskTypeExtIDByResourcePreset indicates an expected call of DiskTypeExtIDByResourcePreset.
func (mr *MockCreatorMockRecorder) DiskTypeExtIDByResourcePreset(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskTypeExtIDByResourcePreset", reflect.TypeOf((*MockCreator)(nil).DiskTypeExtIDByResourcePreset), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EstimateBilling mocks base method.
func (m *MockCreator) EstimateBilling(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 []clusters.HostBillingSpec, arg4 environment.CloudType) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateBilling", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateBilling indicates an expected call of EstimateBilling.
func (mr *MockCreatorMockRecorder) EstimateBilling(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateBilling", reflect.TypeOf((*MockCreator)(nil).EstimateBilling), arg0, arg1, arg2, arg3, arg4)
}

// GenerateFQDN mocks base method.
func (m *MockCreator) GenerateFQDN(arg0 string, arg1 environment.VType, arg2 compute.Platform) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFQDN", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFQDN indicates an expected call of GenerateFQDN.
func (mr *MockCreatorMockRecorder) GenerateFQDN(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFQDN", reflect.TypeOf((*MockCreator)(nil).GenerateFQDN), arg0, arg1, arg2)
}

// GenerateSemanticFQDNs mocks base method.
func (m *MockCreator) GenerateSemanticFQDNs(arg0 environment.CloudType, arg1 clusters0.Type, arg2, arg3 clusters.ZoneHostsList, arg4, arg5 string, arg6 environment.VType, arg7 compute.Platform) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSemanticFQDNs", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSemanticFQDNs indicates an expected call of GenerateSemanticFQDNs.
func (mr *MockCreatorMockRecorder) GenerateSemanticFQDNs(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSemanticFQDNs", reflect.TypeOf((*MockCreator)(nil).GenerateSemanticFQDNs), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ListAvailableZones mocks base method.
func (m *MockCreator) ListAvailableZones(arg0 context.Context, arg1 sessions.Session, arg2 bool) ([]environment.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableZones", arg0, arg1, arg2)
	ret0, _ := ret[0].([]environment.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableZones indicates an expected call of ListAvailableZones.
func (mr *MockCreatorMockRecorder) ListAvailableZones(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableZones", reflect.TypeOf((*MockCreator)(nil).ListAvailableZones), arg0, arg1, arg2)
}

// ListAvailableZonesForCloudAndRegion mocks base method.
func (m *MockCreator) ListAvailableZonesForCloudAndRegion(arg0 context.Context, arg1 sessions.Session, arg2 environment.CloudType, arg3 string, arg4 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableZonesForCloudAndRegion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableZonesForCloudAndRegion indicates an expected call of ListAvailableZonesForCloudAndRegion.
func (mr *MockCreatorMockRecorder) ListAvailableZonesForCloudAndRegion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableZonesForCloudAndRegion", reflect.TypeOf((*MockCreator)(nil).ListAvailableZonesForCloudAndRegion), arg0, arg1, arg2, arg3, arg4)
}

// RegionByName mocks base method.
func (m *MockCreator) RegionByName(arg0 context.Context, arg1 string) (environment.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionByName", arg0, arg1)
	ret0, _ := ret[0].(environment.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionByName indicates an expected call of RegionByName.
func (mr *MockCreatorMockRecorder) RegionByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionByName", reflect.TypeOf((*MockCreator)(nil).RegionByName), arg0, arg1)
}

// ResourcePresetByCPU mocks base method.
func (m *MockCreator) ResourcePresetByCPU(arg0 context.Context, arg1 clusters0.Type, arg2 hosts.Role, arg3 optional.String, arg4 optional.Int64, arg5 float64, arg6, arg7 []string) (resources.DefaultPreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetByCPU", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(resources.DefaultPreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetByCPU indicates an expected call of ResourcePresetByCPU.
func (mr *MockCreatorMockRecorder) ResourcePresetByCPU(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetByCPU", reflect.TypeOf((*MockCreator)(nil).ResourcePresetByCPU), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ResourcePresetFromDefaultConfig mocks base method.
func (m *MockCreator) ResourcePresetFromDefaultConfig(arg0 clusters0.Type, arg1 hosts.Role) (resources.DefaultPreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetFromDefaultConfig", arg0, arg1)
	ret0, _ := ret[0].(resources.DefaultPreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetFromDefaultConfig indicates an expected call of ResourcePresetFromDefaultConfig.
func (mr *MockCreatorMockRecorder) ResourcePresetFromDefaultConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetFromDefaultConfig", reflect.TypeOf((*MockCreator)(nil).ResourcePresetFromDefaultConfig), arg0, arg1)
}

// SelectZonesForCloudAndRegion mocks base method.
func (m *MockCreator) SelectZonesForCloudAndRegion(arg0 context.Context, arg1 sessions.Session, arg2 environment.CloudType, arg3 string, arg4 bool, arg5 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectZonesForCloudAndRegion", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectZonesForCloudAndRegion indicates an expected call of SelectZonesForCloudAndRegion.
func (mr *MockCreatorMockRecorder) SelectZonesForCloudAndRegion(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectZonesForCloudAndRegion", reflect.TypeOf((*MockCreator)(nil).SelectZonesForCloudAndRegion), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetDefaultVersionCluster mocks base method.
func (m *MockCreator) SetDefaultVersionCluster(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 environment.SaltEnv, arg4, arg5 string, arg6 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultVersionCluster", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultVersionCluster indicates an expected call of SetDefaultVersionCluster.
func (mr *MockCreatorMockRecorder) SetDefaultVersionCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultVersionCluster", reflect.TypeOf((*MockCreator)(nil).SetDefaultVersionCluster), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ValidateResources mocks base method.
func (m *MockCreator) ValidateResources(arg0 context.Context, arg1 sessions.Session, arg2 clusters0.Type, arg3 ...clusters.HostGroup) (clusters.ResolvedHostGroups, bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateResources", varargs...)
	ret0, _ := ret[0].(clusters.ResolvedHostGroups)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateResources indicates an expected call of ValidateResources.
func (mr *MockCreatorMockRecorder) ValidateResources(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResources", reflect.TypeOf((*MockCreator)(nil).ValidateResources), varargs...)
}

// MockRestorer is a mock of Restorer interface.
type MockRestorer struct {
	ctrl     *gomock.Controller
	recorder *MockRestorerMockRecorder
}

// MockRestorerMockRecorder is the mock recorder for MockRestorer.
type MockRestorerMockRecorder struct {
	mock *MockRestorer
}

// NewMockRestorer creates a new mock instance.
func NewMockRestorer(ctrl *gomock.Controller) *MockRestorer {
	mock := &MockRestorer{ctrl: ctrl}
	mock.recorder = &MockRestorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestorer) EXPECT() *MockRestorerMockRecorder {
	return m.recorder
}

// AddClusterPillar mocks base method.
func (m *MockRestorer) AddClusterPillar(arg0 context.Context, arg1 string, arg2 int64, arg3 clusters.Pillar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterPillar", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClusterPillar indicates an expected call of AddClusterPillar.
func (mr *MockRestorerMockRecorder) AddClusterPillar(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterPillar", reflect.TypeOf((*MockRestorer)(nil).AddClusterPillar), arg0, arg1, arg2, arg3)
}

// AddDisk mocks base method.
func (m *MockRestorer) AddDisk(arg0 context.Context, arg1 models.AddDiskArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDisk", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDisk indicates an expected call of AddDisk.
func (mr *MockRestorerMockRecorder) AddDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisk", reflect.TypeOf((*MockRestorer)(nil).AddDisk), arg0, arg1)
}

// AddDiskPlacementGroup mocks base method.
func (m *MockRestorer) AddDiskPlacementGroup(arg0 context.Context, arg1 models.AddDiskPlacementGroupArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDiskPlacementGroup", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDiskPlacementGroup indicates an expected call of AddDiskPlacementGroup.
func (mr *MockRestorerMockRecorder) AddDiskPlacementGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiskPlacementGroup", reflect.TypeOf((*MockRestorer)(nil).AddDiskPlacementGroup), arg0, arg1)
}

// AddHostPillar mocks base method.
func (m *MockRestorer) AddHostPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHostPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHostPillar indicates an expected call of AddHostPillar.
func (mr *MockRestorerMockRecorder) AddHostPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHostPillar", reflect.TypeOf((*MockRestorer)(nil).AddHostPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddHosts mocks base method.
func (m *MockRestorer) AddHosts(arg0 context.Context, arg1 []models.AddHostArgs) ([]hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHosts", arg0, arg1)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHosts indicates an expected call of AddHosts.
func (mr *MockRestorerMockRecorder) AddHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHosts", reflect.TypeOf((*MockRestorer)(nil).AddHosts), arg0, arg1)
}

// AddPlacementGroup mocks base method.
func (m *MockRestorer) AddPlacementGroup(arg0 context.Context, arg1 models.AddPlacementGroupArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlacementGroup", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlacementGroup indicates an expected call of AddPlacementGroup.
func (mr *MockRestorerMockRecorder) AddPlacementGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlacementGroup", reflect.TypeOf((*MockRestorer)(nil).AddPlacementGroup), arg0, arg1)
}

// AddShardPillar mocks base method.
func (m *MockRestorer) AddShardPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShardPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShardPillar indicates an expected call of AddShardPillar.
func (mr *MockRestorerMockRecorder) AddShardPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShardPillar", reflect.TypeOf((*MockRestorer)(nil).AddShardPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddSubClusterPillar mocks base method.
func (m *MockRestorer) AddSubClusterPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubClusterPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubClusterPillar indicates an expected call of AddSubClusterPillar.
func (mr *MockRestorerMockRecorder) AddSubClusterPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubClusterPillar", reflect.TypeOf((*MockRestorer)(nil).AddSubClusterPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddTargetPillar mocks base method.
func (m *MockRestorer) AddTargetPillar(arg0 context.Context, arg1 string, arg2 pillars.Marshaler) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTargetPillar", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTargetPillar indicates an expected call of AddTargetPillar.
func (mr *MockRestorerMockRecorder) AddTargetPillar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTargetPillar", reflect.TypeOf((*MockRestorer)(nil).AddTargetPillar), arg0, arg1, arg2)
}

// ClusterAndResourcesAtTime mocks base method.
func (m *MockRestorer) ClusterAndResourcesAtTime(arg0 context.Context, arg1 string, arg2 time.Time, arg3 clusters0.Type, arg4 hosts.Role) (clusters.Cluster, models.ClusterResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAndResourcesAtTime", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(clusters.Cluster)
	ret1, _ := ret[1].(models.ClusterResources)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterAndResourcesAtTime indicates an expected call of ClusterAndResourcesAtTime.
func (mr *MockRestorerMockRecorder) ClusterAndResourcesAtTime(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAndResourcesAtTime", reflect.TypeOf((*MockRestorer)(nil).ClusterAndResourcesAtTime), arg0, arg1, arg2, arg3, arg4)
}

// ClusterAndShardResourcesAtTime mocks base method.
func (m *MockRestorer) ClusterAndShardResourcesAtTime(arg0 context.Context, arg1 string, arg2 time.Time, arg3 clusters0.Type, arg4 string) (clusters.Cluster, models.ClusterResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAndShardResourcesAtTime", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(clusters.Cluster)
	ret1, _ := ret[1].(models.ClusterResources)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterAndShardResourcesAtTime indicates an expected call of ClusterAndShardResourcesAtTime.
func (mr *MockRestorerMockRecorder) ClusterAndShardResourcesAtTime(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAndShardResourcesAtTime", reflect.TypeOf((*MockRestorer)(nil).ClusterAndShardResourcesAtTime), arg0, arg1, arg2, arg3, arg4)
}

// ClusterAtTime mocks base method.
func (m *MockRestorer) ClusterAtTime(arg0 context.Context, arg1 string, arg2 time.Time, arg3 clusters0.Type) (clusters.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAtTime", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(clusters.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterAtTime indicates an expected call of ClusterAtTime.
func (mr *MockRestorerMockRecorder) ClusterAtTime(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAtTime", reflect.TypeOf((*MockRestorer)(nil).ClusterAtTime), arg0, arg1, arg2, arg3)
}

// ClusterByClusterID mocks base method.
func (m *MockRestorer) ClusterByClusterID(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 models.Visibility) (clusters.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterByClusterID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(clusters.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterByClusterID indicates an expected call of ClusterByClusterID.
func (mr *MockRestorerMockRecorder) ClusterByClusterID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterByClusterID", reflect.TypeOf((*MockRestorer)(nil).ClusterByClusterID), arg0, arg1, arg2, arg3)
}

// CreateCluster mocks base method.
func (m *MockRestorer) CreateCluster(arg0 context.Context, arg1 models.CreateClusterArgs) (clusters0.Cluster, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(clusters0.Cluster)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockRestorerMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockRestorer)(nil).CreateCluster), arg0, arg1)
}

// CreateKubernetesSubCluster mocks base method.
func (m *MockRestorer) CreateKubernetesSubCluster(arg0 context.Context, arg1 models.CreateSubClusterArgs) (clusters0.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKubernetesSubCluster", arg0, arg1)
	ret0, _ := ret[0].(clusters0.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKubernetesSubCluster indicates an expected call of CreateKubernetesSubCluster.
func (mr *MockRestorerMockRecorder) CreateKubernetesSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubernetesSubCluster", reflect.TypeOf((*MockRestorer)(nil).CreateKubernetesSubCluster), arg0, arg1)
}

// CreateShard mocks base method.
func (m *MockRestorer) CreateShard(arg0 context.Context, arg1 models.CreateShardArgs) (clusters0.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShard", arg0, arg1)
	ret0, _ := ret[0].(clusters0.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShard indicates an expected call of CreateShard.
func (mr *MockRestorerMockRecorder) CreateShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShard", reflect.TypeOf((*MockRestorer)(nil).CreateShard), arg0, arg1)
}

// CreateSubCluster mocks base method.
func (m *MockRestorer) CreateSubCluster(arg0 context.Context, arg1 models.CreateSubClusterArgs) (clusters0.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubCluster", arg0, arg1)
	ret0, _ := ret[0].(clusters0.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubCluster indicates an expected call of CreateSubCluster.
func (mr *MockRestorerMockRecorder) CreateSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubCluster", reflect.TypeOf((*MockRestorer)(nil).CreateSubCluster), arg0, arg1)
}

// DiskTypeExtIDByResourcePreset mocks base method.
func (m *MockRestorer) DiskTypeExtIDByResourcePreset(arg0 context.Context, arg1 clusters0.Type, arg2 hosts.Role, arg3 string, arg4, arg5 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskTypeExtIDByResourcePreset", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskTypeExtIDByResourcePreset indicates an expected call of DiskTypeExtIDByResourcePreset.
func (mr *MockRestorerMockRecorder) DiskTypeExtIDByResourcePreset(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskTypeExtIDByResourcePreset", reflect.TypeOf((*MockRestorer)(nil).DiskTypeExtIDByResourcePreset), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EstimateBilling mocks base method.
func (m *MockRestorer) EstimateBilling(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 []clusters.HostBillingSpec, arg4 environment.CloudType) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateBilling", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateBilling indicates an expected call of EstimateBilling.
func (mr *MockRestorerMockRecorder) EstimateBilling(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateBilling", reflect.TypeOf((*MockRestorer)(nil).EstimateBilling), arg0, arg1, arg2, arg3, arg4)
}

// GenerateFQDN mocks base method.
func (m *MockRestorer) GenerateFQDN(arg0 string, arg1 environment.VType, arg2 compute.Platform) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFQDN", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFQDN indicates an expected call of GenerateFQDN.
func (mr *MockRestorerMockRecorder) GenerateFQDN(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFQDN", reflect.TypeOf((*MockRestorer)(nil).GenerateFQDN), arg0, arg1, arg2)
}

// GenerateSemanticFQDNs mocks base method.
func (m *MockRestorer) GenerateSemanticFQDNs(arg0 environment.CloudType, arg1 clusters0.Type, arg2, arg3 clusters.ZoneHostsList, arg4, arg5 string, arg6 environment.VType, arg7 compute.Platform) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSemanticFQDNs", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSemanticFQDNs indicates an expected call of GenerateSemanticFQDNs.
func (mr *MockRestorerMockRecorder) GenerateSemanticFQDNs(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSemanticFQDNs", reflect.TypeOf((*MockRestorer)(nil).GenerateSemanticFQDNs), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ListAvailableZones mocks base method.
func (m *MockRestorer) ListAvailableZones(arg0 context.Context, arg1 sessions.Session, arg2 bool) ([]environment.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableZones", arg0, arg1, arg2)
	ret0, _ := ret[0].([]environment.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableZones indicates an expected call of ListAvailableZones.
func (mr *MockRestorerMockRecorder) ListAvailableZones(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableZones", reflect.TypeOf((*MockRestorer)(nil).ListAvailableZones), arg0, arg1, arg2)
}

// ListAvailableZonesForCloudAndRegion mocks base method.
func (m *MockRestorer) ListAvailableZonesForCloudAndRegion(arg0 context.Context, arg1 sessions.Session, arg2 environment.CloudType, arg3 string, arg4 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableZonesForCloudAndRegion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableZonesForCloudAndRegion indicates an expected call of ListAvailableZonesForCloudAndRegion.
func (mr *MockRestorerMockRecorder) ListAvailableZonesForCloudAndRegion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableZonesForCloudAndRegion", reflect.TypeOf((*MockRestorer)(nil).ListAvailableZonesForCloudAndRegion), arg0, arg1, arg2, arg3, arg4)
}

// RegionByName mocks base method.
func (m *MockRestorer) RegionByName(arg0 context.Context, arg1 string) (environment.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionByName", arg0, arg1)
	ret0, _ := ret[0].(environment.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionByName indicates an expected call of RegionByName.
func (mr *MockRestorerMockRecorder) RegionByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionByName", reflect.TypeOf((*MockRestorer)(nil).RegionByName), arg0, arg1)
}

// ResourcePresetByCPU mocks base method.
func (m *MockRestorer) ResourcePresetByCPU(arg0 context.Context, arg1 clusters0.Type, arg2 hosts.Role, arg3 optional.String, arg4 optional.Int64, arg5 float64, arg6, arg7 []string) (resources.DefaultPreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetByCPU", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(resources.DefaultPreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetByCPU indicates an expected call of ResourcePresetByCPU.
func (mr *MockRestorerMockRecorder) ResourcePresetByCPU(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetByCPU", reflect.TypeOf((*MockRestorer)(nil).ResourcePresetByCPU), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ResourcePresetFromDefaultConfig mocks base method.
func (m *MockRestorer) ResourcePresetFromDefaultConfig(arg0 clusters0.Type, arg1 hosts.Role) (resources.DefaultPreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetFromDefaultConfig", arg0, arg1)
	ret0, _ := ret[0].(resources.DefaultPreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetFromDefaultConfig indicates an expected call of ResourcePresetFromDefaultConfig.
func (mr *MockRestorerMockRecorder) ResourcePresetFromDefaultConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetFromDefaultConfig", reflect.TypeOf((*MockRestorer)(nil).ResourcePresetFromDefaultConfig), arg0, arg1)
}

// SelectZonesForCloudAndRegion mocks base method.
func (m *MockRestorer) SelectZonesForCloudAndRegion(arg0 context.Context, arg1 sessions.Session, arg2 environment.CloudType, arg3 string, arg4 bool, arg5 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectZonesForCloudAndRegion", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectZonesForCloudAndRegion indicates an expected call of SelectZonesForCloudAndRegion.
func (mr *MockRestorerMockRecorder) SelectZonesForCloudAndRegion(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectZonesForCloudAndRegion", reflect.TypeOf((*MockRestorer)(nil).SelectZonesForCloudAndRegion), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetDefaultVersionCluster mocks base method.
func (m *MockRestorer) SetDefaultVersionCluster(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 environment.SaltEnv, arg4, arg5 string, arg6 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultVersionCluster", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultVersionCluster indicates an expected call of SetDefaultVersionCluster.
func (mr *MockRestorerMockRecorder) SetDefaultVersionCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultVersionCluster", reflect.TypeOf((*MockRestorer)(nil).SetDefaultVersionCluster), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ShardResourcesAtRevision mocks base method.
func (m *MockRestorer) ShardResourcesAtRevision(arg0 context.Context, arg1, arg2 string, arg3 int64) (models.ClusterResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardResourcesAtRevision", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.ClusterResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardResourcesAtRevision indicates an expected call of ShardResourcesAtRevision.
func (mr *MockRestorerMockRecorder) ShardResourcesAtRevision(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardResourcesAtRevision", reflect.TypeOf((*MockRestorer)(nil).ShardResourcesAtRevision), arg0, arg1, arg2, arg3)
}

// ValidateResources mocks base method.
func (m *MockRestorer) ValidateResources(arg0 context.Context, arg1 sessions.Session, arg2 clusters0.Type, arg3 ...clusters.HostGroup) (clusters.ResolvedHostGroups, bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateResources", varargs...)
	ret0, _ := ret[0].(clusters.ResolvedHostGroups)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateResources indicates an expected call of ValidateResources.
func (mr *MockRestorerMockRecorder) ValidateResources(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResources", reflect.TypeOf((*MockRestorer)(nil).ValidateResources), varargs...)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// AnyHost mocks base method.
func (m *MockReader) AnyHost(arg0 context.Context, arg1 string) (hosts.HostExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnyHost", arg0, arg1)
	ret0, _ := ret[0].(hosts.HostExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnyHost indicates an expected call of AnyHost.
func (mr *MockReaderMockRecorder) AnyHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnyHost", reflect.TypeOf((*MockReader)(nil).AnyHost), arg0, arg1)
}

// ClusterAndResourcesAtTime mocks base method.
func (m *MockReader) ClusterAndResourcesAtTime(arg0 context.Context, arg1 string, arg2 time.Time, arg3 clusters0.Type, arg4 hosts.Role) (clusters.Cluster, models.ClusterResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAndResourcesAtTime", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(clusters.Cluster)
	ret1, _ := ret[1].(models.ClusterResources)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterAndResourcesAtTime indicates an expected call of ClusterAndResourcesAtTime.
func (mr *MockReaderMockRecorder) ClusterAndResourcesAtTime(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAndResourcesAtTime", reflect.TypeOf((*MockReader)(nil).ClusterAndResourcesAtTime), arg0, arg1, arg2, arg3, arg4)
}

// ClusterByClusterID mocks base method.
func (m *MockReader) ClusterByClusterID(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 models.Visibility) (clusters.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterByClusterID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(clusters.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterByClusterID indicates an expected call of ClusterByClusterID.
func (mr *MockReaderMockRecorder) ClusterByClusterID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterByClusterID", reflect.TypeOf((*MockReader)(nil).ClusterByClusterID), arg0, arg1, arg2, arg3)
}

// ClusterByClusterIDAtRevision mocks base method.
func (m *MockReader) ClusterByClusterIDAtRevision(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 int64) (clusters.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterByClusterIDAtRevision", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(clusters.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterByClusterIDAtRevision indicates an expected call of ClusterByClusterIDAtRevision.
func (mr *MockReaderMockRecorder) ClusterByClusterIDAtRevision(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterByClusterIDAtRevision", reflect.TypeOf((*MockReader)(nil).ClusterByClusterIDAtRevision), arg0, arg1, arg2, arg3)
}

// ClusterExtendedByClusterID mocks base method.
func (m *MockReader) ClusterExtendedByClusterID(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 models.Visibility, arg4 sessions.Session) (clusters0.ClusterExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterExtendedByClusterID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(clusters0.ClusterExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterExtendedByClusterID indicates an expected call of ClusterExtendedByClusterID.
func (mr *MockReaderMockRecorder) ClusterExtendedByClusterID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterExtendedByClusterID", reflect.TypeOf((*MockReader)(nil).ClusterExtendedByClusterID), arg0, arg1, arg2, arg3, arg4)
}

// ClusterTypePillar mocks base method.
func (m *MockReader) ClusterTypePillar(arg0 context.Context, arg1 clusters0.Type, arg2 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterTypePillar", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClusterTypePillar indicates an expected call of ClusterTypePillar.
func (mr *MockReaderMockRecorder) ClusterTypePillar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterTypePillar", reflect.TypeOf((*MockReader)(nil).ClusterTypePillar), arg0, arg1, arg2)
}

// ClusterUsesBackupService mocks base method.
func (m *MockReader) ClusterUsesBackupService(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterUsesBackupService", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterUsesBackupService indicates an expected call of ClusterUsesBackupService.
func (mr *MockReaderMockRecorder) ClusterUsesBackupService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterUsesBackupService", reflect.TypeOf((*MockReader)(nil).ClusterUsesBackupService), arg0, arg1)
}

// ClusterVersions mocks base method.
func (m *MockReader) ClusterVersions(arg0 context.Context, arg1 string) ([]console.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterVersions", arg0, arg1)
	ret0, _ := ret[0].([]console.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterVersions indicates an expected call of ClusterVersions.
func (mr *MockReaderMockRecorder) ClusterVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterVersions", reflect.TypeOf((*MockReader)(nil).ClusterVersions), arg0, arg1)
}

// ClusterVersionsAtTime mocks base method.
func (m *MockReader) ClusterVersionsAtTime(arg0 context.Context, arg1 string, arg2 time.Time) ([]console.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterVersionsAtTime", arg0, arg1, arg2)
	ret0, _ := ret[0].([]console.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterVersionsAtTime indicates an expected call of ClusterVersionsAtTime.
func (mr *MockReaderMockRecorder) ClusterVersionsAtTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterVersionsAtTime", reflect.TypeOf((*MockReader)(nil).ClusterVersionsAtTime), arg0, arg1, arg2)
}

// Clusters mocks base method.
func (m *MockReader) Clusters(arg0 context.Context, arg1 models.ListClusterArgs) ([]clusters.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters", arg0, arg1)
	ret0, _ := ret[0].([]clusters.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clusters indicates an expected call of Clusters.
func (mr *MockReaderMockRecorder) Clusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockReader)(nil).Clusters), arg0, arg1)
}

// ClustersExtended mocks base method.
func (m *MockReader) ClustersExtended(arg0 context.Context, arg1 models.ListClusterArgs, arg2 sessions.Session) ([]clusters0.ClusterExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClustersExtended", arg0, arg1, arg2)
	ret0, _ := ret[0].([]clusters0.ClusterExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClustersExtended indicates an expected call of ClustersExtended.
func (mr *MockReaderMockRecorder) ClustersExtended(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClustersExtended", reflect.TypeOf((*MockReader)(nil).ClustersExtended), arg0, arg1, arg2)
}

// EstimateBilling mocks base method.
func (m *MockReader) EstimateBilling(arg0 context.Context, arg1 string, arg2 clusters0.Type, arg3 []clusters.HostBillingSpec, arg4 environment.CloudType) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateBilling", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateBilling indicates an expected call of EstimateBilling.
func (mr *MockReaderMockRecorder) EstimateBilling(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateBilling", reflect.TypeOf((*MockReader)(nil).EstimateBilling), arg0, arg1, arg2, arg3, arg4)
}

// HostPillar mocks base method.
func (m *MockReader) HostPillar(arg0 context.Context, arg1 string, arg2 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostPillar", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HostPillar indicates an expected call of HostPillar.
func (mr *MockReaderMockRecorder) HostPillar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostPillar", reflect.TypeOf((*MockReader)(nil).HostPillar), arg0, arg1, arg2)
}

// KubernetesSubClusters mocks base method.
func (m *MockReader) KubernetesSubClusters(arg0 context.Context, arg1 string) ([]clusters0.KubernetesSubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesSubClusters", arg0, arg1)
	ret0, _ := ret[0].([]clusters0.KubernetesSubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesSubClusters indicates an expected call of KubernetesSubClusters.
func (mr *MockReaderMockRecorder) KubernetesSubClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesSubClusters", reflect.TypeOf((*MockReader)(nil).KubernetesSubClusters), arg0, arg1)
}

// ListHosts mocks base method.
func (m *MockReader) ListHosts(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]hosts.HostExtended, int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListHosts indicates an expected call of ListHosts.
func (mr *MockReaderMockRecorder) ListHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockReader)(nil).ListHosts), arg0, arg1, arg2, arg3)
}

// ListShardHosts mocks base method.
func (m *MockReader) ListShardHosts(arg0 context.Context, arg1, arg2 string) ([]hosts.HostExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShardHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShardHosts indicates an expected call of ListShardHosts.
func (mr *MockReaderMockRecorder) ListShardHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShardHosts", reflect.TypeOf((*MockReader)(nil).ListShardHosts), arg0, arg1, arg2)
}

// ListShards mocks base method.
func (m *MockReader) ListShards(arg0 context.Context, arg1 string) ([]clusters0.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShards", arg0, arg1)
	ret0, _ := ret[0].([]clusters0.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShards indicates an expected call of ListShards.
func (mr *MockReaderMockRecorder) ListShards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockReader)(nil).ListShards), arg0, arg1)
}

// ListShardsExtended mocks base method.
func (m *MockReader) ListShardsExtended(arg0 context.Context, arg1 string) ([]clusters0.ShardExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShardsExtended", arg0, arg1)
	ret0, _ := ret[0].([]clusters0.ShardExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShardsExtended indicates an expected call of ListShardsExtended.
func (mr *MockReaderMockRecorder) ListShardsExtended(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShardsExtended", reflect.TypeOf((*MockReader)(nil).ListShardsExtended), arg0, arg1)
}

// MaintenanceInfoByClusterID mocks base method.
func (m *MockReader) MaintenanceInfoByClusterID(arg0 context.Context, arg1 string) (clusters0.MaintenanceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintenanceInfoByClusterID", arg0, arg1)
	ret0, _ := ret[0].(clusters0.MaintenanceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaintenanceInfoByClusterID indicates an expected call of MaintenanceInfoByClusterID.
func (mr *MockReaderMockRecorder) MaintenanceInfoByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintenanceInfoByClusterID", reflect.TypeOf((*MockReader)(nil).MaintenanceInfoByClusterID), arg0, arg1)
}

// ResourcePresetFromDefaultConfig mocks base method.
func (m *MockReader) ResourcePresetFromDefaultConfig(arg0 clusters0.Type, arg1 hosts.Role) (resources.DefaultPreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetFromDefaultConfig", arg0, arg1)
	ret0, _ := ret[0].(resources.DefaultPreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetFromDefaultConfig indicates an expected call of ResourcePresetFromDefaultConfig.
func (mr *MockReaderMockRecorder) ResourcePresetFromDefaultConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetFromDefaultConfig", reflect.TypeOf((*MockReader)(nil).ResourcePresetFromDefaultConfig), arg0, arg1)
}

// ResourcesByClusterIDRoleAtRevision mocks base method.
func (m *MockReader) ResourcesByClusterIDRoleAtRevision(arg0 context.Context, arg1 string, arg2 int64, arg3 hosts.Role) (models.ClusterResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcesByClusterIDRoleAtRevision", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.ClusterResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesByClusterIDRoleAtRevision indicates an expected call of ResourcesByClusterIDRoleAtRevision.
func (mr *MockReaderMockRecorder) ResourcesByClusterIDRoleAtRevision(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesByClusterIDRoleAtRevision", reflect.TypeOf((*MockReader)(nil).ResourcesByClusterIDRoleAtRevision), arg0, arg1, arg2, arg3)
}

// ShardByShardID mocks base method.
func (m *MockReader) ShardByShardID(arg0 context.Context, arg1 string, arg2 pillars.Marshaler) (clusters0.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardByShardID", arg0, arg1, arg2)
	ret0, _ := ret[0].(clusters0.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardByShardID indicates an expected call of ShardByShardID.
func (mr *MockReaderMockRecorder) ShardByShardID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardByShardID", reflect.TypeOf((*MockReader)(nil).ShardByShardID), arg0, arg1, arg2)
}

// ShardByShardName mocks base method.
func (m *MockReader) ShardByShardName(arg0 context.Context, arg1, arg2 string, arg3 pillars.Marshaler) (clusters0.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardByShardName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(clusters0.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardByShardName indicates an expected call of ShardByShardName.
func (mr *MockReaderMockRecorder) ShardByShardName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardByShardName", reflect.TypeOf((*MockReader)(nil).ShardByShardName), arg0, arg1, arg2, arg3)
}

// SubClusterByRole mocks base method.
func (m *MockReader) SubClusterByRole(arg0 context.Context, arg1 string, arg2 hosts.Role, arg3 pillars.Marshaler) (clusters0.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubClusterByRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(clusters0.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubClusterByRole indicates an expected call of SubClusterByRole.
func (mr *MockReaderMockRecorder) SubClusterByRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubClusterByRole", reflect.TypeOf((*MockReader)(nil).SubClusterByRole), arg0, arg1, arg2, arg3)
}

// SubClusterByRoleAtRevision mocks base method.
func (m *MockReader) SubClusterByRoleAtRevision(arg0 context.Context, arg1 string, arg2 hosts.Role, arg3 pillars.Marshaler, arg4 int64) (clusters0.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubClusterByRoleAtRevision", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(clusters0.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubClusterByRoleAtRevision indicates an expected call of SubClusterByRoleAtRevision.
func (mr *MockReaderMockRecorder) SubClusterByRoleAtRevision(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubClusterByRoleAtRevision", reflect.TypeOf((*MockReader)(nil).SubClusterByRoleAtRevision), arg0, arg1, arg2, arg3, arg4)
}

// ValidateResources mocks base method.
func (m *MockReader) ValidateResources(arg0 context.Context, arg1 sessions.Session, arg2 clusters0.Type, arg3 ...clusters.HostGroup) (clusters.ResolvedHostGroups, bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateResources", varargs...)
	ret0, _ := ret[0].(clusters.ResolvedHostGroups)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateResources indicates an expected call of ValidateResources.
func (mr *MockReaderMockRecorder) ValidateResources(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResources", reflect.TypeOf((*MockReader)(nil).ValidateResources), varargs...)
}

// MockModifier is a mock of Modifier interface.
type MockModifier struct {
	ctrl     *gomock.Controller
	recorder *MockModifierMockRecorder
}

// MockModifierMockRecorder is the mock recorder for MockModifier.
type MockModifierMockRecorder struct {
	mock *MockModifier
}

// NewMockModifier creates a new mock instance.
func NewMockModifier(ctrl *gomock.Controller) *MockModifier {
	mock := &MockModifier{ctrl: ctrl}
	mock.recorder = &MockModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifier) EXPECT() *MockModifierMockRecorder {
	return m.recorder
}

// AddDisk mocks base method.
func (m *MockModifier) AddDisk(arg0 context.Context, arg1 models.AddDiskArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDisk", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDisk indicates an expected call of AddDisk.
func (mr *MockModifierMockRecorder) AddDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisk", reflect.TypeOf((*MockModifier)(nil).AddDisk), arg0, arg1)
}

// AddDiskPlacementGroup mocks base method.
func (m *MockModifier) AddDiskPlacementGroup(arg0 context.Context, arg1 models.AddDiskPlacementGroupArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDiskPlacementGroup", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDiskPlacementGroup indicates an expected call of AddDiskPlacementGroup.
func (mr *MockModifierMockRecorder) AddDiskPlacementGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiskPlacementGroup", reflect.TypeOf((*MockModifier)(nil).AddDiskPlacementGroup), arg0, arg1)
}

// AddHostPillar mocks base method.
func (m *MockModifier) AddHostPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHostPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHostPillar indicates an expected call of AddHostPillar.
func (mr *MockModifierMockRecorder) AddHostPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHostPillar", reflect.TypeOf((*MockModifier)(nil).AddHostPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddHosts mocks base method.
func (m *MockModifier) AddHosts(arg0 context.Context, arg1 []models.AddHostArgs) ([]hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHosts", arg0, arg1)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHosts indicates an expected call of AddHosts.
func (mr *MockModifierMockRecorder) AddHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHosts", reflect.TypeOf((*MockModifier)(nil).AddHosts), arg0, arg1)
}

// AddPlacementGroup mocks base method.
func (m *MockModifier) AddPlacementGroup(arg0 context.Context, arg1 models.AddPlacementGroupArgs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlacementGroup", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlacementGroup indicates an expected call of AddPlacementGroup.
func (mr *MockModifierMockRecorder) AddPlacementGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlacementGroup", reflect.TypeOf((*MockModifier)(nil).AddPlacementGroup), arg0, arg1)
}

// AddShardPillar mocks base method.
func (m *MockModifier) AddShardPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShardPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShardPillar indicates an expected call of AddShardPillar.
func (mr *MockModifierMockRecorder) AddShardPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShardPillar", reflect.TypeOf((*MockModifier)(nil).AddShardPillar), arg0, arg1, arg2, arg3, arg4)
}

// AddSubClusterPillar mocks base method.
func (m *MockModifier) AddSubClusterPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubClusterPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubClusterPillar indicates an expected call of AddSubClusterPillar.
func (mr *MockModifierMockRecorder) AddSubClusterPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubClusterPillar", reflect.TypeOf((*MockModifier)(nil).AddSubClusterPillar), arg0, arg1, arg2, arg3, arg4)
}

// CreateKubernetesSubCluster mocks base method.
func (m *MockModifier) CreateKubernetesSubCluster(arg0 context.Context, arg1 models.CreateSubClusterArgs) (clusters0.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKubernetesSubCluster", arg0, arg1)
	ret0, _ := ret[0].(clusters0.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKubernetesSubCluster indicates an expected call of CreateKubernetesSubCluster.
func (mr *MockModifierMockRecorder) CreateKubernetesSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubernetesSubCluster", reflect.TypeOf((*MockModifier)(nil).CreateKubernetesSubCluster), arg0, arg1)
}

// CreateShard mocks base method.
func (m *MockModifier) CreateShard(arg0 context.Context, arg1 models.CreateShardArgs) (clusters0.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShard", arg0, arg1)
	ret0, _ := ret[0].(clusters0.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShard indicates an expected call of CreateShard.
func (mr *MockModifierMockRecorder) CreateShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShard", reflect.TypeOf((*MockModifier)(nil).CreateShard), arg0, arg1)
}

// CreateSubCluster mocks base method.
func (m *MockModifier) CreateSubCluster(arg0 context.Context, arg1 models.CreateSubClusterArgs) (clusters0.SubCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubCluster", arg0, arg1)
	ret0, _ := ret[0].(clusters0.SubCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubCluster indicates an expected call of CreateSubCluster.
func (mr *MockModifierMockRecorder) CreateSubCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubCluster", reflect.TypeOf((*MockModifier)(nil).CreateSubCluster), arg0, arg1)
}

// DeleteHosts mocks base method.
func (m *MockModifier) DeleteHosts(arg0 context.Context, arg1 string, arg2 []string, arg3 int64) ([]hosts.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHosts indicates an expected call of DeleteHosts.
func (mr *MockModifierMockRecorder) DeleteHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHosts", reflect.TypeOf((*MockModifier)(nil).DeleteHosts), arg0, arg1, arg2, arg3)
}

// DeleteShard mocks base method.
func (m *MockModifier) DeleteShard(arg0 context.Context, arg1, arg2 string, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShard", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShard indicates an expected call of DeleteShard.
func (mr *MockModifierMockRecorder) DeleteShard(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShard", reflect.TypeOf((*MockModifier)(nil).DeleteShard), arg0, arg1, arg2, arg3)
}

// DeleteSubCluster mocks base method.
func (m *MockModifier) DeleteSubCluster(arg0 context.Context, arg1, arg2 string, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubCluster", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubCluster indicates an expected call of DeleteSubCluster.
func (mr *MockModifierMockRecorder) DeleteSubCluster(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubCluster", reflect.TypeOf((*MockModifier)(nil).DeleteSubCluster), arg0, arg1, arg2, arg3)
}

// GenerateFQDN mocks base method.
func (m *MockModifier) GenerateFQDN(arg0 string, arg1 environment.VType, arg2 compute.Platform) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFQDN", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFQDN indicates an expected call of GenerateFQDN.
func (mr *MockModifierMockRecorder) GenerateFQDN(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFQDN", reflect.TypeOf((*MockModifier)(nil).GenerateFQDN), arg0, arg1, arg2)
}

// GenerateSemanticFQDNs mocks base method.
func (m *MockModifier) GenerateSemanticFQDNs(arg0 environment.CloudType, arg1 clusters0.Type, arg2, arg3 clusters.ZoneHostsList, arg4, arg5 string, arg6 environment.VType, arg7 compute.Platform) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSemanticFQDNs", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSemanticFQDNs indicates an expected call of GenerateSemanticFQDNs.
func (mr *MockModifierMockRecorder) GenerateSemanticFQDNs(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSemanticFQDNs", reflect.TypeOf((*MockModifier)(nil).GenerateSemanticFQDNs), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ListAvailableZones mocks base method.
func (m *MockModifier) ListAvailableZones(arg0 context.Context, arg1 sessions.Session, arg2 bool) ([]environment.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableZones", arg0, arg1, arg2)
	ret0, _ := ret[0].([]environment.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableZones indicates an expected call of ListAvailableZones.
func (mr *MockModifierMockRecorder) ListAvailableZones(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableZones", reflect.TypeOf((*MockModifier)(nil).ListAvailableZones), arg0, arg1, arg2)
}

// ListAvailableZonesForCloudAndRegion mocks base method.
func (m *MockModifier) ListAvailableZonesForCloudAndRegion(arg0 context.Context, arg1 sessions.Session, arg2 environment.CloudType, arg3 string, arg4 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableZonesForCloudAndRegion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableZonesForCloudAndRegion indicates an expected call of ListAvailableZonesForCloudAndRegion.
func (mr *MockModifierMockRecorder) ListAvailableZonesForCloudAndRegion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableZonesForCloudAndRegion", reflect.TypeOf((*MockModifier)(nil).ListAvailableZonesForCloudAndRegion), arg0, arg1, arg2, arg3, arg4)
}

// ModifyClusterMetadata mocks base method.
func (m *MockModifier) ModifyClusterMetadata(arg0 context.Context, arg1 clusters.Cluster, arg2 optional.String, arg3 optional0.Labels) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyClusterMetadata", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyClusterMetadata indicates an expected call of ModifyClusterMetadata.
func (mr *MockModifierMockRecorder) ModifyClusterMetadata(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyClusterMetadata", reflect.TypeOf((*MockModifier)(nil).ModifyClusterMetadata), arg0, arg1, arg2, arg3)
}

// ModifyClusterMetadataParameters mocks base method.
func (m *MockModifier) ModifyClusterMetadataParameters(arg0 context.Context, arg1 clusters.Cluster, arg2 optional.String, arg3 optional0.Labels, arg4 optional.Bool, arg5 optional0.MaintenanceWindow) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyClusterMetadataParameters", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyClusterMetadataParameters indicates an expected call of ModifyClusterMetadataParameters.
func (mr *MockModifierMockRecorder) ModifyClusterMetadataParameters(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyClusterMetadataParameters", reflect.TypeOf((*MockModifier)(nil).ModifyClusterMetadataParameters), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ModifyHost mocks base method.
func (m *MockModifier) ModifyHost(arg0 context.Context, arg1 models.ModifyHostArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyHost indicates an expected call of ModifyHost.
func (mr *MockModifierMockRecorder) ModifyHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyHost", reflect.TypeOf((*MockModifier)(nil).ModifyHost), arg0, arg1)
}

// ModifyHostPublicIP mocks base method.
func (m *MockModifier) ModifyHostPublicIP(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyHostPublicIP", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyHostPublicIP indicates an expected call of ModifyHostPublicIP.
func (mr *MockModifierMockRecorder) ModifyHostPublicIP(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyHostPublicIP", reflect.TypeOf((*MockModifier)(nil).ModifyHostPublicIP), arg0, arg1, arg2, arg3, arg4)
}

// RegionByName mocks base method.
func (m *MockModifier) RegionByName(arg0 context.Context, arg1 string) (environment.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionByName", arg0, arg1)
	ret0, _ := ret[0].(environment.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionByName indicates an expected call of RegionByName.
func (mr *MockModifierMockRecorder) RegionByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionByName", reflect.TypeOf((*MockModifier)(nil).RegionByName), arg0, arg1)
}

// RescheduleMaintenance mocks base method.
func (m *MockModifier) RescheduleMaintenance(arg0 context.Context, arg1 string, arg2 clusters0.RescheduleType, arg3 optional.Time) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleMaintenance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescheduleMaintenance indicates an expected call of RescheduleMaintenance.
func (mr *MockModifierMockRecorder) RescheduleMaintenance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleMaintenance", reflect.TypeOf((*MockModifier)(nil).RescheduleMaintenance), arg0, arg1, arg2, arg3)
}

// ResourcePresetByCPU mocks base method.
func (m *MockModifier) ResourcePresetByCPU(arg0 context.Context, arg1 clusters0.Type, arg2 hosts.Role, arg3 optional.String, arg4 optional.Int64, arg5 float64, arg6, arg7 []string) (resources.DefaultPreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetByCPU", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(resources.DefaultPreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetByCPU indicates an expected call of ResourcePresetByCPU.
func (mr *MockModifierMockRecorder) ResourcePresetByCPU(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetByCPU", reflect.TypeOf((*MockModifier)(nil).ResourcePresetByCPU), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ResourcePresetFromDefaultConfig mocks base method.
func (m *MockModifier) ResourcePresetFromDefaultConfig(arg0 clusters0.Type, arg1 hosts.Role) (resources.DefaultPreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePresetFromDefaultConfig", arg0, arg1)
	ret0, _ := ret[0].(resources.DefaultPreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePresetFromDefaultConfig indicates an expected call of ResourcePresetFromDefaultConfig.
func (mr *MockModifierMockRecorder) ResourcePresetFromDefaultConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePresetFromDefaultConfig", reflect.TypeOf((*MockModifier)(nil).ResourcePresetFromDefaultConfig), arg0, arg1)
}

// SelectZonesForCloudAndRegion mocks base method.
func (m *MockModifier) SelectZonesForCloudAndRegion(arg0 context.Context, arg1 sessions.Session, arg2 environment.CloudType, arg3 string, arg4 bool, arg5 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectZonesForCloudAndRegion", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectZonesForCloudAndRegion indicates an expected call of SelectZonesForCloudAndRegion.
func (mr *MockModifierMockRecorder) SelectZonesForCloudAndRegion(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectZonesForCloudAndRegion", reflect.TypeOf((*MockModifier)(nil).SelectZonesForCloudAndRegion), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateClusterFolder mocks base method.
func (m *MockModifier) UpdateClusterFolder(arg0 context.Context, arg1 clusters.Cluster, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterFolder indicates an expected call of UpdateClusterFolder.
func (mr *MockModifierMockRecorder) UpdateClusterFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterFolder", reflect.TypeOf((*MockModifier)(nil).UpdateClusterFolder), arg0, arg1, arg2)
}

// UpdateClusterName mocks base method.
func (m *MockModifier) UpdateClusterName(arg0 context.Context, arg1 clusters.Cluster, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterName indicates an expected call of UpdateClusterName.
func (mr *MockModifierMockRecorder) UpdateClusterName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterName", reflect.TypeOf((*MockModifier)(nil).UpdateClusterName), arg0, arg1, arg2)
}

// UpdateHostPillar mocks base method.
func (m *MockModifier) UpdateHostPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHostPillar indicates an expected call of UpdateHostPillar.
func (mr *MockModifierMockRecorder) UpdateHostPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostPillar", reflect.TypeOf((*MockModifier)(nil).UpdateHostPillar), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePillar mocks base method.
func (m *MockModifier) UpdatePillar(arg0 context.Context, arg1 string, arg2 int64, arg3 clusters.Pillar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePillar", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePillar indicates an expected call of UpdatePillar.
func (mr *MockModifierMockRecorder) UpdatePillar(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePillar", reflect.TypeOf((*MockModifier)(nil).UpdatePillar), arg0, arg1, arg2, arg3)
}

// UpdateShardPillar mocks base method.
func (m *MockModifier) UpdateShardPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShardPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShardPillar indicates an expected call of UpdateShardPillar.
func (mr *MockModifierMockRecorder) UpdateShardPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShardPillar", reflect.TypeOf((*MockModifier)(nil).UpdateShardPillar), arg0, arg1, arg2, arg3, arg4)
}

// UpdateSubClusterPillar mocks base method.
func (m *MockModifier) UpdateSubClusterPillar(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 pillars.Marshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubClusterPillar", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubClusterPillar indicates an expected call of UpdateSubClusterPillar.
func (mr *MockModifierMockRecorder) UpdateSubClusterPillar(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubClusterPillar", reflect.TypeOf((*MockModifier)(nil).UpdateSubClusterPillar), arg0, arg1, arg2, arg3, arg4)
}

// ValidateResources mocks base method.
func (m *MockModifier) ValidateResources(arg0 context.Context, arg1 sessions.Session, arg2 clusters0.Type, arg3 ...clusters.HostGroup) (clusters.ResolvedHostGroups, bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateResources", varargs...)
	ret0, _ := ret[0].(clusters.ResolvedHostGroups)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateResources indicates an expected call of ValidateResources.
func (mr *MockModifierMockRecorder) ValidateResources(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResources", reflect.TypeOf((*MockModifier)(nil).ValidateResources), varargs...)
}
