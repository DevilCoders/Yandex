// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/sessions (interfaces: Sessions)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sessions "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/sessions"
	gomock "github.com/golang/mock/gomock"
)

// MockSessions is a mock of Sessions interface.
type MockSessions struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsMockRecorder
}

// MockSessionsMockRecorder is the mock recorder for MockSessions.
type MockSessionsMockRecorder struct {
	mock *MockSessions
}

// NewMockSessions creates a new mock instance.
func NewMockSessions(ctrl *gomock.Controller) *MockSessions {
	mock := &MockSessions{ctrl: ctrl}
	mock.recorder = &MockSessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessions) EXPECT() *MockSessionsMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockSessions) Begin(arg0 context.Context, arg1 sessions.SessionResolver, arg2 ...sessions.SessionOption) (context.Context, sessions.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Begin", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(sessions.Session)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Begin indicates an expected call of Begin.
func (mr *MockSessionsMockRecorder) Begin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockSessions)(nil).Begin), varargs...)
}

// BeginWithIdempotence mocks base method.
func (m *MockSessions) BeginWithIdempotence(arg0 context.Context, arg1 sessions.SessionResolver, arg2 ...sessions.SessionOption) (context.Context, sessions.Session, sessions.OriginalRequest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginWithIdempotence", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(sessions.Session)
	ret2, _ := ret[2].(sessions.OriginalRequest)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// BeginWithIdempotence indicates an expected call of BeginWithIdempotence.
func (mr *MockSessionsMockRecorder) BeginWithIdempotence(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginWithIdempotence", reflect.TypeOf((*MockSessions)(nil).BeginWithIdempotence), varargs...)
}

// Commit mocks base method.
func (m *MockSessions) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSessionsMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSessions)(nil).Commit), arg0)
}

// Rollback mocks base method.
func (m *MockSessions) Rollback(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", arg0)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSessionsMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSessions)(nil).Rollback), arg0)
}
