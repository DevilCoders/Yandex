// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/health (interfaces: Health)

// Package mocks is a generated GoMock package.
package mocks

import (
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHealth is a mock of Health interface.
type MockHealth struct {
	ctrl     *gomock.Controller
	recorder *MockHealthMockRecorder
}

// MockHealthMockRecorder is the mock recorder for MockHealth.
type MockHealthMockRecorder struct {
	mock *MockHealth
}

// NewMockHealth creates a new mock instance.
func NewMockHealth(ctrl *gomock.Controller) *MockHealth {
	mock := &MockHealth{ctrl: ctrl}
	mock.recorder = &MockHealthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealth) EXPECT() *MockHealthMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockHealth) Cluster(arg0 context.Context, arg1 string) (clusters.Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0, arg1)
	ret0, _ := ret[0].(clusters.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockHealthMockRecorder) Cluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockHealth)(nil).Cluster), arg0, arg1)
}

// Hosts mocks base method.
func (m *MockHealth) Hosts(arg0 context.Context, arg1 []string) (map[string]hosts.Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hosts", arg0, arg1)
	ret0, _ := ret[0].(map[string]hosts.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hosts indicates an expected call of Hosts.
func (mr *MockHealthMockRecorder) Hosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hosts", reflect.TypeOf((*MockHealth)(nil).Hosts), arg0, arg1)
}
