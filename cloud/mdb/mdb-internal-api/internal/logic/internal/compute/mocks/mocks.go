// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/compute (interfaces: Compute)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	compute "a.yandex-team.ru/cloud/mdb/internal/compute/compute"
	network "a.yandex-team.ru/cloud/mdb/internal/network"
	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	environment "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/environment"
	gomock "github.com/golang/mock/gomock"
)

// MockCompute is a mock of Compute interface.
type MockCompute struct {
	ctrl     *gomock.Controller
	recorder *MockComputeMockRecorder
}

// MockComputeMockRecorder is the mock recorder for MockCompute.
type MockComputeMockRecorder struct {
	mock *MockCompute
}

// NewMockCompute creates a new mock instance.
func NewMockCompute(ctrl *gomock.Controller) *MockCompute {
	mock := &MockCompute{ctrl: ctrl}
	mock.recorder = &MockComputeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompute) EXPECT() *MockComputeMockRecorder {
	return m.recorder
}

// CreateDefaultNetwork mocks base method.
func (m *MockCompute) CreateDefaultNetwork(arg0 context.Context, arg1, arg2 string) (network.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDefaultNetwork indicates an expected call of CreateDefaultNetwork.
func (mr *MockComputeMockRecorder) CreateDefaultNetwork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultNetwork", reflect.TypeOf((*MockCompute)(nil).CreateDefaultNetwork), arg0, arg1, arg2)
}

// GetHostGroupHostType mocks base method.
func (m *MockCompute) GetHostGroupHostType(arg0 context.Context, arg1 []string) (map[string]compute.HostGroupHostType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupHostType", arg0, arg1)
	ret0, _ := ret[0].(map[string]compute.HostGroupHostType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupHostType indicates an expected call of GetHostGroupHostType.
func (mr *MockComputeMockRecorder) GetHostGroupHostType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroupHostType", reflect.TypeOf((*MockCompute)(nil).GetHostGroupHostType), arg0, arg1)
}

// HostGroup mocks base method.
func (m *MockCompute) HostGroup(arg0 context.Context, arg1 string) (compute.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostGroup", arg0, arg1)
	ret0, _ := ret[0].(compute.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostGroup indicates an expected call of HostGroup.
func (mr *MockComputeMockRecorder) HostGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostGroup", reflect.TypeOf((*MockCompute)(nil).HostGroup), arg0, arg1)
}

// HostType mocks base method.
func (m *MockCompute) HostType(arg0 context.Context, arg1 string) (compute.HostType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostType", arg0, arg1)
	ret0, _ := ret[0].(compute.HostType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostType indicates an expected call of HostType.
func (mr *MockComputeMockRecorder) HostType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostType", reflect.TypeOf((*MockCompute)(nil).HostType), arg0, arg1)
}

// Network mocks base method.
func (m *MockCompute) Network(arg0 context.Context, arg1 string) (network.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network", arg0, arg1)
	ret0, _ := ret[0].(network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Network indicates an expected call of Network.
func (mr *MockComputeMockRecorder) Network(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockCompute)(nil).Network), arg0, arg1)
}

// NetworkAndSubnets mocks base method.
func (m *MockCompute) NetworkAndSubnets(arg0 context.Context, arg1 string) (network.Network, []network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkAndSubnets", arg0, arg1)
	ret0, _ := ret[0].(network.Network)
	ret1, _ := ret[1].([]network.Subnet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NetworkAndSubnets indicates an expected call of NetworkAndSubnets.
func (mr *MockComputeMockRecorder) NetworkAndSubnets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkAndSubnets", reflect.TypeOf((*MockCompute)(nil).NetworkAndSubnets), arg0, arg1)
}

// Networks mocks base method.
func (m *MockCompute) Networks(arg0 context.Context, arg1, arg2 string) ([]network.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Networks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Networks indicates an expected call of Networks.
func (mr *MockComputeMockRecorder) Networks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Networks", reflect.TypeOf((*MockCompute)(nil).Networks), arg0, arg1, arg2)
}

// PickSubnet mocks base method.
func (m *MockCompute) PickSubnet(arg0 context.Context, arg1 []network.Subnet, arg2 environment.VType, arg3 string, arg4 bool, arg5 optional.String, arg6 string) (network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PickSubnet", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(network.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PickSubnet indicates an expected call of PickSubnet.
func (mr *MockComputeMockRecorder) PickSubnet(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickSubnet", reflect.TypeOf((*MockCompute)(nil).PickSubnet), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Subnet mocks base method.
func (m *MockCompute) Subnet(arg0 context.Context, arg1 string) (network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnet", arg0, arg1)
	ret0, _ := ret[0].(network.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnet indicates an expected call of Subnet.
func (mr *MockComputeMockRecorder) Subnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnet", reflect.TypeOf((*MockCompute)(nil).Subnet), arg0, arg1)
}

// Subnets mocks base method.
func (m *MockCompute) Subnets(arg0 context.Context, arg1 network.Network) ([]network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets", arg0, arg1)
	ret0, _ := ret[0].([]network.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnets indicates an expected call of Subnets.
func (mr *MockComputeMockRecorder) Subnets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockCompute)(nil).Subnets), arg0, arg1)
}

// ValidateHostGroups mocks base method.
func (m *MockCompute) ValidateHostGroups(arg0 context.Context, arg1 []string, arg2, arg3 string, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateHostGroups", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateHostGroups indicates an expected call of ValidateHostGroups.
func (mr *MockComputeMockRecorder) ValidateHostGroups(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateHostGroups", reflect.TypeOf((*MockCompute)(nil).ValidateHostGroups), arg0, arg1, arg2, arg3, arg4)
}

// ValidateSecurityGroups mocks base method.
func (m *MockCompute) ValidateSecurityGroups(arg0 context.Context, arg1 []string, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSecurityGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSecurityGroups indicates an expected call of ValidateSecurityGroups.
func (mr *MockComputeMockRecorder) ValidateSecurityGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSecurityGroups", reflect.TypeOf((*MockCompute)(nil).ValidateSecurityGroups), arg0, arg1, arg2)
}
