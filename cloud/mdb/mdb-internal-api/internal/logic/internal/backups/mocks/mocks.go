// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/backups (interfaces: Backups)

// Package mocks is a generated GoMock package.
package mocks

import (
	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	backups "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/backups"
	backups0 "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/backups"
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBackups is a mock of Backups interface.
type MockBackups struct {
	ctrl     *gomock.Controller
	recorder *MockBackupsMockRecorder
}

// MockBackupsMockRecorder is the mock recorder for MockBackups.
type MockBackupsMockRecorder struct {
	mock *MockBackups
}

// NewMockBackups creates a new mock instance.
func NewMockBackups(ctrl *gomock.Controller) *MockBackups {
	mock := &MockBackups{ctrl: ctrl}
	mock.recorder = &MockBackupsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackups) EXPECT() *MockBackupsMockRecorder {
	return m.recorder
}

// AddBackupSchedule mocks base method.
func (m *MockBackups) AddBackupSchedule(arg0 context.Context, arg1 string, arg2 backups0.BackupSchedule, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBackupSchedule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBackupSchedule indicates an expected call of AddBackupSchedule.
func (mr *MockBackupsMockRecorder) AddBackupSchedule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBackupSchedule", reflect.TypeOf((*MockBackups)(nil).AddBackupSchedule), arg0, arg1, arg2, arg3)
}

// BackupByClusterIDBackupID mocks base method.
func (m *MockBackups) BackupByClusterIDBackupID(arg0 context.Context, arg1, arg2 string, arg3 backups.ListS3Backups) (backups0.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupByClusterIDBackupID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(backups0.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupByClusterIDBackupID indicates an expected call of BackupByClusterIDBackupID.
func (mr *MockBackupsMockRecorder) BackupByClusterIDBackupID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupByClusterIDBackupID", reflect.TypeOf((*MockBackups)(nil).BackupByClusterIDBackupID), arg0, arg1, arg2, arg3)
}

// BackupsByClusterID mocks base method.
func (m *MockBackups) BackupsByClusterID(arg0 context.Context, arg1 string, arg2 backups.ListS3Backups, arg3 backups0.BackupsPageToken, arg4 optional.Int64) ([]backups0.Backup, backups0.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupsByClusterID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]backups0.Backup)
	ret1, _ := ret[1].(backups0.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BackupsByClusterID indicates an expected call of BackupsByClusterID.
func (mr *MockBackupsMockRecorder) BackupsByClusterID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupsByClusterID", reflect.TypeOf((*MockBackups)(nil).BackupsByClusterID), arg0, arg1, arg2, arg3, arg4)
}

// BackupsByFolderID mocks base method.
func (m *MockBackups) BackupsByFolderID(arg0 context.Context, arg1 int64, arg2 clusters.Type, arg3 backups.ListS3Backups, arg4 backups0.BackupsPageToken, arg5 int64) ([]backups0.Backup, backups0.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupsByFolderID", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]backups0.Backup)
	ret1, _ := ret[1].(backups0.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BackupsByFolderID indicates an expected call of BackupsByFolderID.
func (mr *MockBackupsMockRecorder) BackupsByFolderID(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupsByFolderID", reflect.TypeOf((*MockBackups)(nil).BackupsByFolderID), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GenerateNewBackupID mocks base method.
func (m *MockBackups) GenerateNewBackupID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewBackupID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewBackupID indicates an expected call of GenerateNewBackupID.
func (mr *MockBackupsMockRecorder) GenerateNewBackupID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewBackupID", reflect.TypeOf((*MockBackups)(nil).GenerateNewBackupID))
}

// ManagedBackupByBackupID mocks base method.
func (m *MockBackups) ManagedBackupByBackupID(arg0 context.Context, arg1 string, arg2 backups0.BackupConverter) (backups0.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedBackupByBackupID", arg0, arg1, arg2)
	ret0, _ := ret[0].(backups0.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManagedBackupByBackupID indicates an expected call of ManagedBackupByBackupID.
func (mr *MockBackupsMockRecorder) ManagedBackupByBackupID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedBackupByBackupID", reflect.TypeOf((*MockBackups)(nil).ManagedBackupByBackupID), arg0, arg1, arg2)
}

// ManagedBackupsByClusterID mocks base method.
func (m *MockBackups) ManagedBackupsByClusterID(arg0 context.Context, arg1 string, arg2 []backups0.BackupStatus, arg3 backups0.BackupConverter) ([]backups0.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedBackupsByClusterID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups0.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManagedBackupsByClusterID indicates an expected call of ManagedBackupsByClusterID.
func (mr *MockBackupsMockRecorder) ManagedBackupsByClusterID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedBackupsByClusterID", reflect.TypeOf((*MockBackups)(nil).ManagedBackupsByClusterID), arg0, arg1, arg2, arg3)
}

// MarkManagedBackupObsolete mocks base method.
func (m *MockBackups) MarkManagedBackupObsolete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkManagedBackupObsolete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkManagedBackupObsolete indicates an expected call of MarkManagedBackupObsolete.
func (mr *MockBackupsMockRecorder) MarkManagedBackupObsolete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkManagedBackupObsolete", reflect.TypeOf((*MockBackups)(nil).MarkManagedBackupObsolete), arg0, arg1)
}

// ScheduleBackupForNow mocks base method.
func (m *MockBackups) ScheduleBackupForNow(arg0 context.Context, arg1, arg2, arg3 string, arg4 backups0.BackupMethod, arg5 interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleBackupForNow", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleBackupForNow indicates an expected call of ScheduleBackupForNow.
func (mr *MockBackupsMockRecorder) ScheduleBackupForNow(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBackupForNow", reflect.TypeOf((*MockBackups)(nil).ScheduleBackupForNow), arg0, arg1, arg2, arg3, arg4, arg5)
}
