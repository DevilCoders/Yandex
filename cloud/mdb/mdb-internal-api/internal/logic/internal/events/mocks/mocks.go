// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/events (interfaces: Events)

// Package mocks is a generated GoMock package.
package mocks

import (
	events "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/events"
	accessservice "a.yandex-team.ru/cloud/mdb/internal/compute/accessservice"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	context "context"
	gomock "github.com/golang/mock/gomock"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	reflect "reflect"
)

// MockEvents is a mock of Events interface.
type MockEvents struct {
	ctrl     *gomock.Controller
	recorder *MockEventsMockRecorder
}

// MockEventsMockRecorder is the mock recorder for MockEvents.
type MockEventsMockRecorder struct {
	mock *MockEvents
}

// NewMockEvents creates a new mock instance.
func NewMockEvents(ctrl *gomock.Controller) *MockEvents {
	mock := &MockEvents{ctrl: ctrl}
	mock.recorder = &MockEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvents) EXPECT() *MockEventsMockRecorder {
	return m.recorder
}

// NewAuthentication mocks base method.
func (m *MockEvents) NewAuthentication(arg0 accessservice.Subject) *events.Authentication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAuthentication", arg0)
	ret0, _ := ret[0].(*events.Authentication)
	return ret0
}

// NewAuthentication indicates an expected call of NewAuthentication.
func (mr *MockEventsMockRecorder) NewAuthentication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAuthentication", reflect.TypeOf((*MockEvents)(nil).NewAuthentication), arg0)
}

// NewAuthorization mocks base method.
func (m *MockEvents) NewAuthorization(arg0 accessservice.Subject) *events.Authorization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAuthorization", arg0)
	ret0, _ := ret[0].(*events.Authorization)
	return ret0
}

// NewAuthorization indicates an expected call of NewAuthorization.
func (mr *MockEventsMockRecorder) NewAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAuthorization", reflect.TypeOf((*MockEvents)(nil).NewAuthorization), arg0)
}

// NewEventMetadata mocks base method.
func (m *MockEvents) NewEventMetadata(arg0 protoiface.MessageV1, arg1 operations.Operation, arg2, arg3 string) (*events.EventMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEventMetadata", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*events.EventMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewEventMetadata indicates an expected call of NewEventMetadata.
func (mr *MockEventsMockRecorder) NewEventMetadata(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEventMetadata", reflect.TypeOf((*MockEvents)(nil).NewEventMetadata), arg0, arg1, arg2, arg3)
}

// NewRequestMetadata mocks base method.
func (m *MockEvents) NewRequestMetadata(arg0 context.Context) *events.RequestMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequestMetadata", arg0)
	ret0, _ := ret[0].(*events.RequestMetadata)
	return ret0
}

// NewRequestMetadata indicates an expected call of NewRequestMetadata.
func (mr *MockEventsMockRecorder) NewRequestMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequestMetadata", reflect.TypeOf((*MockEvents)(nil).NewRequestMetadata), arg0)
}

// Store mocks base method.
func (m *MockEvents) Store(arg0 context.Context, arg1 protoiface.MessageV1, arg2 operations.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockEventsMockRecorder) Store(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockEvents)(nil).Store), arg0, arg1, arg2)
}
