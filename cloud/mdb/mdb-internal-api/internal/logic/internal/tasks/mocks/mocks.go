// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/tasks (interfaces: Tasks)

// Package mocks is a generated GoMock package.
package mocks

import (
	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	search "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/search"
	sessions "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/sessions"
	tasks "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/internal/tasks"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	tasks0 "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/tasks"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTasks is a mock of Tasks interface.
type MockTasks struct {
	ctrl     *gomock.Controller
	recorder *MockTasksMockRecorder
}

// MockTasksMockRecorder is the mock recorder for MockTasks.
type MockTasksMockRecorder struct {
	mock *MockTasks
}

// NewMockTasks creates a new mock instance.
func NewMockTasks(ctrl *gomock.Controller) *MockTasks {
	mock := &MockTasks{ctrl: ctrl}
	mock.recorder = &MockTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasks) EXPECT() *MockTasksMockRecorder {
	return m.recorder
}

// BackupCluster mocks base method.
func (m *MockTasks) BackupCluster(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 tasks0.Type, arg5 operations.Type, arg6 operations.Metadata, arg7 ...tasks.BackupClusterOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}
	for _, a := range arg7 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BackupCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupCluster indicates an expected call of BackupCluster.
func (mr *MockTasksMockRecorder) BackupCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}, arg7 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}, arg7...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupCluster", reflect.TypeOf((*MockTasks)(nil).BackupCluster), varargs...)
}

// CreateCluster mocks base method.
func (m *MockTasks) CreateCluster(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 tasks0.Type, arg5 operations.Type, arg6 operations.Metadata, arg7 optional.String, arg8 []string, arg9 string, arg10 search.AttributesExtractor, arg11 ...tasks.CreateClusterOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10}
	for _, a := range arg11 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockTasksMockRecorder) CreateCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}, arg11 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10}, arg11...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockTasks)(nil).CreateCluster), varargs...)
}

// CreateFinishedTask mocks base method.
func (m *MockTasks) CreateFinishedTask(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 operations.Type, arg5 interface{}, arg6 bool) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFinishedTask", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFinishedTask indicates an expected call of CreateFinishedTask.
func (mr *MockTasksMockRecorder) CreateFinishedTask(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFinishedTask", reflect.TypeOf((*MockTasks)(nil).CreateFinishedTask), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// CreateTask mocks base method.
func (m *MockTasks) CreateTask(arg0 context.Context, arg1 sessions.Session, arg2 tasks0.CreateTaskArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTasksMockRecorder) CreateTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTasks)(nil).CreateTask), arg0, arg1, arg2)
}

// DeleteCluster mocks base method.
func (m *MockTasks) DeleteCluster(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 tasks.DeleteClusterTaskTypes, arg5 operations.Type, arg6 tasks.DeleteClusterS3Buckets, arg7 ...tasks.DeleteClusterOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}
	for _, a := range arg7 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockTasksMockRecorder) DeleteCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}, arg7 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}, arg7...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockTasks)(nil).DeleteCluster), varargs...)
}

// ModifyCluster mocks base method.
func (m *MockTasks) ModifyCluster(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 tasks0.Type, arg5 operations.Type, arg6 optional.Strings, arg7 string, arg8 search.AttributesExtractor, arg9 ...tasks.ModifyClusterOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8}
	for _, a := range arg9 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyCluster indicates an expected call of ModifyCluster.
func (mr *MockTasksMockRecorder) ModifyCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}, arg9 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8}, arg9...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyCluster", reflect.TypeOf((*MockTasks)(nil).ModifyCluster), varargs...)
}

// MoveCluster mocks base method.
func (m *MockTasks) MoveCluster(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 operations.Type, arg5 operations.Metadata, arg6 ...tasks.MoveClusterOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5}
	for _, a := range arg6 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCluster indicates an expected call of MoveCluster.
func (mr *MockTasksMockRecorder) MoveCluster(arg0, arg1, arg2, arg3, arg4, arg5 interface{}, arg6 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5}, arg6...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCluster", reflect.TypeOf((*MockTasks)(nil).MoveCluster), varargs...)
}

// StartCluster mocks base method.
func (m *MockTasks) StartCluster(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 tasks0.Type, arg5 operations.Type, arg6 operations.Metadata, arg7 ...tasks.StartClusterOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}
	for _, a := range arg7 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockTasksMockRecorder) StartCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}, arg7 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}, arg7...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockTasks)(nil).StartCluster), varargs...)
}

// StopCluster mocks base method.
func (m *MockTasks) StopCluster(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 tasks0.Type, arg5 operations.Type, arg6 operations.Metadata) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCluster", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockTasksMockRecorder) StopCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockTasks)(nil).StopCluster), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UpgradeCluster mocks base method.
func (m *MockTasks) UpgradeCluster(arg0 context.Context, arg1 sessions.Session, arg2 string, arg3 int64, arg4 tasks0.Type, arg5 operations.Type, arg6 operations.Metadata, arg7 ...tasks.UpgradeClusterOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}
	for _, a := range arg7 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeCluster", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeCluster indicates an expected call of UpgradeCluster.
func (mr *MockTasksMockRecorder) UpgradeCluster(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}, arg7 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}, arg7...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockTasks)(nil).UpgradeCluster), varargs...)
}
