// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/sqlserver (interfaces: SQLServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	compute "a.yandex-team.ru/cloud/mdb/internal/compute/compute"
	sqlserver "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/sqlserver"
	ssmodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/sqlserver/ssmodels"
	backups "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/backups"
	console "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/console"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	gomock "github.com/golang/mock/gomock"
)

// MockSQLServer is a mock of SQLServer interface.
type MockSQLServer struct {
	ctrl     *gomock.Controller
	recorder *MockSQLServerMockRecorder
}

// MockSQLServerMockRecorder is the mock recorder for MockSQLServer.
type MockSQLServerMockRecorder struct {
	mock *MockSQLServer
}

// NewMockSQLServer creates a new mock instance.
func NewMockSQLServer(ctrl *gomock.Controller) *MockSQLServer {
	mock := &MockSQLServer{ctrl: ctrl}
	mock.recorder = &MockSQLServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLServer) EXPECT() *MockSQLServerMockRecorder {
	return m.recorder
}

// BackupByGlobalID mocks base method.
func (m *MockSQLServer) BackupByGlobalID(arg0 context.Context, arg1 string) (backups.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupByGlobalID", arg0, arg1)
	ret0, _ := ret[0].(backups.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupByGlobalID indicates an expected call of BackupByGlobalID.
func (mr *MockSQLServerMockRecorder) BackupByGlobalID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupByGlobalID", reflect.TypeOf((*MockSQLServer)(nil).BackupByGlobalID), arg0, arg1)
}

// BackupCluster mocks base method.
func (m *MockSQLServer) BackupCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupCluster indicates an expected call of BackupCluster.
func (mr *MockSQLServerMockRecorder) BackupCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupCluster", reflect.TypeOf((*MockSQLServer)(nil).BackupCluster), arg0, arg1)
}

// Cluster mocks base method.
func (m *MockSQLServer) Cluster(arg0 context.Context, arg1 string) (ssmodels.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0, arg1)
	ret0, _ := ret[0].(ssmodels.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockSQLServerMockRecorder) Cluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockSQLServer)(nil).Cluster), arg0, arg1)
}

// Clusters mocks base method.
func (m *MockSQLServer) Clusters(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]ssmodels.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]ssmodels.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clusters indicates an expected call of Clusters.
func (mr *MockSQLServerMockRecorder) Clusters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockSQLServer)(nil).Clusters), arg0, arg1, arg2, arg3)
}

// CreateCluster mocks base method.
func (m *MockSQLServer) CreateCluster(arg0 context.Context, arg1 sqlserver.CreateClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockSQLServerMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockSQLServer)(nil).CreateCluster), arg0, arg1)
}

// CreateDatabase mocks base method.
func (m *MockSQLServer) CreateDatabase(arg0 context.Context, arg1 string, arg2 ssmodels.DatabaseSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockSQLServerMockRecorder) CreateDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockSQLServer)(nil).CreateDatabase), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockSQLServer) CreateUser(arg0 context.Context, arg1 string, arg2 ssmodels.UserSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockSQLServerMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockSQLServer)(nil).CreateUser), arg0, arg1, arg2)
}

// Database mocks base method.
func (m *MockSQLServer) Database(arg0 context.Context, arg1, arg2 string) (ssmodels.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", arg0, arg1, arg2)
	ret0, _ := ret[0].(ssmodels.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Database indicates an expected call of Database.
func (mr *MockSQLServerMockRecorder) Database(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockSQLServer)(nil).Database), arg0, arg1, arg2)
}

// Databases mocks base method.
func (m *MockSQLServer) Databases(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]ssmodels.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Databases", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]ssmodels.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Databases indicates an expected call of Databases.
func (mr *MockSQLServerMockRecorder) Databases(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Databases", reflect.TypeOf((*MockSQLServer)(nil).Databases), arg0, arg1, arg2, arg3)
}

// DeleteCluster mocks base method.
func (m *MockSQLServer) DeleteCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockSQLServerMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockSQLServer)(nil).DeleteCluster), arg0, arg1)
}

// DeleteDatabase mocks base method.
func (m *MockSQLServer) DeleteDatabase(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockSQLServerMockRecorder) DeleteDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockSQLServer)(nil).DeleteDatabase), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockSQLServer) DeleteUser(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockSQLServerMockRecorder) DeleteUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockSQLServer)(nil).DeleteUser), arg0, arg1, arg2)
}

// EstimateCreateCluster mocks base method.
func (m *MockSQLServer) EstimateCreateCluster(arg0 context.Context, arg1 sqlserver.CreateClusterArgs) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateCreateCluster", arg0, arg1)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateCreateCluster indicates an expected call of EstimateCreateCluster.
func (mr *MockSQLServerMockRecorder) EstimateCreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateCreateCluster", reflect.TypeOf((*MockSQLServer)(nil).EstimateCreateCluster), arg0, arg1)
}

// ExportDatabaseBackup mocks base method.
func (m *MockSQLServer) ExportDatabaseBackup(arg0 context.Context, arg1 string, arg2 ssmodels.ExportDatabaseBackupSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportDatabaseBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportDatabaseBackup indicates an expected call of ExportDatabaseBackup.
func (mr *MockSQLServerMockRecorder) ExportDatabaseBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportDatabaseBackup", reflect.TypeOf((*MockSQLServer)(nil).ExportDatabaseBackup), arg0, arg1, arg2)
}

// GetHostGroupType mocks base method.
func (m *MockSQLServer) GetHostGroupType(arg0 context.Context, arg1 []string) (map[string]compute.HostGroupHostType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupType", arg0, arg1)
	ret0, _ := ret[0].(map[string]compute.HostGroupHostType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupType indicates an expected call of GetHostGroupType.
func (mr *MockSQLServerMockRecorder) GetHostGroupType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroupType", reflect.TypeOf((*MockSQLServer)(nil).GetHostGroupType), arg0, arg1)
}

// GrantPermission mocks base method.
func (m *MockSQLServer) GrantPermission(arg0 context.Context, arg1, arg2 string, arg3 ssmodels.Permission) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantPermission indicates an expected call of GrantPermission.
func (mr *MockSQLServerMockRecorder) GrantPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantPermission", reflect.TypeOf((*MockSQLServer)(nil).GrantPermission), arg0, arg1, arg2, arg3)
}

// ImportDatabaseBackup mocks base method.
func (m *MockSQLServer) ImportDatabaseBackup(arg0 context.Context, arg1 string, arg2 ssmodels.ImportDatabaseBackupSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDatabaseBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDatabaseBackup indicates an expected call of ImportDatabaseBackup.
func (mr *MockSQLServerMockRecorder) ImportDatabaseBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDatabaseBackup", reflect.TypeOf((*MockSQLServer)(nil).ImportDatabaseBackup), arg0, arg1, arg2)
}

// ListBackups mocks base method.
func (m *MockSQLServer) ListBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockSQLServerMockRecorder) ListBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockSQLServer)(nil).ListBackups), arg0, arg1, arg2, arg3)
}

// ListBackupsInFolder mocks base method.
func (m *MockSQLServer) ListBackupsInFolder(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupsInFolder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBackupsInFolder indicates an expected call of ListBackupsInFolder.
func (mr *MockSQLServerMockRecorder) ListBackupsInFolder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupsInFolder", reflect.TypeOf((*MockSQLServer)(nil).ListBackupsInFolder), arg0, arg1, arg2, arg3)
}

// ListHosts mocks base method.
func (m *MockSQLServer) ListHosts(arg0 context.Context, arg1 string) ([]hosts.HostExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0, arg1)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHosts indicates an expected call of ListHosts.
func (mr *MockSQLServerMockRecorder) ListHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockSQLServer)(nil).ListHosts), arg0, arg1)
}

// ModifyCluster mocks base method.
func (m *MockSQLServer) ModifyCluster(arg0 context.Context, arg1 sqlserver.ModifyClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyCluster indicates an expected call of ModifyCluster.
func (mr *MockSQLServerMockRecorder) ModifyCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyCluster", reflect.TypeOf((*MockSQLServer)(nil).ModifyCluster), arg0, arg1)
}

// RestoreCluster mocks base method.
func (m *MockSQLServer) RestoreCluster(arg0 context.Context, arg1 sqlserver.RestoreClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCluster indicates an expected call of RestoreCluster.
func (mr *MockSQLServerMockRecorder) RestoreCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCluster", reflect.TypeOf((*MockSQLServer)(nil).RestoreCluster), arg0, arg1)
}

// RestoreDatabase mocks base method.
func (m *MockSQLServer) RestoreDatabase(arg0 context.Context, arg1 string, arg2 ssmodels.RestoreDatabaseSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDatabase indicates an expected call of RestoreDatabase.
func (mr *MockSQLServerMockRecorder) RestoreDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDatabase", reflect.TypeOf((*MockSQLServer)(nil).RestoreDatabase), arg0, arg1, arg2)
}

// RestoreHints mocks base method.
func (m *MockSQLServer) RestoreHints(arg0 context.Context, arg1 string) (ssmodels.RestoreHints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreHints", arg0, arg1)
	ret0, _ := ret[0].(ssmodels.RestoreHints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreHints indicates an expected call of RestoreHints.
func (mr *MockSQLServerMockRecorder) RestoreHints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreHints", reflect.TypeOf((*MockSQLServer)(nil).RestoreHints), arg0, arg1)
}

// RevokePermission mocks base method.
func (m *MockSQLServer) RevokePermission(arg0 context.Context, arg1, arg2 string, arg3 ssmodels.Permission) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePermission indicates an expected call of RevokePermission.
func (mr *MockSQLServerMockRecorder) RevokePermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePermission", reflect.TypeOf((*MockSQLServer)(nil).RevokePermission), arg0, arg1, arg2, arg3)
}

// StartCluster mocks base method.
func (m *MockSQLServer) StartCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockSQLServerMockRecorder) StartCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockSQLServer)(nil).StartCluster), arg0, arg1)
}

// StartFailover mocks base method.
func (m *MockSQLServer) StartFailover(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFailover", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFailover indicates an expected call of StartFailover.
func (mr *MockSQLServerMockRecorder) StartFailover(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFailover", reflect.TypeOf((*MockSQLServer)(nil).StartFailover), arg0, arg1, arg2)
}

// StopCluster mocks base method.
func (m *MockSQLServer) StopCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockSQLServerMockRecorder) StopCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockSQLServer)(nil).StopCluster), arg0, arg1)
}

// UpdateHosts mocks base method.
func (m *MockSQLServer) UpdateHosts(arg0 context.Context, arg1 string, arg2 []ssmodels.UpdateHostSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHosts indicates an expected call of UpdateHosts.
func (mr *MockSQLServerMockRecorder) UpdateHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHosts", reflect.TypeOf((*MockSQLServer)(nil).UpdateHosts), arg0, arg1, arg2)
}

// UpdateUser mocks base method.
func (m *MockSQLServer) UpdateUser(arg0 context.Context, arg1 string, arg2 sqlserver.UserArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockSQLServerMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockSQLServer)(nil).UpdateUser), arg0, arg1, arg2)
}

// User mocks base method.
func (m *MockSQLServer) User(arg0 context.Context, arg1, arg2 string) (ssmodels.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1, arg2)
	ret0, _ := ret[0].(ssmodels.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockSQLServerMockRecorder) User(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockSQLServer)(nil).User), arg0, arg1, arg2)
}

// Users mocks base method.
func (m *MockSQLServer) Users(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]ssmodels.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]ssmodels.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockSQLServerMockRecorder) Users(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockSQLServer)(nil).Users), arg0, arg1, arg2, arg3)
}
