// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/clickhouse (interfaces: ClickHouse)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	logic "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic"
	clickhouse "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/clickhouse"
	chmodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/clickhouse/chmodels"
	metadb "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/metadb"
	models "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models"
	backups "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/backups"
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	console "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/console"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	pagination "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/pagination"
	gomock "github.com/golang/mock/gomock"
)

// MockClickHouse is a mock of ClickHouse interface.
type MockClickHouse struct {
	ctrl     *gomock.Controller
	recorder *MockClickHouseMockRecorder
}

// MockClickHouseMockRecorder is the mock recorder for MockClickHouse.
type MockClickHouseMockRecorder struct {
	mock *MockClickHouse
}

// NewMockClickHouse creates a new mock instance.
func NewMockClickHouse(ctrl *gomock.Controller) *MockClickHouse {
	mock := &MockClickHouse{ctrl: ctrl}
	mock.recorder = &MockClickHouseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickHouse) EXPECT() *MockClickHouseMockRecorder {
	return m.recorder
}

// AddClickHouseHost mocks base method.
func (m *MockClickHouse) AddClickHouseHost(arg0 context.Context, arg1 string, arg2 chmodels.HostSpec, arg3 bool) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClickHouseHost", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClickHouseHost indicates an expected call of AddClickHouseHost.
func (mr *MockClickHouseMockRecorder) AddClickHouseHost(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClickHouseHost", reflect.TypeOf((*MockClickHouse)(nil).AddClickHouseHost), arg0, arg1, arg2, arg3)
}

// AddHosts mocks base method.
func (m *MockClickHouse) AddHosts(arg0 context.Context, arg1 string, arg2 []chmodels.HostSpec, arg3 bool) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHosts indicates an expected call of AddHosts.
func (mr *MockClickHouseMockRecorder) AddHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHosts", reflect.TypeOf((*MockClickHouse)(nil).AddHosts), arg0, arg1, arg2, arg3)
}

// AddShard mocks base method.
func (m *MockClickHouse) AddShard(arg0 context.Context, arg1 string, arg2 clickhouse.CreateShardArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShard", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddShard indicates an expected call of AddShard.
func (mr *MockClickHouseMockRecorder) AddShard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShard", reflect.TypeOf((*MockClickHouse)(nil).AddShard), arg0, arg1, arg2)
}

// AddZookeeper mocks base method.
func (m *MockClickHouse) AddZookeeper(arg0 context.Context, arg1 string, arg2 models.ClusterResourcesSpec, arg3 []chmodels.HostSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddZookeeper", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddZookeeper indicates an expected call of AddZookeeper.
func (mr *MockClickHouseMockRecorder) AddZookeeper(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddZookeeper", reflect.TypeOf((*MockClickHouse)(nil).AddZookeeper), arg0, arg1, arg2, arg3)
}

// AddZookeeperHost mocks base method.
func (m *MockClickHouse) AddZookeeperHost(arg0 context.Context, arg1 string, arg2 chmodels.HostSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddZookeeperHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddZookeeperHost indicates an expected call of AddZookeeperHost.
func (mr *MockClickHouseMockRecorder) AddZookeeperHost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddZookeeperHost", reflect.TypeOf((*MockClickHouse)(nil).AddZookeeperHost), arg0, arg1, arg2)
}

// Backup mocks base method.
func (m *MockClickHouse) Backup(arg0 context.Context, arg1 string) (backups.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", arg0, arg1)
	ret0, _ := ret[0].(backups.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Backup indicates an expected call of Backup.
func (mr *MockClickHouseMockRecorder) Backup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockClickHouse)(nil).Backup), arg0, arg1)
}

// BackupCluster mocks base method.
func (m *MockClickHouse) BackupCluster(arg0 context.Context, arg1 string, arg2 optional.String) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupCluster indicates an expected call of BackupCluster.
func (mr *MockClickHouseMockRecorder) BackupCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupCluster", reflect.TypeOf((*MockClickHouse)(nil).BackupCluster), arg0, arg1, arg2)
}

// ClusterBackups mocks base method.
func (m *MockClickHouse) ClusterBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterBackups indicates an expected call of ClusterBackups.
func (mr *MockClickHouseMockRecorder) ClusterBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterBackups", reflect.TypeOf((*MockClickHouse)(nil).ClusterBackups), arg0, arg1, arg2, arg3)
}

// CreateDataCloudCluster mocks base method.
func (m *MockClickHouse) CreateDataCloudCluster(arg0 context.Context, arg1 clickhouse.CreateDataCloudClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataCloudCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataCloudCluster indicates an expected call of CreateDataCloudCluster.
func (mr *MockClickHouseMockRecorder) CreateDataCloudCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataCloudCluster", reflect.TypeOf((*MockClickHouse)(nil).CreateDataCloudCluster), arg0, arg1)
}

// CreateDatabase mocks base method.
func (m *MockClickHouse) CreateDatabase(arg0 context.Context, arg1 string, arg2 chmodels.DatabaseSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockClickHouseMockRecorder) CreateDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockClickHouse)(nil).CreateDatabase), arg0, arg1, arg2)
}

// CreateExternalDictionary mocks base method.
func (m *MockClickHouse) CreateExternalDictionary(arg0 context.Context, arg1 string, arg2 chmodels.Dictionary) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternalDictionary", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExternalDictionary indicates an expected call of CreateExternalDictionary.
func (mr *MockClickHouseMockRecorder) CreateExternalDictionary(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalDictionary", reflect.TypeOf((*MockClickHouse)(nil).CreateExternalDictionary), arg0, arg1, arg2)
}

// CreateFormatSchema mocks base method.
func (m *MockClickHouse) CreateFormatSchema(arg0 context.Context, arg1, arg2 string, arg3 chmodels.FormatSchemaType, arg4 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFormatSchema", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFormatSchema indicates an expected call of CreateFormatSchema.
func (mr *MockClickHouseMockRecorder) CreateFormatSchema(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormatSchema", reflect.TypeOf((*MockClickHouse)(nil).CreateFormatSchema), arg0, arg1, arg2, arg3, arg4)
}

// CreateMDBCluster mocks base method.
func (m *MockClickHouse) CreateMDBCluster(arg0 context.Context, arg1 clickhouse.CreateMDBClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMDBCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMDBCluster indicates an expected call of CreateMDBCluster.
func (mr *MockClickHouseMockRecorder) CreateMDBCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMDBCluster", reflect.TypeOf((*MockClickHouse)(nil).CreateMDBCluster), arg0, arg1)
}

// CreateMLModel mocks base method.
func (m *MockClickHouse) CreateMLModel(arg0 context.Context, arg1, arg2 string, arg3 chmodels.MLModelType, arg4 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMLModel", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMLModel indicates an expected call of CreateMLModel.
func (mr *MockClickHouseMockRecorder) CreateMLModel(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMLModel", reflect.TypeOf((*MockClickHouse)(nil).CreateMLModel), arg0, arg1, arg2, arg3, arg4)
}

// CreateShardGroup mocks base method.
func (m *MockClickHouse) CreateShardGroup(arg0 context.Context, arg1 chmodels.ShardGroup) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShardGroup", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShardGroup indicates an expected call of CreateShardGroup.
func (mr *MockClickHouseMockRecorder) CreateShardGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShardGroup", reflect.TypeOf((*MockClickHouse)(nil).CreateShardGroup), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockClickHouse) CreateUser(arg0 context.Context, arg1 string, arg2 chmodels.UserSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClickHouseMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClickHouse)(nil).CreateUser), arg0, arg1, arg2)
}

// DataCloudCluster mocks base method.
func (m *MockClickHouse) DataCloudCluster(arg0 context.Context, arg1 string, arg2 bool) (chmodels.DataCloudCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataCloudCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(chmodels.DataCloudCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataCloudCluster indicates an expected call of DataCloudCluster.
func (mr *MockClickHouseMockRecorder) DataCloudCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataCloudCluster", reflect.TypeOf((*MockClickHouse)(nil).DataCloudCluster), arg0, arg1, arg2)
}

// DataCloudClusters mocks base method.
func (m *MockClickHouse) DataCloudClusters(arg0 context.Context, arg1 string, arg2 int64, arg3 clusters.ClusterPageToken) ([]chmodels.DataCloudCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataCloudClusters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]chmodels.DataCloudCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataCloudClusters indicates an expected call of DataCloudClusters.
func (mr *MockClickHouseMockRecorder) DataCloudClusters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataCloudClusters", reflect.TypeOf((*MockClickHouse)(nil).DataCloudClusters), arg0, arg1, arg2, arg3)
}

// Database mocks base method.
func (m *MockClickHouse) Database(arg0 context.Context, arg1, arg2 string) (chmodels.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", arg0, arg1, arg2)
	ret0, _ := ret[0].(chmodels.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Database indicates an expected call of Database.
func (mr *MockClickHouseMockRecorder) Database(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClickHouse)(nil).Database), arg0, arg1, arg2)
}

// Databases mocks base method.
func (m *MockClickHouse) Databases(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]chmodels.Database, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Databases", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]chmodels.Database)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Databases indicates an expected call of Databases.
func (mr *MockClickHouseMockRecorder) Databases(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Databases", reflect.TypeOf((*MockClickHouse)(nil).Databases), arg0, arg1, arg2, arg3)
}

// DefaultVersion mocks base method.
func (m *MockClickHouse) DefaultVersion() logic.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultVersion")
	ret0, _ := ret[0].(logic.Version)
	return ret0
}

// DefaultVersion indicates an expected call of DefaultVersion.
func (mr *MockClickHouseMockRecorder) DefaultVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultVersion", reflect.TypeOf((*MockClickHouse)(nil).DefaultVersion))
}

// DeleteCluster mocks base method.
func (m *MockClickHouse) DeleteCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClickHouseMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClickHouse)(nil).DeleteCluster), arg0, arg1)
}

// DeleteDatabase mocks base method.
func (m *MockClickHouse) DeleteDatabase(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockClickHouseMockRecorder) DeleteDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockClickHouse)(nil).DeleteDatabase), arg0, arg1, arg2)
}

// DeleteExternalDictionary mocks base method.
func (m *MockClickHouse) DeleteExternalDictionary(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExternalDictionary", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExternalDictionary indicates an expected call of DeleteExternalDictionary.
func (mr *MockClickHouseMockRecorder) DeleteExternalDictionary(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalDictionary", reflect.TypeOf((*MockClickHouse)(nil).DeleteExternalDictionary), arg0, arg1, arg2)
}

// DeleteFormatSchema mocks base method.
func (m *MockClickHouse) DeleteFormatSchema(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFormatSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFormatSchema indicates an expected call of DeleteFormatSchema.
func (mr *MockClickHouseMockRecorder) DeleteFormatSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFormatSchema", reflect.TypeOf((*MockClickHouse)(nil).DeleteFormatSchema), arg0, arg1, arg2)
}

// DeleteHosts mocks base method.
func (m *MockClickHouse) DeleteHosts(arg0 context.Context, arg1 string, arg2 []string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHosts indicates an expected call of DeleteHosts.
func (mr *MockClickHouseMockRecorder) DeleteHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHosts", reflect.TypeOf((*MockClickHouse)(nil).DeleteHosts), arg0, arg1, arg2)
}

// DeleteMLModel mocks base method.
func (m *MockClickHouse) DeleteMLModel(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMLModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMLModel indicates an expected call of DeleteMLModel.
func (mr *MockClickHouseMockRecorder) DeleteMLModel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMLModel", reflect.TypeOf((*MockClickHouse)(nil).DeleteMLModel), arg0, arg1, arg2)
}

// DeleteShard mocks base method.
func (m *MockClickHouse) DeleteShard(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShard", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteShard indicates an expected call of DeleteShard.
func (mr *MockClickHouseMockRecorder) DeleteShard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShard", reflect.TypeOf((*MockClickHouse)(nil).DeleteShard), arg0, arg1, arg2)
}

// DeleteShardGroup mocks base method.
func (m *MockClickHouse) DeleteShardGroup(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShardGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteShardGroup indicates an expected call of DeleteShardGroup.
func (mr *MockClickHouseMockRecorder) DeleteShardGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShardGroup", reflect.TypeOf((*MockClickHouse)(nil).DeleteShardGroup), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockClickHouse) DeleteUser(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClickHouseMockRecorder) DeleteUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClickHouse)(nil).DeleteUser), arg0, arg1, arg2)
}

// EstimateCreateDCCluster mocks base method.
func (m *MockClickHouse) EstimateCreateDCCluster(arg0 context.Context, arg1 clickhouse.CreateDataCloudClusterArgs) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateCreateDCCluster", arg0, arg1)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateCreateDCCluster indicates an expected call of EstimateCreateDCCluster.
func (mr *MockClickHouseMockRecorder) EstimateCreateDCCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateCreateDCCluster", reflect.TypeOf((*MockClickHouse)(nil).EstimateCreateDCCluster), arg0, arg1)
}

// EstimateCreateMDBCluster mocks base method.
func (m *MockClickHouse) EstimateCreateMDBCluster(arg0 context.Context, arg1 clickhouse.CreateMDBClusterArgs) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateCreateMDBCluster", arg0, arg1)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateCreateMDBCluster indicates an expected call of EstimateCreateMDBCluster.
func (mr *MockClickHouseMockRecorder) EstimateCreateMDBCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateCreateMDBCluster", reflect.TypeOf((*MockClickHouse)(nil).EstimateCreateMDBCluster), arg0, arg1)
}

// FolderBackups mocks base method.
func (m *MockClickHouse) FolderBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FolderBackups indicates an expected call of FolderBackups.
func (mr *MockClickHouseMockRecorder) FolderBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderBackups", reflect.TypeOf((*MockClickHouse)(nil).FolderBackups), arg0, arg1, arg2, arg3)
}

// FormatSchema mocks base method.
func (m *MockClickHouse) FormatSchema(arg0 context.Context, arg1, arg2 string) (chmodels.FormatSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(chmodels.FormatSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatSchema indicates an expected call of FormatSchema.
func (mr *MockClickHouseMockRecorder) FormatSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatSchema", reflect.TypeOf((*MockClickHouse)(nil).FormatSchema), arg0, arg1, arg2)
}

// FormatSchemas mocks base method.
func (m *MockClickHouse) FormatSchemas(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]chmodels.FormatSchema, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatSchemas", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]chmodels.FormatSchema)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FormatSchemas indicates an expected call of FormatSchemas.
func (mr *MockClickHouseMockRecorder) FormatSchemas(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatSchemas", reflect.TypeOf((*MockClickHouse)(nil).FormatSchemas), arg0, arg1, arg2, arg3)
}

// GetShard mocks base method.
func (m *MockClickHouse) GetShard(arg0 context.Context, arg1, arg2 string) (chmodels.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShard", arg0, arg1, arg2)
	ret0, _ := ret[0].(chmodels.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShard indicates an expected call of GetShard.
func (mr *MockClickHouseMockRecorder) GetShard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShard", reflect.TypeOf((*MockClickHouse)(nil).GetShard), arg0, arg1, arg2)
}

// GrantPermission mocks base method.
func (m *MockClickHouse) GrantPermission(arg0 context.Context, arg1, arg2 string, arg3 chmodels.Permission) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantPermission indicates an expected call of GrantPermission.
func (mr *MockClickHouseMockRecorder) GrantPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantPermission", reflect.TypeOf((*MockClickHouse)(nil).GrantPermission), arg0, arg1, arg2, arg3)
}

// ListHosts mocks base method.
func (m *MockClickHouse) ListHosts(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]hosts.HostExtended, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHosts indicates an expected call of ListHosts.
func (mr *MockClickHouseMockRecorder) ListHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockClickHouse)(nil).ListHosts), arg0, arg1, arg2, arg3)
}

// ListShards mocks base method.
func (m *MockClickHouse) ListShards(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]chmodels.Shard, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShards", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]chmodels.Shard)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListShards indicates an expected call of ListShards.
func (mr *MockClickHouseMockRecorder) ListShards(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockClickHouse)(nil).ListShards), arg0, arg1, arg2, arg3)
}

// MDBCluster mocks base method.
func (m *MockClickHouse) MDBCluster(arg0 context.Context, arg1 string) (chmodels.MDBCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDBCluster", arg0, arg1)
	ret0, _ := ret[0].(chmodels.MDBCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MDBCluster indicates an expected call of MDBCluster.
func (mr *MockClickHouseMockRecorder) MDBCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDBCluster", reflect.TypeOf((*MockClickHouse)(nil).MDBCluster), arg0, arg1)
}

// MDBClusters mocks base method.
func (m *MockClickHouse) MDBClusters(arg0 context.Context, arg1 string, arg2 int64, arg3 clusters.ClusterPageToken) ([]chmodels.MDBCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDBClusters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]chmodels.MDBCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MDBClusters indicates an expected call of MDBClusters.
func (mr *MockClickHouseMockRecorder) MDBClusters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDBClusters", reflect.TypeOf((*MockClickHouse)(nil).MDBClusters), arg0, arg1, arg2, arg3)
}

// MLModel mocks base method.
func (m *MockClickHouse) MLModel(arg0 context.Context, arg1, arg2 string) (chmodels.MLModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MLModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(chmodels.MLModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MLModel indicates an expected call of MLModel.
func (mr *MockClickHouseMockRecorder) MLModel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MLModel", reflect.TypeOf((*MockClickHouse)(nil).MLModel), arg0, arg1, arg2)
}

// MLModels mocks base method.
func (m *MockClickHouse) MLModels(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]chmodels.MLModel, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MLModels", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]chmodels.MLModel)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MLModels indicates an expected call of MLModels.
func (mr *MockClickHouseMockRecorder) MLModels(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MLModels", reflect.TypeOf((*MockClickHouse)(nil).MLModels), arg0, arg1, arg2, arg3)
}

// ModifyDataCloudCluster mocks base method.
func (m *MockClickHouse) ModifyDataCloudCluster(arg0 context.Context, arg1 clickhouse.UpdateDataCloudClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDataCloudCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDataCloudCluster indicates an expected call of ModifyDataCloudCluster.
func (mr *MockClickHouseMockRecorder) ModifyDataCloudCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDataCloudCluster", reflect.TypeOf((*MockClickHouse)(nil).ModifyDataCloudCluster), arg0, arg1)
}

// MoveCluster mocks base method.
func (m *MockClickHouse) MoveCluster(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCluster indicates an expected call of MoveCluster.
func (mr *MockClickHouseMockRecorder) MoveCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCluster", reflect.TypeOf((*MockClickHouse)(nil).MoveCluster), arg0, arg1, arg2)
}

// RescheduleMaintenance mocks base method.
func (m *MockClickHouse) RescheduleMaintenance(arg0 context.Context, arg1 string, arg2 clusters.RescheduleType, arg3 optional.Time) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleMaintenance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescheduleMaintenance indicates an expected call of RescheduleMaintenance.
func (mr *MockClickHouseMockRecorder) RescheduleMaintenance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleMaintenance", reflect.TypeOf((*MockClickHouse)(nil).RescheduleMaintenance), arg0, arg1, arg2, arg3)
}

// ResetCredentials mocks base method.
func (m *MockClickHouse) ResetCredentials(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCredentials", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCredentials indicates an expected call of ResetCredentials.
func (mr *MockClickHouseMockRecorder) ResetCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCredentials", reflect.TypeOf((*MockClickHouse)(nil).ResetCredentials), arg0, arg1)
}

// RestoreDataCloudCluster mocks base method.
func (m *MockClickHouse) RestoreDataCloudCluster(arg0 context.Context, arg1 string, arg2 clickhouse.CreateDataCloudClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDataCloudCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDataCloudCluster indicates an expected call of RestoreDataCloudCluster.
func (mr *MockClickHouseMockRecorder) RestoreDataCloudCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDataCloudCluster", reflect.TypeOf((*MockClickHouse)(nil).RestoreDataCloudCluster), arg0, arg1, arg2)
}

// RestoreMDBCluster mocks base method.
func (m *MockClickHouse) RestoreMDBCluster(arg0 context.Context, arg1 []string, arg2 clickhouse.RestoreMDBClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreMDBCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreMDBCluster indicates an expected call of RestoreMDBCluster.
func (mr *MockClickHouseMockRecorder) RestoreMDBCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreMDBCluster", reflect.TypeOf((*MockClickHouse)(nil).RestoreMDBCluster), arg0, arg1, arg2)
}

// RevokePermission mocks base method.
func (m *MockClickHouse) RevokePermission(arg0 context.Context, arg1, arg2, arg3 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePermission indicates an expected call of RevokePermission.
func (mr *MockClickHouseMockRecorder) RevokePermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePermission", reflect.TypeOf((*MockClickHouse)(nil).RevokePermission), arg0, arg1, arg2, arg3)
}

// ShardGroup mocks base method.
func (m *MockClickHouse) ShardGroup(arg0 context.Context, arg1, arg2 string) (chmodels.ShardGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(chmodels.ShardGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardGroup indicates an expected call of ShardGroup.
func (mr *MockClickHouseMockRecorder) ShardGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardGroup", reflect.TypeOf((*MockClickHouse)(nil).ShardGroup), arg0, arg1, arg2)
}

// ShardGroups mocks base method.
func (m *MockClickHouse) ShardGroups(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]chmodels.ShardGroup, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardGroups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]chmodels.ShardGroup)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ShardGroups indicates an expected call of ShardGroups.
func (mr *MockClickHouseMockRecorder) ShardGroups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardGroups", reflect.TypeOf((*MockClickHouse)(nil).ShardGroups), arg0, arg1, arg2, arg3)
}

// StartCluster mocks base method.
func (m *MockClickHouse) StartCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockClickHouseMockRecorder) StartCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockClickHouse)(nil).StartCluster), arg0, arg1)
}

// StopCluster mocks base method.
func (m *MockClickHouse) StopCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockClickHouseMockRecorder) StopCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockClickHouse)(nil).StopCluster), arg0, arg1)
}

// UpdateExternalDictionary mocks base method.
func (m *MockClickHouse) UpdateExternalDictionary(arg0 context.Context, arg1 string, arg2 chmodels.Dictionary) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalDictionary", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExternalDictionary indicates an expected call of UpdateExternalDictionary.
func (mr *MockClickHouseMockRecorder) UpdateExternalDictionary(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalDictionary", reflect.TypeOf((*MockClickHouse)(nil).UpdateExternalDictionary), arg0, arg1, arg2)
}

// UpdateFormatSchema mocks base method.
func (m *MockClickHouse) UpdateFormatSchema(arg0 context.Context, arg1, arg2, arg3 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFormatSchema", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFormatSchema indicates an expected call of UpdateFormatSchema.
func (mr *MockClickHouseMockRecorder) UpdateFormatSchema(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFormatSchema", reflect.TypeOf((*MockClickHouse)(nil).UpdateFormatSchema), arg0, arg1, arg2, arg3)
}

// UpdateHosts mocks base method.
func (m *MockClickHouse) UpdateHosts(arg0 context.Context, arg1 string, arg2 []chmodels.UpdateHostSpec) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHosts indicates an expected call of UpdateHosts.
func (mr *MockClickHouseMockRecorder) UpdateHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHosts", reflect.TypeOf((*MockClickHouse)(nil).UpdateHosts), arg0, arg1, arg2)
}

// UpdateMDBCluster mocks base method.
func (m *MockClickHouse) UpdateMDBCluster(arg0 context.Context, arg1 clickhouse.UpdateMDBClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMDBCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMDBCluster indicates an expected call of UpdateMDBCluster.
func (mr *MockClickHouseMockRecorder) UpdateMDBCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMDBCluster", reflect.TypeOf((*MockClickHouse)(nil).UpdateMDBCluster), arg0, arg1)
}

// UpdateMLModel mocks base method.
func (m *MockClickHouse) UpdateMLModel(arg0 context.Context, arg1, arg2, arg3 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMLModel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMLModel indicates an expected call of UpdateMLModel.
func (mr *MockClickHouseMockRecorder) UpdateMLModel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMLModel", reflect.TypeOf((*MockClickHouse)(nil).UpdateMLModel), arg0, arg1, arg2, arg3)
}

// UpdateShardGroup mocks base method.
func (m *MockClickHouse) UpdateShardGroup(arg0 context.Context, arg1 chmodels.UpdateShardGroupArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShardGroup", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShardGroup indicates an expected call of UpdateShardGroup.
func (mr *MockClickHouseMockRecorder) UpdateShardGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShardGroup", reflect.TypeOf((*MockClickHouse)(nil).UpdateShardGroup), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockClickHouse) UpdateUser(arg0 context.Context, arg1, arg2 string, arg3 chmodels.UpdateUserArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockClickHouseMockRecorder) UpdateUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockClickHouse)(nil).UpdateUser), arg0, arg1, arg2, arg3)
}

// User mocks base method.
func (m *MockClickHouse) User(arg0 context.Context, arg1, arg2 string) (chmodels.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1, arg2)
	ret0, _ := ret[0].(chmodels.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockClickHouseMockRecorder) User(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockClickHouse)(nil).User), arg0, arg1, arg2)
}

// Users mocks base method.
func (m *MockClickHouse) Users(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]chmodels.User, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]chmodels.User)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Users indicates an expected call of Users.
func (mr *MockClickHouseMockRecorder) Users(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockClickHouse)(nil).Users), arg0, arg1, arg2, arg3)
}

// Version mocks base method.
func (m *MockClickHouse) Version(arg0 context.Context, arg1 metadb.Backend, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockClickHouseMockRecorder) Version(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockClickHouse)(nil).Version), arg0, arg1, arg2)
}

// VersionIDs mocks base method.
func (m *MockClickHouse) VersionIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// VersionIDs indicates an expected call of VersionIDs.
func (mr *MockClickHouseMockRecorder) VersionIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionIDs", reflect.TypeOf((*MockClickHouse)(nil).VersionIDs))
}

// Versions mocks base method.
func (m *MockClickHouse) Versions() []logic.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Versions")
	ret0, _ := ret[0].([]logic.Version)
	return ret0
}

// Versions indicates an expected call of Versions.
func (mr *MockClickHouseMockRecorder) Versions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Versions", reflect.TypeOf((*MockClickHouse)(nil).Versions))
}
