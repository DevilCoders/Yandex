// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/greenplum (interfaces: Greenplum)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	compute "a.yandex-team.ru/cloud/mdb/internal/compute/compute"
	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	greenplum "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/greenplum"
	gpmodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/greenplum/gpmodels"
	backups "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/backups"
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	console "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/console"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	gomock "github.com/golang/mock/gomock"
)

// MockGreenplum is a mock of Greenplum interface.
type MockGreenplum struct {
	ctrl     *gomock.Controller
	recorder *MockGreenplumMockRecorder
}

// MockGreenplumMockRecorder is the mock recorder for MockGreenplum.
type MockGreenplumMockRecorder struct {
	mock *MockGreenplum
}

// NewMockGreenplum creates a new mock instance.
func NewMockGreenplum(ctrl *gomock.Controller) *MockGreenplum {
	mock := &MockGreenplum{ctrl: ctrl}
	mock.recorder = &MockGreenplumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreenplum) EXPECT() *MockGreenplumMockRecorder {
	return m.recorder
}

// AddHosts mocks base method.
func (m *MockGreenplum) AddHosts(arg0 context.Context, arg1 greenplum.AddHostsClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHosts", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHosts indicates an expected call of AddHosts.
func (mr *MockGreenplumMockRecorder) AddHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHosts", reflect.TypeOf((*MockGreenplum)(nil).AddHosts), arg0, arg1)
}

// Backup mocks base method.
func (m *MockGreenplum) Backup(arg0 context.Context, arg1 string) (backups.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", arg0, arg1)
	ret0, _ := ret[0].(backups.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Backup indicates an expected call of Backup.
func (mr *MockGreenplumMockRecorder) Backup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockGreenplum)(nil).Backup), arg0, arg1)
}

// Cluster mocks base method.
func (m *MockGreenplum) Cluster(arg0 context.Context, arg1 string) (gpmodels.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0, arg1)
	ret0, _ := ret[0].(gpmodels.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockGreenplumMockRecorder) Cluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockGreenplum)(nil).Cluster), arg0, arg1)
}

// ClusterBackups mocks base method.
func (m *MockGreenplum) ClusterBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterBackups indicates an expected call of ClusterBackups.
func (mr *MockGreenplumMockRecorder) ClusterBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterBackups", reflect.TypeOf((*MockGreenplum)(nil).ClusterBackups), arg0, arg1, arg2, arg3)
}

// Clusters mocks base method.
func (m *MockGreenplum) Clusters(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]gpmodels.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]gpmodels.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clusters indicates an expected call of Clusters.
func (mr *MockGreenplumMockRecorder) Clusters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockGreenplum)(nil).Clusters), arg0, arg1, arg2, arg3)
}

// CreateCluster mocks base method.
func (m *MockGreenplum) CreateCluster(arg0 context.Context, arg1 greenplum.CreateClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockGreenplumMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockGreenplum)(nil).CreateCluster), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockGreenplum) DeleteCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockGreenplumMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockGreenplum)(nil).DeleteCluster), arg0, arg1)
}

// EstimateCreateCluster mocks base method.
func (m *MockGreenplum) EstimateCreateCluster(arg0 context.Context, arg1 greenplum.CreateClusterArgs) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateCreateCluster", arg0, arg1)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateCreateCluster indicates an expected call of EstimateCreateCluster.
func (mr *MockGreenplumMockRecorder) EstimateCreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateCreateCluster", reflect.TypeOf((*MockGreenplum)(nil).EstimateCreateCluster), arg0, arg1)
}

// FolderBackups mocks base method.
func (m *MockGreenplum) FolderBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FolderBackups indicates an expected call of FolderBackups.
func (mr *MockGreenplumMockRecorder) FolderBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderBackups", reflect.TypeOf((*MockGreenplum)(nil).FolderBackups), arg0, arg1, arg2, arg3)
}

// GetDefaultVersions mocks base method.
func (m *MockGreenplum) GetDefaultVersions(arg0 context.Context) ([]console.DefaultVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultVersions", arg0)
	ret0, _ := ret[0].([]console.DefaultVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultVersions indicates an expected call of GetDefaultVersions.
func (mr *MockGreenplumMockRecorder) GetDefaultVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultVersions", reflect.TypeOf((*MockGreenplum)(nil).GetDefaultVersions), arg0)
}

// GetHostGroupType mocks base method.
func (m *MockGreenplum) GetHostGroupType(arg0 context.Context, arg1 []string) (map[string]compute.HostGroupHostType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupType", arg0, arg1)
	ret0, _ := ret[0].(map[string]compute.HostGroupHostType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupType indicates an expected call of GetHostGroupType.
func (mr *MockGreenplumMockRecorder) GetHostGroupType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroupType", reflect.TypeOf((*MockGreenplum)(nil).GetHostGroupType), arg0, arg1)
}

// GetRecommendedConfig mocks base method.
func (m *MockGreenplum) GetRecommendedConfig(arg0 context.Context, arg1 *greenplum.RecommendedConfigArgs) (*greenplum.RecommendedConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendedConfig", arg0, arg1)
	ret0, _ := ret[0].(*greenplum.RecommendedConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendedConfig indicates an expected call of GetRecommendedConfig.
func (mr *MockGreenplumMockRecorder) GetRecommendedConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendedConfig", reflect.TypeOf((*MockGreenplum)(nil).GetRecommendedConfig), arg0, arg1)
}

// IsLowMemSegmentAllowed mocks base method.
func (m *MockGreenplum) IsLowMemSegmentAllowed(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLowMemSegmentAllowed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLowMemSegmentAllowed indicates an expected call of IsLowMemSegmentAllowed.
func (mr *MockGreenplumMockRecorder) IsLowMemSegmentAllowed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLowMemSegmentAllowed", reflect.TypeOf((*MockGreenplum)(nil).IsLowMemSegmentAllowed), arg0, arg1)
}

// ListMasterHosts mocks base method.
func (m *MockGreenplum) ListMasterHosts(arg0 context.Context, arg1 string) ([]hosts.HostExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMasterHosts", arg0, arg1)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMasterHosts indicates an expected call of ListMasterHosts.
func (mr *MockGreenplumMockRecorder) ListMasterHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMasterHosts", reflect.TypeOf((*MockGreenplum)(nil).ListMasterHosts), arg0, arg1)
}

// ListSegmentHosts mocks base method.
func (m *MockGreenplum) ListSegmentHosts(arg0 context.Context, arg1 string) ([]hosts.HostExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSegmentHosts", arg0, arg1)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSegmentHosts indicates an expected call of ListSegmentHosts.
func (mr *MockGreenplumMockRecorder) ListSegmentHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegmentHosts", reflect.TypeOf((*MockGreenplum)(nil).ListSegmentHosts), arg0, arg1)
}

// ModifyCluster mocks base method.
func (m *MockGreenplum) ModifyCluster(arg0 context.Context, arg1 greenplum.ModifyClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyCluster indicates an expected call of ModifyCluster.
func (mr *MockGreenplumMockRecorder) ModifyCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyCluster", reflect.TypeOf((*MockGreenplum)(nil).ModifyCluster), arg0, arg1)
}

// RescheduleMaintenance mocks base method.
func (m *MockGreenplum) RescheduleMaintenance(arg0 context.Context, arg1 string, arg2 clusters.RescheduleType, arg3 optional.Time) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleMaintenance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescheduleMaintenance indicates an expected call of RescheduleMaintenance.
func (mr *MockGreenplumMockRecorder) RescheduleMaintenance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleMaintenance", reflect.TypeOf((*MockGreenplum)(nil).RescheduleMaintenance), arg0, arg1, arg2, arg3)
}

// RestoreCluster mocks base method.
func (m *MockGreenplum) RestoreCluster(arg0 context.Context, arg1 greenplum.CreateClusterArgs, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCluster indicates an expected call of RestoreCluster.
func (mr *MockGreenplumMockRecorder) RestoreCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCluster", reflect.TypeOf((*MockGreenplum)(nil).RestoreCluster), arg0, arg1, arg2)
}

// RestoreHints mocks base method.
func (m *MockGreenplum) RestoreHints(arg0 context.Context, arg1 string) (gpmodels.RestoreHints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreHints", arg0, arg1)
	ret0, _ := ret[0].(gpmodels.RestoreHints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreHints indicates an expected call of RestoreHints.
func (mr *MockGreenplumMockRecorder) RestoreHints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreHints", reflect.TypeOf((*MockGreenplum)(nil).RestoreHints), arg0, arg1)
}

// StartCluster mocks base method.
func (m *MockGreenplum) StartCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockGreenplumMockRecorder) StartCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockGreenplum)(nil).StartCluster), arg0, arg1)
}

// StopCluster mocks base method.
func (m *MockGreenplum) StopCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockGreenplumMockRecorder) StopCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockGreenplum)(nil).StopCluster), arg0, arg1)
}
