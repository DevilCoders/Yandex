// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/mysql/perfdiagdb (interfaces: Backend)

// Package mocks is a generated GoMock package.
package mocks

import (
	sqlfilter "a.yandex-team.ru/cloud/mdb/internal/sqlfilter"
	mymodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/mysql/mymodels"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockBackend) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockBackendMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockBackend)(nil).IsReady), arg0)
}

// SessionsAtTime mocks base method.
func (m *MockBackend) SessionsAtTime(arg0 context.Context, arg1 string, arg2, arg3 int64, arg4 time.Time, arg5 []mymodels.MySessionsColumn, arg6 []sqlfilter.Term, arg7 []mymodels.OrderBySessionsAtTime) (mymodels.SessionsAtTime, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionsAtTime", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(mymodels.SessionsAtTime)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SessionsAtTime indicates an expected call of SessionsAtTime.
func (mr *MockBackendMockRecorder) SessionsAtTime(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionsAtTime", reflect.TypeOf((*MockBackend)(nil).SessionsAtTime), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// SessionsStats mocks base method.
func (m *MockBackend) SessionsStats(arg0 context.Context, arg1 string, arg2, arg3 int64, arg4, arg5 time.Time, arg6 int64, arg7 []mymodels.MySessionsColumn, arg8 []mymodels.OrderBy, arg9 []sqlfilter.Term) ([]mymodels.SessionsStats, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionsStats", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].([]mymodels.SessionsStats)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SessionsStats indicates an expected call of SessionsStats.
func (mr *MockBackendMockRecorder) SessionsStats(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionsStats", reflect.TypeOf((*MockBackend)(nil).SessionsStats), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// StatementStats mocks base method.
func (m *MockBackend) StatementStats(arg0 context.Context, arg1, arg2 string, arg3, arg4 int64, arg5, arg6 time.Time, arg7 []mymodels.StatementsStatsGroupBy, arg8 []sqlfilter.Term, arg9 []mymodels.MyStatementsColumn) (mymodels.StatementStats, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatementStats", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(mymodels.StatementStats)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StatementStats indicates an expected call of StatementStats.
func (mr *MockBackendMockRecorder) StatementStats(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatementStats", reflect.TypeOf((*MockBackend)(nil).StatementStats), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// StatementsAtTime mocks base method.
func (m *MockBackend) StatementsAtTime(arg0 context.Context, arg1 string, arg2, arg3 int64, arg4 time.Time, arg5 []mymodels.MyStatementsColumn, arg6 []sqlfilter.Term, arg7 []mymodels.OrderByStatementsAtTime) (mymodels.StatementsAtTime, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatementsAtTime", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(mymodels.StatementsAtTime)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StatementsAtTime indicates an expected call of StatementsAtTime.
func (mr *MockBackendMockRecorder) StatementsAtTime(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatementsAtTime", reflect.TypeOf((*MockBackend)(nil).StatementsAtTime), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// StatementsDiff mocks base method.
func (m *MockBackend) StatementsDiff(arg0 context.Context, arg1 string, arg2, arg3 int64, arg4, arg5 time.Time, arg6 int64, arg7 []mymodels.MyStatementsColumn, arg8 []sqlfilter.Term, arg9 []mymodels.OrderByStatementsAtTime) (mymodels.DiffStatements, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatementsDiff", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(mymodels.DiffStatements)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StatementsDiff indicates an expected call of StatementsDiff.
func (mr *MockBackendMockRecorder) StatementsDiff(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatementsDiff", reflect.TypeOf((*MockBackend)(nil).StatementsDiff), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// StatementsInterval mocks base method.
func (m *MockBackend) StatementsInterval(arg0 context.Context, arg1 string, arg2, arg3 int64, arg4, arg5 time.Time, arg6 []mymodels.MyStatementsColumn, arg7 []sqlfilter.Term, arg8 []mymodels.OrderByStatementsAtTime) (mymodels.StatementsInterval, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatementsInterval", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(mymodels.StatementsInterval)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StatementsInterval indicates an expected call of StatementsInterval.
func (mr *MockBackendMockRecorder) StatementsInterval(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatementsInterval", reflect.TypeOf((*MockBackend)(nil).StatementsInterval), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// StatementsStats mocks base method.
func (m *MockBackend) StatementsStats(arg0 context.Context, arg1 string, arg2, arg3 int64, arg4, arg5 time.Time, arg6 []mymodels.StatementsStatsGroupBy, arg7 []sqlfilter.Term, arg8 []mymodels.MyStatementsColumn) (mymodels.StatementsStats, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatementsStats", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(mymodels.StatementsStats)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StatementsStats indicates an expected call of StatementsStats.
func (mr *MockBackendMockRecorder) StatementsStats(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatementsStats", reflect.TypeOf((*MockBackend)(nil).StatementsStats), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}
