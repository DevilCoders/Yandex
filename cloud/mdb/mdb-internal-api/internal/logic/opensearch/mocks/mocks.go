// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/opensearch (interfaces: OpenSearch)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	opensearch "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/opensearch"
	osmodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/opensearch/osmodels"
	backups "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/backups"
	clusters "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/clusters"
	console "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/console"
	hosts "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/hosts"
	operations "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/operations"
	pagination "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/pagination"
	gomock "github.com/golang/mock/gomock"
)

// MockOpenSearch is a mock of OpenSearch interface.
type MockOpenSearch struct {
	ctrl     *gomock.Controller
	recorder *MockOpenSearchMockRecorder
}

// MockOpenSearchMockRecorder is the mock recorder for MockOpenSearch.
type MockOpenSearchMockRecorder struct {
	mock *MockOpenSearch
}

// NewMockOpenSearch creates a new mock instance.
func NewMockOpenSearch(ctrl *gomock.Controller) *MockOpenSearch {
	mock := &MockOpenSearch{ctrl: ctrl}
	mock.recorder = &MockOpenSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenSearch) EXPECT() *MockOpenSearchMockRecorder {
	return m.recorder
}

// AddAuthProviders mocks base method.
func (m *MockOpenSearch) AddAuthProviders(arg0 context.Context, arg1 string, arg2 ...*osmodels.AuthProvider) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAuthProviders", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthProviders indicates an expected call of AddAuthProviders.
func (mr *MockOpenSearchMockRecorder) AddAuthProviders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthProviders", reflect.TypeOf((*MockOpenSearch)(nil).AddAuthProviders), varargs...)
}

// AddHosts mocks base method.
func (m *MockOpenSearch) AddHosts(arg0 context.Context, arg1 string, arg2 []osmodels.Host) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHosts indicates an expected call of AddHosts.
func (mr *MockOpenSearchMockRecorder) AddHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHosts", reflect.TypeOf((*MockOpenSearch)(nil).AddHosts), arg0, arg1, arg2)
}

// AuthProvider mocks base method.
func (m *MockOpenSearch) AuthProvider(arg0 context.Context, arg1, arg2 string) (*osmodels.AuthProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthProvider", arg0, arg1, arg2)
	ret0, _ := ret[0].(*osmodels.AuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthProvider indicates an expected call of AuthProvider.
func (mr *MockOpenSearchMockRecorder) AuthProvider(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthProvider", reflect.TypeOf((*MockOpenSearch)(nil).AuthProvider), arg0, arg1, arg2)
}

// AuthProviders mocks base method.
func (m *MockOpenSearch) AuthProviders(arg0 context.Context, arg1 string) (*osmodels.AuthProviders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthProviders", arg0, arg1)
	ret0, _ := ret[0].(*osmodels.AuthProviders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthProviders indicates an expected call of AuthProviders.
func (mr *MockOpenSearchMockRecorder) AuthProviders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthProviders", reflect.TypeOf((*MockOpenSearch)(nil).AuthProviders), arg0, arg1)
}

// Backup mocks base method.
func (m *MockOpenSearch) Backup(arg0 context.Context, arg1 string) (backups.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", arg0, arg1)
	ret0, _ := ret[0].(backups.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Backup indicates an expected call of Backup.
func (mr *MockOpenSearchMockRecorder) Backup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockOpenSearch)(nil).Backup), arg0, arg1)
}

// BackupCluster mocks base method.
func (m *MockOpenSearch) BackupCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupCluster indicates an expected call of BackupCluster.
func (mr *MockOpenSearchMockRecorder) BackupCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupCluster", reflect.TypeOf((*MockOpenSearch)(nil).BackupCluster), arg0, arg1)
}

// Cluster mocks base method.
func (m *MockOpenSearch) Cluster(arg0 context.Context, arg1 string) (osmodels.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0, arg1)
	ret0, _ := ret[0].(osmodels.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockOpenSearchMockRecorder) Cluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockOpenSearch)(nil).Cluster), arg0, arg1)
}

// ClusterBackups mocks base method.
func (m *MockOpenSearch) ClusterBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterBackups indicates an expected call of ClusterBackups.
func (mr *MockOpenSearchMockRecorder) ClusterBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterBackups", reflect.TypeOf((*MockOpenSearch)(nil).ClusterBackups), arg0, arg1, arg2, arg3)
}

// Clusters mocks base method.
func (m *MockOpenSearch) Clusters(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]osmodels.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]osmodels.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clusters indicates an expected call of Clusters.
func (mr *MockOpenSearchMockRecorder) Clusters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockOpenSearch)(nil).Clusters), arg0, arg1, arg2, arg3)
}

// CreateCluster mocks base method.
func (m *MockOpenSearch) CreateCluster(arg0 context.Context, arg1 opensearch.CreateClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockOpenSearchMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockOpenSearch)(nil).CreateCluster), arg0, arg1)
}

// CreateExtension mocks base method.
func (m *MockOpenSearch) CreateExtension(arg0 context.Context, arg1, arg2, arg3 string, arg4 bool) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtension", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtension indicates an expected call of CreateExtension.
func (mr *MockOpenSearchMockRecorder) CreateExtension(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtension", reflect.TypeOf((*MockOpenSearch)(nil).CreateExtension), arg0, arg1, arg2, arg3, arg4)
}

// DeleteAuthProviders mocks base method.
func (m *MockOpenSearch) DeleteAuthProviders(arg0 context.Context, arg1 string, arg2 ...string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthProviders", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthProviders indicates an expected call of DeleteAuthProviders.
func (mr *MockOpenSearchMockRecorder) DeleteAuthProviders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthProviders", reflect.TypeOf((*MockOpenSearch)(nil).DeleteAuthProviders), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockOpenSearch) DeleteCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockOpenSearchMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockOpenSearch)(nil).DeleteCluster), arg0, arg1)
}

// DeleteExtension mocks base method.
func (m *MockOpenSearch) DeleteExtension(arg0 context.Context, arg1, arg2 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtension", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExtension indicates an expected call of DeleteExtension.
func (mr *MockOpenSearchMockRecorder) DeleteExtension(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtension", reflect.TypeOf((*MockOpenSearch)(nil).DeleteExtension), arg0, arg1, arg2)
}

// DeleteHosts mocks base method.
func (m *MockOpenSearch) DeleteHosts(arg0 context.Context, arg1 string, arg2 []string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHosts indicates an expected call of DeleteHosts.
func (mr *MockOpenSearchMockRecorder) DeleteHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHosts", reflect.TypeOf((*MockOpenSearch)(nil).DeleteHosts), arg0, arg1, arg2)
}

// EstimateCreateCluster mocks base method.
func (m *MockOpenSearch) EstimateCreateCluster(arg0 context.Context, arg1 opensearch.CreateClusterArgs) (console.BillingEstimate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateCreateCluster", arg0, arg1)
	ret0, _ := ret[0].(console.BillingEstimate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateCreateCluster indicates an expected call of EstimateCreateCluster.
func (mr *MockOpenSearchMockRecorder) EstimateCreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateCreateCluster", reflect.TypeOf((*MockOpenSearch)(nil).EstimateCreateCluster), arg0, arg1)
}

// Extension mocks base method.
func (m *MockOpenSearch) Extension(arg0 context.Context, arg1, arg2 string) (osmodels.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extension", arg0, arg1, arg2)
	ret0, _ := ret[0].(osmodels.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extension indicates an expected call of Extension.
func (mr *MockOpenSearchMockRecorder) Extension(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extension", reflect.TypeOf((*MockOpenSearch)(nil).Extension), arg0, arg1, arg2)
}

// Extensions mocks base method.
func (m *MockOpenSearch) Extensions(arg0 context.Context, arg1 string) ([]osmodels.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extensions", arg0, arg1)
	ret0, _ := ret[0].([]osmodels.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extensions indicates an expected call of Extensions.
func (mr *MockOpenSearchMockRecorder) Extensions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extensions", reflect.TypeOf((*MockOpenSearch)(nil).Extensions), arg0, arg1)
}

// FolderBackups mocks base method.
func (m *MockOpenSearch) FolderBackups(arg0 context.Context, arg1 string, arg2 backups.BackupsPageToken, arg3 int64) ([]backups.Backup, backups.BackupsPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderBackups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]backups.Backup)
	ret1, _ := ret[1].(backups.BackupsPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FolderBackups indicates an expected call of FolderBackups.
func (mr *MockOpenSearchMockRecorder) FolderBackups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderBackups", reflect.TypeOf((*MockOpenSearch)(nil).FolderBackups), arg0, arg1, arg2, arg3)
}

// ListHosts mocks base method.
func (m *MockOpenSearch) ListHosts(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]hosts.HostExtended, pagination.OffsetPageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]hosts.HostExtended)
	ret1, _ := ret[1].(pagination.OffsetPageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHosts indicates an expected call of ListHosts.
func (mr *MockOpenSearchMockRecorder) ListHosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockOpenSearch)(nil).ListHosts), arg0, arg1, arg2, arg3)
}

// ModifyCluster mocks base method.
func (m *MockOpenSearch) ModifyCluster(arg0 context.Context, arg1 opensearch.ModifyClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyCluster indicates an expected call of ModifyCluster.
func (mr *MockOpenSearchMockRecorder) ModifyCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyCluster", reflect.TypeOf((*MockOpenSearch)(nil).ModifyCluster), arg0, arg1)
}

// RescheduleMaintenance mocks base method.
func (m *MockOpenSearch) RescheduleMaintenance(arg0 context.Context, arg1 string, arg2 clusters.RescheduleType, arg3 optional.Time) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleMaintenance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescheduleMaintenance indicates an expected call of RescheduleMaintenance.
func (mr *MockOpenSearchMockRecorder) RescheduleMaintenance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleMaintenance", reflect.TypeOf((*MockOpenSearch)(nil).RescheduleMaintenance), arg0, arg1, arg2, arg3)
}

// RestoreCluster mocks base method.
func (m *MockOpenSearch) RestoreCluster(arg0 context.Context, arg1 opensearch.RestoreClusterArgs) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCluster indicates an expected call of RestoreCluster.
func (mr *MockOpenSearchMockRecorder) RestoreCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCluster", reflect.TypeOf((*MockOpenSearch)(nil).RestoreCluster), arg0, arg1)
}

// StartCluster mocks base method.
func (m *MockOpenSearch) StartCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockOpenSearchMockRecorder) StartCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockOpenSearch)(nil).StartCluster), arg0, arg1)
}

// StopCluster mocks base method.
func (m *MockOpenSearch) StopCluster(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCluster", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockOpenSearchMockRecorder) StopCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockOpenSearch)(nil).StopCluster), arg0, arg1)
}

// SupportedVersions mocks base method.
func (m *MockOpenSearch) SupportedVersions(arg0 context.Context) osmodels.SupportedVersions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedVersions", arg0)
	ret0, _ := ret[0].(osmodels.SupportedVersions)
	return ret0
}

// SupportedVersions indicates an expected call of SupportedVersions.
func (mr *MockOpenSearchMockRecorder) SupportedVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedVersions", reflect.TypeOf((*MockOpenSearch)(nil).SupportedVersions), arg0)
}

// UpdateAuthProvider mocks base method.
func (m *MockOpenSearch) UpdateAuthProvider(arg0 context.Context, arg1, arg2 string, arg3 *osmodels.AuthProvider) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthProvider", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthProvider indicates an expected call of UpdateAuthProvider.
func (mr *MockOpenSearchMockRecorder) UpdateAuthProvider(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthProvider", reflect.TypeOf((*MockOpenSearch)(nil).UpdateAuthProvider), arg0, arg1, arg2, arg3)
}

// UpdateAuthProviders mocks base method.
func (m *MockOpenSearch) UpdateAuthProviders(arg0 context.Context, arg1 string, arg2 ...*osmodels.AuthProvider) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthProviders", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthProviders indicates an expected call of UpdateAuthProviders.
func (mr *MockOpenSearchMockRecorder) UpdateAuthProviders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthProviders", reflect.TypeOf((*MockOpenSearch)(nil).UpdateAuthProviders), varargs...)
}

// UpdateExtension mocks base method.
func (m *MockOpenSearch) UpdateExtension(arg0 context.Context, arg1, arg2 string, arg3 bool) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtension", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtension indicates an expected call of UpdateExtension.
func (mr *MockOpenSearchMockRecorder) UpdateExtension(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtension", reflect.TypeOf((*MockOpenSearch)(nil).UpdateExtension), arg0, arg1, arg2, arg3)
}
