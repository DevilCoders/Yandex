// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-internal-api/pkg/internalapi (interfaces: Client,PostgreSQLClient,ClickHouseClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	chmodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/clickhouse/chmodels"
	pgmodels "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/logic/postgresql/pgmodels"
	logs "a.yandex-team.ru/cloud/mdb/mdb-internal-api/internal/models/logs"
	internalapi "a.yandex-team.ru/cloud/mdb/mdb-internal-api/pkg/internalapi"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ClickHouse mocks base method.
func (m *MockClient) ClickHouse() internalapi.ClickHouseClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClickHouse")
	ret0, _ := ret[0].(internalapi.ClickHouseClient)
	return ret0
}

// ClickHouse indicates an expected call of ClickHouse.
func (mr *MockClientMockRecorder) ClickHouse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickHouse", reflect.TypeOf((*MockClient)(nil).ClickHouse))
}

// IsReady mocks base method.
func (m *MockClient) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockClientMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockClient)(nil).IsReady), arg0)
}

// PostgreSQL mocks base method.
func (m *MockClient) PostgreSQL() internalapi.PostgreSQLClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostgreSQL")
	ret0, _ := ret[0].(internalapi.PostgreSQLClient)
	return ret0
}

// PostgreSQL indicates an expected call of PostgreSQL.
func (mr *MockClientMockRecorder) PostgreSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostgreSQL", reflect.TypeOf((*MockClient)(nil).PostgreSQL))
}

// MockPostgreSQLClient is a mock of PostgreSQLClient interface.
type MockPostgreSQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgreSQLClientMockRecorder
}

// MockPostgreSQLClientMockRecorder is the mock recorder for MockPostgreSQLClient.
type MockPostgreSQLClientMockRecorder struct {
	mock *MockPostgreSQLClient
}

// NewMockPostgreSQLClient creates a new mock instance.
func NewMockPostgreSQLClient(ctrl *gomock.Controller) *MockPostgreSQLClient {
	mock := &MockPostgreSQLClient{ctrl: ctrl}
	mock.recorder = &MockPostgreSQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgreSQLClient) EXPECT() *MockPostgreSQLClientMockRecorder {
	return m.recorder
}

// Databases mocks base method.
func (m *MockPostgreSQLClient) Databases(arg0 context.Context, arg1 string) ([]pgmodels.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Databases", arg0, arg1)
	ret0, _ := ret[0].([]pgmodels.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Databases indicates an expected call of Databases.
func (mr *MockPostgreSQLClientMockRecorder) Databases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Databases", reflect.TypeOf((*MockPostgreSQLClient)(nil).Databases), arg0, arg1)
}

// IsReady mocks base method.
func (m *MockPostgreSQLClient) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockPostgreSQLClientMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockPostgreSQLClient)(nil).IsReady), arg0)
}

// Logs mocks base method.
func (m *MockPostgreSQLClient) Logs(arg0 context.Context, arg1 string, arg2 internalapi.PostgresqlLogsServiceType, arg3 internalapi.LogsOptions) ([]logs.Message, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]logs.Message)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Logs indicates an expected call of Logs.
func (mr *MockPostgreSQLClientMockRecorder) Logs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockPostgreSQLClient)(nil).Logs), arg0, arg1, arg2, arg3)
}

// MockClickHouseClient is a mock of ClickHouseClient interface.
type MockClickHouseClient struct {
	ctrl     *gomock.Controller
	recorder *MockClickHouseClientMockRecorder
}

// MockClickHouseClientMockRecorder is the mock recorder for MockClickHouseClient.
type MockClickHouseClientMockRecorder struct {
	mock *MockClickHouseClient
}

// NewMockClickHouseClient creates a new mock instance.
func NewMockClickHouseClient(ctrl *gomock.Controller) *MockClickHouseClient {
	mock := &MockClickHouseClient{ctrl: ctrl}
	mock.recorder = &MockClickHouseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickHouseClient) EXPECT() *MockClickHouseClientMockRecorder {
	return m.recorder
}

// Database mocks base method.
func (m *MockClickHouseClient) Database(arg0 context.Context, arg1, arg2 string) (chmodels.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", arg0, arg1, arg2)
	ret0, _ := ret[0].(chmodels.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Database indicates an expected call of Database.
func (mr *MockClickHouseClientMockRecorder) Database(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClickHouseClient)(nil).Database), arg0, arg1, arg2)
}

// Databases mocks base method.
func (m *MockClickHouseClient) Databases(arg0 context.Context, arg1 string) ([]chmodels.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Databases", arg0, arg1)
	ret0, _ := ret[0].([]chmodels.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Databases indicates an expected call of Databases.
func (mr *MockClickHouseClientMockRecorder) Databases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Databases", reflect.TypeOf((*MockClickHouseClient)(nil).Databases), arg0, arg1)
}

// IsReady mocks base method.
func (m *MockClickHouseClient) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockClickHouseClientMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockClickHouseClient)(nil).IsReady), arg0)
}

// Logs mocks base method.
func (m *MockClickHouseClient) Logs(arg0 context.Context, arg1 string, arg2 internalapi.LogsOptions) ([]logs.Message, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]logs.Message)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Logs indicates an expected call of Logs.
func (mr *MockClickHouseClientMockRecorder) Logs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockClickHouseClient)(nil).Logs), arg0, arg1, arg2)
}
