// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-porto-agent/pkg/porto (interfaces: Network,Runner)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// GetExpectedIPAddrs mocks base method.
func (m *MockNetwork) GetExpectedIPAddrs(arg0, arg1, arg2 string, arg3 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpectedIPAddrs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpectedIPAddrs indicates an expected call of GetExpectedIPAddrs.
func (mr *MockNetworkMockRecorder) GetExpectedIPAddrs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpectedIPAddrs", reflect.TypeOf((*MockNetwork)(nil).GetExpectedIPAddrs), arg0, arg1, arg2, arg3)
}

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// RunCommandOnDom0 mocks base method.
func (m *MockRunner) RunCommandOnDom0(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommandOnDom0", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommandOnDom0 indicates an expected call of RunCommandOnDom0.
func (mr *MockRunnerMockRecorder) RunCommandOnDom0(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandOnDom0", reflect.TypeOf((*MockRunner)(nil).RunCommandOnDom0), varargs...)
}

// RunCommandOnPortoContainer mocks base method.
func (m *MockRunner) RunCommandOnPortoContainer(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommandOnPortoContainer", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommandOnPortoContainer indicates an expected call of RunCommandOnPortoContainer.
func (mr *MockRunnerMockRecorder) RunCommandOnPortoContainer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandOnPortoContainer", reflect.TypeOf((*MockRunner)(nil).RunCommandOnPortoContainer), varargs...)
}
