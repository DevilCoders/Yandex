// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import statestore "a.yandex-team.ru/cloud/mdb/mdb-porto-agent/pkg/statestore"
import time "time"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CleanHistory provides a mock function with given fields: dryRun, container, ttl
func (_m *Storage) CleanHistory(dryRun bool, container string, ttl time.Duration) {
	_m.Called(dryRun, container, ttl)
}

// GetTargetState provides a mock function with given fields: target
func (_m *Storage) GetTargetState(target string) (string, statestore.State, error) {
	ret := _m.Called(target)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 statestore.State
	if rf, ok := ret.Get(1).(func(string) statestore.State); ok {
		r1 = rf(target)
	} else {
		r1 = ret.Get(1).(statestore.State)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(target)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListContainers provides a mock function with given fields:
func (_m *Storage) ListContainers() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveState provides a mock function with given fields: container
func (_m *Storage) RemoveState(container string) error {
	ret := _m.Called(container)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(container)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
