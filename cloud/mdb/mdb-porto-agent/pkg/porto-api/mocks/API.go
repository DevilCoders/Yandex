// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import porto "a.yandex-team.ru/infra/tcp-sampler/pkg/porto"
import rpc "a.yandex-team.ru/infra/tcp-sampler/pkg/rpc"
import syscall "syscall"
import time "time"

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// AttachProcess provides a mock function with given fields: name, pid, comm
func (_m *API) AttachProcess(name string, pid uint32, comm string) error {
	ret := _m.Called(name, pid, comm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, string) error); ok {
		r0 = rf(name, pid, comm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *API) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConvertPath provides a mock function with given fields: path, src, dest
func (_m *API) ConvertPath(path string, src string, dest string) (string, error) {
	ret := _m.Called(path, src, dest)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(path, src, dest)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(path, src, dest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: name
func (_m *API) Create(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVolume provides a mock function with given fields: path, config
func (_m *API) CreateVolume(path string, config map[string]string) (porto.TVolumeDescription, error) {
	ret := _m.Called(path, config)

	var r0 porto.TVolumeDescription
	if rf, ok := ret.Get(0).(func(string, map[string]string) porto.TVolumeDescription); ok {
		r0 = rf(path, config)
	} else {
		r0 = ret.Get(0).(porto.TVolumeDescription)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(path, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWeak provides a mock function with given fields: name
func (_m *API) CreateWeak(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: name
func (_m *API) Destroy(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dlist provides a mock function with given fields:
func (_m *API) Dlist() ([]porto.TData, error) {
	ret := _m.Called()

	var r0 []porto.TData
	if rf, ok := ret.Get(0).(func() []porto.TData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]porto.TData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportLayer provides a mock function with given fields: volume, tarball
func (_m *API) ExportLayer(volume string, tarball string) error {
	ret := _m.Called(volume, tarball)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(volume, tarball)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: containers, variables
func (_m *API) Get(containers []string, variables []string) (map[string]map[string]porto.TPortoGetResponse, error) {
	ret := _m.Called(containers, variables)

	var r0 map[string]map[string]porto.TPortoGetResponse
	if rf, ok := ret.Get(0).(func([]string, []string) map[string]map[string]porto.TPortoGetResponse); ok {
		r0 = rf(containers, variables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]porto.TPortoGetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, []string) error); ok {
		r1 = rf(containers, variables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get3 provides a mock function with given fields: containers, variables, nonblock
func (_m *API) Get3(containers []string, variables []string, nonblock bool) (map[string]map[string]porto.TPortoGetResponse, error) {
	ret := _m.Called(containers, variables, nonblock)

	var r0 map[string]map[string]porto.TPortoGetResponse
	if rf, ok := ret.Get(0).(func([]string, []string, bool) map[string]map[string]porto.TPortoGetResponse); ok {
		r0 = rf(containers, variables, nonblock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]porto.TPortoGetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, []string, bool) error); ok {
		r1 = rf(containers, variables, nonblock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: name, data
func (_m *API) GetData(name string, data string) (string, error) {
	ret := _m.Called(name, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastError provides a mock function with given fields:
func (_m *API) GetLastError() rpc.EError {
	ret := _m.Called()

	var r0 rpc.EError
	if rf, ok := ret.Get(0).(func() rpc.EError); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rpc.EError)
	}

	return r0
}

// GetLastErrorMessage provides a mock function with given fields:
func (_m *API) GetLastErrorMessage() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetLayerPrivate provides a mock function with given fields: layer, place
func (_m *API) GetLayerPrivate(layer string, place string) (string, error) {
	ret := _m.Called(layer, place)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(layer, place)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(layer, place)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProperty provides a mock function with given fields: name, property
func (_m *API) GetProperty(name string, property string) (string, error) {
	ret := _m.Called(name, property)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, property)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, property)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields:
func (_m *API) GetVersion() (string, string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImportLayer provides a mock function with given fields: layer, tarball, merge
func (_m *API) ImportLayer(layer string, tarball string, merge bool) error {
	ret := _m.Called(layer, tarball, merge)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(layer, tarball, merge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImportLayer4 provides a mock function with given fields: layer, tarball, merge, place, privateValue
func (_m *API) ImportLayer4(layer string, tarball string, merge bool, place string, privateValue string) error {
	ret := _m.Called(layer, tarball, merge, place, privateValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, string, string) error); ok {
		r0 = rf(layer, tarball, merge, place, privateValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Kill provides a mock function with given fields: name, sig
func (_m *API) Kill(name string, sig syscall.Signal) error {
	ret := _m.Called(name, sig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, syscall.Signal) error); ok {
		r0 = rf(name, sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkVolume provides a mock function with given fields: path, container
func (_m *API) LinkVolume(path string, container string) error {
	ret := _m.Called(path, container)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(path, container)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *API) List() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List1 provides a mock function with given fields: mask
func (_m *API) List1(mask string) ([]string, error) {
	ret := _m.Called(mask)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(mask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLayers provides a mock function with given fields:
func (_m *API) ListLayers() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLayers2 provides a mock function with given fields: place, mask
func (_m *API) ListLayers2(place string, mask string) ([]porto.TLayerDescription, error) {
	ret := _m.Called(place, mask)

	var r0 []porto.TLayerDescription
	if rf, ok := ret.Get(0).(func(string, string) []porto.TLayerDescription); ok {
		r0 = rf(place, mask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]porto.TLayerDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(place, mask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorage provides a mock function with given fields: place, mask
func (_m *API) ListStorage(place string, mask string) ([]porto.TStorageDescription, error) {
	ret := _m.Called(place, mask)

	var r0 []porto.TStorageDescription
	if rf, ok := ret.Get(0).(func(string, string) []porto.TStorageDescription); ok {
		r0 = rf(place, mask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]porto.TStorageDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(place, mask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumeProperties provides a mock function with given fields:
func (_m *API) ListVolumeProperties() ([]porto.TProperty, error) {
	ret := _m.Called()

	var r0 []porto.TProperty
	if rf, ok := ret.Get(0).(func() []porto.TProperty); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]porto.TProperty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumes provides a mock function with given fields: path, container
func (_m *API) ListVolumes(path string, container string) ([]porto.TVolumeDescription, error) {
	ret := _m.Called(path, container)

	var r0 []porto.TVolumeDescription
	if rf, ok := ret.Get(0).(func(string, string) []porto.TVolumeDescription); ok {
		r0 = rf(path, container)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]porto.TVolumeDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pause provides a mock function with given fields: name
func (_m *API) Pause(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Plist provides a mock function with given fields:
func (_m *API) Plist() ([]porto.TProperty, error) {
	ret := _m.Called()

	var r0 []porto.TProperty
	if rf, ok := ret.Get(0).(func() []porto.TProperty); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]porto.TProperty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLayer provides a mock function with given fields: layer
func (_m *API) RemoveLayer(layer string) error {
	ret := _m.Called(layer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(layer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveLayer2 provides a mock function with given fields: layer, place
func (_m *API) RemoveLayer2(layer string, place string) error {
	ret := _m.Called(layer, place)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(layer, place)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveStorage provides a mock function with given fields: name, place
func (_m *API) RemoveStorage(name string, place string) error {
	ret := _m.Called(name, place)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, place)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resume provides a mock function with given fields: name
func (_m *API) Resume(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLayerPrivate provides a mock function with given fields: layer, place, privateValue
func (_m *API) SetLayerPrivate(layer string, place string, privateValue string) error {
	ret := _m.Called(layer, place, privateValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(layer, place, privateValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetProperty provides a mock function with given fields: name, property, value
func (_m *API) SetProperty(name string, property string, value string) error {
	ret := _m.Called(name, property, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(name, property, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: name
func (_m *API) Start(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: name
func (_m *API) Stop(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop2 provides a mock function with given fields: name, timeout
func (_m *API) Stop2(name string, timeout time.Duration) error {
	ret := _m.Called(name, timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(name, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TuneVolume provides a mock function with given fields: path, config
func (_m *API) TuneVolume(path string, config map[string]string) error {
	ret := _m.Called(path, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(path, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlinkVolume provides a mock function with given fields: path, container
func (_m *API) UnlinkVolume(path string, container string) error {
	ret := _m.Called(path, container)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(path, container)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlinkVolume3 provides a mock function with given fields: path, container, strict
func (_m *API) UnlinkVolume3(path string, container string, strict bool) error {
	ret := _m.Called(path, container, strict)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(path, container, strict)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields: containers, timeout
func (_m *API) Wait(containers []string, timeout time.Duration) (string, error) {
	ret := _m.Called(containers, timeout)

	var r0 string
	if rf, ok := ret.Get(0).(func([]string, time.Duration) string); ok {
		r0 = rf(containers, timeout)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, time.Duration) error); ok {
		r1 = rf(containers, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
