swagger: "2.0"
info:
  description: "Provides API for deploying via SaltStack."
  version: "1.0.0"
  title: "MDB Deploy API"
  contact:
    email: "sidh@yandex-team.ru"
  license:
    name: "Proprietary"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /v1/groups:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/Authorization'
    get:
      tags:
      - groups
      summary: "Returns list of groups"
      operationId: "GetGroupsList"
      parameters:
      - $ref: '#/parameters/PageSize'
      - $ref: '#/parameters/PageToken'
      - $ref: '#/parameters/SortOrderInQuery'
      responses:
        200:
          description: "List of groups"
          schema:
            $ref: "#/definitions/GroupsListResp"
        default:
          $ref: "#/responses/Error"
    post:
      tags:
      - groups
      summary: "Creates new group"
      operationId: "CreateGroup"
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Group'
      responses:
        200:
          description: "Created group"
          schema:
            $ref: "#/definitions/GroupResp"
        default:
          $ref: "#/responses/Error"
  /v1/groups/{groupname}:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/GroupName'
    - $ref: '#/parameters/Authorization'
    get:
      tags:
      - groups
      summary: "Returns specific group"
      operationId: "GetGroup"
      responses:
        200:
          description: "Group"
          schema:
            $ref: "#/definitions/GroupResp"
        default:
          $ref: "#/responses/Error"
    delete:
      tags:
      - groups
      summary: "Deletes group"
      operationId: "DeleteGroup"
      responses:
        200:
          description: "Group deleted"
        default:
          $ref: "#/responses/Error"
  /v1/masters:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/Authorization'
    get:
      tags:
      - masters
      summary: "Returns list of masters"
      operationId: "GetMastersList"
      parameters:
      - $ref: '#/parameters/PageSize'
      - $ref: '#/parameters/PageToken'
      responses:
        200:
          description: "List of masters"
          schema:
            $ref: "#/definitions/MastersListResp"
        default:
          $ref: "#/responses/Error"
    post:
      tags:
      - masters
      summary: "Creates new master"
      operationId: "CreateMaster"
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Master'
      responses:
        200:
          description: "Created master"
          schema:
            $ref: "#/definitions/MasterResp"
        default:
          $ref: "#/responses/Error"
  /v1/masters/{fqdn}:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/FQDN'
    - $ref: '#/parameters/Authorization'
    get:
      tags:
      - masters
      summary: "Returns specific master"
      operationId: "GetMaster"
      responses:
        200:
          description: "Master"
          schema:
            $ref: "#/definitions/MasterResp"
        default:
          $ref: "#/responses/Error"
    put:
      tags:
      - masters
      summary: "Creates new master or updates the old one"
      operationId: "UpsertMaster"
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Master'
      responses:
        200:
          description: "Upserted master"
          schema:
            $ref: "#/definitions/MasterResp"
        default:
          $ref: "#/responses/Error"
    delete:
      tags:
      - masters
      summary: "Deletes master"
      operationId: "DeleteMaster"
      responses:
        200:
          description: "Master deleted"
        default:
          $ref: "#/responses/Error"
  /v1/masters/{fqdn}/minions:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/FQDN'
    - $ref: '#/parameters/Authorization'
    get:
      tags:
      - masters
      summary: "Returns list of minions assigned to specific master"
      operationId: "GetMasterMinions"
      parameters:
      - $ref: '#/parameters/PageSize'
      - $ref: '#/parameters/PageToken'
      responses:
        200:
          description: "List of minions"
          schema:
            $ref: "#/definitions/MinionsListResp"
        default:
          $ref: "#/responses/Error"
  /v1/masters/{fqdn}/minions/changes:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/FQDN'
    - $ref: '#/parameters/Authorization'
    get:
      tags:
      - masters
      summary: "Returns changelog in minions for specified master"
      operationId: "GetMasterMinionsChanges"
      parameters:
      - $ref: '#/parameters/PageSize'
      - $ref: '#/parameters/PageToken'
      - name: fromTimestamp
        in: query
        description: Timestamp in Unix Time starting from which to return changes
        type: integer
        format: int64
      responses:
        200:
          description: "List of minions changes"
          schema:
            $ref: "#/definitions/MinionChangeList"
        default:
          $ref: "#/responses/Error"
  /v1/minions:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/Authorization'
    get:
      tags:
      - minions
      summary: "Returns list of minions"
      operationId: "GetMinionsList"
      parameters:
      - $ref: '#/parameters/PageSize'
      - $ref: '#/parameters/PageToken'
      responses:
        200:
          description: "List of minions"
          schema:
            $ref: "#/definitions/MinionsListResp"
        default:
          $ref: "#/responses/Error"
    post:
      tags:
      - minions
      summary: "Creates new minion"
      operationId: "CreateMinion"
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Minion'
      responses:
        200:
          description: "Created minion"
          schema:
            $ref: "#/definitions/MinionResp"
        default:
          $ref: "#/responses/Error"
  /v1/minions/{fqdn}:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/FQDN'
    - $ref: '#/parameters/Authorization'
    get:
      tags:
      - minions
      summary: "Returns specific minion"
      operationId: "GetMinion"
      responses:
        200:
          description: "Minion"
          schema:
            $ref: "#/definitions/MinionResp"
        default:
          $ref: "#/responses/Error"
    put:
      tags:
      - minions
      summary: "Creates new minion or updates the old one"
      operationId: "UpsertMinion"
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Minion'
      responses:
        200:
          description: "Upserted minion"
          schema:
            $ref: "#/definitions/MinionResp"
        default:
          $ref: "#/responses/Error"
    delete:
      tags:
      - minions
      summary: "Deletes minion"
      operationId: "DeleteMinion"
      responses:
        200:
          description: "Minion deleted"
        default:
          $ref: "#/responses/Error"
  /v1/minions/{fqdn}/master:
    parameters:
    - $ref: '#/parameters/RequestIdHeader'
    - $ref: '#/parameters/FQDN'
    get:
      tags:
      - minions
      summary: "Returns master of specific minion. Does NOT require authentication."
      operationId: "GetMinionMaster"
      responses:
        200:
          description: "Minion's master"
          schema:
            $ref: "#/definitions/MinionMaster"
        default:
          $ref: "#/responses/Error"
  /v1/minions/{fqdn}/register:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/FQDN'
      - $ref: '#/parameters/Authorization'
    post:
      tags:
        - minions
      summary: "Registers minion's public key."
      operationId: "RegisterMinion"
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MinionPublicKey'
      responses:
        200:
          description: "Registered minion"
          schema:
            $ref: "#/definitions/MinionResp"
        default:
          $ref: "#/responses/Error"
  /v1/minions/{fqdn}/unregister:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/FQDN'
      - $ref: '#/parameters/Authorization'
    post:
      tags:
        - minions
      summary: "Unregisters minion's public key. Minion can be registered again as if it was just created."
      operationId: "UnregisterMinion"
      responses:
        200:
          description: "Unregistered minion"
          schema:
            $ref: "#/definitions/MinionResp"
        default:
          $ref: "#/responses/Error"
  /v1/minions/{fqdn}/jobs/{jobId}/results:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/FQDN'
      - $ref: '#/parameters/JobId'
    post:
      tags:
        - commands
      summary: "Create job result for specific job."
      operationId: "CreateJobResult"
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JobResult'
      responses:
        200:
          description: "Job result"
          schema:
            $ref: "#/definitions/JobResultResp"
        default:
          $ref: "#/responses/Error"
  /v1/shipments:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/Authorization'
    get:
      tags:
        - commands
      summary: "Returns list of shipments"
      operationId: "GetShipmentsList"
      parameters:
        - $ref: '#/parameters/PageSize'
        - $ref: '#/parameters/PageToken'
        - $ref: '#/parameters/FQDNInQuery'
        - $ref: '#/parameters/ShipmentStatusInQuery'
        - $ref: '#/parameters/SortOrderInQuery'
      responses:
        200:
          description: "List of shipments"
          schema:
            $ref: "#/definitions/ShipmentsListResp"
        default:
          $ref: "#/responses/Error"
    post:
      tags:
        - commands
      summary: "Creates new shipment"
      operationId: "CreateShipment"
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Shipment'
      responses:
        200:
          description: "Created shipment"
          schema:
            $ref: "#/definitions/ShipmentResp"
        default:
          $ref: "#/responses/Error"
  /v1/shipments/{shipmentId}:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/ShipmentId'
      - $ref: '#/parameters/Authorization'
    get:
      tags:
        - commands
      summary: "Returns specific shipment"
      operationId: "GetShipment"
      responses:
        200:
          description: "Shipment"
          schema:
            $ref: "#/definitions/ShipmentResp"
        default:
          $ref: "#/responses/Error"
  /v1/commands:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/Authorization'
    get:
      tags:
        - commands
      summary: "Returns list of commands"
      operationId: "GetCommandsList"
      parameters:
        - $ref: '#/parameters/PageSize'
        - $ref: '#/parameters/PageToken'
        - $ref: '#/parameters/ShipmentIdInQuery'
        - $ref: '#/parameters/FQDNInQuery'
        - $ref: '#/parameters/CommandStatusInQuery'
        - $ref: '#/parameters/SortOrderInQuery'
      responses:
        200:
          description: "List of commands"
          schema:
            $ref: "#/definitions/CommandsListResp"
        default:
          $ref: "#/responses/Error"
  /v1/commands/{commandId}:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/CommandId'
      - $ref: '#/parameters/Authorization'
    get:
      tags:
        - commands
      summary: "Returns specific command"
      operationId: "GetCommand"
      responses:
        200:
          description: "Command"
          schema:
            $ref: "#/definitions/CommandResp"
        default:
          $ref: "#/responses/Error"
  /v1/jobs:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/Authorization'
    get:
      tags:
        - commands
      summary: "Returns list of jobs"
      operationId: "GetJobsList"
      parameters:
        - $ref: '#/parameters/PageSize'
        - $ref: '#/parameters/PageToken'
        - $ref: '#/parameters/ShipmentIdInQuery'
        - $ref: '#/parameters/FQDNInQuery'
        - $ref: '#/parameters/ExtJobIdInQuery'
        - $ref: '#/parameters/JobStatusInQuery'
        - $ref: '#/parameters/SortOrderInQuery'
      responses:
        200:
          description: "List of jobs"
          schema:
            $ref: "#/definitions/JobsListResp"
        default:
          $ref: "#/responses/Error"
  /v1/jobs/{jobId}:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/JobId'
      - $ref: '#/parameters/Authorization'
    get:
      tags:
        - commands
      summary: "Returns specific job"
      operationId: "GetJob"
      responses:
        200:
          description: "Job"
          schema:
            $ref: "#/definitions/JobResp"
        default:
          $ref: "#/responses/Error"
  /v1/jobresults:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
    get:
      tags:
        - commands
      summary: "Returns job results"
      operationId: "GetJobResultsList"
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/PageSize'
        - $ref: '#/parameters/PageToken'
        - $ref: '#/parameters/FQDNInQuery'
        - $ref: '#/parameters/ExtJobIdInQuery'
        - $ref: '#/parameters/JobResultStatusInQuery'
        - $ref: '#/parameters/SortOrderInQuery'
        - name: jobId
          in: query
          description: DEPRECATED! NOT A JOB ID. WILL BE USED AS ExtJobID
          type: string
      responses:
        200:
          description: "Job results"
          schema:
            $ref: "#/definitions/JobResultsListResp"
        default:
          $ref: "#/responses/Error"
  /v1/jobresults/{jobResultId}:
    parameters:
      - $ref: '#/parameters/RequestIdHeader'
      - $ref: '#/parameters/JobResultId'
      - $ref: '#/parameters/Authorization'
    get:
      tags:
        - commands
      summary: "Returns specific job result"
      operationId: "GetJobResult"
      responses:
        200:
          description: "Job result"
          schema:
            $ref: "#/definitions/JobResultResp"
        default:
          $ref: "#/responses/Error"
  /v1/ping:
    get:
      tags:
      - common
      summary: "Reports service status"
      operationId: "Ping"
      responses:
        200:
          description: "Service is alive and well"
        default:
          $ref: "#/responses/Error"
  /v1/stats:
    get:
      tags:
      - common
      summary: "Reports service stats"
      operationId: "Stats"
      responses:
        200:
          description: "Reports service stats"
          schema:
            $ref: "#/definitions/Stats"
        default:
          $ref: "#/responses/Error"
parameters:
  RequestIdHeader:
    name: X-Request-Id
    in: header
    description: Unique request ID (must be generated for each separate request, even retries)
    type: string
  Authorization:
    name: Authorization
    in: header
    description: OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.
    type: string
  PageSize:
    name: pageSize
    in: query
    description: Number of results per page
    type: integer
    format: int64
    default: 100
  PageToken:
    name: pageToken
    in: query
    description: Token to request the next page in listing
    type: string
  FQDN:
    name: fqdn
    in: path
    required: true
    description: fqdn of whatever
    type: string
  FQDNInQuery:
    name: fqdn
    in: query
    description: fqdn of whatever
    type: string
  GroupName:
    name: groupname
    in: path
    required: true
    description: Group's name
    type: string
  ShipmentId:
    name: shipmentId
    in: path
    required: true
    description: Shipment ID
    type: string
  ShipmentIdInQuery:
    name: shipmentId
    in: query
    description: Shipment ID
    type: string
  ShipmentStatusInQuery:
    name: shipmentStatus
    in: query
    description: Shipment status
    type: string
  CommandId:
    name: commandId
    in: path
    required: true
    description: Command ID
    type: string
  CommandStatusInQuery:
    name: commandStatus
    in: query
    description: Command status
    type: string
  JobId:
    name: jobId
    in: path
    required: true
    description: Job ID
    type: string
  JobIdInQuery:
    name: jobId
    in: query
    description: Job ID
    type: string
  ExtJobIdInQuery:
    name: extJobId
    in: query
    description: Ext job ID
    type: string
  JobStatusInQuery:
    name: jobStatus
    in: query
    description: Job status
    type: string
  JobResultId:
    name: jobResultId
    in: path
    required: true
    description: Job result ID
    type: string
  JobResultStatusInQuery:
    name: jobResultStatus
    in: query
    description: Job result status
    type: string
  SortOrderInQuery:
    name: sortOrder
    in: query
    description: Sorting order for listings
    type: string
    enum:
      - asc
      - desc
responses:
  Error:
    description: "Error"
    schema:
      $ref: "#/definitions/Error"
definitions:
  Paging:
    type: object
    properties:
      token:
        $ref: '#/parameters/PageToken'
  GroupsListResp:
    allOf:
    - $ref: "#/definitions/Paging"
    - type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/definitions/GroupResp"
  GroupResp:
    allOf:
    - $ref: "#/definitions/Group"
    - type: object
      properties:
        mastersCount:
          description: Number of masters in this group
          type: integer
          format: int64
        minionsCount:
          description: Number of minions in this group
          type: integer
          format: int64
  Group:
    type: object
    properties:
      id:
        description: Group ID
        type: integer
        format: int64
      name:
        description: Groups's name
        type: string
  MastersListResp:
    allOf:
    - $ref: "#/definitions/Paging"
    - type: object
      properties:
        masters:
          type: array
          items:
            $ref: "#/definitions/MasterResp"
  MasterResp:
    allOf:
    - $ref: "#/definitions/Master"
    - type: object
      properties:
        createdAt:
          description: Timestamp when master was created
          type: integer
          format: int64
        aliveCheckAt:
          description: Timestamp when last alive check was performed
          type: integer
          format: int64
        isAlive:
          description: Is master alive?
          type: boolean
        minionsCount:
          description: Number of minions assigned to this master
          type: integer
          format: int64
  Master:
    type: object
    properties:
      fqdn:
        description: Masters's fqdn
        type: string
      aliases:
        description: List of host aliases
        type: array
        items:
          type: string
      group:
        description: Which group of masters this master belongs to
        type: string
        x-nullable: true
      isOpen:
        description: Is it allowed to auto-assign minions in its group to this master?
        type: boolean
        x-nullable: true
      description:
        description: Master's description
        type: string
        x-nullable: true
      publicKey:
        description: Master's public key
        type: string
        x-nullable: true
  MinionsListResp:
    allOf:
    - $ref: "#/definitions/Paging"
    - type: object
      properties:
        minions:
          type: array
          items:
            $ref: "#/definitions/MinionResp"
  MinionResp:
    allOf:
    - $ref: "#/definitions/Minion"
    - $ref: "#/definitions/MinionPublicKey"
    - type: object
      properties:
        createdAt:
          description: Timestamp when minion was created
          type: integer
          format: int64
        updatedAt:
          description: Timestamp when minion was updated
          type: integer
          format: int64
        registerUntil:
          description: Timestamp until minion must be registered
          type: integer
          format: int64
        registered:
          description: Whether minion is registered or not
          type: boolean
        deleted:
          description: Whether minion is deleted or not
          type: boolean
  Minion:
    type: object
    properties:
      fqdn:
        description: Minion's fqdn
        type: string
      group:
        description: Which group of masters this minion belongs to
        type: string
        x-nullable: true
      autoReassign:
        description: Is it allowed to auto-assign this minion to masters in its group?
        type: boolean
        x-nullable: true
      master:
        description: Which master this minion belongs to
        type: string
        x-nullable: true
  MinionMaster:
    allOf:
      - $ref: "#/definitions/MinionPublicKey"
      - type: object
        properties:
          master:
            description: Master's fqdn
            type: string
          masterPublicKey:
            description: Master's public key
            type: string
  MinionPublicKey:
    type: object
    properties:
      publicKey:
        description: Minion's public key
        type: string
  MinionChangeList:
    type: object
    properties:
      masters:
        type: array
        items:
          $ref: "#/definitions/MinionChange"
  MinionChange:
    type: object
    properties:
      fqdn:
        description: Minion's fqdn
        type: string
      master:
        description: Master's fqdn
        type: string
      action:
        type: string
        enum:
        - create
        - delete
        - reassign
      timestamp:
        type: integer
        format: int64
  ShipmentsListResp:
    allOf:
      - $ref: "#/definitions/Paging"
      - type: object
        properties:
          shipments:
            type: array
            items:
              $ref: "#/definitions/ShipmentResp"
  ShipmentResp:
    allOf:
      - $ref: "#/definitions/Shipment"
      - type: object
        properties:
          id:
            type: string
          status:
            $ref: "#/definitions/ShipmentStatus"
          otherCount:
            description: Number of commands that are not done and not failed
            type: integer
            format: int64
          doneCount:
            description: Number of commands that succeeded
            type: integer
            format: int64
          errorsCount:
            description: Number of commands that failed
            type: integer
            format: int64
          totalCount:
            description: Total number of commands
            type: integer
            format: int64
          createdAt:
            description: Timestamp when shipment was created
            type: integer
            format: int64
          updatedAt:
            description: Timestamp when shipment was updated
            type: integer
            format: int64
  ShipmentStatus:
    type: string
    enum:
      - unknown
      - inprogress
      - done
      - error
      - timeout
  Shipment:
    type: object
    properties:
      commands:
        description: Commands definitions
        type: array
        items:
          $ref: "#/definitions/CommandDef"
      fqdns:
        description: FQDNs of target minions for this shipment
        type: array
        items:
          type: string
      parallel:
        description: Number of commands allowed to run simultaneously
        type: integer
        format: int64
      batchSize:
        description: Number of commands allowed to run simultaneously
        type: integer
        format: int64
      stopOnErrorCount:
        description: Number of failed commands after which entire shipment fails. Zero means do not fail on error count.
        type: integer
        format: int64
      timeout:
        description: Timeout in seconds for entire shipment
        type: integer
        format: int64
  CommandDef:
    type: object
    properties:
      type:
        description: Command type
        type: string
      arguments:
        description: Command arguments
        type: array
        items:
          type: string
      timeout:
        description: Timeout in seconds for command
        type: integer
        format: int64
  CommandsListResp:
    allOf:
      - $ref: "#/definitions/Paging"
      - type: object
        properties:
          commands:
            type: array
            items:
              $ref: "#/definitions/CommandResp"
  CommandResp:
    allOf:
      - $ref: "#/definitions/CommandDef"
      - type: object
        properties:
          id:
            type: string
          shipmentID:
            type: string
          fqdn:
            description: FQDN this command is meant for
            type: string
          status:
            $ref: "#/definitions/CommandStatus"
          createdAt:
            description: Timestamp when command was created
            type: integer
            format: int64
          updatedAt:
            description: Timestamp when command was updated
            type: integer
            format: int64
  CommandStatus:
    type: string
    enum:
      - unknown
      - available
      - running
      - done
      - error
      - canceled
      - timeout
  JobsListResp:
    allOf:
      - $ref: "#/definitions/Paging"
      - type: object
        properties:
          jobs:
            type: array
            items:
              $ref: "#/definitions/JobResp"
  JobResp:
    type: object
    properties:
      id:
        description: ID of this job in deploy
        type: string
      extId:
        description: ID of this job in underlying deploy system (SaltStack)
        type: string
      commandID:
        description: ID of command that spawned this job
        type: string
      status:
        $ref: "#/definitions/JobStatus"
      createdAt:
        description: Timestamp when job was created
        type: integer
        format: int64
      updatedAt:
        description: Timestamp when job was updated
        type: integer
        format: int64
  JobStatus:
    type: string
    enum:
      - unknown
      - running
      - done
      - error
      - timeout
  JobResultsListResp:
    allOf:
      - $ref: "#/definitions/Paging"
      - type: object
        properties:
          jobResults:
            type: array
            items:
              $ref: "#/definitions/JobResultResp"
  JobResultResp:
    allOf:
      - $ref: "#/definitions/JobResult"
      - type: object
        properties:
          id:
            type: integer
            format: int64
          extID:
            type: string
          fqdn:
            type: string
          order:
            type: integer
            format: int32
          status:
            $ref: "#/definitions/JobResultStatus"
          recordedAt:
            description: Timestamp when job result was recorded
            type: integer
            format: int64
  JobResult:
    type: object
    properties:
      result:
        type: string
        format: byte
  JobResultStatus:
    type: string
    enum:
      - unknown
      - success
      - failure
      - timeout
      - notrunning
  Stats:
    description: "Collection of service stats"
    type: array
    items:
      description: "Specific stats"
      type: array
      items:
        type: object
  Error:
    type: object
    properties:
      message:
        description: "Error description"
        type: string
