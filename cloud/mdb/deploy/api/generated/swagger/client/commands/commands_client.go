// Code generated by go-swagger; DO NOT EDIT.

package commands

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new commands API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for commands API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateJobResult(params *CreateJobResultParams, opts ...ClientOption) (*CreateJobResultOK, error)

	CreateShipment(params *CreateShipmentParams, opts ...ClientOption) (*CreateShipmentOK, error)

	GetCommand(params *GetCommandParams, opts ...ClientOption) (*GetCommandOK, error)

	GetCommandsList(params *GetCommandsListParams, opts ...ClientOption) (*GetCommandsListOK, error)

	GetJob(params *GetJobParams, opts ...ClientOption) (*GetJobOK, error)

	GetJobResult(params *GetJobResultParams, opts ...ClientOption) (*GetJobResultOK, error)

	GetJobResultsList(params *GetJobResultsListParams, opts ...ClientOption) (*GetJobResultsListOK, error)

	GetJobsList(params *GetJobsListParams, opts ...ClientOption) (*GetJobsListOK, error)

	GetShipment(params *GetShipmentParams, opts ...ClientOption) (*GetShipmentOK, error)

	GetShipmentsList(params *GetShipmentsListParams, opts ...ClientOption) (*GetShipmentsListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateJobResult creates job result for specific job
*/
func (a *Client) CreateJobResult(params *CreateJobResultParams, opts ...ClientOption) (*CreateJobResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJobResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateJobResult",
		Method:             "POST",
		PathPattern:        "/v1/minions/{fqdn}/jobs/{jobId}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateJobResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateJobResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateJobResultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateShipment creates new shipment
*/
func (a *Client) CreateShipment(params *CreateShipmentParams, opts ...ClientOption) (*CreateShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateShipment",
		Method:             "POST",
		PathPattern:        "/v1/shipments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateShipmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCommand returns specific command
*/
func (a *Client) GetCommand(params *GetCommandParams, opts ...ClientOption) (*GetCommandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommandParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCommand",
		Method:             "GET",
		PathPattern:        "/v1/commands/{commandId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommandOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCommandDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCommandsList returns list of commands
*/
func (a *Client) GetCommandsList(params *GetCommandsListParams, opts ...ClientOption) (*GetCommandsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommandsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCommandsList",
		Method:             "GET",
		PathPattern:        "/v1/commands",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCommandsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommandsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCommandsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetJob returns specific job
*/
func (a *Client) GetJob(params *GetJobParams, opts ...ClientOption) (*GetJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJob",
		Method:             "GET",
		PathPattern:        "/v1/jobs/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetJobResult returns specific job result
*/
func (a *Client) GetJobResult(params *GetJobResultParams, opts ...ClientOption) (*GetJobResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJobResult",
		Method:             "GET",
		PathPattern:        "/v1/jobresults/{jobResultId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJobResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetJobResultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetJobResultsList returns job results
*/
func (a *Client) GetJobResultsList(params *GetJobResultsListParams, opts ...ClientOption) (*GetJobResultsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobResultsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJobResultsList",
		Method:             "GET",
		PathPattern:        "/v1/jobresults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJobResultsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobResultsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetJobResultsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetJobsList returns list of jobs
*/
func (a *Client) GetJobsList(params *GetJobsListParams, opts ...ClientOption) (*GetJobsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJobsList",
		Method:             "GET",
		PathPattern:        "/v1/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJobsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetJobsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetShipment returns specific shipment
*/
func (a *Client) GetShipment(params *GetShipmentParams, opts ...ClientOption) (*GetShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetShipment",
		Method:             "GET",
		PathPattern:        "/v1/shipments/{shipmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetShipmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetShipmentsList returns list of shipments
*/
func (a *Client) GetShipmentsList(params *GetShipmentsListParams, opts ...ClientOption) (*GetShipmentsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShipmentsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetShipmentsList",
		Method:             "GET",
		PathPattern:        "/v1/shipments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetShipmentsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShipmentsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetShipmentsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
