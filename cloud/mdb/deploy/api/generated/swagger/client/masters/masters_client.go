// Code generated by go-swagger; DO NOT EDIT.

package masters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new masters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for masters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMaster(params *CreateMasterParams, opts ...ClientOption) (*CreateMasterOK, error)

	DeleteMaster(params *DeleteMasterParams, opts ...ClientOption) (*DeleteMasterOK, error)

	GetMaster(params *GetMasterParams, opts ...ClientOption) (*GetMasterOK, error)

	GetMasterMinions(params *GetMasterMinionsParams, opts ...ClientOption) (*GetMasterMinionsOK, error)

	GetMasterMinionsChanges(params *GetMasterMinionsChangesParams, opts ...ClientOption) (*GetMasterMinionsChangesOK, error)

	GetMastersList(params *GetMastersListParams, opts ...ClientOption) (*GetMastersListOK, error)

	UpsertMaster(params *UpsertMasterParams, opts ...ClientOption) (*UpsertMasterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMaster creates new master
*/
func (a *Client) CreateMaster(params *CreateMasterParams, opts ...ClientOption) (*CreateMasterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMasterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMaster",
		Method:             "POST",
		PathPattern:        "/v1/masters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMasterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMasterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMasterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteMaster deletes master
*/
func (a *Client) DeleteMaster(params *DeleteMasterParams, opts ...ClientOption) (*DeleteMasterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMasterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMaster",
		Method:             "DELETE",
		PathPattern:        "/v1/masters/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMasterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMasterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMasterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMaster returns specific master
*/
func (a *Client) GetMaster(params *GetMasterParams, opts ...ClientOption) (*GetMasterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMasterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMaster",
		Method:             "GET",
		PathPattern:        "/v1/masters/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMasterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMasterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMasterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMasterMinions returns list of minions assigned to specific master
*/
func (a *Client) GetMasterMinions(params *GetMasterMinionsParams, opts ...ClientOption) (*GetMasterMinionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMasterMinionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMasterMinions",
		Method:             "GET",
		PathPattern:        "/v1/masters/{fqdn}/minions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMasterMinionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMasterMinionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMasterMinionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMasterMinionsChanges returns changelog in minions for specified master
*/
func (a *Client) GetMasterMinionsChanges(params *GetMasterMinionsChangesParams, opts ...ClientOption) (*GetMasterMinionsChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMasterMinionsChangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMasterMinionsChanges",
		Method:             "GET",
		PathPattern:        "/v1/masters/{fqdn}/minions/changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMasterMinionsChangesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMasterMinionsChangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMasterMinionsChangesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMastersList returns list of masters
*/
func (a *Client) GetMastersList(params *GetMastersListParams, opts ...ClientOption) (*GetMastersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMastersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMastersList",
		Method:             "GET",
		PathPattern:        "/v1/masters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMastersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMastersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMastersListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpsertMaster creates new master or updates the old one
*/
func (a *Client) UpsertMaster(params *UpsertMasterParams, opts ...ClientOption) (*UpsertMasterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertMasterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpsertMaster",
		Method:             "PUT",
		PathPattern:        "/v1/masters/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpsertMasterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertMasterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpsertMasterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
