// Code generated by go-swagger; DO NOT EDIT.

package minions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new minions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for minions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMinion(params *CreateMinionParams, opts ...ClientOption) (*CreateMinionOK, error)

	DeleteMinion(params *DeleteMinionParams, opts ...ClientOption) (*DeleteMinionOK, error)

	GetMinion(params *GetMinionParams, opts ...ClientOption) (*GetMinionOK, error)

	GetMinionMaster(params *GetMinionMasterParams, opts ...ClientOption) (*GetMinionMasterOK, error)

	GetMinionsList(params *GetMinionsListParams, opts ...ClientOption) (*GetMinionsListOK, error)

	RegisterMinion(params *RegisterMinionParams, opts ...ClientOption) (*RegisterMinionOK, error)

	UnregisterMinion(params *UnregisterMinionParams, opts ...ClientOption) (*UnregisterMinionOK, error)

	UpsertMinion(params *UpsertMinionParams, opts ...ClientOption) (*UpsertMinionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMinion creates new minion
*/
func (a *Client) CreateMinion(params *CreateMinionParams, opts ...ClientOption) (*CreateMinionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMinionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMinion",
		Method:             "POST",
		PathPattern:        "/v1/minions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMinionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMinionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMinionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteMinion deletes minion
*/
func (a *Client) DeleteMinion(params *DeleteMinionParams, opts ...ClientOption) (*DeleteMinionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMinionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMinion",
		Method:             "DELETE",
		PathPattern:        "/v1/minions/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMinionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMinionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMinionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMinion returns specific minion
*/
func (a *Client) GetMinion(params *GetMinionParams, opts ...ClientOption) (*GetMinionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMinion",
		Method:             "GET",
		PathPattern:        "/v1/minions/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMinionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMinionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMinionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMinionMaster returns master of specific minion does n o t require authentication
*/
func (a *Client) GetMinionMaster(params *GetMinionMasterParams, opts ...ClientOption) (*GetMinionMasterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinionMasterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMinionMaster",
		Method:             "GET",
		PathPattern:        "/v1/minions/{fqdn}/master",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMinionMasterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMinionMasterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMinionMasterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMinionsList returns list of minions
*/
func (a *Client) GetMinionsList(params *GetMinionsListParams, opts ...ClientOption) (*GetMinionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinionsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMinionsList",
		Method:             "GET",
		PathPattern:        "/v1/minions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMinionsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMinionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMinionsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RegisterMinion registers minion s public key
*/
func (a *Client) RegisterMinion(params *RegisterMinionParams, opts ...ClientOption) (*RegisterMinionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterMinionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterMinion",
		Method:             "POST",
		PathPattern:        "/v1/minions/{fqdn}/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RegisterMinionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterMinionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterMinionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnregisterMinion unregisters minion s public key minion can be registered again as if it was just created
*/
func (a *Client) UnregisterMinion(params *UnregisterMinionParams, opts ...ClientOption) (*UnregisterMinionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnregisterMinionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnregisterMinion",
		Method:             "POST",
		PathPattern:        "/v1/minions/{fqdn}/unregister",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnregisterMinionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnregisterMinionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnregisterMinionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpsertMinion creates new minion or updates the old one
*/
func (a *Client) UpsertMinion(params *UpsertMinionParams, opts ...ClientOption) (*UpsertMinionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertMinionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpsertMinion",
		Method:             "PUT",
		PathPattern:        "/v1/minions/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpsertMinionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertMinionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpsertMinionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
