// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ShipmentResp shipment resp
//
// swagger:model ShipmentResp
type ShipmentResp struct {
	Shipment

	// Timestamp when shipment was created
	CreatedAt int64 `json:"createdAt,omitempty"`

	// Number of commands that succeeded
	DoneCount int64 `json:"doneCount,omitempty"`

	// Number of commands that failed
	ErrorsCount int64 `json:"errorsCount,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// Number of commands that are not done and not failed
	OtherCount int64 `json:"otherCount,omitempty"`

	// status
	Status ShipmentStatus `json:"status,omitempty"`

	// Total number of commands
	TotalCount int64 `json:"totalCount,omitempty"`

	// Timestamp when shipment was updated
	UpdatedAt int64 `json:"updatedAt,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ShipmentResp) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Shipment
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Shipment = aO0

	// AO1
	var dataAO1 struct {
		CreatedAt int64 `json:"createdAt,omitempty"`

		DoneCount int64 `json:"doneCount,omitempty"`

		ErrorsCount int64 `json:"errorsCount,omitempty"`

		ID string `json:"id,omitempty"`

		OtherCount int64 `json:"otherCount,omitempty"`

		Status ShipmentStatus `json:"status,omitempty"`

		TotalCount int64 `json:"totalCount,omitempty"`

		UpdatedAt int64 `json:"updatedAt,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CreatedAt = dataAO1.CreatedAt

	m.DoneCount = dataAO1.DoneCount

	m.ErrorsCount = dataAO1.ErrorsCount

	m.ID = dataAO1.ID

	m.OtherCount = dataAO1.OtherCount

	m.Status = dataAO1.Status

	m.TotalCount = dataAO1.TotalCount

	m.UpdatedAt = dataAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ShipmentResp) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Shipment)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CreatedAt int64 `json:"createdAt,omitempty"`

		DoneCount int64 `json:"doneCount,omitempty"`

		ErrorsCount int64 `json:"errorsCount,omitempty"`

		ID string `json:"id,omitempty"`

		OtherCount int64 `json:"otherCount,omitempty"`

		Status ShipmentStatus `json:"status,omitempty"`

		TotalCount int64 `json:"totalCount,omitempty"`

		UpdatedAt int64 `json:"updatedAt,omitempty"`
	}

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.DoneCount = m.DoneCount

	dataAO1.ErrorsCount = m.ErrorsCount

	dataAO1.ID = m.ID

	dataAO1.OtherCount = m.OtherCount

	dataAO1.Status = m.Status

	dataAO1.TotalCount = m.TotalCount

	dataAO1.UpdatedAt = m.UpdatedAt

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this shipment resp
func (m *ShipmentResp) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Shipment
	if err := m.Shipment.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentResp) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this shipment resp based on the context it is used
func (m *ShipmentResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Shipment
	if err := m.Shipment.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentResp) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentResp) UnmarshalBinary(b []byte) error {
	var res ShipmentResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
