// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MinionResp minion resp
//
// swagger:model MinionResp
type MinionResp struct {
	Minion

	MinionPublicKey

	// Timestamp when minion was created
	CreatedAt int64 `json:"createdAt,omitempty"`

	// Whether minion is deleted or not
	Deleted bool `json:"deleted,omitempty"`

	// Timestamp until minion must be registered
	RegisterUntil int64 `json:"registerUntil,omitempty"`

	// Whether minion is registered or not
	Registered bool `json:"registered,omitempty"`

	// Timestamp when minion was updated
	UpdatedAt int64 `json:"updatedAt,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MinionResp) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Minion
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Minion = aO0

	// AO1
	var aO1 MinionPublicKey
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.MinionPublicKey = aO1

	// AO2
	var dataAO2 struct {
		CreatedAt int64 `json:"createdAt,omitempty"`

		Deleted bool `json:"deleted,omitempty"`

		RegisterUntil int64 `json:"registerUntil,omitempty"`

		Registered bool `json:"registered,omitempty"`

		UpdatedAt int64 `json:"updatedAt,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.CreatedAt = dataAO2.CreatedAt

	m.Deleted = dataAO2.Deleted

	m.RegisterUntil = dataAO2.RegisterUntil

	m.Registered = dataAO2.Registered

	m.UpdatedAt = dataAO2.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MinionResp) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.Minion)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.MinionPublicKey)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		CreatedAt int64 `json:"createdAt,omitempty"`

		Deleted bool `json:"deleted,omitempty"`

		RegisterUntil int64 `json:"registerUntil,omitempty"`

		Registered bool `json:"registered,omitempty"`

		UpdatedAt int64 `json:"updatedAt,omitempty"`
	}

	dataAO2.CreatedAt = m.CreatedAt

	dataAO2.Deleted = m.Deleted

	dataAO2.RegisterUntil = m.RegisterUntil

	dataAO2.Registered = m.Registered

	dataAO2.UpdatedAt = m.UpdatedAt

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this minion resp
func (m *MinionResp) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Minion
	if err := m.Minion.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with MinionPublicKey
	if err := m.MinionPublicKey.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this minion resp based on the context it is used
func (m *MinionResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Minion
	if err := m.Minion.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with MinionPublicKey
	if err := m.MinionPublicKey.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *MinionResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MinionResp) UnmarshalBinary(b []byte) error {
	var res MinionResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
