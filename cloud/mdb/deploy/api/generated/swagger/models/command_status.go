// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommandStatus command status
//
// swagger:model CommandStatus
type CommandStatus string

func NewCommandStatus(value CommandStatus) *CommandStatus {
	v := value
	return &v
}

const (

	// CommandStatusUnknown captures enum value "unknown"
	CommandStatusUnknown CommandStatus = "unknown"

	// CommandStatusAvailable captures enum value "available"
	CommandStatusAvailable CommandStatus = "available"

	// CommandStatusRunning captures enum value "running"
	CommandStatusRunning CommandStatus = "running"

	// CommandStatusDone captures enum value "done"
	CommandStatusDone CommandStatus = "done"

	// CommandStatusError captures enum value "error"
	CommandStatusError CommandStatus = "error"

	// CommandStatusCanceled captures enum value "canceled"
	CommandStatusCanceled CommandStatus = "canceled"

	// CommandStatusTimeout captures enum value "timeout"
	CommandStatusTimeout CommandStatus = "timeout"
)

// for schema
var commandStatusEnum []interface{}

func init() {
	var res []CommandStatus
	if err := json.Unmarshal([]byte(`["unknown","available","running","done","error","canceled","timeout"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commandStatusEnum = append(commandStatusEnum, v)
	}
}

func (m CommandStatus) validateCommandStatusEnum(path, location string, value CommandStatus) error {
	if err := validate.EnumCase(path, location, value, commandStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this command status
func (m CommandStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommandStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this command status based on context it is used
func (m CommandStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
