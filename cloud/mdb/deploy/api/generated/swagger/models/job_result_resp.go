// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JobResultResp job result resp
//
// swagger:model JobResultResp
type JobResultResp struct {
	JobResult

	// ext ID
	ExtID string `json:"extID,omitempty"`

	// fqdn
	Fqdn string `json:"fqdn,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// order
	Order int32 `json:"order,omitempty"`

	// Timestamp when job result was recorded
	RecordedAt int64 `json:"recordedAt,omitempty"`

	// status
	Status JobResultStatus `json:"status,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *JobResultResp) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 JobResult
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.JobResult = aO0

	// AO1
	var dataAO1 struct {
		ExtID string `json:"extID,omitempty"`

		Fqdn string `json:"fqdn,omitempty"`

		ID int64 `json:"id,omitempty"`

		Order int32 `json:"order,omitempty"`

		RecordedAt int64 `json:"recordedAt,omitempty"`

		Status JobResultStatus `json:"status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ExtID = dataAO1.ExtID

	m.Fqdn = dataAO1.Fqdn

	m.ID = dataAO1.ID

	m.Order = dataAO1.Order

	m.RecordedAt = dataAO1.RecordedAt

	m.Status = dataAO1.Status

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m JobResultResp) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.JobResult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ExtID string `json:"extID,omitempty"`

		Fqdn string `json:"fqdn,omitempty"`

		ID int64 `json:"id,omitempty"`

		Order int32 `json:"order,omitempty"`

		RecordedAt int64 `json:"recordedAt,omitempty"`

		Status JobResultStatus `json:"status,omitempty"`
	}

	dataAO1.ExtID = m.ExtID

	dataAO1.Fqdn = m.Fqdn

	dataAO1.ID = m.ID

	dataAO1.Order = m.Order

	dataAO1.RecordedAt = m.RecordedAt

	dataAO1.Status = m.Status

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this job result resp
func (m *JobResultResp) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with JobResult
	if err := m.JobResult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobResultResp) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this job result resp based on the context it is used
func (m *JobResultResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with JobResult
	if err := m.JobResult.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobResultResp) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobResultResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobResultResp) UnmarshalBinary(b []byte) error {
	var res JobResultResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
