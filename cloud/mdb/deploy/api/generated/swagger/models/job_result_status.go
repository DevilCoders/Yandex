// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// JobResultStatus job result status
//
// swagger:model JobResultStatus
type JobResultStatus string

func NewJobResultStatus(value JobResultStatus) *JobResultStatus {
	v := value
	return &v
}

const (

	// JobResultStatusUnknown captures enum value "unknown"
	JobResultStatusUnknown JobResultStatus = "unknown"

	// JobResultStatusSuccess captures enum value "success"
	JobResultStatusSuccess JobResultStatus = "success"

	// JobResultStatusFailure captures enum value "failure"
	JobResultStatusFailure JobResultStatus = "failure"

	// JobResultStatusTimeout captures enum value "timeout"
	JobResultStatusTimeout JobResultStatus = "timeout"

	// JobResultStatusNotrunning captures enum value "notrunning"
	JobResultStatusNotrunning JobResultStatus = "notrunning"
)

// for schema
var jobResultStatusEnum []interface{}

func init() {
	var res []JobResultStatus
	if err := json.Unmarshal([]byte(`["unknown","success","failure","timeout","notrunning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobResultStatusEnum = append(jobResultStatusEnum, v)
	}
}

func (m JobResultStatus) validateJobResultStatusEnum(path, location string, value JobResultStatus) error {
	if err := validate.EnumCase(path, location, value, jobResultStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this job result status
func (m JobResultStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateJobResultStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this job result status based on context it is used
func (m JobResultStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
