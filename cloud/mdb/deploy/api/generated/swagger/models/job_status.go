// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// JobStatus job status
//
// swagger:model JobStatus
type JobStatus string

func NewJobStatus(value JobStatus) *JobStatus {
	v := value
	return &v
}

const (

	// JobStatusUnknown captures enum value "unknown"
	JobStatusUnknown JobStatus = "unknown"

	// JobStatusRunning captures enum value "running"
	JobStatusRunning JobStatus = "running"

	// JobStatusDone captures enum value "done"
	JobStatusDone JobStatus = "done"

	// JobStatusError captures enum value "error"
	JobStatusError JobStatus = "error"

	// JobStatusTimeout captures enum value "timeout"
	JobStatusTimeout JobStatus = "timeout"
)

// for schema
var jobStatusEnum []interface{}

func init() {
	var res []JobStatus
	if err := json.Unmarshal([]byte(`["unknown","running","done","error","timeout"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobStatusEnum = append(jobStatusEnum, v)
	}
}

func (m JobStatus) validateJobStatusEnum(path, location string, value JobStatus) error {
	if err := validate.EnumCase(path, location, value, jobStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this job status
func (m JobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateJobStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this job status based on context it is used
func (m JobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
