// Code generated by go-swagger; DO NOT EDIT.

package minions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteMinionHandlerFunc turns a function with the right signature into a delete minion handler
type DeleteMinionHandlerFunc func(DeleteMinionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteMinionHandlerFunc) Handle(params DeleteMinionParams) middleware.Responder {
	return fn(params)
}

// DeleteMinionHandler interface for that can handle valid delete minion params
type DeleteMinionHandler interface {
	Handle(DeleteMinionParams) middleware.Responder
}

// NewDeleteMinion creates a new http.Handler for the delete minion operation
func NewDeleteMinion(ctx *middleware.Context, handler DeleteMinionHandler) *DeleteMinion {
	return &DeleteMinion{Context: ctx, Handler: handler}
}

/* DeleteMinion swagger:route DELETE /v1/minions/{fqdn} minions deleteMinion

Deletes minion

*/
type DeleteMinion struct {
	Context *middleware.Context
	Handler DeleteMinionHandler
}

func (o *DeleteMinion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteMinionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
