// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"a.yandex-team.ru/cloud/mdb/deploy/api/generated/swagger/restapi/operations/commands"
	"a.yandex-team.ru/cloud/mdb/deploy/api/generated/swagger/restapi/operations/common"
	"a.yandex-team.ru/cloud/mdb/deploy/api/generated/swagger/restapi/operations/groups"
	"a.yandex-team.ru/cloud/mdb/deploy/api/generated/swagger/restapi/operations/masters"
	"a.yandex-team.ru/cloud/mdb/deploy/api/generated/swagger/restapi/operations/minions"
)

// NewMdbDeployapiAPI creates a new MdbDeployapi instance
func NewMdbDeployapiAPI(spec *loads.Document) *MdbDeployapiAPI {
	return &MdbDeployapiAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		GroupsCreateGroupHandler: groups.CreateGroupHandlerFunc(func(params groups.CreateGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation groups.CreateGroup has not yet been implemented")
		}),
		CommandsCreateJobResultHandler: commands.CreateJobResultHandlerFunc(func(params commands.CreateJobResultParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.CreateJobResult has not yet been implemented")
		}),
		MastersCreateMasterHandler: masters.CreateMasterHandlerFunc(func(params masters.CreateMasterParams) middleware.Responder {
			return middleware.NotImplemented("operation masters.CreateMaster has not yet been implemented")
		}),
		MinionsCreateMinionHandler: minions.CreateMinionHandlerFunc(func(params minions.CreateMinionParams) middleware.Responder {
			return middleware.NotImplemented("operation minions.CreateMinion has not yet been implemented")
		}),
		CommandsCreateShipmentHandler: commands.CreateShipmentHandlerFunc(func(params commands.CreateShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.CreateShipment has not yet been implemented")
		}),
		GroupsDeleteGroupHandler: groups.DeleteGroupHandlerFunc(func(params groups.DeleteGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation groups.DeleteGroup has not yet been implemented")
		}),
		MastersDeleteMasterHandler: masters.DeleteMasterHandlerFunc(func(params masters.DeleteMasterParams) middleware.Responder {
			return middleware.NotImplemented("operation masters.DeleteMaster has not yet been implemented")
		}),
		MinionsDeleteMinionHandler: minions.DeleteMinionHandlerFunc(func(params minions.DeleteMinionParams) middleware.Responder {
			return middleware.NotImplemented("operation minions.DeleteMinion has not yet been implemented")
		}),
		CommandsGetCommandHandler: commands.GetCommandHandlerFunc(func(params commands.GetCommandParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.GetCommand has not yet been implemented")
		}),
		CommandsGetCommandsListHandler: commands.GetCommandsListHandlerFunc(func(params commands.GetCommandsListParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.GetCommandsList has not yet been implemented")
		}),
		GroupsGetGroupHandler: groups.GetGroupHandlerFunc(func(params groups.GetGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation groups.GetGroup has not yet been implemented")
		}),
		GroupsGetGroupsListHandler: groups.GetGroupsListHandlerFunc(func(params groups.GetGroupsListParams) middleware.Responder {
			return middleware.NotImplemented("operation groups.GetGroupsList has not yet been implemented")
		}),
		CommandsGetJobHandler: commands.GetJobHandlerFunc(func(params commands.GetJobParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.GetJob has not yet been implemented")
		}),
		CommandsGetJobResultHandler: commands.GetJobResultHandlerFunc(func(params commands.GetJobResultParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.GetJobResult has not yet been implemented")
		}),
		CommandsGetJobResultsListHandler: commands.GetJobResultsListHandlerFunc(func(params commands.GetJobResultsListParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.GetJobResultsList has not yet been implemented")
		}),
		CommandsGetJobsListHandler: commands.GetJobsListHandlerFunc(func(params commands.GetJobsListParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.GetJobsList has not yet been implemented")
		}),
		MastersGetMasterHandler: masters.GetMasterHandlerFunc(func(params masters.GetMasterParams) middleware.Responder {
			return middleware.NotImplemented("operation masters.GetMaster has not yet been implemented")
		}),
		MastersGetMasterMinionsHandler: masters.GetMasterMinionsHandlerFunc(func(params masters.GetMasterMinionsParams) middleware.Responder {
			return middleware.NotImplemented("operation masters.GetMasterMinions has not yet been implemented")
		}),
		MastersGetMasterMinionsChangesHandler: masters.GetMasterMinionsChangesHandlerFunc(func(params masters.GetMasterMinionsChangesParams) middleware.Responder {
			return middleware.NotImplemented("operation masters.GetMasterMinionsChanges has not yet been implemented")
		}),
		MastersGetMastersListHandler: masters.GetMastersListHandlerFunc(func(params masters.GetMastersListParams) middleware.Responder {
			return middleware.NotImplemented("operation masters.GetMastersList has not yet been implemented")
		}),
		MinionsGetMinionHandler: minions.GetMinionHandlerFunc(func(params minions.GetMinionParams) middleware.Responder {
			return middleware.NotImplemented("operation minions.GetMinion has not yet been implemented")
		}),
		MinionsGetMinionMasterHandler: minions.GetMinionMasterHandlerFunc(func(params minions.GetMinionMasterParams) middleware.Responder {
			return middleware.NotImplemented("operation minions.GetMinionMaster has not yet been implemented")
		}),
		MinionsGetMinionsListHandler: minions.GetMinionsListHandlerFunc(func(params minions.GetMinionsListParams) middleware.Responder {
			return middleware.NotImplemented("operation minions.GetMinionsList has not yet been implemented")
		}),
		CommandsGetShipmentHandler: commands.GetShipmentHandlerFunc(func(params commands.GetShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.GetShipment has not yet been implemented")
		}),
		CommandsGetShipmentsListHandler: commands.GetShipmentsListHandlerFunc(func(params commands.GetShipmentsListParams) middleware.Responder {
			return middleware.NotImplemented("operation commands.GetShipmentsList has not yet been implemented")
		}),
		CommonPingHandler: common.PingHandlerFunc(func(params common.PingParams) middleware.Responder {
			return middleware.NotImplemented("operation common.Ping has not yet been implemented")
		}),
		MinionsRegisterMinionHandler: minions.RegisterMinionHandlerFunc(func(params minions.RegisterMinionParams) middleware.Responder {
			return middleware.NotImplemented("operation minions.RegisterMinion has not yet been implemented")
		}),
		CommonStatsHandler: common.StatsHandlerFunc(func(params common.StatsParams) middleware.Responder {
			return middleware.NotImplemented("operation common.Stats has not yet been implemented")
		}),
		MinionsUnregisterMinionHandler: minions.UnregisterMinionHandlerFunc(func(params minions.UnregisterMinionParams) middleware.Responder {
			return middleware.NotImplemented("operation minions.UnregisterMinion has not yet been implemented")
		}),
		MastersUpsertMasterHandler: masters.UpsertMasterHandlerFunc(func(params masters.UpsertMasterParams) middleware.Responder {
			return middleware.NotImplemented("operation masters.UpsertMaster has not yet been implemented")
		}),
		MinionsUpsertMinionHandler: minions.UpsertMinionHandlerFunc(func(params minions.UpsertMinionParams) middleware.Responder {
			return middleware.NotImplemented("operation minions.UpsertMinion has not yet been implemented")
		}),
	}
}

/*MdbDeployapiAPI Provides API for deploying via SaltStack. */
type MdbDeployapiAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// GroupsCreateGroupHandler sets the operation handler for the create group operation
	GroupsCreateGroupHandler groups.CreateGroupHandler
	// CommandsCreateJobResultHandler sets the operation handler for the create job result operation
	CommandsCreateJobResultHandler commands.CreateJobResultHandler
	// MastersCreateMasterHandler sets the operation handler for the create master operation
	MastersCreateMasterHandler masters.CreateMasterHandler
	// MinionsCreateMinionHandler sets the operation handler for the create minion operation
	MinionsCreateMinionHandler minions.CreateMinionHandler
	// CommandsCreateShipmentHandler sets the operation handler for the create shipment operation
	CommandsCreateShipmentHandler commands.CreateShipmentHandler
	// GroupsDeleteGroupHandler sets the operation handler for the delete group operation
	GroupsDeleteGroupHandler groups.DeleteGroupHandler
	// MastersDeleteMasterHandler sets the operation handler for the delete master operation
	MastersDeleteMasterHandler masters.DeleteMasterHandler
	// MinionsDeleteMinionHandler sets the operation handler for the delete minion operation
	MinionsDeleteMinionHandler minions.DeleteMinionHandler
	// CommandsGetCommandHandler sets the operation handler for the get command operation
	CommandsGetCommandHandler commands.GetCommandHandler
	// CommandsGetCommandsListHandler sets the operation handler for the get commands list operation
	CommandsGetCommandsListHandler commands.GetCommandsListHandler
	// GroupsGetGroupHandler sets the operation handler for the get group operation
	GroupsGetGroupHandler groups.GetGroupHandler
	// GroupsGetGroupsListHandler sets the operation handler for the get groups list operation
	GroupsGetGroupsListHandler groups.GetGroupsListHandler
	// CommandsGetJobHandler sets the operation handler for the get job operation
	CommandsGetJobHandler commands.GetJobHandler
	// CommandsGetJobResultHandler sets the operation handler for the get job result operation
	CommandsGetJobResultHandler commands.GetJobResultHandler
	// CommandsGetJobResultsListHandler sets the operation handler for the get job results list operation
	CommandsGetJobResultsListHandler commands.GetJobResultsListHandler
	// CommandsGetJobsListHandler sets the operation handler for the get jobs list operation
	CommandsGetJobsListHandler commands.GetJobsListHandler
	// MastersGetMasterHandler sets the operation handler for the get master operation
	MastersGetMasterHandler masters.GetMasterHandler
	// MastersGetMasterMinionsHandler sets the operation handler for the get master minions operation
	MastersGetMasterMinionsHandler masters.GetMasterMinionsHandler
	// MastersGetMasterMinionsChangesHandler sets the operation handler for the get master minions changes operation
	MastersGetMasterMinionsChangesHandler masters.GetMasterMinionsChangesHandler
	// MastersGetMastersListHandler sets the operation handler for the get masters list operation
	MastersGetMastersListHandler masters.GetMastersListHandler
	// MinionsGetMinionHandler sets the operation handler for the get minion operation
	MinionsGetMinionHandler minions.GetMinionHandler
	// MinionsGetMinionMasterHandler sets the operation handler for the get minion master operation
	MinionsGetMinionMasterHandler minions.GetMinionMasterHandler
	// MinionsGetMinionsListHandler sets the operation handler for the get minions list operation
	MinionsGetMinionsListHandler minions.GetMinionsListHandler
	// CommandsGetShipmentHandler sets the operation handler for the get shipment operation
	CommandsGetShipmentHandler commands.GetShipmentHandler
	// CommandsGetShipmentsListHandler sets the operation handler for the get shipments list operation
	CommandsGetShipmentsListHandler commands.GetShipmentsListHandler
	// CommonPingHandler sets the operation handler for the ping operation
	CommonPingHandler common.PingHandler
	// MinionsRegisterMinionHandler sets the operation handler for the register minion operation
	MinionsRegisterMinionHandler minions.RegisterMinionHandler
	// CommonStatsHandler sets the operation handler for the stats operation
	CommonStatsHandler common.StatsHandler
	// MinionsUnregisterMinionHandler sets the operation handler for the unregister minion operation
	MinionsUnregisterMinionHandler minions.UnregisterMinionHandler
	// MastersUpsertMasterHandler sets the operation handler for the upsert master operation
	MastersUpsertMasterHandler masters.UpsertMasterHandler
	// MinionsUpsertMinionHandler sets the operation handler for the upsert minion operation
	MinionsUpsertMinionHandler minions.UpsertMinionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *MdbDeployapiAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *MdbDeployapiAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *MdbDeployapiAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MdbDeployapiAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MdbDeployapiAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MdbDeployapiAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MdbDeployapiAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MdbDeployapiAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MdbDeployapiAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MdbDeployapiAPI
func (o *MdbDeployapiAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.GroupsCreateGroupHandler == nil {
		unregistered = append(unregistered, "groups.CreateGroupHandler")
	}
	if o.CommandsCreateJobResultHandler == nil {
		unregistered = append(unregistered, "commands.CreateJobResultHandler")
	}
	if o.MastersCreateMasterHandler == nil {
		unregistered = append(unregistered, "masters.CreateMasterHandler")
	}
	if o.MinionsCreateMinionHandler == nil {
		unregistered = append(unregistered, "minions.CreateMinionHandler")
	}
	if o.CommandsCreateShipmentHandler == nil {
		unregistered = append(unregistered, "commands.CreateShipmentHandler")
	}
	if o.GroupsDeleteGroupHandler == nil {
		unregistered = append(unregistered, "groups.DeleteGroupHandler")
	}
	if o.MastersDeleteMasterHandler == nil {
		unregistered = append(unregistered, "masters.DeleteMasterHandler")
	}
	if o.MinionsDeleteMinionHandler == nil {
		unregistered = append(unregistered, "minions.DeleteMinionHandler")
	}
	if o.CommandsGetCommandHandler == nil {
		unregistered = append(unregistered, "commands.GetCommandHandler")
	}
	if o.CommandsGetCommandsListHandler == nil {
		unregistered = append(unregistered, "commands.GetCommandsListHandler")
	}
	if o.GroupsGetGroupHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupHandler")
	}
	if o.GroupsGetGroupsListHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupsListHandler")
	}
	if o.CommandsGetJobHandler == nil {
		unregistered = append(unregistered, "commands.GetJobHandler")
	}
	if o.CommandsGetJobResultHandler == nil {
		unregistered = append(unregistered, "commands.GetJobResultHandler")
	}
	if o.CommandsGetJobResultsListHandler == nil {
		unregistered = append(unregistered, "commands.GetJobResultsListHandler")
	}
	if o.CommandsGetJobsListHandler == nil {
		unregistered = append(unregistered, "commands.GetJobsListHandler")
	}
	if o.MastersGetMasterHandler == nil {
		unregistered = append(unregistered, "masters.GetMasterHandler")
	}
	if o.MastersGetMasterMinionsHandler == nil {
		unregistered = append(unregistered, "masters.GetMasterMinionsHandler")
	}
	if o.MastersGetMasterMinionsChangesHandler == nil {
		unregistered = append(unregistered, "masters.GetMasterMinionsChangesHandler")
	}
	if o.MastersGetMastersListHandler == nil {
		unregistered = append(unregistered, "masters.GetMastersListHandler")
	}
	if o.MinionsGetMinionHandler == nil {
		unregistered = append(unregistered, "minions.GetMinionHandler")
	}
	if o.MinionsGetMinionMasterHandler == nil {
		unregistered = append(unregistered, "minions.GetMinionMasterHandler")
	}
	if o.MinionsGetMinionsListHandler == nil {
		unregistered = append(unregistered, "minions.GetMinionsListHandler")
	}
	if o.CommandsGetShipmentHandler == nil {
		unregistered = append(unregistered, "commands.GetShipmentHandler")
	}
	if o.CommandsGetShipmentsListHandler == nil {
		unregistered = append(unregistered, "commands.GetShipmentsListHandler")
	}
	if o.CommonPingHandler == nil {
		unregistered = append(unregistered, "common.PingHandler")
	}
	if o.MinionsRegisterMinionHandler == nil {
		unregistered = append(unregistered, "minions.RegisterMinionHandler")
	}
	if o.CommonStatsHandler == nil {
		unregistered = append(unregistered, "common.StatsHandler")
	}
	if o.MinionsUnregisterMinionHandler == nil {
		unregistered = append(unregistered, "minions.UnregisterMinionHandler")
	}
	if o.MastersUpsertMasterHandler == nil {
		unregistered = append(unregistered, "masters.UpsertMasterHandler")
	}
	if o.MinionsUpsertMinionHandler == nil {
		unregistered = append(unregistered, "minions.UpsertMinionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MdbDeployapiAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MdbDeployapiAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *MdbDeployapiAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *MdbDeployapiAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *MdbDeployapiAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MdbDeployapiAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mdb deployapi API
func (o *MdbDeployapiAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MdbDeployapiAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/groups"] = groups.NewCreateGroup(o.context, o.GroupsCreateGroupHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/minions/{fqdn}/jobs/{jobId}/results"] = commands.NewCreateJobResult(o.context, o.CommandsCreateJobResultHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/masters"] = masters.NewCreateMaster(o.context, o.MastersCreateMasterHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/minions"] = minions.NewCreateMinion(o.context, o.MinionsCreateMinionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/shipments"] = commands.NewCreateShipment(o.context, o.CommandsCreateShipmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/groups/{groupname}"] = groups.NewDeleteGroup(o.context, o.GroupsDeleteGroupHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/masters/{fqdn}"] = masters.NewDeleteMaster(o.context, o.MastersDeleteMasterHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/minions/{fqdn}"] = minions.NewDeleteMinion(o.context, o.MinionsDeleteMinionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/commands/{commandId}"] = commands.NewGetCommand(o.context, o.CommandsGetCommandHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/commands"] = commands.NewGetCommandsList(o.context, o.CommandsGetCommandsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/groups/{groupname}"] = groups.NewGetGroup(o.context, o.GroupsGetGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/groups"] = groups.NewGetGroupsList(o.context, o.GroupsGetGroupsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/jobs/{jobId}"] = commands.NewGetJob(o.context, o.CommandsGetJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/jobresults/{jobResultId}"] = commands.NewGetJobResult(o.context, o.CommandsGetJobResultHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/jobresults"] = commands.NewGetJobResultsList(o.context, o.CommandsGetJobResultsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/jobs"] = commands.NewGetJobsList(o.context, o.CommandsGetJobsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/masters/{fqdn}"] = masters.NewGetMaster(o.context, o.MastersGetMasterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/masters/{fqdn}/minions"] = masters.NewGetMasterMinions(o.context, o.MastersGetMasterMinionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/masters/{fqdn}/minions/changes"] = masters.NewGetMasterMinionsChanges(o.context, o.MastersGetMasterMinionsChangesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/masters"] = masters.NewGetMastersList(o.context, o.MastersGetMastersListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/minions/{fqdn}"] = minions.NewGetMinion(o.context, o.MinionsGetMinionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/minions/{fqdn}/master"] = minions.NewGetMinionMaster(o.context, o.MinionsGetMinionMasterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/minions"] = minions.NewGetMinionsList(o.context, o.MinionsGetMinionsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/shipments/{shipmentId}"] = commands.NewGetShipment(o.context, o.CommandsGetShipmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/shipments"] = commands.NewGetShipmentsList(o.context, o.CommandsGetShipmentsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/ping"] = common.NewPing(o.context, o.CommonPingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/minions/{fqdn}/register"] = minions.NewRegisterMinion(o.context, o.MinionsRegisterMinionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/stats"] = common.NewStats(o.context, o.CommonStatsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/minions/{fqdn}/unregister"] = minions.NewUnregisterMinion(o.context, o.MinionsUnregisterMinionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/masters/{fqdn}"] = masters.NewUpsertMaster(o.context, o.MastersUpsertMasterHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/minions/{fqdn}"] = minions.NewUpsertMinion(o.context, o.MinionsUpsertMinionHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MdbDeployapiAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MdbDeployapiAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MdbDeployapiAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MdbDeployapiAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *MdbDeployapiAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
