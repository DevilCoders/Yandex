// Code generated by go-swagger; DO NOT EDIT.

package minions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetMinionMasterParams creates a new GetMinionMasterParams object
//
// There are no default values defined in the spec.
func NewGetMinionMasterParams() GetMinionMasterParams {

	return GetMinionMasterParams{}
}

// GetMinionMasterParams contains all the bound params for the get minion master operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetMinionMaster
type GetMinionMasterParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Unique request ID (must be generated for each separate request, even retries)
	  In: header
	*/
	XRequestID *string
	/*fqdn of whatever
	  Required: true
	  In: path
	*/
	Fqdn string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetMinionMasterParams() beforehand.
func (o *GetMinionMasterParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-Id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rFqdn, rhkFqdn, _ := route.Params.GetOK("fqdn")
	if err := o.bindFqdn(rFqdn, rhkFqdn, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *GetMinionMasterParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.XRequestID = &raw

	return nil
}

// bindFqdn binds and validates parameter Fqdn from path.
func (o *GetMinionMasterParams) bindFqdn(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Fqdn = raw

	return nil
}
