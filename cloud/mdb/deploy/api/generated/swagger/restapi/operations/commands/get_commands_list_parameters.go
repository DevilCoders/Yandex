// Code generated by go-swagger; DO NOT EDIT.

package commands

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetCommandsListParams creates a new GetCommandsListParams object
// with the default values initialized.
func NewGetCommandsListParams() GetCommandsListParams {

	var (
		// initialize parameters with default values

		pageSizeDefault = int64(100)
	)

	return GetCommandsListParams{
		PageSize: &pageSizeDefault,
	}
}

// GetCommandsListParams contains all the bound params for the get commands list operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetCommandsList
type GetCommandsListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.
	  In: header
	*/
	Authorization *string
	/*Unique request ID (must be generated for each separate request, even retries)
	  In: header
	*/
	XRequestID *string
	/*Command status
	  In: query
	*/
	CommandStatus *string
	/*fqdn of whatever
	  In: query
	*/
	Fqdn *string
	/*Number of results per page
	  In: query
	  Default: 100
	*/
	PageSize *int64
	/*Token to request the next page in listing
	  In: query
	*/
	PageToken *string
	/*Shipment ID
	  In: query
	*/
	ShipmentID *string
	/*Sorting order for listings
	  In: query
	*/
	SortOrder *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCommandsListParams() beforehand.
func (o *GetCommandsListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-Id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qCommandStatus, qhkCommandStatus, _ := qs.GetOK("commandStatus")
	if err := o.bindCommandStatus(qCommandStatus, qhkCommandStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	qFqdn, qhkFqdn, _ := qs.GetOK("fqdn")
	if err := o.bindFqdn(qFqdn, qhkFqdn, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageToken, qhkPageToken, _ := qs.GetOK("pageToken")
	if err := o.bindPageToken(qPageToken, qhkPageToken, route.Formats); err != nil {
		res = append(res, err)
	}

	qShipmentID, qhkShipmentID, _ := qs.GetOK("shipmentId")
	if err := o.bindShipmentID(qShipmentID, qhkShipmentID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortOrder, qhkSortOrder, _ := qs.GetOK("sortOrder")
	if err := o.bindSortOrder(qSortOrder, qhkSortOrder, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *GetCommandsListParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Authorization = &raw

	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *GetCommandsListParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.XRequestID = &raw

	return nil
}

// bindCommandStatus binds and validates parameter CommandStatus from query.
func (o *GetCommandsListParams) bindCommandStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CommandStatus = &raw

	return nil
}

// bindFqdn binds and validates parameter Fqdn from query.
func (o *GetCommandsListParams) bindFqdn(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Fqdn = &raw

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetCommandsListParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetCommandsListParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = &value

	return nil
}

// bindPageToken binds and validates parameter PageToken from query.
func (o *GetCommandsListParams) bindPageToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PageToken = &raw

	return nil
}

// bindShipmentID binds and validates parameter ShipmentID from query.
func (o *GetCommandsListParams) bindShipmentID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ShipmentID = &raw

	return nil
}

// bindSortOrder binds and validates parameter SortOrder from query.
func (o *GetCommandsListParams) bindSortOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortOrder = &raw

	if err := o.validateSortOrder(formats); err != nil {
		return err
	}

	return nil
}

// validateSortOrder carries on validations for parameter SortOrder
func (o *GetCommandsListParams) validateSortOrder(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortOrder", "query", *o.SortOrder, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}
