// Code generated by go-swagger; DO NOT EDIT.

package minions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMinionMasterHandlerFunc turns a function with the right signature into a get minion master handler
type GetMinionMasterHandlerFunc func(GetMinionMasterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMinionMasterHandlerFunc) Handle(params GetMinionMasterParams) middleware.Responder {
	return fn(params)
}

// GetMinionMasterHandler interface for that can handle valid get minion master params
type GetMinionMasterHandler interface {
	Handle(GetMinionMasterParams) middleware.Responder
}

// NewGetMinionMaster creates a new http.Handler for the get minion master operation
func NewGetMinionMaster(ctx *middleware.Context, handler GetMinionMasterHandler) *GetMinionMaster {
	return &GetMinionMaster{Context: ctx, Handler: handler}
}

/* GetMinionMaster swagger:route GET /v1/minions/{fqdn}/master minions getMinionMaster

Returns master of specific minion. Does NOT require authentication.

*/
type GetMinionMaster struct {
	Context *middleware.Context
	Handler GetMinionMasterHandler
}

func (o *GetMinionMaster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMinionMasterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
