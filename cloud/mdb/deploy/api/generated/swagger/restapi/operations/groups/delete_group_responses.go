// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"a.yandex-team.ru/cloud/mdb/deploy/api/generated/swagger/models"
)

// DeleteGroupOKCode is the HTTP code returned for type DeleteGroupOK
const DeleteGroupOKCode int = 200

/*DeleteGroupOK Group deleted

swagger:response deleteGroupOK
*/
type DeleteGroupOK struct {
}

// NewDeleteGroupOK creates DeleteGroupOK with default headers values
func NewDeleteGroupOK() *DeleteGroupOK {

	return &DeleteGroupOK{}
}

// WriteResponse to the client
func (o *DeleteGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*DeleteGroupDefault Error

swagger:response deleteGroupDefault
*/
type DeleteGroupDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteGroupDefault creates DeleteGroupDefault with default headers values
func NewDeleteGroupDefault(code int) *DeleteGroupDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteGroupDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete group default response
func (o *DeleteGroupDefault) WithStatusCode(code int) *DeleteGroupDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete group default response
func (o *DeleteGroupDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete group default response
func (o *DeleteGroupDefault) WithPayload(payload *models.Error) *DeleteGroupDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete group default response
func (o *DeleteGroupDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteGroupDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
