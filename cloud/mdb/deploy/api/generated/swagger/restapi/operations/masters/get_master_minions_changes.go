// Code generated by go-swagger; DO NOT EDIT.

package masters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMasterMinionsChangesHandlerFunc turns a function with the right signature into a get master minions changes handler
type GetMasterMinionsChangesHandlerFunc func(GetMasterMinionsChangesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMasterMinionsChangesHandlerFunc) Handle(params GetMasterMinionsChangesParams) middleware.Responder {
	return fn(params)
}

// GetMasterMinionsChangesHandler interface for that can handle valid get master minions changes params
type GetMasterMinionsChangesHandler interface {
	Handle(GetMasterMinionsChangesParams) middleware.Responder
}

// NewGetMasterMinionsChanges creates a new http.Handler for the get master minions changes operation
func NewGetMasterMinionsChanges(ctx *middleware.Context, handler GetMasterMinionsChangesHandler) *GetMasterMinionsChanges {
	return &GetMasterMinionsChanges{Context: ctx, Handler: handler}
}

/* GetMasterMinionsChanges swagger:route GET /v1/masters/{fqdn}/minions/changes masters getMasterMinionsChanges

Returns changelog in minions for specified master

*/
type GetMasterMinionsChanges struct {
	Context *middleware.Context
	Handler GetMasterMinionsChangesHandler
}

func (o *GetMasterMinionsChanges) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMasterMinionsChangesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
