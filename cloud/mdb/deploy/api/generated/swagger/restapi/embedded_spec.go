// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Provides API for deploying via SaltStack.",
    "title": "MDB Deploy API",
    "contact": {
      "email": "sidh@yandex-team.ru"
    },
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/v1/commands": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns list of commands",
        "operationId": "GetCommandsList",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          },
          {
            "$ref": "#/parameters/ShipmentIdInQuery"
          },
          {
            "$ref": "#/parameters/FQDNInQuery"
          },
          {
            "$ref": "#/parameters/CommandStatusInQuery"
          },
          {
            "$ref": "#/parameters/SortOrderInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "List of commands",
            "schema": {
              "$ref": "#/definitions/CommandsListResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/commands/{commandId}": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns specific command",
        "operationId": "GetCommand",
        "responses": {
          "200": {
            "description": "Command",
            "schema": {
              "$ref": "#/definitions/CommandResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/CommandId"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns list of groups",
        "operationId": "GetGroupsList",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          },
          {
            "$ref": "#/parameters/SortOrderInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups",
            "schema": {
              "$ref": "#/definitions/GroupsListResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Creates new group",
        "operationId": "CreateGroup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created group",
            "schema": {
              "$ref": "#/definitions/GroupResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/groups/{groupname}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns specific group",
        "operationId": "GetGroup",
        "responses": {
          "200": {
            "description": "Group",
            "schema": {
              "$ref": "#/definitions/GroupResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Deletes group",
        "operationId": "DeleteGroup",
        "responses": {
          "200": {
            "description": "Group deleted"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/GroupName"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/jobresults": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns job results",
        "operationId": "GetJobResultsList",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          },
          {
            "$ref": "#/parameters/FQDNInQuery"
          },
          {
            "$ref": "#/parameters/ExtJobIdInQuery"
          },
          {
            "$ref": "#/parameters/JobResultStatusInQuery"
          },
          {
            "$ref": "#/parameters/SortOrderInQuery"
          },
          {
            "type": "string",
            "description": "DEPRECATED! NOT A JOB ID. WILL BE USED AS ExtJobID",
            "name": "jobId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Job results",
            "schema": {
              "$ref": "#/definitions/JobResultsListResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        }
      ]
    },
    "/v1/jobresults/{jobResultId}": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns specific job result",
        "operationId": "GetJobResult",
        "responses": {
          "200": {
            "description": "Job result",
            "schema": {
              "$ref": "#/definitions/JobResultResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/JobResultId"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/jobs": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns list of jobs",
        "operationId": "GetJobsList",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          },
          {
            "$ref": "#/parameters/ShipmentIdInQuery"
          },
          {
            "$ref": "#/parameters/FQDNInQuery"
          },
          {
            "$ref": "#/parameters/ExtJobIdInQuery"
          },
          {
            "$ref": "#/parameters/JobStatusInQuery"
          },
          {
            "$ref": "#/parameters/SortOrderInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs",
            "schema": {
              "$ref": "#/definitions/JobsListResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/jobs/{jobId}": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns specific job",
        "operationId": "GetJob",
        "responses": {
          "200": {
            "description": "Job",
            "schema": {
              "$ref": "#/definitions/JobResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/JobId"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/masters": {
      "get": {
        "tags": [
          "masters"
        ],
        "summary": "Returns list of masters",
        "operationId": "GetMastersList",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "List of masters",
            "schema": {
              "$ref": "#/definitions/MastersListResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "masters"
        ],
        "summary": "Creates new master",
        "operationId": "CreateMaster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Master"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created master",
            "schema": {
              "$ref": "#/definitions/MasterResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/masters/{fqdn}": {
      "get": {
        "tags": [
          "masters"
        ],
        "summary": "Returns specific master",
        "operationId": "GetMaster",
        "responses": {
          "200": {
            "description": "Master",
            "schema": {
              "$ref": "#/definitions/MasterResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "masters"
        ],
        "summary": "Creates new master or updates the old one",
        "operationId": "UpsertMaster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Master"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upserted master",
            "schema": {
              "$ref": "#/definitions/MasterResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "masters"
        ],
        "summary": "Deletes master",
        "operationId": "DeleteMaster",
        "responses": {
          "200": {
            "description": "Master deleted"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/FQDN"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/masters/{fqdn}/minions": {
      "get": {
        "tags": [
          "masters"
        ],
        "summary": "Returns list of minions assigned to specific master",
        "operationId": "GetMasterMinions",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "List of minions",
            "schema": {
              "$ref": "#/definitions/MinionsListResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/FQDN"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/masters/{fqdn}/minions/changes": {
      "get": {
        "tags": [
          "masters"
        ],
        "summary": "Returns changelog in minions for specified master",
        "operationId": "GetMasterMinionsChanges",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in Unix Time starting from which to return changes",
            "name": "fromTimestamp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of minions changes",
            "schema": {
              "$ref": "#/definitions/MinionChangeList"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/FQDN"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/minions": {
      "get": {
        "tags": [
          "minions"
        ],
        "summary": "Returns list of minions",
        "operationId": "GetMinionsList",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "List of minions",
            "schema": {
              "$ref": "#/definitions/MinionsListResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "minions"
        ],
        "summary": "Creates new minion",
        "operationId": "CreateMinion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Minion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/minions/{fqdn}": {
      "get": {
        "tags": [
          "minions"
        ],
        "summary": "Returns specific minion",
        "operationId": "GetMinion",
        "responses": {
          "200": {
            "description": "Minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "minions"
        ],
        "summary": "Creates new minion or updates the old one",
        "operationId": "UpsertMinion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Minion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upserted minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "minions"
        ],
        "summary": "Deletes minion",
        "operationId": "DeleteMinion",
        "responses": {
          "200": {
            "description": "Minion deleted"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/FQDN"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/minions/{fqdn}/jobs/{jobId}/results": {
      "post": {
        "tags": [
          "commands"
        ],
        "summary": "Create job result for specific job.",
        "operationId": "CreateJobResult",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobResult"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job result",
            "schema": {
              "$ref": "#/definitions/JobResultResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/FQDN"
        },
        {
          "$ref": "#/parameters/JobId"
        }
      ]
    },
    "/v1/minions/{fqdn}/master": {
      "get": {
        "tags": [
          "minions"
        ],
        "summary": "Returns master of specific minion. Does NOT require authentication.",
        "operationId": "GetMinionMaster",
        "responses": {
          "200": {
            "description": "Minion's master",
            "schema": {
              "$ref": "#/definitions/MinionMaster"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/FQDN"
        }
      ]
    },
    "/v1/minions/{fqdn}/register": {
      "post": {
        "tags": [
          "minions"
        ],
        "summary": "Registers minion's public key.",
        "operationId": "RegisterMinion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MinionPublicKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registered minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/FQDN"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/minions/{fqdn}/unregister": {
      "post": {
        "tags": [
          "minions"
        ],
        "summary": "Unregisters minion's public key. Minion can be registered again as if it was just created.",
        "operationId": "UnregisterMinion",
        "responses": {
          "200": {
            "description": "Unregistered minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/FQDN"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/ping": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Reports service status",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "Service is alive and well"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/v1/shipments": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns list of shipments",
        "operationId": "GetShipmentsList",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          },
          {
            "$ref": "#/parameters/FQDNInQuery"
          },
          {
            "$ref": "#/parameters/ShipmentStatusInQuery"
          },
          {
            "$ref": "#/parameters/SortOrderInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "List of shipments",
            "schema": {
              "$ref": "#/definitions/ShipmentsListResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "commands"
        ],
        "summary": "Creates new shipment",
        "operationId": "CreateShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created shipment",
            "schema": {
              "$ref": "#/definitions/ShipmentResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/shipments/{shipmentId}": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns specific shipment",
        "operationId": "GetShipment",
        "responses": {
          "200": {
            "description": "Shipment",
            "schema": {
              "$ref": "#/definitions/ShipmentResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        },
        {
          "$ref": "#/parameters/ShipmentId"
        },
        {
          "$ref": "#/parameters/Authorization"
        }
      ]
    },
    "/v1/stats": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Reports service stats",
        "operationId": "Stats",
        "responses": {
          "200": {
            "description": "Reports service stats",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    }
  },
  "definitions": {
    "CommandDef": {
      "type": "object",
      "properties": {
        "arguments": {
          "description": "Command arguments",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "description": "Timeout in seconds for command",
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "Command type",
          "type": "string"
        }
      }
    },
    "CommandResp": {
      "allOf": [
        {
          "$ref": "#/definitions/CommandDef"
        },
        {
          "type": "object",
          "properties": {
            "createdAt": {
              "description": "Timestamp when command was created",
              "type": "integer",
              "format": "int64"
            },
            "fqdn": {
              "description": "FQDN this command is meant for",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "shipmentID": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/CommandStatus"
            },
            "updatedAt": {
              "description": "Timestamp when command was updated",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "CommandStatus": {
      "type": "string",
      "enum": [
        "unknown",
        "available",
        "running",
        "done",
        "error",
        "canceled",
        "timeout"
      ]
    },
    "CommandsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "commands": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommandResp"
              }
            }
          }
        }
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Group ID",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Groups's name",
          "type": "string"
        }
      }
    },
    "GroupResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Group"
        },
        {
          "type": "object",
          "properties": {
            "mastersCount": {
              "description": "Number of masters in this group",
              "type": "integer",
              "format": "int64"
            },
            "minionsCount": {
              "description": "Number of minions in this group",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "GroupsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupResp"
              }
            }
          }
        }
      ]
    },
    "JobResp": {
      "type": "object",
      "properties": {
        "commandID": {
          "description": "ID of command that spawned this job",
          "type": "string"
        },
        "createdAt": {
          "description": "Timestamp when job was created",
          "type": "integer",
          "format": "int64"
        },
        "extId": {
          "description": "ID of this job in underlying deploy system (SaltStack)",
          "type": "string"
        },
        "id": {
          "description": "ID of this job in deploy",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/JobStatus"
        },
        "updatedAt": {
          "description": "Timestamp when job was updated",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JobResult": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "JobResultResp": {
      "allOf": [
        {
          "$ref": "#/definitions/JobResult"
        },
        {
          "type": "object",
          "properties": {
            "extID": {
              "type": "string"
            },
            "fqdn": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "type": "integer",
              "format": "int32"
            },
            "recordedAt": {
              "description": "Timestamp when job result was recorded",
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "$ref": "#/definitions/JobResultStatus"
            }
          }
        }
      ]
    },
    "JobResultStatus": {
      "type": "string",
      "enum": [
        "unknown",
        "success",
        "failure",
        "timeout",
        "notrunning"
      ]
    },
    "JobResultsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "jobResults": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobResultResp"
              }
            }
          }
        }
      ]
    },
    "JobStatus": {
      "type": "string",
      "enum": [
        "unknown",
        "running",
        "done",
        "error",
        "timeout"
      ]
    },
    "JobsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "jobs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobResp"
              }
            }
          }
        }
      ]
    },
    "Master": {
      "type": "object",
      "properties": {
        "aliases": {
          "description": "List of host aliases",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Master's description",
          "type": "string",
          "x-nullable": true
        },
        "fqdn": {
          "description": "Masters's fqdn",
          "type": "string"
        },
        "group": {
          "description": "Which group of masters this master belongs to",
          "type": "string",
          "x-nullable": true
        },
        "isOpen": {
          "description": "Is it allowed to auto-assign minions in its group to this master?",
          "type": "boolean",
          "x-nullable": true
        },
        "publicKey": {
          "description": "Master's public key",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "MasterResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Master"
        },
        {
          "type": "object",
          "properties": {
            "aliveCheckAt": {
              "description": "Timestamp when last alive check was performed",
              "type": "integer",
              "format": "int64"
            },
            "createdAt": {
              "description": "Timestamp when master was created",
              "type": "integer",
              "format": "int64"
            },
            "isAlive": {
              "description": "Is master alive?",
              "type": "boolean"
            },
            "minionsCount": {
              "description": "Number of minions assigned to this master",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "MastersListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "masters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MasterResp"
              }
            }
          }
        }
      ]
    },
    "Minion": {
      "type": "object",
      "properties": {
        "autoReassign": {
          "description": "Is it allowed to auto-assign this minion to masters in its group?",
          "type": "boolean",
          "x-nullable": true
        },
        "fqdn": {
          "description": "Minion's fqdn",
          "type": "string"
        },
        "group": {
          "description": "Which group of masters this minion belongs to",
          "type": "string",
          "x-nullable": true
        },
        "master": {
          "description": "Which master this minion belongs to",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "MinionChange": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "create",
            "delete",
            "reassign"
          ]
        },
        "fqdn": {
          "description": "Minion's fqdn",
          "type": "string"
        },
        "master": {
          "description": "Master's fqdn",
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MinionChangeList": {
      "type": "object",
      "properties": {
        "masters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MinionChange"
          }
        }
      }
    },
    "MinionMaster": {
      "allOf": [
        {
          "$ref": "#/definitions/MinionPublicKey"
        },
        {
          "type": "object",
          "properties": {
            "master": {
              "description": "Master's fqdn",
              "type": "string"
            },
            "masterPublicKey": {
              "description": "Master's public key",
              "type": "string"
            }
          }
        }
      ]
    },
    "MinionPublicKey": {
      "type": "object",
      "properties": {
        "publicKey": {
          "description": "Minion's public key",
          "type": "string"
        }
      }
    },
    "MinionResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Minion"
        },
        {
          "$ref": "#/definitions/MinionPublicKey"
        },
        {
          "type": "object",
          "properties": {
            "createdAt": {
              "description": "Timestamp when minion was created",
              "type": "integer",
              "format": "int64"
            },
            "deleted": {
              "description": "Whether minion is deleted or not",
              "type": "boolean"
            },
            "registerUntil": {
              "description": "Timestamp until minion must be registered",
              "type": "integer",
              "format": "int64"
            },
            "registered": {
              "description": "Whether minion is registered or not",
              "type": "boolean"
            },
            "updatedAt": {
              "description": "Timestamp when minion was updated",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "MinionsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "minions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MinionResp"
              }
            }
          }
        }
      ]
    },
    "Paging": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/parameters/PageToken"
        }
      }
    },
    "Shipment": {
      "type": "object",
      "properties": {
        "batchSize": {
          "description": "Number of commands allowed to run simultaneously",
          "type": "integer",
          "format": "int64"
        },
        "commands": {
          "description": "Commands definitions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandDef"
          }
        },
        "fqdns": {
          "description": "FQDNs of target minions for this shipment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parallel": {
          "description": "Number of commands allowed to run simultaneously",
          "type": "integer",
          "format": "int64"
        },
        "stopOnErrorCount": {
          "description": "Number of failed commands after which entire shipment fails. Zero means do not fail on error count.",
          "type": "integer",
          "format": "int64"
        },
        "timeout": {
          "description": "Timeout in seconds for entire shipment",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ShipmentResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Shipment"
        },
        {
          "type": "object",
          "properties": {
            "createdAt": {
              "description": "Timestamp when shipment was created",
              "type": "integer",
              "format": "int64"
            },
            "doneCount": {
              "description": "Number of commands that succeeded",
              "type": "integer",
              "format": "int64"
            },
            "errorsCount": {
              "description": "Number of commands that failed",
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "string"
            },
            "otherCount": {
              "description": "Number of commands that are not done and not failed",
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "$ref": "#/definitions/ShipmentStatus"
            },
            "totalCount": {
              "description": "Total number of commands",
              "type": "integer",
              "format": "int64"
            },
            "updatedAt": {
              "description": "Timestamp when shipment was updated",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ShipmentStatus": {
      "type": "string",
      "enum": [
        "unknown",
        "inprogress",
        "done",
        "error",
        "timeout"
      ]
    },
    "ShipmentsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "shipments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentResp"
              }
            }
          }
        }
      ]
    },
    "Stats": {
      "description": "Collection of service stats",
      "type": "array",
      "items": {
        "description": "Specific stats",
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    }
  },
  "parameters": {
    "Authorization": {
      "type": "string",
      "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
      "name": "Authorization",
      "in": "header"
    },
    "CommandId": {
      "type": "string",
      "description": "Command ID",
      "name": "commandId",
      "in": "path",
      "required": true
    },
    "CommandStatusInQuery": {
      "type": "string",
      "description": "Command status",
      "name": "commandStatus",
      "in": "query"
    },
    "ExtJobIdInQuery": {
      "type": "string",
      "description": "Ext job ID",
      "name": "extJobId",
      "in": "query"
    },
    "FQDN": {
      "type": "string",
      "description": "fqdn of whatever",
      "name": "fqdn",
      "in": "path",
      "required": true
    },
    "FQDNInQuery": {
      "type": "string",
      "description": "fqdn of whatever",
      "name": "fqdn",
      "in": "query"
    },
    "GroupName": {
      "type": "string",
      "description": "Group's name",
      "name": "groupname",
      "in": "path",
      "required": true
    },
    "JobId": {
      "type": "string",
      "description": "Job ID",
      "name": "jobId",
      "in": "path",
      "required": true
    },
    "JobIdInQuery": {
      "type": "string",
      "description": "Job ID",
      "name": "jobId",
      "in": "query"
    },
    "JobResultId": {
      "type": "string",
      "description": "Job result ID",
      "name": "jobResultId",
      "in": "path",
      "required": true
    },
    "JobResultStatusInQuery": {
      "type": "string",
      "description": "Job result status",
      "name": "jobResultStatus",
      "in": "query"
    },
    "JobStatusInQuery": {
      "type": "string",
      "description": "Job status",
      "name": "jobStatus",
      "in": "query"
    },
    "PageSize": {
      "type": "integer",
      "format": "int64",
      "default": 100,
      "description": "Number of results per page",
      "name": "pageSize",
      "in": "query"
    },
    "PageToken": {
      "type": "string",
      "description": "Token to request the next page in listing",
      "name": "pageToken",
      "in": "query"
    },
    "RequestIdHeader": {
      "type": "string",
      "description": "Unique request ID (must be generated for each separate request, even retries)",
      "name": "X-Request-Id",
      "in": "header"
    },
    "ShipmentId": {
      "type": "string",
      "description": "Shipment ID",
      "name": "shipmentId",
      "in": "path",
      "required": true
    },
    "ShipmentIdInQuery": {
      "type": "string",
      "description": "Shipment ID",
      "name": "shipmentId",
      "in": "query"
    },
    "ShipmentStatusInQuery": {
      "type": "string",
      "description": "Shipment status",
      "name": "shipmentStatus",
      "in": "query"
    },
    "SortOrderInQuery": {
      "enum": [
        "asc",
        "desc"
      ],
      "type": "string",
      "description": "Sorting order for listings",
      "name": "sortOrder",
      "in": "query"
    }
  },
  "responses": {
    "Error": {
      "description": "Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Provides API for deploying via SaltStack.",
    "title": "MDB Deploy API",
    "contact": {
      "email": "sidh@yandex-team.ru"
    },
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/v1/commands": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns list of commands",
        "operationId": "GetCommandsList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Shipment ID",
            "name": "shipmentId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "fqdn of whatever",
            "name": "fqdn",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Command status",
            "name": "commandStatus",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Sorting order for listings",
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of commands",
            "schema": {
              "$ref": "#/definitions/CommandsListResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/commands/{commandId}": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns specific command",
        "operationId": "GetCommand",
        "responses": {
          "200": {
            "description": "Command",
            "schema": {
              "$ref": "#/definitions/CommandResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "Command ID",
          "name": "commandId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns list of groups",
        "operationId": "GetGroupsList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Sorting order for listings",
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups",
            "schema": {
              "$ref": "#/definitions/GroupsListResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Creates new group",
        "operationId": "CreateGroup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created group",
            "schema": {
              "$ref": "#/definitions/GroupResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/groups/{groupname}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns specific group",
        "operationId": "GetGroup",
        "responses": {
          "200": {
            "description": "Group",
            "schema": {
              "$ref": "#/definitions/GroupResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Deletes group",
        "operationId": "DeleteGroup",
        "responses": {
          "200": {
            "description": "Group deleted"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "Group's name",
          "name": "groupname",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/jobresults": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns job results",
        "operationId": "GetJobResultsList",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          },
          {
            "type": "string",
            "description": "fqdn of whatever",
            "name": "fqdn",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ext job ID",
            "name": "extJobId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Job result status",
            "name": "jobResultStatus",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Sorting order for listings",
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "description": "DEPRECATED! NOT A JOB ID. WILL BE USED AS ExtJobID",
            "name": "jobId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Job results",
            "schema": {
              "$ref": "#/definitions/JobResultsListResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        }
      ]
    },
    "/v1/jobresults/{jobResultId}": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns specific job result",
        "operationId": "GetJobResult",
        "responses": {
          "200": {
            "description": "Job result",
            "schema": {
              "$ref": "#/definitions/JobResultResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "Job result ID",
          "name": "jobResultId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/jobs": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns list of jobs",
        "operationId": "GetJobsList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Shipment ID",
            "name": "shipmentId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "fqdn of whatever",
            "name": "fqdn",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ext job ID",
            "name": "extJobId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Job status",
            "name": "jobStatus",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Sorting order for listings",
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs",
            "schema": {
              "$ref": "#/definitions/JobsListResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/jobs/{jobId}": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns specific job",
        "operationId": "GetJob",
        "responses": {
          "200": {
            "description": "Job",
            "schema": {
              "$ref": "#/definitions/JobResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "Job ID",
          "name": "jobId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/masters": {
      "get": {
        "tags": [
          "masters"
        ],
        "summary": "Returns list of masters",
        "operationId": "GetMastersList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of masters",
            "schema": {
              "$ref": "#/definitions/MastersListResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "masters"
        ],
        "summary": "Creates new master",
        "operationId": "CreateMaster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Master"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created master",
            "schema": {
              "$ref": "#/definitions/MasterResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/masters/{fqdn}": {
      "get": {
        "tags": [
          "masters"
        ],
        "summary": "Returns specific master",
        "operationId": "GetMaster",
        "responses": {
          "200": {
            "description": "Master",
            "schema": {
              "$ref": "#/definitions/MasterResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "masters"
        ],
        "summary": "Creates new master or updates the old one",
        "operationId": "UpsertMaster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Master"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upserted master",
            "schema": {
              "$ref": "#/definitions/MasterResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "masters"
        ],
        "summary": "Deletes master",
        "operationId": "DeleteMaster",
        "responses": {
          "200": {
            "description": "Master deleted"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "fqdn of whatever",
          "name": "fqdn",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/masters/{fqdn}/minions": {
      "get": {
        "tags": [
          "masters"
        ],
        "summary": "Returns list of minions assigned to specific master",
        "operationId": "GetMasterMinions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of minions",
            "schema": {
              "$ref": "#/definitions/MinionsListResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "fqdn of whatever",
          "name": "fqdn",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/masters/{fqdn}/minions/changes": {
      "get": {
        "tags": [
          "masters"
        ],
        "summary": "Returns changelog in minions for specified master",
        "operationId": "GetMasterMinionsChanges",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in Unix Time starting from which to return changes",
            "name": "fromTimestamp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of minions changes",
            "schema": {
              "$ref": "#/definitions/MinionChangeList"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "fqdn of whatever",
          "name": "fqdn",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/minions": {
      "get": {
        "tags": [
          "minions"
        ],
        "summary": "Returns list of minions",
        "operationId": "GetMinionsList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of minions",
            "schema": {
              "$ref": "#/definitions/MinionsListResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "minions"
        ],
        "summary": "Creates new minion",
        "operationId": "CreateMinion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Minion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/minions/{fqdn}": {
      "get": {
        "tags": [
          "minions"
        ],
        "summary": "Returns specific minion",
        "operationId": "GetMinion",
        "responses": {
          "200": {
            "description": "Minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "minions"
        ],
        "summary": "Creates new minion or updates the old one",
        "operationId": "UpsertMinion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Minion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upserted minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "minions"
        ],
        "summary": "Deletes minion",
        "operationId": "DeleteMinion",
        "responses": {
          "200": {
            "description": "Minion deleted"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "fqdn of whatever",
          "name": "fqdn",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/minions/{fqdn}/jobs/{jobId}/results": {
      "post": {
        "tags": [
          "commands"
        ],
        "summary": "Create job result for specific job.",
        "operationId": "CreateJobResult",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobResult"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job result",
            "schema": {
              "$ref": "#/definitions/JobResultResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "fqdn of whatever",
          "name": "fqdn",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Job ID",
          "name": "jobId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/minions/{fqdn}/master": {
      "get": {
        "tags": [
          "minions"
        ],
        "summary": "Returns master of specific minion. Does NOT require authentication.",
        "operationId": "GetMinionMaster",
        "responses": {
          "200": {
            "description": "Minion's master",
            "schema": {
              "$ref": "#/definitions/MinionMaster"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "fqdn of whatever",
          "name": "fqdn",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/minions/{fqdn}/register": {
      "post": {
        "tags": [
          "minions"
        ],
        "summary": "Registers minion's public key.",
        "operationId": "RegisterMinion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MinionPublicKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registered minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "fqdn of whatever",
          "name": "fqdn",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/minions/{fqdn}/unregister": {
      "post": {
        "tags": [
          "minions"
        ],
        "summary": "Unregisters minion's public key. Minion can be registered again as if it was just created.",
        "operationId": "UnregisterMinion",
        "responses": {
          "200": {
            "description": "Unregistered minion",
            "schema": {
              "$ref": "#/definitions/MinionResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "fqdn of whatever",
          "name": "fqdn",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/ping": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Reports service status",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "Service is alive and well"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/shipments": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns list of shipments",
        "operationId": "GetShipmentsList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Number of results per page",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token to request the next page in listing",
            "name": "pageToken",
            "in": "query"
          },
          {
            "type": "string",
            "description": "fqdn of whatever",
            "name": "fqdn",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Shipment status",
            "name": "shipmentStatus",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Sorting order for listings",
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of shipments",
            "schema": {
              "$ref": "#/definitions/ShipmentsListResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "commands"
        ],
        "summary": "Creates new shipment",
        "operationId": "CreateShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created shipment",
            "schema": {
              "$ref": "#/definitions/ShipmentResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/shipments/{shipmentId}": {
      "get": {
        "tags": [
          "commands"
        ],
        "summary": "Returns specific shipment",
        "operationId": "GetShipment",
        "responses": {
          "200": {
            "description": "Shipment",
            "schema": {
              "$ref": "#/definitions/ShipmentResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        },
        {
          "type": "string",
          "description": "Shipment ID",
          "name": "shipmentId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
          "name": "Authorization",
          "in": "header"
        }
      ]
    },
    "/v1/stats": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Reports service stats",
        "operationId": "Stats",
        "responses": {
          "200": {
            "description": "Reports service stats",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CommandDef": {
      "type": "object",
      "properties": {
        "arguments": {
          "description": "Command arguments",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "description": "Timeout in seconds for command",
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "Command type",
          "type": "string"
        }
      }
    },
    "CommandResp": {
      "allOf": [
        {
          "$ref": "#/definitions/CommandDef"
        },
        {
          "type": "object",
          "properties": {
            "createdAt": {
              "description": "Timestamp when command was created",
              "type": "integer",
              "format": "int64"
            },
            "fqdn": {
              "description": "FQDN this command is meant for",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "shipmentID": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/CommandStatus"
            },
            "updatedAt": {
              "description": "Timestamp when command was updated",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "CommandStatus": {
      "type": "string",
      "enum": [
        "unknown",
        "available",
        "running",
        "done",
        "error",
        "canceled",
        "timeout"
      ]
    },
    "CommandsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "commands": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommandResp"
              }
            }
          }
        }
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Group ID",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Groups's name",
          "type": "string"
        }
      }
    },
    "GroupResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Group"
        },
        {
          "type": "object",
          "properties": {
            "mastersCount": {
              "description": "Number of masters in this group",
              "type": "integer",
              "format": "int64"
            },
            "minionsCount": {
              "description": "Number of minions in this group",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "GroupsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupResp"
              }
            }
          }
        }
      ]
    },
    "JobResp": {
      "type": "object",
      "properties": {
        "commandID": {
          "description": "ID of command that spawned this job",
          "type": "string"
        },
        "createdAt": {
          "description": "Timestamp when job was created",
          "type": "integer",
          "format": "int64"
        },
        "extId": {
          "description": "ID of this job in underlying deploy system (SaltStack)",
          "type": "string"
        },
        "id": {
          "description": "ID of this job in deploy",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/JobStatus"
        },
        "updatedAt": {
          "description": "Timestamp when job was updated",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JobResult": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "JobResultResp": {
      "allOf": [
        {
          "$ref": "#/definitions/JobResult"
        },
        {
          "type": "object",
          "properties": {
            "extID": {
              "type": "string"
            },
            "fqdn": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "type": "integer",
              "format": "int32"
            },
            "recordedAt": {
              "description": "Timestamp when job result was recorded",
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "$ref": "#/definitions/JobResultStatus"
            }
          }
        }
      ]
    },
    "JobResultStatus": {
      "type": "string",
      "enum": [
        "unknown",
        "success",
        "failure",
        "timeout",
        "notrunning"
      ]
    },
    "JobResultsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "jobResults": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobResultResp"
              }
            }
          }
        }
      ]
    },
    "JobStatus": {
      "type": "string",
      "enum": [
        "unknown",
        "running",
        "done",
        "error",
        "timeout"
      ]
    },
    "JobsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "jobs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobResp"
              }
            }
          }
        }
      ]
    },
    "Master": {
      "type": "object",
      "properties": {
        "aliases": {
          "description": "List of host aliases",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Master's description",
          "type": "string",
          "x-nullable": true
        },
        "fqdn": {
          "description": "Masters's fqdn",
          "type": "string"
        },
        "group": {
          "description": "Which group of masters this master belongs to",
          "type": "string",
          "x-nullable": true
        },
        "isOpen": {
          "description": "Is it allowed to auto-assign minions in its group to this master?",
          "type": "boolean",
          "x-nullable": true
        },
        "publicKey": {
          "description": "Master's public key",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "MasterResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Master"
        },
        {
          "type": "object",
          "properties": {
            "aliveCheckAt": {
              "description": "Timestamp when last alive check was performed",
              "type": "integer",
              "format": "int64"
            },
            "createdAt": {
              "description": "Timestamp when master was created",
              "type": "integer",
              "format": "int64"
            },
            "isAlive": {
              "description": "Is master alive?",
              "type": "boolean"
            },
            "minionsCount": {
              "description": "Number of minions assigned to this master",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "MastersListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "masters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MasterResp"
              }
            }
          }
        }
      ]
    },
    "Minion": {
      "type": "object",
      "properties": {
        "autoReassign": {
          "description": "Is it allowed to auto-assign this minion to masters in its group?",
          "type": "boolean",
          "x-nullable": true
        },
        "fqdn": {
          "description": "Minion's fqdn",
          "type": "string"
        },
        "group": {
          "description": "Which group of masters this minion belongs to",
          "type": "string",
          "x-nullable": true
        },
        "master": {
          "description": "Which master this minion belongs to",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "MinionChange": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "create",
            "delete",
            "reassign"
          ]
        },
        "fqdn": {
          "description": "Minion's fqdn",
          "type": "string"
        },
        "master": {
          "description": "Master's fqdn",
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MinionChangeList": {
      "type": "object",
      "properties": {
        "masters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MinionChange"
          }
        }
      }
    },
    "MinionMaster": {
      "allOf": [
        {
          "$ref": "#/definitions/MinionPublicKey"
        },
        {
          "type": "object",
          "properties": {
            "master": {
              "description": "Master's fqdn",
              "type": "string"
            },
            "masterPublicKey": {
              "description": "Master's public key",
              "type": "string"
            }
          }
        }
      ]
    },
    "MinionPublicKey": {
      "type": "object",
      "properties": {
        "publicKey": {
          "description": "Minion's public key",
          "type": "string"
        }
      }
    },
    "MinionResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Minion"
        },
        {
          "$ref": "#/definitions/MinionPublicKey"
        },
        {
          "type": "object",
          "properties": {
            "createdAt": {
              "description": "Timestamp when minion was created",
              "type": "integer",
              "format": "int64"
            },
            "deleted": {
              "description": "Whether minion is deleted or not",
              "type": "boolean"
            },
            "registerUntil": {
              "description": "Timestamp until minion must be registered",
              "type": "integer",
              "format": "int64"
            },
            "registered": {
              "description": "Whether minion is registered or not",
              "type": "boolean"
            },
            "updatedAt": {
              "description": "Timestamp when minion was updated",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "MinionsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "minions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MinionResp"
              }
            }
          }
        }
      ]
    },
    "Paging": {
      "type": "object",
      "properties": {
        "token": {
          "description": "Token to request the next page in listing",
          "type": "string",
          "in": "query",
          "name": "pageToken"
        }
      }
    },
    "Shipment": {
      "type": "object",
      "properties": {
        "batchSize": {
          "description": "Number of commands allowed to run simultaneously",
          "type": "integer",
          "format": "int64"
        },
        "commands": {
          "description": "Commands definitions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandDef"
          }
        },
        "fqdns": {
          "description": "FQDNs of target minions for this shipment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parallel": {
          "description": "Number of commands allowed to run simultaneously",
          "type": "integer",
          "format": "int64"
        },
        "stopOnErrorCount": {
          "description": "Number of failed commands after which entire shipment fails. Zero means do not fail on error count.",
          "type": "integer",
          "format": "int64"
        },
        "timeout": {
          "description": "Timeout in seconds for entire shipment",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ShipmentResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Shipment"
        },
        {
          "type": "object",
          "properties": {
            "createdAt": {
              "description": "Timestamp when shipment was created",
              "type": "integer",
              "format": "int64"
            },
            "doneCount": {
              "description": "Number of commands that succeeded",
              "type": "integer",
              "format": "int64"
            },
            "errorsCount": {
              "description": "Number of commands that failed",
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "string"
            },
            "otherCount": {
              "description": "Number of commands that are not done and not failed",
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "$ref": "#/definitions/ShipmentStatus"
            },
            "totalCount": {
              "description": "Total number of commands",
              "type": "integer",
              "format": "int64"
            },
            "updatedAt": {
              "description": "Timestamp when shipment was updated",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ShipmentStatus": {
      "type": "string",
      "enum": [
        "unknown",
        "inprogress",
        "done",
        "error",
        "timeout"
      ]
    },
    "ShipmentsListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/Paging"
        },
        {
          "type": "object",
          "properties": {
            "shipments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentResp"
              }
            }
          }
        }
      ]
    },
    "Stats": {
      "description": "Collection of service stats",
      "type": "array",
      "items": {
        "description": "Specific stats",
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    }
  },
  "parameters": {
    "Authorization": {
      "type": "string",
      "description": "OAuth token. It is not in security section because we also use cookies and you can't specify those in swagger 2.0.",
      "name": "Authorization",
      "in": "header"
    },
    "CommandId": {
      "type": "string",
      "description": "Command ID",
      "name": "commandId",
      "in": "path",
      "required": true
    },
    "CommandStatusInQuery": {
      "type": "string",
      "description": "Command status",
      "name": "commandStatus",
      "in": "query"
    },
    "ExtJobIdInQuery": {
      "type": "string",
      "description": "Ext job ID",
      "name": "extJobId",
      "in": "query"
    },
    "FQDN": {
      "type": "string",
      "description": "fqdn of whatever",
      "name": "fqdn",
      "in": "path",
      "required": true
    },
    "FQDNInQuery": {
      "type": "string",
      "description": "fqdn of whatever",
      "name": "fqdn",
      "in": "query"
    },
    "GroupName": {
      "type": "string",
      "description": "Group's name",
      "name": "groupname",
      "in": "path",
      "required": true
    },
    "JobId": {
      "type": "string",
      "description": "Job ID",
      "name": "jobId",
      "in": "path",
      "required": true
    },
    "JobIdInQuery": {
      "type": "string",
      "description": "Job ID",
      "name": "jobId",
      "in": "query"
    },
    "JobResultId": {
      "type": "string",
      "description": "Job result ID",
      "name": "jobResultId",
      "in": "path",
      "required": true
    },
    "JobResultStatusInQuery": {
      "type": "string",
      "description": "Job result status",
      "name": "jobResultStatus",
      "in": "query"
    },
    "JobStatusInQuery": {
      "type": "string",
      "description": "Job status",
      "name": "jobStatus",
      "in": "query"
    },
    "PageSize": {
      "type": "integer",
      "format": "int64",
      "default": 100,
      "description": "Number of results per page",
      "name": "pageSize",
      "in": "query"
    },
    "PageToken": {
      "type": "string",
      "description": "Token to request the next page in listing",
      "name": "pageToken",
      "in": "query"
    },
    "RequestIdHeader": {
      "type": "string",
      "description": "Unique request ID (must be generated for each separate request, even retries)",
      "name": "X-Request-Id",
      "in": "header"
    },
    "ShipmentId": {
      "type": "string",
      "description": "Shipment ID",
      "name": "shipmentId",
      "in": "path",
      "required": true
    },
    "ShipmentIdInQuery": {
      "type": "string",
      "description": "Shipment ID",
      "name": "shipmentId",
      "in": "query"
    },
    "ShipmentStatusInQuery": {
      "type": "string",
      "description": "Shipment status",
      "name": "shipmentStatus",
      "in": "query"
    },
    "SortOrderInQuery": {
      "enum": [
        "asc",
        "desc"
      ],
      "type": "string",
      "description": "Sorting order for listings",
      "name": "sortOrder",
      "in": "query"
    }
  },
  "responses": {
    "Error": {
      "description": "Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
}
