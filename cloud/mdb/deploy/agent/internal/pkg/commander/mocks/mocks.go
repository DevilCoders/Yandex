// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/deploy/agent/internal/pkg/commander (interfaces: CommandSourcer,ProgressTrackedCommandSourcer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	commander "a.yandex-team.ru/cloud/mdb/deploy/agent/internal/pkg/commander"
	gomock "github.com/golang/mock/gomock"
)

// MockCommandSourcer is a mock of CommandSourcer interface.
type MockCommandSourcer struct {
	ctrl     *gomock.Controller
	recorder *MockCommandSourcerMockRecorder
}

// MockCommandSourcerMockRecorder is the mock recorder for MockCommandSourcer.
type MockCommandSourcerMockRecorder struct {
	mock *MockCommandSourcer
}

// NewMockCommandSourcer creates a new mock instance.
func NewMockCommandSourcer(ctrl *gomock.Controller) *MockCommandSourcer {
	mock := &MockCommandSourcer{ctrl: ctrl}
	mock.recorder = &MockCommandSourcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandSourcer) EXPECT() *MockCommandSourcerMockRecorder {
	return m.recorder
}

// Commands mocks base method.
func (m *MockCommandSourcer) Commands(arg0 context.Context) <-chan commander.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commands", arg0)
	ret0, _ := ret[0].(<-chan commander.Command)
	return ret0
}

// Commands indicates an expected call of Commands.
func (mr *MockCommandSourcerMockRecorder) Commands(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commands", reflect.TypeOf((*MockCommandSourcer)(nil).Commands), arg0)
}

// Done mocks base method.
func (m *MockCommandSourcer) Done(arg0 context.Context, arg1 commander.Result) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done", arg0, arg1)
}

// Done indicates an expected call of Done.
func (mr *MockCommandSourcerMockRecorder) Done(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockCommandSourcer)(nil).Done), arg0, arg1)
}

// MockProgressTrackedCommandSourcer is a mock of ProgressTrackedCommandSourcer interface.
type MockProgressTrackedCommandSourcer struct {
	ctrl     *gomock.Controller
	recorder *MockProgressTrackedCommandSourcerMockRecorder
}

// MockProgressTrackedCommandSourcerMockRecorder is the mock recorder for MockProgressTrackedCommandSourcer.
type MockProgressTrackedCommandSourcerMockRecorder struct {
	mock *MockProgressTrackedCommandSourcer
}

// NewMockProgressTrackedCommandSourcer creates a new mock instance.
func NewMockProgressTrackedCommandSourcer(ctrl *gomock.Controller) *MockProgressTrackedCommandSourcer {
	mock := &MockProgressTrackedCommandSourcer{ctrl: ctrl}
	mock.recorder = &MockProgressTrackedCommandSourcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressTrackedCommandSourcer) EXPECT() *MockProgressTrackedCommandSourcerMockRecorder {
	return m.recorder
}

// Commands mocks base method.
func (m *MockProgressTrackedCommandSourcer) Commands(arg0 context.Context) <-chan commander.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commands", arg0)
	ret0, _ := ret[0].(<-chan commander.Command)
	return ret0
}

// Commands indicates an expected call of Commands.
func (mr *MockProgressTrackedCommandSourcerMockRecorder) Commands(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commands", reflect.TypeOf((*MockProgressTrackedCommandSourcer)(nil).Commands), arg0)
}

// Done mocks base method.
func (m *MockProgressTrackedCommandSourcer) Done(arg0 context.Context, arg1 commander.Result) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done", arg0, arg1)
}

// Done indicates an expected call of Done.
func (mr *MockProgressTrackedCommandSourcerMockRecorder) Done(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockProgressTrackedCommandSourcer)(nil).Done), arg0, arg1)
}

// Track mocks base method.
func (m *MockProgressTrackedCommandSourcer) Track(arg0 context.Context, arg1 commander.Progress) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Track", arg0, arg1)
}

// Track indicates an expected call of Track.
func (mr *MockProgressTrackedCommandSourcerMockRecorder) Track(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockProgressTrackedCommandSourcer)(nil).Track), arg0, arg1)
}
