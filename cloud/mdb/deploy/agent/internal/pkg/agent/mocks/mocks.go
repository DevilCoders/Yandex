// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/deploy/agent/internal/pkg/agent (interfaces: CallManager,SrvManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	salt "a.yandex-team.ru/cloud/mdb/deploy/agent/internal/pkg/agent/salt"
	datasource "a.yandex-team.ru/cloud/mdb/deploy/agent/internal/pkg/datasource"
	gomock "github.com/golang/mock/gomock"
)

// MockCallManager is a mock of CallManager interface.
type MockCallManager struct {
	ctrl     *gomock.Controller
	recorder *MockCallManagerMockRecorder
}

// MockCallManagerMockRecorder is the mock recorder for MockCallManager.
type MockCallManagerMockRecorder struct {
	mock *MockCallManager
}

// NewMockCallManager creates a new mock instance.
func NewMockCallManager(ctrl *gomock.Controller) *MockCallManager {
	mock := &MockCallManager{ctrl: ctrl}
	mock.recorder = &MockCallManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallManager) EXPECT() *MockCallManagerMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockCallManager) Changes() <-chan salt.Change {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan salt.Change)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockCallManagerMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockCallManager)(nil).Changes))
}

// Run mocks base method.
func (m *MockCallManager) Run(arg0 context.Context, arg1 salt.Job, arg2 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0, arg1, arg2)
}

// Run indicates an expected call of Run.
func (mr *MockCallManagerMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCallManager)(nil).Run), arg0, arg1, arg2)
}

// Shutdown mocks base method.
func (m *MockCallManager) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockCallManagerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockCallManager)(nil).Shutdown))
}

// MockSrvManager is a mock of SrvManager interface.
type MockSrvManager struct {
	ctrl     *gomock.Controller
	recorder *MockSrvManagerMockRecorder
}

// MockSrvManagerMockRecorder is the mock recorder for MockSrvManager.
type MockSrvManagerMockRecorder struct {
	mock *MockSrvManager
}

// NewMockSrvManager creates a new mock instance.
func NewMockSrvManager(ctrl *gomock.Controller) *MockSrvManager {
	mock := &MockSrvManager{ctrl: ctrl}
	mock.recorder = &MockSrvManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSrvManager) EXPECT() *MockSrvManagerMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSrvManager) Update(arg0 datasource.NamedReadCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSrvManagerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSrvManager)(nil).Update), arg0)
}

// Version mocks base method.
func (m *MockSrvManager) Version() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockSrvManagerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockSrvManager)(nil).Version))
}
