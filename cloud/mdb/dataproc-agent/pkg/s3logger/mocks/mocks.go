// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/dataproc-agent/pkg/s3logger (interfaces: ChunkUploader)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChunkUploader is a mock of ChunkUploader interface.
type MockChunkUploader struct {
	ctrl     *gomock.Controller
	recorder *MockChunkUploaderMockRecorder
}

// MockChunkUploaderMockRecorder is the mock recorder for MockChunkUploader.
type MockChunkUploaderMockRecorder struct {
	mock *MockChunkUploader
}

// NewMockChunkUploader creates a new mock instance.
func NewMockChunkUploader(ctrl *gomock.Controller) *MockChunkUploader {
	mock := &MockChunkUploader{ctrl: ctrl}
	mock.recorder = &MockChunkUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChunkUploader) EXPECT() *MockChunkUploaderMockRecorder {
	return m.recorder
}

// Disable mocks base method.
func (m *MockChunkUploader) Disable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disable")
}

// Disable indicates an expected call of Disable.
func (mr *MockChunkUploaderMockRecorder) Disable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockChunkUploader)(nil).Disable))
}

// UploadChunk mocks base method.
func (m *MockChunkUploader) UploadChunk(arg0 context.Context, arg1 int, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadChunk", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadChunk indicates an expected call of UploadChunk.
func (mr *MockChunkUploaderMockRecorder) UploadChunk(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadChunk", reflect.TypeOf((*MockChunkUploader)(nil).UploadChunk), arg0, arg1, arg2)
}
