// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/dataproc-agent/pkg/jobs/internal (interfaces: JobRunner,OrchestratorAPI,OutputSaver,FSJobOutputSaver)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "a.yandex-team.ru/cloud/mdb/dataproc-agent/pkg/models"
	yarn "a.yandex-team.ru/cloud/mdb/dataproc-agent/pkg/yarn"
	log "a.yandex-team.ru/library/go/core/log"
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockJobRunner is a mock of JobRunner interface.
type MockJobRunner struct {
	ctrl     *gomock.Controller
	recorder *MockJobRunnerMockRecorder
}

// MockJobRunnerMockRecorder is the mock recorder for MockJobRunner.
type MockJobRunnerMockRecorder struct {
	mock *MockJobRunner
}

// NewMockJobRunner creates a new mock instance.
func NewMockJobRunner(ctrl *gomock.Controller) *MockJobRunner {
	mock := &MockJobRunner{ctrl: ctrl}
	mock.recorder = &MockJobRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRunner) EXPECT() *MockJobRunnerMockRecorder {
	return m.recorder
}

// AfterRun mocks base method.
func (m *MockJobRunner) AfterRun() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterRun")
}

// AfterRun indicates an expected call of AfterRun.
func (mr *MockJobRunnerMockRecorder) AfterRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRun", reflect.TypeOf((*MockJobRunner)(nil).AfterRun))
}

// BeforeRun mocks base method.
func (m *MockJobRunner) BeforeRun() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeRun")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeRun indicates an expected call of BeforeRun.
func (mr *MockJobRunnerMockRecorder) BeforeRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeRun", reflect.TypeOf((*MockJobRunner)(nil).BeforeRun))
}

// DriverExitCodeDeterminesTerminalState mocks base method.
func (m *MockJobRunner) DriverExitCodeDeterminesTerminalState() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverExitCodeDeterminesTerminalState")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DriverExitCodeDeterminesTerminalState indicates an expected call of DriverExitCodeDeterminesTerminalState.
func (mr *MockJobRunnerMockRecorder) DriverExitCodeDeterminesTerminalState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverExitCodeDeterminesTerminalState", reflect.TypeOf((*MockJobRunner)(nil).DriverExitCodeDeterminesTerminalState))
}

// Logger mocks base method.
func (m *MockJobRunner) Logger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockJobRunnerMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockJobRunner)(nil).Logger))
}

// Run mocks base method.
func (m *MockJobRunner) Run() (io.Reader, chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(chan error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockJobRunnerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockJobRunner)(nil).Run))
}

// SelectYarnApplication mocks base method.
func (m *MockJobRunner) SelectYarnApplication(arg0 []yarn.Application) (*yarn.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectYarnApplication", arg0)
	ret0, _ := ret[0].(*yarn.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectYarnApplication indicates an expected call of SelectYarnApplication.
func (mr *MockJobRunnerMockRecorder) SelectYarnApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectYarnApplication", reflect.TypeOf((*MockJobRunner)(nil).SelectYarnApplication), arg0)
}

// YarnTag mocks base method.
func (m *MockJobRunner) YarnTag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YarnTag")
	ret0, _ := ret[0].(string)
	return ret0
}

// YarnTag indicates an expected call of YarnTag.
func (mr *MockJobRunnerMockRecorder) YarnTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YarnTag", reflect.TypeOf((*MockJobRunner)(nil).YarnTag))
}

// MockOrchestratorAPI is a mock of OrchestratorAPI interface.
type MockOrchestratorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorAPIMockRecorder
}

// MockOrchestratorAPIMockRecorder is the mock recorder for MockOrchestratorAPI.
type MockOrchestratorAPIMockRecorder struct {
	mock *MockOrchestratorAPI
}

// NewMockOrchestratorAPI creates a new mock instance.
func NewMockOrchestratorAPI(ctrl *gomock.Controller) *MockOrchestratorAPI {
	mock := &MockOrchestratorAPI{ctrl: ctrl}
	mock.recorder = &MockOrchestratorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorAPI) EXPECT() *MockOrchestratorAPIMockRecorder {
	return m.recorder
}

// JobUpdated mocks base method.
func (m *MockOrchestratorAPI) JobUpdated(arg0 models.Job) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JobUpdated", arg0)
}

// JobUpdated indicates an expected call of JobUpdated.
func (mr *MockOrchestratorAPIMockRecorder) JobUpdated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobUpdated", reflect.TypeOf((*MockOrchestratorAPI)(nil).JobUpdated), arg0)
}

// MockOutputSaver is a mock of OutputSaver interface.
type MockOutputSaver struct {
	ctrl     *gomock.Controller
	recorder *MockOutputSaverMockRecorder
}

// MockOutputSaverMockRecorder is the mock recorder for MockOutputSaver.
type MockOutputSaverMockRecorder struct {
	mock *MockOutputSaver
}

// NewMockOutputSaver creates a new mock instance.
func NewMockOutputSaver(ctrl *gomock.Controller) *MockOutputSaver {
	mock := &MockOutputSaver{ctrl: ctrl}
	mock.recorder = &MockOutputSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputSaver) EXPECT() *MockOutputSaverMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOutputSaver) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOutputSaverMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOutputSaver)(nil).Close), arg0)
}

// Disable mocks base method.
func (m *MockOutputSaver) Disable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disable")
}

// Disable indicates an expected call of Disable.
func (mr *MockOutputSaverMockRecorder) Disable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockOutputSaver)(nil).Disable))
}

// Flush mocks base method.
func (m *MockOutputSaver) Flush(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockOutputSaverMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockOutputSaver)(nil).Flush), arg0)
}

// ReadFrom mocks base method.
func (m *MockOutputSaver) ReadFrom(arg0 io.Reader) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockOutputSaverMockRecorder) ReadFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockOutputSaver)(nil).ReadFrom), arg0)
}

// MockFSJobOutputSaver is a mock of FSJobOutputSaver interface.
type MockFSJobOutputSaver struct {
	ctrl     *gomock.Controller
	recorder *MockFSJobOutputSaverMockRecorder
}

// MockFSJobOutputSaverMockRecorder is the mock recorder for MockFSJobOutputSaver.
type MockFSJobOutputSaverMockRecorder struct {
	mock *MockFSJobOutputSaver
}

// NewMockFSJobOutputSaver creates a new mock instance.
func NewMockFSJobOutputSaver(ctrl *gomock.Controller) *MockFSJobOutputSaver {
	mock := &MockFSJobOutputSaver{ctrl: ctrl}
	mock.recorder = &MockFSJobOutputSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSJobOutputSaver) EXPECT() *MockFSJobOutputSaverMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFSJobOutputSaver) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockFSJobOutputSaverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFSJobOutputSaver)(nil).Close))
}

// GetReader mocks base method.
func (m *MockFSJobOutputSaver) GetReader(arg0 io.Reader) io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReader", arg0)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// GetReader indicates an expected call of GetReader.
func (mr *MockFSJobOutputSaverMockRecorder) GetReader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReader", reflect.TypeOf((*MockFSJobOutputSaver)(nil).GetReader), arg0)
}

// MoveJobLog mocks base method.
func (m *MockFSJobOutputSaver) MoveJobLog() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveJobLog")
}

// MoveJobLog indicates an expected call of MoveJobLog.
func (mr *MockFSJobOutputSaverMockRecorder) MoveJobLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveJobLog", reflect.TypeOf((*MockFSJobOutputSaver)(nil).MoveJobLog))
}

// SetApplicationID mocks base method.
func (m *MockFSJobOutputSaver) SetApplicationID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetApplicationID", arg0)
}

// SetApplicationID indicates an expected call of SetApplicationID.
func (mr *MockFSJobOutputSaverMockRecorder) SetApplicationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationID", reflect.TypeOf((*MockFSJobOutputSaver)(nil).SetApplicationID), arg0)
}

// Write mocks base method.
func (m *MockFSJobOutputSaver) Write(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockFSJobOutputSaverMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFSJobOutputSaver)(nil).Write), arg0)
}
