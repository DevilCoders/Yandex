// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/dataproc-agent/pkg/apiclient (interfaces: HealthAPI,JobStream,JobsAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	apiclient "a.yandex-team.ru/cloud/mdb/dataproc-agent/pkg/apiclient"
	models "a.yandex-team.ru/cloud/mdb/dataproc-agent/pkg/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHealthAPI is a mock of HealthAPI interface.
type MockHealthAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHealthAPIMockRecorder
}

// MockHealthAPIMockRecorder is the mock recorder for MockHealthAPI.
type MockHealthAPIMockRecorder struct {
	mock *MockHealthAPI
}

// NewMockHealthAPI creates a new mock instance.
func NewMockHealthAPI(ctrl *gomock.Controller) *MockHealthAPI {
	mock := &MockHealthAPI{ctrl: ctrl}
	mock.recorder = &MockHealthAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthAPI) EXPECT() *MockHealthAPIMockRecorder {
	return m.recorder
}

// Report mocks base method.
func (m *MockHealthAPI) Report(arg0 context.Context, arg1 models.Info) (*models.NodesToDecommission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", arg0, arg1)
	ret0, _ := ret[0].(*models.NodesToDecommission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report.
func (mr *MockHealthAPIMockRecorder) Report(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockHealthAPI)(nil).Report), arg0, arg1)
}

// MockJobStream is a mock of JobStream interface.
type MockJobStream struct {
	ctrl     *gomock.Controller
	recorder *MockJobStreamMockRecorder
}

// MockJobStreamMockRecorder is the mock recorder for MockJobStream.
type MockJobStreamMockRecorder struct {
	mock *MockJobStream
}

// NewMockJobStream creates a new mock instance.
func NewMockJobStream(ctrl *gomock.Controller) *MockJobStream {
	mock := &MockJobStream{ctrl: ctrl}
	mock.recorder = &MockJobStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobStream) EXPECT() *MockJobStreamMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockJobStream) Next(arg0 context.Context) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockJobStreamMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockJobStream)(nil).Next), arg0)
}

// MockJobsAPI is a mock of JobsAPI interface.
type MockJobsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockJobsAPIMockRecorder
}

// MockJobsAPIMockRecorder is the mock recorder for MockJobsAPI.
type MockJobsAPIMockRecorder struct {
	mock *MockJobsAPI
}

// NewMockJobsAPI creates a new mock instance.
func NewMockJobsAPI(ctrl *gomock.Controller) *MockJobsAPI {
	mock := &MockJobsAPI{ctrl: ctrl}
	mock.recorder = &MockJobsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobsAPI) EXPECT() *MockJobsAPIMockRecorder {
	return m.recorder
}

// ListActiveJobs mocks base method.
func (m *MockJobsAPI) ListActiveJobs() apiclient.JobStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveJobs")
	ret0, _ := ret[0].(apiclient.JobStream)
	return ret0
}

// ListActiveJobs indicates an expected call of ListActiveJobs.
func (mr *MockJobsAPIMockRecorder) ListActiveJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveJobs", reflect.TypeOf((*MockJobsAPI)(nil).ListActiveJobs))
}

// UpdateState mocks base method.
func (m *MockJobsAPI) UpdateState(arg0 context.Context, arg1 models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockJobsAPIMockRecorder) UpdateState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockJobsAPI)(nil).UpdateState), arg0, arg1)
}
