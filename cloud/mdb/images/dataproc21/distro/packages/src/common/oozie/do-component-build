#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -x

. `dirname $0`/bigtop.bom
#
# Resolve source directory
#

# $0 may be a softlink
PRG="$0"
while [ -h "${PRG}" ]; do
  ls=`ls -ld "${PRG}"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "${PRG}"`/"$link"
  fi
done

RELEASE_DIR=`dirname ${PRG}`
RELEASE_DIR=`cd ${RELEASE_DIR}/..;pwd`

RELEASE_DIR=$PWD

# IMPORTANT: THE FULL_VERSION, if set, will be used only for the final TARBALL,
#            Everything inside of the TARBALL uses the version specified in the POM
if [ -z "${FULL_VERSION}" ]; then
  FULL_VERSION=${OOZIE_VERSION}
  echo "Warning: FULL_VERSION not specified. Default version [${FULL_VERSION}] will be used."
fi
VERSION_SUFFIX="-${FULL_VERSION}"

#
# Build Oozie
#

echo "Starting system build"

# Test if there is a + sign in the dir path
# We need to do this because in Linux Sun JVM inteprets '+' as ' ' in URLs
# testcases uses URLs to access testcases directories and OpenJPA enhancer uses them as well
WORKDIR=${RELEASE_DIR}
if [[ "${WORKDIR}" == *\+* ]]; then
  # There is a + sign. Create a temp work dir
  # and copy over the files to that place
  WORKDIR=`mktemp -d /tmp/oozie.XXXXXX`
  echo "Created temporary workspace directory: ${WORKDIR}"
  cp -R ${RELEASE_DIR}/* ${WORKDIR}
fi

# Delete and recreate build directory
BUILDDIR=${WORKDIR}/build
rm -rf ${BUILDDIR}
mkdir -p ${BUILDDIR}

EXTRA_GOALS=""

# Check if maven deploy should be done or not
if [ "${DO_MAVEN_DEPLOY}" = "deploy" ]; then
  EXTRA_GOALS="${EXTRA_GOALS} source:jar deploy"
fi

# Disable Codehaus repository since it's out of service
sed -i.bak "/http:\/\/repository.codehaus.org/a\\
            <releases>\\
                <enabled>false</enabled>\\
            </releases>" ${WORKDIR}/pom.xml

export MAVEN_OPTS="-Xmx2g"
# Invoke Oozie build script
${WORKDIR}/bin/mkdistro.sh -DjavaVersion=${JDK_VERSION} -DtargetJavaVersion=${JDK_VERSION} -DsourceJavaVersion=${JDK_VERSION} -DminJavaVersion=${JDK_VERSION} -DskipTests -Phadoop-3 -Pspark-2 -Puber -Dhadoop.version=${HADOOP_VERSION} -Dhadoop.auth.version=${HADOOP_VERSION} -Dhive.version=${HIVE_VERSION} -Dspark.version=${SPARK_VERSION} -Dspark.scala.binary.version=${SCALA_VERSION%.*} -Djackson.version=2.9.10 ${EXTRA_GOALS} -Dmaven.repo.local=${HOME}/.m2/repository -pl "!sharelib/pig,!sharelib/hive,!sharelib/sqoop" "$@"
MKDISTRO_RESULT=$?
if [ "${MKDISTRO_RESULT}" != "0" ]; then
  echo "ERROR: mkdistro.sh failed with error ${MKDISTRO_RESULT}"
  echo "Build files from failed build: ${WORKDIR}"
  exit ${MKDISTRO_RESULT}
fi

mkdir -p ${BUILDDIR}/client
#mkdir -p ${BUILDDIR}/sharelib
mkdir -p ${BUILDDIR}/server

export DISTRODIR=${WORKDIR}/distro/target/oozie-${OOZIE_VERSION}-distro/oozie-${OOZIE_VERSION}
tar --strip-components 1 -zxvf ${DISTRODIR}/oozie-client-${OOZIE_VERSION}.tar.gz -C ${BUILDDIR}/client/
rm ${DISTRODIR}/oozie-client-${OOZIE_VERSION}.tar.gz
#tar --strip-components 1 -zxvf ${DISTRODIR}/oozie-sharelib-${OOZIE_VERSION}.tar.gz -C ${BUILDDIR}/sharelib/
#rm ${DISTRODIR}/oozie-sharelib-${OOZIE_VERSION}.tar.gz
mv ${DISTRODIR}/oozie-sharelib-${OOZIE_VERSION}.tar.gz ${BUILDDIR}/oozie-sharelib-${OOZIE_VERSION}.tar.gz
mv ${DISTRODIR}/* ${BUILDDIR}/server/

echo "SUCCESS: Build complete"
exit 0
