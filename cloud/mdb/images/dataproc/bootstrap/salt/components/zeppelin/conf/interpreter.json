{
  "interpreterSettings": {
    "geode": {
      "id": "geode",
      "name": "geode",
      "group": "geode",
      "properties": {
        "geode.locator.host": {
          "name": "geode.locator.host",
          "value": "localhost",
          "type": "string",
          "description": "The Geode Locator Host."
        },
        "geode.locator.port": {
          "name": "geode.locator.port",
          "value": "10334",
          "type": "number",
          "description": "The Geode Locator Port."
        },
        "geode.max.result": {
          "name": "geode.max.result",
          "value": "1000",
          "type": "number",
          "description": "Max number of OQL result to display."
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "oql",
          "class": "org.apache.zeppelin.geode.GeodeOqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql"
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "jdbc": {
      "id": "jdbc",
      "name": "jdbc",
      "group": "jdbc",
      "properties": {
        "default.url": {
          "name": "default.url",
          "value": "jdbc:postgresql://localhost:5432/",
          "type": "string",
          "description": "The URL for JDBC."
        },
        "default.user": {
          "name": "default.user",
          "value": "gpadmin",
          "type": "string",
          "description": "The JDBC user name"
        },
        "default.password": {
          "name": "default.password",
          "value": "",
          "type": "password",
          "description": "The JDBC user password"
        },
        "default.driver": {
          "name": "default.driver",
          "value": "org.postgresql.Driver",
          "type": "string",
          "description": "JDBC Driver Name"
        },
        "default.completer.ttlInSeconds": {
          "name": "default.completer.ttlInSeconds",
          "value": "120",
          "type": "number",
          "description": "Time to live sql completer in seconds (-1 to update everytime, 0 to disable update)"
        },
        "default.completer.schemaFilters": {
          "name": "default.completer.schemaFilters",
          "value": "",
          "type": "textarea",
          "description": "Ð¡omma separated schema (schema \u003d catalog \u003d database) filters to get metadata for completions. Supports \u0027%\u0027 symbol is equivalent to any set of characters. (ex. prod_v_%,public%,info)"
        },
        "default.precode": {
          "name": "default.precode",
          "value": "",
          "type": "textarea",
          "description": "SQL which executes while opening connection"
        },
        "default.statementPrecode": {
          "name": "default.statementPrecode",
          "value": "",
          "type": "textarea",
          "description": "Runs before each run of the paragraph, in the same connection"
        },
        "common.max_count": {
          "name": "common.max_count",
          "value": "1000",
          "type": "number",
          "description": "Max number of SQL result to display."
        },
        "zeppelin.jdbc.auth.type": {
          "name": "zeppelin.jdbc.auth.type",
          "value": "",
          "type": "string",
          "description": "If auth type is needed, Example: KERBEROS"
        },
        "zeppelin.jdbc.auth.kerberos.proxy.enable": {
          "name": "zeppelin.jdbc.auth.kerberos.proxy.enable",
          "value": "true",
          "type": "checkbox",
          "description": "When auth type is Kerberos, enable/disable Kerberos proxy with the login user to get the connection. Default value is true."
        },
        "zeppelin.jdbc.concurrent.use": {
          "name": "zeppelin.jdbc.concurrent.use",
          "value": true,
          "type": "checkbox",
          "description": "Use parallel scheduler"
        },
        "zeppelin.jdbc.concurrent.max_connection": {
          "name": "zeppelin.jdbc.concurrent.max_connection",
          "value": "10",
          "type": "number",
          "description": "Number of concurrent execution"
        },
        "zeppelin.jdbc.keytab.location": {
          "name": "zeppelin.jdbc.keytab.location",
          "value": "",
          "type": "string",
          "description": "Kerberos keytab location"
        },
        "zeppelin.jdbc.principal": {
          "name": "zeppelin.jdbc.principal",
          "value": "",
          "type": "string",
          "description": "Kerberos principal"
        },
        "zeppelin.jdbc.interpolation": {
          "name": "zeppelin.jdbc.interpolation",
          "value": false,
          "type": "checkbox",
          "description": "Enable ZeppelinContext variable interpolation into paragraph text"
        },
        "zeppelin.jdbc.maxConnLifetime": {
          "name": "zeppelin.jdbc.maxConnLifetime",
          "value": "-1",
          "type": "number",
          "description": "Maximum of connection lifetime in milliseconds. A value of zero or less means the connection has an infinite lifetime."
        },
        "zeppelin.jdbc.maxRows": {
          "name": "zeppelin.jdbc.maxRows",
          "value": "1000",
          "type": "number",
          "description": "Maximum number of rows fetched from the query."
        },
        "zeppelin.jdbc.hive.timeout.threshold": {
          "name": "zeppelin.jdbc.hive.timeout.threshold",
          "value": "60000",
          "type": "number",
          "description": "Timeout for hive job timeout"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "sql",
          "class": "org.apache.zeppelin.jdbc.JDBCInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "influxdb": {
      "id": "influxdb",
      "name": "influxdb",
      "group": "influxdb",
      "properties": {
        "influxdb.url": {
          "name": "influxdb.url",
          "value": "http://localhost:9999",
          "type": "string",
          "description": "The URL for InfluxDB 2.X API"
        },
        "influxdb.token": {
          "name": "influxdb.token",
          "value": "my-token",
          "type": "password",
          "description": "InfluxDB auth token"
        },
        "influxdb.org": {
          "name": "influxdb.org",
          "value": "my-org",
          "type": "string",
          "description": "InfluxDB org name"
        },
        "influxdb.logLevel": {
          "name": "influxdb.logLevel",
          "value": "NONE",
          "type": "string",
          "description": "InfluxDB http client library verbosity level (NONE, BASIC, HEADERS, BODY)"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "influxdb",
          "class": "org.apache.zeppelin.influxdb.InfluxDBInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "lens": {
      "id": "lens",
      "name": "lens",
      "group": "lens",
      "properties": {
        "zeppelin.lens.run.concurrent": {
          "name": "zeppelin.lens.run.concurrent",
          "value": true,
          "type": "checkbox",
          "description": "Run concurrent Lens Sessions"
        },
        "zeppelin.lens.maxThreads": {
          "name": "zeppelin.lens.maxThreads",
          "value": "10",
          "type": "number",
          "description": "If concurrency is true then how many threads?"
        },
        "zeppelin.lens.maxResults": {
          "name": "zeppelin.lens.maxResults",
          "value": "1000",
          "type": "number",
          "description": "max number of rows to display"
        },
        "lens.server.base.url": {
          "name": "lens.server.base.url",
          "value": "http://\u003chostname\u003e:\u003cport\u003e/lensapi",
          "type": "url",
          "description": "The URL for Lens Server"
        },
        "lens.client.dbname": {
          "name": "lens.client.dbname",
          "value": "default",
          "type": "string",
          "description": "The database schema name"
        },
        "lens.query.enable.persistent.resultset": {
          "name": "lens.query.enable.persistent.resultset",
          "value": false,
          "type": "checkbox",
          "description": "Apache Lens to persist result in HDFS?"
        },
        "lens.session.cluster.user": {
          "name": "lens.session.cluster.user",
          "value": "default",
          "type": "string",
          "description": "Hadoop cluster username"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "lens",
          "class": "org.apache.zeppelin.lens.LensInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "java": {
      "id": "java",
      "name": "java",
      "group": "java",
      "properties": {},
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "java",
          "class": "org.apache.zeppelin.java.JavaInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "java",
            "editOnDblClick": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "file": {
      "id": "file",
      "name": "file",
      "group": "file",
      "properties": {
        "hdfs.url": {
          "name": "hdfs.url",
          "value": "http://localhost:50070/webhdfs/v1/",
          "type": "url",
          "description": "The URL for WebHDFS"
        },
        "hdfs.user": {
          "name": "hdfs.user",
          "value": "hdfs",
          "type": "string",
          "description": "The WebHDFS user"
        },
        "hdfs.maxlength": {
          "name": "hdfs.maxlength",
          "value": "1000",
          "type": "number",
          "description": "Maximum number of lines of results fetched"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "hdfs",
          "class": "org.apache.zeppelin.file.HDFSFileInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "jupyter": {
      "id": "jupyter",
      "name": "jupyter",
      "group": "jupyter",
      "properties": {},
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "jupyter",
          "class": "org.apache.zeppelin.jupyter.JupyterInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "text",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "spark": {
      "id": "spark",
      "name": "spark",
      "group": "spark",
      "properties": {
        "SPARK_HOME": {
          "name": "SPARK_HOME",
          "value": "/usr/lib/spark",
          "type": "string",
          "description": "Location of spark distribution"
        },
        "spark.master": {
          "name": "spark.master",
          "value": "yarn",
          "type": "string",
          "description": "Spark master uri. local | yarn-client | yarn-cluster | spark master address of standalone mode, ex) spark://master_host:7077"
        },
        "spark.submit.deployMode": {
          "name": "spark.submit.deployMode",
          "value": "{{ salt['ydputils.get_spark_deploy_mode']() }}",
          "type": "string",
          "description": "The deploy mode of Spark driver program, either \"client\" or \"cluster\", Which means to launch driver program locally (\"client\") or remotely (\"cluster\") on one of the nodes inside the cluster."
        },
        "spark.app.name": {
          "name": "spark.app.name",
          "value": "",
          "type": "string",
          "description": "The name of spark application."
        },
        "spark.driver.cores": {
          "name": "spark.driver.cores",
          "value": "{{ salt['ydputils.get_spark_driver_cores']() }}",
          "type": "number",
          "description": "Number of cores to use for the driver process, only in cluster mode."
        },
        "spark.driver.memory": {
          "name": "spark.driver.memory",
          "value": "{{ salt['ydputils.get_spark_driver_memory']() }}",
          "type": "string",
          "description": "Amount of memory to use for the driver process, i.e. where SparkContext is initialized, in the same format as JVM memory strings with a size unit suffix (\"k\", \"m\", \"g\" or \"t\") (e.g. 512m, 2g)."
        },
        "spark.executor.cores": {
          "name": "spark.executor.cores",
          "value": "{{ salt['ydputils.get_spark_executor_cores']() }}",
          "type": "number",
          "description": "The number of cores to use on each executor"
        },
        "spark.executor.memory": {
          "name": "spark.executor.memory",
          "value": "{{ salt['ydputils.get_spark_executor_memory']() }}",
          "type": "string",
          "description": "Executor memory per worker instance. ex) 512m, 32g"
        },
        "spark.executor.instances": {
          "name": "spark.executor.instances",
          "value": "2",
          "type": "number",
          "description": "The number of executors for static allocation."
        },
        "spark.files": {
          "name": "spark.files",
          "value": "{{ salt['ydputils.get_spark_files']() }}",
          "type": "string",
          "description": "Comma-separated list of files to be placed in the working directory of each executor. Globs are allowed."
        },
        "spark.jars": {
          "name": "spark.jars",
          "value": "{{ salt['ydputils.get_spark_jars']() }}",
          "type": "string",
          "description": "Comma-separated list of jars to include on the driver and executor classpaths. Globs are allowed."
        },
        "spark.jars.packages": {
          "name": "spark.jars.packages",
          "value": "{{ salt['ydputils.get_spark_jars_packages']() }}",
          "type": "string",
          "description": "Comma-separated list of Maven coordinates of jars to include on the driver and executor classpaths. The coordinates should be groupId:artifactId:version. If spark.jars.ivySettings is given artifacts will be resolved according to the configuration in the file, otherwise artifacts will be searched for in the local maven repo, then maven central and finally any additional remote repositories given by the command-line option --repositories."
        },
        "zeppelin.spark.useHiveContext": {
          "name": "zeppelin.spark.useHiveContext",
          "value": true,
          "type": "checkbox",
          "description": "Use HiveContext instead of SQLContext if it is true. Enable hive for SparkSession."
        },
        "zeppelin.spark.printREPLOutput": {
          "name": "zeppelin.spark.printREPLOutput",
          "value": true,
          "type": "checkbox",
          "description": "Print REPL output"
        },
        "zeppelin.spark.maxResult": {
          "name": "zeppelin.spark.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of result to display."
        },
        "zeppelin.spark.enableSupportedVersionCheck": {
          "name": "zeppelin.spark.enableSupportedVersionCheck",
          "value": true,
          "type": "checkbox",
          "description": "Whether checking supported spark version. Developer only setting, not for production use"
        },
        "zeppelin.spark.uiWebUrl": {
          "name": "zeppelin.spark.uiWebUrl",
          "value": "",
          "type": "string",
          "description": "Override Spark UI default URL. In Kubernetes mode, value can be Jinja template string with 3 template variables \u0027PORT\u0027, \u0027SERVICE_NAME\u0027 and \u0027SERVICE_DOMAIN\u0027. (ex: http://{{ '{{PORT}}-{{SERVICE_NAME}}.{{SERVICE_DOMAIN}}' }})"
        },
        "zeppelin.spark.ui.hidden": {
          "name": "zeppelin.spark.ui.hidden",
          "value": false,
          "type": "checkbox",
          "description": "Whether hide spark ui in zeppelin ui"
        },
        "spark.webui.yarn.useProxy": {
          "name": "spark.webui.yarn.useProxy",
          "value": false,
          "type": "checkbox",
          "description": "whether use yarn proxy url as spark weburl, e.g. http://localhost:8088/proxy/application_1583396598068_0004"
        },
        "zeppelin.spark.scala.color": {
          "name": "zeppelin.spark.scala.color",
          "value": true,
          "type": "checkbox",
          "description": "Whether enable color output of spark scala interpreter"
        },
        "zeppelin.spark.deprecatedMsg.show": {
          "name": "zeppelin.spark.deprecatedMsg.show",
          "value": true,
          "type": "checkbox",
          "description": "Whether show the spark deprecated message, spark 2.2 and before are deprecated. Zeppelin will display warning message by default"
        },
        "zeppelin.spark.concurrentSQL": {
          "name": "zeppelin.spark.concurrentSQL",
          "value": true,
          "type": "checkbox",
          "description": "Execute multiple SQL concurrently if set true."
        },
        "zeppelin.spark.concurrentSQL.max": {
          "name": "zeppelin.spark.concurrentSQL.max",
          "value": "10",
          "type": "number",
          "description": "Max number of SQL concurrently executed"
        },
        "zeppelin.spark.sql.stacktrace": {
          "name": "zeppelin.spark.sql.stacktrace",
          "value": true,
          "type": "checkbox",
          "description": "Show full exception stacktrace for SQL queries if set to true."
        },
        "zeppelin.spark.sql.interpolation": {
          "name": "zeppelin.spark.sql.interpolation",
          "value": false,
          "type": "checkbox",
          "description": "Enable ZeppelinContext variable interpolation into spark sql"
        },
        "PYSPARK_PYTHON": {
          "name": "PYSPARK_PYTHON",
          "value": "/opt/conda/bin/python",
          "type": "string",
          "description": "Python binary executable to use for PySpark in both driver and workers (default is python2.7 if available, otherwise python). Property `spark.pyspark.python` take precedence if it is set"
        },
        "PYSPARK_DRIVER_PYTHON": {
          "name": "PYSPARK_DRIVER_PYTHON",
          "value": "/opt/conda/bin/python",
          "type": "string",
          "description": "Python binary executable to use for PySpark in driver only (default is `PYSPARK_PYTHON`). Property `spark.pyspark.driver.python` take precedence if it is set"
        },
        "zeppelin.pyspark.useIPython": {
          "name": "zeppelin.pyspark.useIPython",
          "value": true,
          "type": "checkbox",
          "description": "Whether use IPython when it is available"
        },
        "zeppelin.R.knitr": {
          "name": "zeppelin.R.knitr",
          "value": true,
          "type": "checkbox",
          "description": "Whether use knitr or not"
        },
        "zeppelin.R.cmd": {
          "name": "zeppelin.R.cmd",
          "value": "R",
          "type": "string",
          "description": "R binary executable path"
        },
        "zeppelin.R.image.width": {
          "name": "zeppelin.R.image.width",
          "value": "100%",
          "type": "number",
          "description": "Image width of R plotting"
        },
        "zeppelin.R.render.options": {
          "name": "zeppelin.R.render.options",
          "value": "out.format \u003d \u0027html\u0027, comment \u003d NA, echo \u003d FALSE, results \u003d \u0027asis\u0027, message \u003d F, warning \u003d F, fig.retina \u003d 2",
          "type": "textarea",
          "description": ""
        },
        "zeppelin.kotlin.shortenTypes": {
          "name": "zeppelin.kotlin.shortenTypes",
          "value": true,
          "type": "checkbox",
          "description": "Show short types instead of full, e.g. List\u003cString\u003e or kotlin.collections.List\u003ckotlin.String\u003e"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "spark",
          "class": "org.apache.zeppelin.spark.SparkInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "scala",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "sql",
          "class": "org.apache.zeppelin.spark.SparkSqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "pyspark",
          "class": "org.apache.zeppelin.spark.IPySparkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "ipyspark",
          "class": "org.apache.zeppelin.spark.IPySparkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionSupport": true,
            "completionKey": "TAB"
          }
        },
        {
          "name": "r",
          "class": "org.apache.zeppelin.spark.SparkRInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": false,
            "completionKey": "TAB"
          }
        },
        {
          "name": "ir",
          "class": "org.apache.zeppelin.spark.SparkIRInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": true,
            "completionKey": "TAB"
          }
        },
        {
          "name": "shiny",
          "class": "org.apache.zeppelin.spark.SparkShinyInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": true,
            "completionKey": "TAB"
          }
        },
        {
          "name": "kotlin",
          "class": "org.apache.zeppelin.spark.KotlinSparkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "kotlin",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "sh": {
      "id": "sh",
      "name": "sh",
      "group": "sh",
      "properties": {
        "shell.command.timeout.millisecs": {
          "name": "shell.command.timeout.millisecs",
          "value": "60000",
          "type": "number",
          "description": "Shell command time out in millisecs. Default \u003d 60000"
        },
        "shell.working.directory.user.home": {
          "name": "shell.working.directory.user.home",
          "value": false,
          "type": "checkbox",
          "description": "If this set to true, the shell\u0027s working directory will be set to user home"
        },
        "zeppelin.shell.auth.type": {
          "name": "zeppelin.shell.auth.type",
          "value": "",
          "type": "string",
          "description": "If auth type is needed, Example: KERBEROS"
        },
        "zeppelin.shell.keytab.location": {
          "name": "zeppelin.shell.keytab.location",
          "value": "",
          "type": "string",
          "description": "Kerberos keytab location"
        },
        "zeppelin.shell.principal": {
          "name": "zeppelin.shell.principal",
          "value": "",
          "type": "string",
          "description": "Kerberos principal"
        },
        "zeppelin.shell.interpolation": {
          "name": "zeppelin.shell.interpolation",
          "value": false,
          "type": "checkbox",
          "description": "Enable ZeppelinContext variable interpolation into paragraph text"
        },
        "zeppelin.terminal.ip.mapping": {
          "name": "zeppelin.terminal.ip.mapping",
          "value": "",
          "type": "string",
          "description": "Internal and external IP mapping of zeppelin server"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "sh",
          "class": "org.apache.zeppelin.shell.ShellInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          }
        },
        {
          "name": "terminal",
          "class": "org.apache.zeppelin.shell.TerminalInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          },
          "config": {
            "checkEmpty": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "md": {
      "id": "md",
      "name": "md",
      "group": "md",
      "properties": {
        "markdown.parser.type": {
          "name": "markdown.parser.type",
          "value": "flexmark",
          "type": "string",
          "description": "Markdown Parser Type. Available values: pegdown, markdown4j, flexmark. Default \u003d flexmark"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "md",
          "class": "org.apache.zeppelin.markdown.Markdown",
          "defaultInterpreter": false,
          "editor": {
            "language": "markdown",
            "editOnDblClick": true,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "mongodb": {
      "id": "mongodb",
      "name": "mongodb",
      "group": "mongodb",
      "properties": {
        "mongo.shell.path": {
          "name": "mongo.shell.path",
          "value": "mongo",
          "type": "string",
          "description": "MongoDB shell local path"
        },
        "mongo.shell.command.table.limit": {
          "name": "mongo.shell.command.table.limit",
          "value": "1000",
          "type": "number",
          "description": "Limit of documents displayed in a table"
        },
        "mongo.shell.command.timeout": {
          "name": "mongo.shell.command.timeout",
          "value": "60000",
          "type": "number",
          "description": "MongoDB shell command timeout"
        },
        "mongo.server.host": {
          "name": "mongo.server.host",
          "value": "localhost",
          "type": "string",
          "description": "MongoDB server host to connect to"
        },
        "mongo.server.port": {
          "name": "mongo.server.port",
          "value": "27017",
          "type": "number",
          "description": "MongoDB server port to connect to"
        },
        "mongo.server.database": {
          "name": "mongo.server.database",
          "value": "test",
          "type": "string",
          "description": "MongoDB database name"
        },
        "mongo.server.authenticationDatabase": {
          "name": "mongo.server.authenticationDatabase",
          "value": "",
          "type": "string",
          "description": "MongoDB database name for authentication"
        },
        "mongo.server.username": {
          "name": "mongo.server.username",
          "value": "",
          "type": "string",
          "description": "Username for authentication"
        },
        "mongo.server.password": {
          "name": "mongo.server.password",
          "value": "",
          "type": "password",
          "description": "Password for authentication"
        },
        "mongo.interpreter.concurrency.max": {
          "name": "mongo.interpreter.concurrency.max",
          "value": "10",
          "type": "number",
          "description": "Max count of scheduler concurrency"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "mongodb",
          "class": "org.apache.zeppelin.mongodb.MongoDbInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "javascript",
            "editOnDblClick": false,
            "completionKey": "TAB"
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "hbase": {
      "id": "hbase",
      "name": "hbase",
      "group": "hbase",
      "properties": {
        "hbase.home": {
          "name": "hbase.home",
          "value": "/usr/lib/hbase",
          "type": "string",
          "description": "Installation directory of HBase"
        },
        "hbase.ruby.sources": {
          "name": "hbase.ruby.sources",
          "value": "lib/ruby",
          "type": "string",
          "description": "Path to Ruby scripts relative to \u0027hbase.home\u0027"
        },
        "zeppelin.hbase.test.mode": {
          "name": "zeppelin.hbase.test.mode",
          "value": false,
          "type": "checkbox",
          "description": "Disable checks for unit and manual tests"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "hbase",
          "class": "org.apache.zeppelin.hbase.HbaseInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "python": {
      "id": "python",
      "name": "python",
      "group": "python",
      "properties": {
        "zeppelin.python": {
          "name": "zeppelin.python",
          "value": "/opt/conda/bin/python",
          "type": "string",
          "description": "Python binary executable path. It is set to python by default.(assume python is in your $PATH)"
        },
        "zeppelin.python.maxResult": {
          "name": "zeppelin.python.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of dataframe rows to display."
        },
        "zeppelin.python.useIPython": {
          "name": "zeppelin.python.useIPython",
          "value": true,
          "type": "checkbox",
          "description": "Whether use IPython when it is available in `%python`"
        },
        "zeppelin.ipython.launch.timeout": {
          "name": "zeppelin.ipython.launch.timeout",
          "value": "30000",
          "type": "number",
          "description": "Time out for ipython launch"
        },
        "zeppelin.ipython.grpc.message_size": {
          "name": "zeppelin.ipython.grpc.message_size",
          "value": "33554432",
          "type": "number",
          "description": "grpc message size, default is 32M"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "python",
          "class": "org.apache.zeppelin.python.PythonInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionSupport": true
          }
        },
        {
          "name": "ipython",
          "class": "org.apache.zeppelin.python.IPythonInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "sql",
          "class": "org.apache.zeppelin.python.PythonInterpreterPandasSql",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": false
          }
        },
        {
          "name": "conda",
          "class": "org.apache.zeppelin.python.PythonCondaInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          }
        },
        {
          "name": "docker",
          "class": "org.apache.zeppelin.python.PythonDockerInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "kotlin": {
      "id": "kotlin",
      "name": "kotlin",
      "group": "kotlin",
      "properties": {
        "zeppelin.kotlin.maxResult": {
          "name": "zeppelin.kotlin.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of dataframe rows to display."
        },
        "zeppelin.kotlin.shortenTypes": {
          "name": "zeppelin.kotlin.shortenTypes",
          "value": true,
          "type": "checkbox",
          "description": "Show short types instead of full, e.g. List\u003cString\u003e or kotlin.collections.List\u003ckotlin.String\u003e"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "kotlin",
          "class": "org.apache.zeppelin.kotlin.KotlinInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "kotlin",
            "editOnDblClick": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "scalding": {
      "id": "scalding",
      "name": "scalding",
      "group": "scalding",
      "properties": {
        "args.string": {
          "name": "args.string",
          "value": "--local --repl",
          "type": "textarea",
          "description": "Arguments for scalding REPL"
        },
        "max.open.instances": {
          "name": "max.open.instances",
          "value": "50",
          "type": "number",
          "description": "Maximum number of open interpreter instances"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "scalding",
          "class": "org.apache.zeppelin.scalding.ScaldingInterpreter",
          "defaultInterpreter": false
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "flink": {
      "id": "flink",
      "name": "flink",
      "group": "flink",
      "properties": {
        "FLINK_HOME": {
          "name": "FLINK_HOME",
          "value": "",
          "type": "string",
          "description": "Location of flink distribution"
        },
        "HADOOP_CONF_DIR": {
          "name": "HADOOP_CONF_DIR",
          "value": "",
          "type": "string",
          "description": "Location of hadoop conf (core-site.xml, hdfs-site.xml and etc.)"
        },
        "HIVE_CONF_DIR": {
          "name": "HIVE_CONF_DIR",
          "value": "",
          "type": "string",
          "description": "Location of hive conf (hive-site.xml)"
        },
        "flink.execution.mode": {
          "name": "flink.execution.mode",
          "value": "local",
          "type": "string",
          "description": "Execution mode, it could be local|remote|yarn"
        },
        "flink.execution.remote.host": {
          "name": "flink.execution.remote.host",
          "value": "",
          "type": "string",
          "description": "Host name of running JobManager. Only used for remote mode"
        },
        "flink.execution.remote.port": {
          "name": "flink.execution.remote.port",
          "value": "",
          "type": "number",
          "description": "Port of running JobManager. Only used for remote mode"
        },
        "flink.jm.memory": {
          "name": "flink.jm.memory",
          "value": "1024",
          "type": "number",
          "description": "Memory for JobManager (mb)"
        },
        "flink.tm.memory": {
          "name": "flink.tm.memory",
          "value": "1024",
          "type": "number",
          "description": "Memory for TaskManager (mb)"
        },
        "flink.tm.slot": {
          "name": "flink.tm.slot",
          "value": "1",
          "type": "number",
          "description": "Number of slot per TaskManager"
        },
        "local.number-taskmanager": {
          "name": "local.number-taskmanager",
          "value": "4",
          "type": "number",
          "description": "Number of TaskManager in local mode"
        },
        "flink.yarn.appName": {
          "name": "flink.yarn.appName",
          "value": "Zeppelin Flink Session",
          "type": "string",
          "description": "Yarn app name"
        },
        "flink.yarn.queue": {
          "name": "flink.yarn.queue",
          "value": "default",
          "type": "string",
          "description": "Yarn queue name"
        },
        "flink.webui.yarn.useProxy": {
          "name": "flink.webui.yarn.useProxy",
          "value": false,
          "type": "checkbox",
          "description": "Whether use yarn proxy url as flink weburl, e.g. http://localhost:8088/proxy/application_1583396598068_0004"
        },
        "flink.webui.yarn.address": {
          "name": "flink.webui.yarn.address",
          "value": "",
          "type": "string",
          "description": "Set this value only when your yarn address is mapped to some other address, e.g. some cloud vender will map `http://resource-manager:8088` to `https://xxx-yarn.yy.cn/gateway/kkk/yarn`"
        },
        "flink.udf.jars": {
          "name": "flink.udf.jars",
          "value": "",
          "type": "string",
          "description": "Flink udf jars (comma separated), Zeppelin will register udfs in this jar for user automatically, these udf jars could be either local files or hdfs files if you have hadoop installed, the udf name is the class name"
        },
        "flink.udf.jars.packages": {
          "name": "flink.udf.jars.packages",
          "value": "",
          "type": "string",
          "description": "Packages (comma separated) that would be searched for the udf defined in `flink.udf.jars`"
        },
        "flink.execution.jars": {
          "name": "flink.execution.jars",
          "value": "",
          "type": "string",
          "description": "Additional user jars (comma separated), these jars could be either local files or hdfs files if you have hadoop installed"
        },
        "flink.execution.packages": {
          "name": "flink.execution.packages",
          "value": "",
          "type": "string",
          "description": "Additional user packages (comma separated), e.g. flink connector packages"
        },
        "zeppelin.flink.scala.color": {
          "name": "zeppelin.flink.scala.color",
          "value": true,
          "type": "checkbox",
          "description": "Whether display scala shell output in colorful format"
        },
        "zeppelin.flink.enableHive": {
          "name": "zeppelin.flink.enableHive",
          "value": false,
          "type": "checkbox",
          "description": "Whether enable hive"
        },
        "zeppelin.flink.hive.version": {
          "name": "zeppelin.flink.hive.version",
          "value": "2.3.4",
          "type": "string",
          "description": "Hive version that you would like to connect"
        },
        "zeppelin.flink.module.enableHive": {
          "name": "zeppelin.flink.module.enableHive",
          "value": false,
          "type": "checkbox",
          "description": "Whether enable hive module, hive udf take precedence over flink udf if hive module is enabled."
        },
        "zeppelin.flink.printREPLOutput": {
          "name": "zeppelin.flink.printREPLOutput",
          "value": true,
          "type": "checkbox",
          "description": "Print REPL output"
        },
        "zeppelin.flink.maxResult": {
          "name": "zeppelin.flink.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of rows returned by sql interpreter."
        },
        "zeppelin.pyflink.python": {
          "name": "zeppelin.pyflink.python",
          "value": "python",
          "type": "string",
          "description": "Python executable for pyflink"
        },
        "flink.interpreter.close.shutdown_cluster": {
          "name": "flink.interpreter.close.shutdown_cluster",
          "value": true,
          "type": "checkbox",
          "description": "Whether shutdown flink cluster when close interpreter"
        },
        "zeppelin.interpreter.close.cancel_job": {
          "name": "zeppelin.interpreter.close.cancel_job",
          "value": true,
          "type": "checkbox",
          "description": "Whether cancel flink job when closing interpreter"
        },
        "zeppelin.flink.job.check_interval": {
          "name": "zeppelin.flink.job.check_interval",
          "value": "1000",
          "type": "number",
          "description": "Check interval (in milliseconds) to check flink job progress"
        },
        "zeppelin.flink.concurrentBatchSql.max": {
          "name": "zeppelin.flink.concurrentBatchSql.max",
          "value": "10",
          "type": "number",
          "description": "Max concurrent sql of Batch Sql"
        },
        "zeppelin.flink.concurrentStreamSql.max": {
          "name": "zeppelin.flink.concurrentStreamSql.max",
          "value": "10",
          "type": "number",
          "description": "Max concurrent sql of Stream Sql"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "flink",
          "class": "org.apache.zeppelin.flink.FlinkInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "scala",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "bsql",
          "class": "org.apache.zeppelin.flink.FlinkBatchSqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false
          }
        },
        {
          "name": "ssql",
          "class": "org.apache.zeppelin.flink.FlinkStreamSqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false
          }
        },
        {
          "name": "pyflink",
          "class": "org.apache.zeppelin.flink.PyFlinkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "ipyflink",
          "class": "org.apache.zeppelin.flink.IPyFlinkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "ksql": {
      "id": "ksql",
      "name": "ksql",
      "group": "ksql",
      "properties": {
        "ksql.url": {
          "name": "ksql.url",
          "value": "http://localhost:8088",
          "type": "string",
          "description": "KSQL Endpoint base URL"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "ksql",
          "class": "org.apache.zeppelin.ksql.KSQLInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "angular": {
      "id": "angular",
      "name": "angular",
      "group": "angular",
      "properties": {},
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "angular",
          "class": "org.apache.zeppelin.angular.AngularInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": true,
            "completionSupport": false
          }
        },
        {
          "name": "ng",
          "class": "org.apache.zeppelin.angular.AngularInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": true,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "livy": {
      "id": "livy",
      "name": "livy",
      "group": "livy",
      "properties": {
        "zeppelin.livy.url": {
          "name": "zeppelin.livy.url",
          "value": "http://localhost:8998",
          "type": "url",
          "description": "The URL for Livy Server."
        },
        "zeppelin.livy.session.create_timeout": {
          "name": "zeppelin.livy.session.create_timeout",
          "value": "120",
          "type": "number",
          "description": "Livy Server create session timeout (seconds)."
        },
        "livy.spark.driver.cores": {
          "name": "livy.spark.driver.cores",
          "value": "",
          "type": "number",
          "description": "Driver cores. ex) 1, 2"
        },
        "livy.spark.driver.memory": {
          "name": "livy.spark.driver.memory",
          "value": "",
          "type": "string",
          "description": "Driver memory. ex) 512m, 32g"
        },
        "livy.spark.executor.instances": {
          "name": "livy.spark.executor.instances",
          "value": "",
          "type": "number",
          "description": "Executor instances. ex) 1, 4"
        },
        "livy.spark.executor.cores": {
          "name": "livy.spark.executor.cores",
          "value": "",
          "type": "number",
          "description": "Num cores per executor. ex) 1, 4"
        },
        "livy.spark.executor.memory": {
          "name": "livy.spark.executor.memory",
          "value": "",
          "type": "string",
          "description": "Executor memory per worker instance. ex) 512m, 32g"
        },
        "livy.spark.dynamicAllocation.enabled": {
          "name": "livy.spark.dynamicAllocation.enabled",
          "value": false,
          "type": "checkbox",
          "description": "Use dynamic resource allocation"
        },
        "livy.spark.dynamicAllocation.cachedExecutorIdleTimeout": {
          "name": "livy.spark.dynamicAllocation.cachedExecutorIdleTimeout",
          "value": "",
          "type": "string",
          "description": "Remove an executor which has cached data blocks"
        },
        "livy.spark.dynamicAllocation.minExecutors": {
          "name": "livy.spark.dynamicAllocation.minExecutors",
          "value": "",
          "type": "number",
          "description": "Lower bound for the number of executors if dynamic allocation is enabled."
        },
        "livy.spark.dynamicAllocation.initialExecutors": {
          "name": "livy.spark.dynamicAllocation.initialExecutors",
          "value": "",
          "type": "number",
          "description": "Initial number of executors to run if dynamic allocation is enabled."
        },
        "livy.spark.dynamicAllocation.maxExecutors": {
          "name": "livy.spark.dynamicAllocation.maxExecutors",
          "value": "",
          "type": "number",
          "description": "Upper bound for the number of executors if dynamic allocation is enabled."
        },
        "zeppelin.livy.principal": {
          "name": "zeppelin.livy.principal",
          "value": "",
          "type": "string",
          "description": "Kerberos principal to authenticate livy"
        },
        "zeppelin.livy.keytab": {
          "name": "zeppelin.livy.keytab",
          "value": "",
          "type": "textarea",
          "description": "Kerberos keytab to authenticate livy"
        },
        "zeppelin.livy.pull_status.interval.millis": {
          "name": "zeppelin.livy.pull_status.interval.millis",
          "value": "1000",
          "type": "number",
          "description": "The interval for checking paragraph execution status"
        },
        "zeppelin.livy.maxLogLines": {
          "name": "zeppelin.livy.maxLogLines",
          "value": "1000",
          "type": "number",
          "description": "Max number of lines of logs"
        },
        "livy.spark.jars.packages": {
          "name": "livy.spark.jars.packages",
          "value": "",
          "type": "textarea",
          "description": "Adding extra libraries to livy interpreter"
        },
        "zeppelin.livy.displayAppInfo": {
          "name": "zeppelin.livy.displayAppInfo",
          "value": true,
          "type": "checkbox",
          "description": "Whether display app info"
        },
        "zeppelin.livy.restart_dead_session": {
          "name": "zeppelin.livy.restart_dead_session",
          "value": false,
          "type": "checkbox",
          "description": "Whether restart a dead session"
        },
        "zeppelin.livy.spark.sql.maxResult": {
          "name": "zeppelin.livy.spark.sql.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of Spark SQL result to display."
        },
        "zeppelin.livy.spark.sql.field.truncate": {
          "name": "zeppelin.livy.spark.sql.field.truncate",
          "value": true,
          "type": "checkbox",
          "description": "If true, truncate field values longer than 20 characters."
        },
        "zeppelin.livy.concurrentSQL": {
          "name": "zeppelin.livy.concurrentSQL",
          "value": false,
          "type": "checkbox",
          "description": "Execute multiple SQL concurrently if set true."
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "spark",
          "class": "org.apache.zeppelin.livy.LivySparkInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "scala",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "sql",
          "class": "org.apache.zeppelin.livy.LivySparkSQLInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "pyspark",
          "class": "org.apache.zeppelin.livy.LivyPySparkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "pyspark3",
          "class": "org.apache.zeppelin.livy.LivyPySpark3Interpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "sparkr",
          "class": "org.apache.zeppelin.livy.LivySparkRInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "shared",
          "class": "org.apache.zeppelin.livy.LivySharedInterpreter",
          "defaultInterpreter": false
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "perNote": "shared",
        "perUser": "scoped",
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "groovy": {
      "id": "groovy",
      "name": "groovy",
      "group": "groovy",
      "properties": {
        "GROOVY_CLASSES": {
          "name": "GROOVY_CLASSES",
          "value": "",
          "type": "textarea",
          "description": "The path for custom groovy classes location. If empty `./interpreter/groovy/classes`"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "groovy",
          "class": "org.apache.zeppelin.groovy.GroovyInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "sparql": {
      "id": "sparql",
      "name": "sparql",
      "group": "sparql",
      "properties": {
        "sparql.engine": {
          "name": "sparql.engine",
          "value": "jena",
          "type": "string",
          "description": "The sparql engine to use for the queries. Default: jena"
        },
        "sparql.endpoint": {
          "name": "sparql.endpoint",
          "value": "http://dbpedia.org/sparql",
          "type": "string",
          "description": "Complete URL of the endpoint. Default: http://dbpedia.org/sparql"
        },
        "sparql.replaceURIs": {
          "name": "sparql.replaceURIs",
          "value": true,
          "type": "checkbox",
          "description": "Replace the URIs in the result with the prefixes. Default: true"
        },
        "sparql.removeDatatypes": {
          "name": "sparql.removeDatatypes",
          "value": true,
          "type": "checkbox",
          "description": "Remove the datatypes from Literals so Zeppelin can use the values. Default: true"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "sparql",
          "class": "org.apache.zeppelin.sparql.SparqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sparql",
            "editOnDblClick": false,
            "completionKey": "TAB"
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    }
  },
  "interpreterRepositories": [
    {
      "id": "central",
      "type": "default",
      "url": "https://repo1.maven.org/maven2/",
      "host": "repo1.maven.org",
      "protocol": "https",
      "releasePolicy": {
        "enabled": true,
        "updatePolicy": "daily",
        "checksumPolicy": "warn"
      },
      "snapshotPolicy": {
        "enabled": true,
        "updatePolicy": "daily",
        "checksumPolicy": "warn"
      },
      "mirroredRepositories": [],
      "repositoryManager": false
    },
    {
      "id": "local",
      "type": "default",
      "url": "file:///var/lib/zeppelin/.m2/repository",
      "host": "",
      "protocol": "file",
      "releasePolicy": {
        "enabled": true,
        "updatePolicy": "daily",
        "checksumPolicy": "warn"
      },
      "snapshotPolicy": {
        "enabled": true,
        "updatePolicy": "daily",
        "checksumPolicy": "warn"
      },
      "mirroredRepositories": [],
      "repositoryManager": false
    }
  ]
}
