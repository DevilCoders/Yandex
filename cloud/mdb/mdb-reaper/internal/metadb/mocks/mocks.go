// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-reaper/internal/metadb (interfaces: MetaDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	metadb "a.yandex-team.ru/cloud/mdb/mdb-reaper/internal/metadb"
	gomock "github.com/golang/mock/gomock"
)

// MockMetaDB is a mock of MetaDB interface.
type MockMetaDB struct {
	ctrl     *gomock.Controller
	recorder *MockMetaDBMockRecorder
}

// MockMetaDBMockRecorder is the mock recorder for MockMetaDB.
type MockMetaDBMockRecorder struct {
	mock *MockMetaDB
}

// NewMockMetaDB creates a new mock instance.
func NewMockMetaDB(ctrl *gomock.Controller) *MockMetaDB {
	mock := &MockMetaDB{ctrl: ctrl}
	mock.recorder = &MockMetaDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaDB) EXPECT() *MockMetaDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetaDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetaDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetaDB)(nil).Close))
}

// CloudsWithRunningClusters mocks base method.
func (m *MockMetaDB) CloudsWithRunningClusters(arg0 context.Context, arg1 bool) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudsWithRunningClusters", arg0, arg1)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudsWithRunningClusters indicates an expected call of CloudsWithRunningClusters.
func (mr *MockMetaDBMockRecorder) CloudsWithRunningClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudsWithRunningClusters", reflect.TypeOf((*MockMetaDB)(nil).CloudsWithRunningClusters), arg0, arg1)
}

// Clusters mocks base method.
func (m *MockMetaDB) Clusters(arg0 context.Context, arg1 []string) ([]metadb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters", arg0, arg1)
	ret0, _ := ret[0].([]metadb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clusters indicates an expected call of Clusters.
func (mr *MockMetaDBMockRecorder) Clusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockMetaDB)(nil).Clusters), arg0, arg1)
}

// IsReady mocks base method.
func (m *MockMetaDB) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockMetaDBMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockMetaDB)(nil).IsReady), arg0)
}
