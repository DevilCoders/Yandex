// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/dataproc-ui-proxy/pkg/userauth (interfaces: SessionServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	oauth "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/oauth/v1"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSessionServiceClient is a mock of SessionServiceClient interface.
type MockSessionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceClientMockRecorder
}

// MockSessionServiceClientMockRecorder is the mock recorder for MockSessionServiceClient.
type MockSessionServiceClientMockRecorder struct {
	mock *MockSessionServiceClient
}

// NewMockSessionServiceClient creates a new mock instance.
func NewMockSessionServiceClient(ctrl *gomock.Controller) *MockSessionServiceClient {
	mock := &MockSessionServiceClient{ctrl: ctrl}
	mock.recorder = &MockSessionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServiceClient) EXPECT() *MockSessionServiceClientMockRecorder {
	return m.recorder
}

// AcceptEula mocks base method.
func (m *MockSessionServiceClient) AcceptEula(arg0 context.Context, arg1 *oauth.AcceptEulaRequest, arg2 ...grpc.CallOption) (*oauth.AcceptEulaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptEula", varargs...)
	ret0, _ := ret[0].(*oauth.AcceptEulaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptEula indicates an expected call of AcceptEula.
func (mr *MockSessionServiceClientMockRecorder) AcceptEula(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEula", reflect.TypeOf((*MockSessionServiceClient)(nil).AcceptEula), varargs...)
}

// Check mocks base method.
func (m *MockSessionServiceClient) Check(arg0 context.Context, arg1 *oauth.CheckSessionRequest, arg2 ...grpc.CallOption) (*oauth.CheckSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*oauth.CheckSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionServiceClientMockRecorder) Check(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionServiceClient)(nil).Check), varargs...)
}

// CheckPassport mocks base method.
func (m *MockSessionServiceClient) CheckPassport(arg0 context.Context, arg1 *oauth.CheckPassportSessionRequest, arg2 ...grpc.CallOption) (*oauth.CheckPassportSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckPassport", varargs...)
	ret0, _ := ret[0].(*oauth.CheckPassportSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassport indicates an expected call of CheckPassport.
func (mr *MockSessionServiceClientMockRecorder) CheckPassport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassport", reflect.TypeOf((*MockSessionServiceClient)(nil).CheckPassport), varargs...)
}

// Create mocks base method.
func (m *MockSessionServiceClient) Create(arg0 context.Context, arg1 *oauth.CreateSessionRequest, arg2 ...grpc.CallOption) (*oauth.CreateSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*oauth.CreateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionServiceClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionServiceClient)(nil).Create), varargs...)
}

// Logout mocks base method.
func (m *MockSessionServiceClient) Logout(arg0 context.Context, arg1 *oauth.LogoutRequest, arg2 ...grpc.CallOption) (*oauth.LogoutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*oauth.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockSessionServiceClientMockRecorder) Logout(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSessionServiceClient)(nil).Logout), varargs...)
}
