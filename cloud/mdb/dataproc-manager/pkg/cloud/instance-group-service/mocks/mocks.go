// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloud/instance-group-service/client.go

// Package cloud is a generated GoMock package.
package cloud

import (
	context "context"
	reflect "reflect"

	instancegroup "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/microcosm/instancegroup/v1"
	operation "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/operation"
	gomock "github.com/golang/mock/gomock"
)

// MockInstanceGroupServiceClient is a mock of InstanceGroupServiceClient interface.
type MockInstanceGroupServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceGroupServiceClientMockRecorder
}

// MockInstanceGroupServiceClientMockRecorder is the mock recorder for MockInstanceGroupServiceClient.
type MockInstanceGroupServiceClientMockRecorder struct {
	mock *MockInstanceGroupServiceClient
}

// NewMockInstanceGroupServiceClient creates a new mock instance.
func NewMockInstanceGroupServiceClient(ctrl *gomock.Controller) *MockInstanceGroupServiceClient {
	mock := &MockInstanceGroupServiceClient{ctrl: ctrl}
	mock.recorder = &MockInstanceGroupServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceGroupServiceClient) EXPECT() *MockInstanceGroupServiceClientMockRecorder {
	return m.recorder
}

// DeleteInstances mocks base method.
func (m *MockInstanceGroupServiceClient) DeleteInstances(ctx context.Context, instanceGroupID string, managedInstanceIDs []string, serviceAccountID, subclusterID string) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstances", ctx, instanceGroupID, managedInstanceIDs, serviceAccountID, subclusterID)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstances indicates an expected call of DeleteInstances.
func (mr *MockInstanceGroupServiceClientMockRecorder) DeleteInstances(ctx, instanceGroupID, managedInstanceIDs, serviceAccountID, subclusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstances", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).DeleteInstances), ctx, instanceGroupID, managedInstanceIDs, serviceAccountID, subclusterID)
}

// Get mocks base method.
func (m *MockInstanceGroupServiceClient) Get(ctx context.Context, instanceGroupID, serviceAccountID string) (*instancegroup.InstanceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, instanceGroupID, serviceAccountID)
	ret0, _ := ret[0].(*instancegroup.InstanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstanceGroupServiceClientMockRecorder) Get(ctx, instanceGroupID, serviceAccountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).Get), ctx, instanceGroupID, serviceAccountID)
}

// GetUserSpecifiedFQDN mocks base method.
func (m *MockInstanceGroupServiceClient) GetUserSpecifiedFQDN(instance *instancegroup.ManagedInstance) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSpecifiedFQDN", instance)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserSpecifiedFQDN indicates an expected call of GetUserSpecifiedFQDN.
func (mr *MockInstanceGroupServiceClientMockRecorder) GetUserSpecifiedFQDN(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSpecifiedFQDN", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).GetUserSpecifiedFQDN), instance)
}

// IsPreferredForDecommission mocks base method.
func (m *MockInstanceGroupServiceClient) IsPreferredForDecommission(instance *instancegroup.ManagedInstance) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPreferredForDecommission", instance)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPreferredForDecommission indicates an expected call of IsPreferredForDecommission.
func (mr *MockInstanceGroupServiceClientMockRecorder) IsPreferredForDecommission(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPreferredForDecommission", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).IsPreferredForDecommission), instance)
}

// IsRunning mocks base method.
func (m *MockInstanceGroupServiceClient) IsRunning(instance *instancegroup.ManagedInstance) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning", instance)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockInstanceGroupServiceClientMockRecorder) IsRunning(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).IsRunning), instance)
}

// ListInstances mocks base method.
func (m *MockInstanceGroupServiceClient) ListInstances(ctx context.Context, instanceGroupID, serviceAccountID string) ([]*instancegroup.ManagedInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", ctx, instanceGroupID, serviceAccountID)
	ret0, _ := ret[0].([]*instancegroup.ManagedInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockInstanceGroupServiceClientMockRecorder) ListInstances(ctx, instanceGroupID, serviceAccountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).ListInstances), ctx, instanceGroupID, serviceAccountID)
}

// StopInstances mocks base method.
func (m *MockInstanceGroupServiceClient) StopInstances(ctx context.Context, instanceGroupID string, managedInstanceIDs []string, serviceAccountID, subclusterID string) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstances", ctx, instanceGroupID, managedInstanceIDs, serviceAccountID, subclusterID)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstances indicates an expected call of StopInstances.
func (mr *MockInstanceGroupServiceClientMockRecorder) StopInstances(ctx, instanceGroupID, managedInstanceIDs, serviceAccountID, subclusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstances", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).StopInstances), ctx, instanceGroupID, managedInstanceIDs, serviceAccountID, subclusterID)
}
