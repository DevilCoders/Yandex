// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/dataproc-manager/pkg/datastore (interfaces: Backend)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "a.yandex-team.ru/cloud/mdb/dataproc-manager/pkg/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBackend) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBackend)(nil).Close))
}

// DeleteDecommissionHosts mocks base method.
func (m *MockBackend) DeleteDecommissionHosts(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDecommissionHosts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDecommissionHosts indicates an expected call of DeleteDecommissionHosts.
func (mr *MockBackendMockRecorder) DeleteDecommissionHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDecommissionHosts", reflect.TypeOf((*MockBackend)(nil).DeleteDecommissionHosts), arg0, arg1)
}

// GetCachedClusterTopology mocks base method.
func (m *MockBackend) GetCachedClusterTopology(arg0 context.Context, arg1 string) (models.ClusterTopology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedClusterTopology", arg0, arg1)
	ret0, _ := ret[0].(models.ClusterTopology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedClusterTopology indicates an expected call of GetCachedClusterTopology.
func (mr *MockBackendMockRecorder) GetCachedClusterTopology(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedClusterTopology", reflect.TypeOf((*MockBackend)(nil).GetCachedClusterTopology), arg0, arg1)
}

// LoadClusterHealth mocks base method.
func (m *MockBackend) LoadClusterHealth(arg0 context.Context, arg1 string) (models.ClusterHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadClusterHealth", arg0, arg1)
	ret0, _ := ret[0].(models.ClusterHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadClusterHealth indicates an expected call of LoadClusterHealth.
func (mr *MockBackendMockRecorder) LoadClusterHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadClusterHealth", reflect.TypeOf((*MockBackend)(nil).LoadClusterHealth), arg0, arg1)
}

// LoadDecommissionHosts mocks base method.
func (m *MockBackend) LoadDecommissionHosts(arg0 context.Context, arg1 string) (models.DecommissionHosts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDecommissionHosts", arg0, arg1)
	ret0, _ := ret[0].(models.DecommissionHosts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDecommissionHosts indicates an expected call of LoadDecommissionHosts.
func (mr *MockBackendMockRecorder) LoadDecommissionHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDecommissionHosts", reflect.TypeOf((*MockBackend)(nil).LoadDecommissionHosts), arg0, arg1)
}

// LoadDecommissionStatus mocks base method.
func (m *MockBackend) LoadDecommissionStatus(arg0 context.Context, arg1 string) (models.DecommissionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDecommissionStatus", arg0, arg1)
	ret0, _ := ret[0].(models.DecommissionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDecommissionStatus indicates an expected call of LoadDecommissionStatus.
func (mr *MockBackendMockRecorder) LoadDecommissionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDecommissionStatus", reflect.TypeOf((*MockBackend)(nil).LoadDecommissionStatus), arg0, arg1)
}

// LoadHostsHealth mocks base method.
func (m *MockBackend) LoadHostsHealth(arg0 context.Context, arg1 string, arg2 []string) (map[string]models.HostHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadHostsHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]models.HostHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadHostsHealth indicates an expected call of LoadHostsHealth.
func (mr *MockBackendMockRecorder) LoadHostsHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHostsHealth", reflect.TypeOf((*MockBackend)(nil).LoadHostsHealth), arg0, arg1, arg2)
}

// StoreClusterHealth mocks base method.
func (m *MockBackend) StoreClusterHealth(arg0 context.Context, arg1 string, arg2 models.ClusterHealth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreClusterHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreClusterHealth indicates an expected call of StoreClusterHealth.
func (mr *MockBackendMockRecorder) StoreClusterHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClusterHealth", reflect.TypeOf((*MockBackend)(nil).StoreClusterHealth), arg0, arg1, arg2)
}

// StoreClusterTopology mocks base method.
func (m *MockBackend) StoreClusterTopology(arg0 context.Context, arg1 string, arg2 models.ClusterTopology) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreClusterTopology", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreClusterTopology indicates an expected call of StoreClusterTopology.
func (mr *MockBackendMockRecorder) StoreClusterTopology(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClusterTopology", reflect.TypeOf((*MockBackend)(nil).StoreClusterTopology), arg0, arg1, arg2)
}

// StoreDecommissionHosts mocks base method.
func (m *MockBackend) StoreDecommissionHosts(arg0 context.Context, arg1 string, arg2 models.DecommissionHosts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreDecommissionHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreDecommissionHosts indicates an expected call of StoreDecommissionHosts.
func (mr *MockBackendMockRecorder) StoreDecommissionHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreDecommissionHosts", reflect.TypeOf((*MockBackend)(nil).StoreDecommissionHosts), arg0, arg1, arg2)
}

// StoreDecommissionStatus mocks base method.
func (m *MockBackend) StoreDecommissionStatus(arg0 context.Context, arg1 string, arg2 models.DecommissionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreDecommissionStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreDecommissionStatus indicates an expected call of StoreDecommissionStatus.
func (mr *MockBackendMockRecorder) StoreDecommissionStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreDecommissionStatus", reflect.TypeOf((*MockBackend)(nil).StoreDecommissionStatus), arg0, arg1, arg2)
}

// StoreHostsHealth mocks base method.
func (m *MockBackend) StoreHostsHealth(arg0 context.Context, arg1 string, arg2 map[string]models.HostHealth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreHostsHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreHostsHealth indicates an expected call of StoreHostsHealth.
func (mr *MockBackendMockRecorder) StoreHostsHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreHostsHealth", reflect.TypeOf((*MockBackend)(nil).StoreHostsHealth), arg0, arg1, arg2)
}
