// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Live(params *LiveParams, opts ...ClientOption) (*LiveOK, error)

	LiveByCluster(params *LiveByClusterParams, opts ...ClientOption) (*LiveByClusterOK, error)

	Ping(params *PingParams, opts ...ClientOption) (*PingOK, error)

	Stats(params *StatsParams, opts ...ClientOption) (*StatsOK, error)

	UpdatePrimaryDNS(params *UpdatePrimaryDNSParams, opts ...ClientOption) (*UpdatePrimaryDNSAccepted, *UpdatePrimaryDNSNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Live reports service live status with all connections
*/
func (a *Client) Live(params *LiveParams, opts ...ClientOption) (*LiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Live",
		Method:             "GET",
		PathPattern:        "/v1/live",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Live: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiveByCluster reports service live status with all connections by cluster type
*/
func (a *Client) LiveByCluster(params *LiveByClusterParams, opts ...ClientOption) (*LiveByClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiveByClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiveByCluster",
		Method:             "GET",
		PathPattern:        "/v1/lives/{ctype}/{env}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LiveByClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LiveByClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LiveByCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Ping reports service status
*/
func (a *Client) Ping(params *PingParams, opts ...ClientOption) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ping",
		Method:             "GET",
		PathPattern:        "/v1/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Stats reports service stats
*/
func (a *Client) Stats(params *StatsParams, opts ...ClientOption) (*StatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Stats",
		Method:             "GET",
		PathPattern:        "/v1/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Stats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePrimaryDNS updates primary DNS for cluster
*/
func (a *Client) UpdatePrimaryDNS(params *UpdatePrimaryDNSParams, opts ...ClientOption) (*UpdatePrimaryDNSAccepted, *UpdatePrimaryDNSNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePrimaryDNSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePrimaryDNS",
		Method:             "PUT",
		PathPattern:        "/v1/dns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePrimaryDNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePrimaryDNSAccepted:
		return value, nil, nil
	case *UpdatePrimaryDNSNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
