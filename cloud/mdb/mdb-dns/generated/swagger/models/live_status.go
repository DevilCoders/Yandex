// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LiveStatus Collection of live status
//
// swagger:model LiveStatus
type LiveStatus struct {

	// Current active clients
	// Required: true
	Activeclients int64 `json:"activeclients"`

	// Current compute DNS client status
	Computedns *LiveDNSStatus `json:"computedns,omitempty"`

	// Number of last failed primary cycles
	// Required: true
	Lastfailedcycles int64 `json:"lastfailedcycles"`

	// Current slayer DNS client status
	Slayerdns *LiveDNSStatus `json:"slayerdns,omitempty"`

	// Percent of records for primary update
	Updprimaryratio float64 `json:"updprimaryratio,omitempty"`

	// Percent of records for primary update
	Updsecondaryratio float64 `json:"updsecondaryratio,omitempty"`
}

// Validate validates this live status
func (m *LiveStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveclients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputedns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastfailedcycles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlayerdns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LiveStatus) validateActiveclients(formats strfmt.Registry) error {

	if err := validate.Required("activeclients", "body", int64(m.Activeclients)); err != nil {
		return err
	}

	return nil
}

func (m *LiveStatus) validateComputedns(formats strfmt.Registry) error {
	if swag.IsZero(m.Computedns) { // not required
		return nil
	}

	if m.Computedns != nil {
		if err := m.Computedns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computedns")
			}
			return err
		}
	}

	return nil
}

func (m *LiveStatus) validateLastfailedcycles(formats strfmt.Registry) error {

	if err := validate.Required("lastfailedcycles", "body", int64(m.Lastfailedcycles)); err != nil {
		return err
	}

	return nil
}

func (m *LiveStatus) validateSlayerdns(formats strfmt.Registry) error {
	if swag.IsZero(m.Slayerdns) { // not required
		return nil
	}

	if m.Slayerdns != nil {
		if err := m.Slayerdns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slayerdns")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this live status based on the context it is used
func (m *LiveStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputedns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlayerdns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LiveStatus) contextValidateComputedns(ctx context.Context, formats strfmt.Registry) error {

	if m.Computedns != nil {
		if err := m.Computedns.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computedns")
			}
			return err
		}
	}

	return nil
}

func (m *LiveStatus) contextValidateSlayerdns(ctx context.Context, formats strfmt.Registry) error {

	if m.Slayerdns != nil {
		if err := m.Slayerdns.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slayerdns")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LiveStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LiveStatus) UnmarshalBinary(b []byte) error {
	var res LiveStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
