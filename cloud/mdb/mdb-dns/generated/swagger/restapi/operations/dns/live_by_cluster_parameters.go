// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewLiveByClusterParams creates a new LiveByClusterParams object
//
// There are no default values defined in the spec.
func NewLiveByClusterParams() LiveByClusterParams {

	return LiveByClusterParams{}
}

// LiveByClusterParams contains all the bound params for the live by cluster operation
// typically these are obtained from a http.Request
//
// swagger:parameters LiveByCluster
type LiveByClusterParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Cluster type
	  Required: true
	  In: path
	*/
	Ctype string
	/*Cluster environment
	  Required: true
	  In: path
	*/
	Env string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewLiveByClusterParams() beforehand.
func (o *LiveByClusterParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rCtype, rhkCtype, _ := route.Params.GetOK("ctype")
	if err := o.bindCtype(rCtype, rhkCtype, route.Formats); err != nil {
		res = append(res, err)
	}

	rEnv, rhkEnv, _ := route.Params.GetOK("env")
	if err := o.bindEnv(rEnv, rhkEnv, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCtype binds and validates parameter Ctype from path.
func (o *LiveByClusterParams) bindCtype(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Ctype = raw

	if err := o.validateCtype(formats); err != nil {
		return err
	}

	return nil
}

// validateCtype carries on validations for parameter Ctype
func (o *LiveByClusterParams) validateCtype(formats strfmt.Registry) error {

	if err := validate.EnumCase("ctype", "path", o.Ctype, []interface{}{"postgresql_cluster", "mysql_cluster", "mongodb_cluster", "clickhouse_cluster", "redis_cluster", "elasticsearch_cluster", "sqlserver_cluster", "hadoop_cluster", "kafka_cluster", "greenplum_cluster"}, true); err != nil {
		return err
	}

	return nil
}

// bindEnv binds and validates parameter Env from path.
func (o *LiveByClusterParams) bindEnv(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Env = raw

	if err := o.validateEnv(formats); err != nil {
		return err
	}

	return nil
}

// validateEnv carries on validations for parameter Env
func (o *LiveByClusterParams) validateEnv(formats strfmt.Registry) error {

	if err := validate.EnumCase("env", "path", o.Env, []interface{}{"dev", "load", "qa", "prod", "compute-prod"}, true); err != nil {
		return err
	}

	return nil
}
