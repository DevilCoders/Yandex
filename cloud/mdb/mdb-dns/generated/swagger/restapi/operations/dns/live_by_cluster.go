// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// LiveByClusterHandlerFunc turns a function with the right signature into a live by cluster handler
type LiveByClusterHandlerFunc func(LiveByClusterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LiveByClusterHandlerFunc) Handle(params LiveByClusterParams) middleware.Responder {
	return fn(params)
}

// LiveByClusterHandler interface for that can handle valid live by cluster params
type LiveByClusterHandler interface {
	Handle(LiveByClusterParams) middleware.Responder
}

// NewLiveByCluster creates a new http.Handler for the live by cluster operation
func NewLiveByCluster(ctx *middleware.Context, handler LiveByClusterHandler) *LiveByCluster {
	return &LiveByCluster{Context: ctx, Handler: handler}
}

/* LiveByCluster swagger:route GET /v1/lives/{ctype}/{env} dns liveByCluster

Reports service live status with all connections by cluster type

*/
type LiveByCluster struct {
	Context *middleware.Context
	Handler LiveByClusterHandler
}

func (o *LiveByCluster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewLiveByClusterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
