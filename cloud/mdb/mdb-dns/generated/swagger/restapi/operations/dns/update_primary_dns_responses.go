// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"a.yandex-team.ru/cloud/mdb/mdb-dns/generated/swagger/models"
)

// UpdatePrimaryDNSAcceptedCode is the HTTP code returned for type UpdatePrimaryDNSAccepted
const UpdatePrimaryDNSAcceptedCode int = 202

/*UpdatePrimaryDNSAccepted DNS names applied to update

swagger:response updatePrimaryDnsAccepted
*/
type UpdatePrimaryDNSAccepted struct {
}

// NewUpdatePrimaryDNSAccepted creates UpdatePrimaryDNSAccepted with default headers values
func NewUpdatePrimaryDNSAccepted() *UpdatePrimaryDNSAccepted {

	return &UpdatePrimaryDNSAccepted{}
}

// WriteResponse to the client
func (o *UpdatePrimaryDNSAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(202)
}

// UpdatePrimaryDNSNoContentCode is the HTTP code returned for type UpdatePrimaryDNSNoContent
const UpdatePrimaryDNSNoContentCode int = 204

/*UpdatePrimaryDNSNoContent No update required for cid

swagger:response updatePrimaryDnsNoContent
*/
type UpdatePrimaryDNSNoContent struct {
}

// NewUpdatePrimaryDNSNoContent creates UpdatePrimaryDNSNoContent with default headers values
func NewUpdatePrimaryDNSNoContent() *UpdatePrimaryDNSNoContent {

	return &UpdatePrimaryDNSNoContent{}
}

// WriteResponse to the client
func (o *UpdatePrimaryDNSNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// UpdatePrimaryDNSBadRequestCode is the HTTP code returned for type UpdatePrimaryDNSBadRequest
const UpdatePrimaryDNSBadRequestCode int = 400

/*UpdatePrimaryDNSBadRequest Invalid data supplied

swagger:response updatePrimaryDnsBadRequest
*/
type UpdatePrimaryDNSBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdatePrimaryDNSBadRequest creates UpdatePrimaryDNSBadRequest with default headers values
func NewUpdatePrimaryDNSBadRequest() *UpdatePrimaryDNSBadRequest {

	return &UpdatePrimaryDNSBadRequest{}
}

// WithPayload adds the payload to the update primary Dns bad request response
func (o *UpdatePrimaryDNSBadRequest) WithPayload(payload *models.Error) *UpdatePrimaryDNSBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update primary Dns bad request response
func (o *UpdatePrimaryDNSBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePrimaryDNSBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePrimaryDNSForbiddenCode is the HTTP code returned for type UpdatePrimaryDNSForbidden
const UpdatePrimaryDNSForbiddenCode int = 403

/*UpdatePrimaryDNSForbidden Invalid data signature

swagger:response updatePrimaryDnsForbidden
*/
type UpdatePrimaryDNSForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdatePrimaryDNSForbidden creates UpdatePrimaryDNSForbidden with default headers values
func NewUpdatePrimaryDNSForbidden() *UpdatePrimaryDNSForbidden {

	return &UpdatePrimaryDNSForbidden{}
}

// WithPayload adds the payload to the update primary Dns forbidden response
func (o *UpdatePrimaryDNSForbidden) WithPayload(payload *models.Error) *UpdatePrimaryDNSForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update primary Dns forbidden response
func (o *UpdatePrimaryDNSForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePrimaryDNSForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePrimaryDNSInternalServerErrorCode is the HTTP code returned for type UpdatePrimaryDNSInternalServerError
const UpdatePrimaryDNSInternalServerErrorCode int = 500

/*UpdatePrimaryDNSInternalServerError Internal server error

swagger:response updatePrimaryDnsInternalServerError
*/
type UpdatePrimaryDNSInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdatePrimaryDNSInternalServerError creates UpdatePrimaryDNSInternalServerError with default headers values
func NewUpdatePrimaryDNSInternalServerError() *UpdatePrimaryDNSInternalServerError {

	return &UpdatePrimaryDNSInternalServerError{}
}

// WithPayload adds the payload to the update primary Dns internal server error response
func (o *UpdatePrimaryDNSInternalServerError) WithPayload(payload *models.Error) *UpdatePrimaryDNSInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update primary Dns internal server error response
func (o *UpdatePrimaryDNSInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePrimaryDNSInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePrimaryDNSServiceUnavailableCode is the HTTP code returned for type UpdatePrimaryDNSServiceUnavailable
const UpdatePrimaryDNSServiceUnavailableCode int = 503

/*UpdatePrimaryDNSServiceUnavailable Service unavailable (database or other dependency is offline)

swagger:response updatePrimaryDnsServiceUnavailable
*/
type UpdatePrimaryDNSServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdatePrimaryDNSServiceUnavailable creates UpdatePrimaryDNSServiceUnavailable with default headers values
func NewUpdatePrimaryDNSServiceUnavailable() *UpdatePrimaryDNSServiceUnavailable {

	return &UpdatePrimaryDNSServiceUnavailable{}
}

// WithPayload adds the payload to the update primary Dns service unavailable response
func (o *UpdatePrimaryDNSServiceUnavailable) WithPayload(payload *models.Error) *UpdatePrimaryDNSServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update primary Dns service unavailable response
func (o *UpdatePrimaryDNSServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePrimaryDNSServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePrimaryDNSGatewayTimeoutCode is the HTTP code returned for type UpdatePrimaryDNSGatewayTimeout
const UpdatePrimaryDNSGatewayTimeoutCode int = 504

/*UpdatePrimaryDNSGatewayTimeout Gateway Timeout (resolve current cid cname record failed)

swagger:response updatePrimaryDnsGatewayTimeout
*/
type UpdatePrimaryDNSGatewayTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdatePrimaryDNSGatewayTimeout creates UpdatePrimaryDNSGatewayTimeout with default headers values
func NewUpdatePrimaryDNSGatewayTimeout() *UpdatePrimaryDNSGatewayTimeout {

	return &UpdatePrimaryDNSGatewayTimeout{}
}

// WithPayload adds the payload to the update primary Dns gateway timeout response
func (o *UpdatePrimaryDNSGatewayTimeout) WithPayload(payload *models.Error) *UpdatePrimaryDNSGatewayTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update primary Dns gateway timeout response
func (o *UpdatePrimaryDNSGatewayTimeout) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePrimaryDNSGatewayTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(504)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
