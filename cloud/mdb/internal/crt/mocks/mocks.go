// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/crt (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	crt "a.yandex-team.ru/cloud/mdb/internal/crt"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ExistingCert mocks base method.
func (m *MockClient) ExistingCert(arg0 context.Context, arg1, arg2 string, arg3 []string) (*crt.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingCert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*crt.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistingCert indicates an expected call of ExistingCert.
func (mr *MockClientMockRecorder) ExistingCert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingCert", reflect.TypeOf((*MockClient)(nil).ExistingCert), arg0, arg1, arg2, arg3)
}

// IssueCert mocks base method.
func (m *MockClient) IssueCert(arg0 context.Context, arg1 string, arg2 []string, arg3 string, arg4 crt.CertificateType) (*crt.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCert", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*crt.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCert indicates an expected call of IssueCert.
func (mr *MockClientMockRecorder) IssueCert(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCert", reflect.TypeOf((*MockClient)(nil).IssueCert), arg0, arg1, arg2, arg3, arg4)
}

// RevokeCertsByHostname mocks base method.
func (m *MockClient) RevokeCertsByHostname(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCertsByHostname", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeCertsByHostname indicates an expected call of RevokeCertsByHostname.
func (mr *MockClientMockRecorder) RevokeCertsByHostname(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertsByHostname", reflect.TypeOf((*MockClient)(nil).RevokeCertsByHostname), arg0, arg1)
}
