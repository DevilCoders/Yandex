{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Swagger API for Crt Yandex Cloud API",
    "title": "Crt Yandex Cloud API",
    "contact": {
      "name": "YC Infra",
      "email": "yc-infra@yandex-team.ru"
    },
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0"
  },
  "host": "localhost:8082",
  "basePath": "/",
  "paths": {
    "/api/acl": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL"
        ],
        "summary": "Get all ACL for certificates",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Username",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "CA type",
            "name": "ca_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.ListACLResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL"
        ],
        "summary": "Add ACL for certificates",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Add ACL Request",
            "name": "addaclrequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.ACLSSLReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/db.CertInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/acl/{id}/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL"
        ],
        "summary": "Get ACL by ID",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "ACL ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/db.ACLSSL"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL"
        ],
        "summary": "Remove ACL by ID",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "ACL ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/certificate": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSL Certificates"
        ],
        "summary": "Get all certificates",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Fqdn",
            "name": "host",
            "in": "query"
          },
          {
            "type": "string",
            "description": "CA type",
            "name": "ca_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Username",
            "name": "user",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.ListCertificatesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSL Certificates"
        ],
        "summary": "Issue Certificate",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Issue Certificate Request",
            "name": "issuecertificaterequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.IssueReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/db.CertInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/certificate/{id}/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSL Certificates"
        ],
        "summary": "Get certificate by ID",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "Certificate ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/db.CertInfo"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSL Certificates"
        ],
        "summary": "Revoke certificate by ID",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "Certificate ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/certificate/{id}/download.pem": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "tags": [
          "SSL Certificates"
        ],
        "summary": "Get Pem by ID",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "Certificate ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/certificate/{id}/download.pfx": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSL Certificates"
        ],
        "summary": "Get Pfx by ID",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "Certificate ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/crl": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "tags": [
          "CRL"
        ],
        "summary": "Get GetCRL",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/get_session_certificate/{id}/": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SoftCertificates"
        ],
        "summary": "Get SoftCertificate by ID",
        "parameters": [
          {
            "description": "Get SoftCertificate by ID",
            "name": "sessionservicereq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.SessionServiceReq"
            }
          },
          {
            "type": "integer",
            "description": "SoftCertificate ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/db.SoftKey"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/list_session_certificate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SoftCertificates"
        ],
        "summary": "Get all SoftCertificates",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "user",
            "in": "query"
          },
          {
            "description": "Get all SoftCertificate Request",
            "name": "sessionservicereq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.SessionServiceReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.ListSoftCertificatesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/revoke_session_certificate/{id}/": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SoftCertificates"
        ],
        "summary": "Revoke SoftСertificate by ID",
        "parameters": [
          {
            "description": "Revoke SoftСertificate by ID",
            "name": "sessionservicereq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.SessionServiceReq"
            }
          },
          {
            "type": "integer",
            "description": "SoftСertificate ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/session_certificate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SoftCertificates"
        ],
        "summary": "Issue SoftCertificate",
        "parameters": [
          {
            "description": "Issue SoftCertificate Request",
            "name": "issuesoftcertificaterequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.SessionCertSignReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ping"
        ],
        "summary": "Ping",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/requests.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "db.ACLSSL": {
      "type": "object",
      "properties": {
        "abc_service": {
          "type": "integer"
        },
        "acl": {
          "type": "string"
        },
        "ca_type": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "requester": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "wildcard": {
          "type": "boolean"
        }
      }
    },
    "db.CertInfo": {
      "type": "object",
      "properties": {
        "abc_service": {
          "type": "integer"
        },
        "ca_name": {
          "type": "string"
        },
        "common_name": {
          "type": "string"
        },
        "desired_ttl_days": {
          "type": "integer"
        },
        "download": {
          "description": "download - Ссылка на скачивание pfx\nСкачать можно только если заказывался сертификат для которого csr генерировался на стороне CRT\nДефолтный пароль - 7777777. Кастомный пароль можно указать, если запросить урл с параметром  ?password=***\ndownload2 - Ссылка на скачивание pem сертификата.\nserial_number - серийный номер сертификата.\nurl - url, по которому можно получить всю информацию о сертификате.\nstatus - статус сертификата. Может быть следующим:\n    requested - Запрошен. Ожидает выдачи.\n    issued - Успешно выдан.\n    revoked - Отозван.\n    error - Произошла ошибка. В случае обнаружения этого кода можно написать о проблеме на crt-dev@\n    expired - Истек.\n    revoking - В процессе отзыва. Актуально для внутренних сертификатов, для которых нет прямой возможности отозвать\n    hold - Сертификат заморожен. Если сертификат попал в этот статус - то его возможно вернуть обратно в статус issued с помощью действия unhold.\n    validation - Ожидает подтверждения хостов. (только для host-сертификатов на внешнем УЦ)\n    need_approve - Ожидает подтверждения СИБ. (только для host-сертификатов на внешнем УЦ)\n    rejected - Запрос сертификата отклонен СИБ. (только для host-сертификатов на внешнем УЦ)\ntype - Тип сертификата.\nca_name - Имя УЦ в котором был выдан сертификат.\nissued - Время, когда был выписан сертификат.\nupdated - Время, когда сертификат был к последний раз как-либо изменен.\nrequester - Имя пользователя со staff, от имени которого был заказан сертификат.",
          "type": "string"
        },
        "download2": {
          "type": "string"
        },
        "end_date": {
          "type": "string"
        },
        "hosts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer"
        },
        "issued": {
          "type": "string"
        },
        "request": {
          "type": "string"
        },
        "requester": {
          "type": "string"
        },
        "revoked": {
          "type": "string"
        },
        "serial_number": {
          "type": "string"
        },
        "ssh_cert": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "db.SoftKey": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "desired_ttl_hours": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "principals": {
          "type": "string"
        },
        "requester": {
          "type": "string"
        },
        "revoked": {
          "type": "string"
        },
        "session_cert": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "session_signed_crt": {
          "type": "string"
        },
        "st_ticket_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "sub_type": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "valid_from": {
          "type": "string"
        },
        "valid_to": {
          "type": "string"
        },
        "yk_cert": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "requests.ACLSSLReq": {
      "type": "object",
      "required": [
        "abc_service",
        "ca_type",
        "regex",
        "user"
      ],
      "properties": {
        "abc_service": {
          "type": "integer"
        },
        "ca_type": {
          "type": "string"
        },
        "regex": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "wildcard": {
          "type": "boolean"
        }
      }
    },
    "requests.ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "requests.IssueReq": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "abc_service": {
          "type": "integer"
        },
        "ca_name": {
          "type": "string"
        },
        "common_name": {
          "type": "string"
        },
        "desired_ttl_days": {
          "type": "integer"
        },
        "hosts": {
          "description": "Хосты через запятую",
          "type": "string"
        },
        "request": {
          "type": "string"
        },
        "slot_attest_cert": {
          "type": "string"
        },
        "token_attest_cert": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "requests.SessionCertSignReq": {
      "type": "object",
      "required": [
        "session_cert",
        "type",
        "yk_cert"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "desired_ttl": {
          "type": "integer"
        },
        "robot_name": {
          "type": "string"
        },
        "session_cert": {
          "type": "string"
        },
        "st_ticket_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "yk_cert": {
          "type": "string"
        }
      }
    },
    "requests.SessionServiceReq": {
      "type": "object",
      "required": [
        "yk_cert"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "st_ticket_id": {
          "type": "string"
        },
        "yk_cert": {
          "type": "string"
        }
      }
    },
    "server.ListACLResponse": {
      "type": "object",
      "properties": {
        "acls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/db.ACLSSL"
          }
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "server.ListCertificatesResponse": {
      "type": "object",
      "properties": {
        "certs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/db.CertInfo"
          }
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "server.ListSoftCertificatesResponse": {
      "type": "object",
      "properties": {
        "certs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/db.SoftKey"
          }
        },
        "count": {
          "type": "integer"
        }
      }
    }
  }
}