// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestsIssueReq requests issue req
//
// swagger:model requests.IssueReq
type RequestsIssueReq struct {

	// abc service
	AbcService int64 `json:"abc_service,omitempty"`

	// ca name
	CaName string `json:"ca_name,omitempty"`

	// common name
	CommonName string `json:"common_name,omitempty"`

	// desired ttl days
	DesiredTTLDays int64 `json:"desired_ttl_days,omitempty"`

	// Хосты через запятую
	Hosts string `json:"hosts,omitempty"`

	// request
	Request string `json:"request,omitempty"`

	// slot attest cert
	SlotAttestCert string `json:"slot_attest_cert,omitempty"`

	// token attest cert
	TokenAttestCert string `json:"token_attest_cert,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this requests issue req
func (m *RequestsIssueReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestsIssueReq) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this requests issue req based on context it is used
func (m *RequestsIssueReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestsIssueReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestsIssueReq) UnmarshalBinary(b []byte) error {
	var res RequestsIssueReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
