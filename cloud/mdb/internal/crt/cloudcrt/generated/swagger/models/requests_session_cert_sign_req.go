// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestsSessionCertSignReq requests session cert sign req
//
// swagger:model requests.SessionCertSignReq
type RequestsSessionCertSignReq struct {

	// comment
	Comment string `json:"comment,omitempty"`

	// desired ttl
	DesiredTTL int64 `json:"desired_ttl,omitempty"`

	// robot name
	RobotName string `json:"robot_name,omitempty"`

	// session cert
	// Required: true
	SessionCert *string `json:"session_cert"`

	// st ticket id
	StTicketID string `json:"st_ticket_id,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// yk cert
	// Required: true
	YkCert *string `json:"yk_cert"`
}

// Validate validates this requests session cert sign req
func (m *RequestsSessionCertSignReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSessionCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYkCert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestsSessionCertSignReq) validateSessionCert(formats strfmt.Registry) error {

	if err := validate.Required("session_cert", "body", m.SessionCert); err != nil {
		return err
	}

	return nil
}

func (m *RequestsSessionCertSignReq) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RequestsSessionCertSignReq) validateYkCert(formats strfmt.Registry) error {

	if err := validate.Required("yk_cert", "body", m.YkCert); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this requests session cert sign req based on context it is used
func (m *RequestsSessionCertSignReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestsSessionCertSignReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestsSessionCertSignReq) UnmarshalBinary(b []byte) error {
	var res RequestsSessionCertSignReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
