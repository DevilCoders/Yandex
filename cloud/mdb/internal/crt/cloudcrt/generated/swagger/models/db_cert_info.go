// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DbCertInfo db cert info
//
// swagger:model db.CertInfo
type DbCertInfo struct {

	// abc service
	AbcService int64 `json:"abc_service,omitempty"`

	// ca name
	CaName string `json:"ca_name,omitempty"`

	// common name
	CommonName string `json:"common_name,omitempty"`

	// desired ttl days
	DesiredTTLDays int64 `json:"desired_ttl_days,omitempty"`

	// download - Ссылка на скачивание pfx
	// Скачать можно только если заказывался сертификат для которого csr генерировался на стороне CRT
	// Дефолтный пароль - 7777777. Кастомный пароль можно указать, если запросить урл с параметром  ?password=***
	// download2 - Ссылка на скачивание pem сертификата.
	// serial_number - серийный номер сертификата.
	// url - url, по которому можно получить всю информацию о сертификате.
	// status - статус сертификата. Может быть следующим:
	//     requested - Запрошен. Ожидает выдачи.
	//     issued - Успешно выдан.
	//     revoked - Отозван.
	//     error - Произошла ошибка. В случае обнаружения этого кода можно написать о проблеме на crt-dev@
	//     expired - Истек.
	//     revoking - В процессе отзыва. Актуально для внутренних сертификатов, для которых нет прямой возможности отозвать
	//     hold - Сертификат заморожен. Если сертификат попал в этот статус - то его возможно вернуть обратно в статус issued с помощью действия unhold.
	//     validation - Ожидает подтверждения хостов. (только для host-сертификатов на внешнем УЦ)
	//     need_approve - Ожидает подтверждения СИБ. (только для host-сертификатов на внешнем УЦ)
	//     rejected - Запрос сертификата отклонен СИБ. (только для host-сертификатов на внешнем УЦ)
	// type - Тип сертификата.
	// ca_name - Имя УЦ в котором был выдан сертификат.
	// issued - Время, когда был выписан сертификат.
	// updated - Время, когда сертификат был к последний раз как-либо изменен.
	// requester - Имя пользователя со staff, от имени которого был заказан сертификат.
	Download string `json:"download,omitempty"`

	// download2
	Download2 string `json:"download2,omitempty"`

	// end date
	EndDate string `json:"end_date,omitempty"`

	// hosts
	Hosts []string `json:"hosts"`

	// id
	ID int64 `json:"id,omitempty"`

	// issued
	Issued string `json:"issued,omitempty"`

	// request
	Request string `json:"request,omitempty"`

	// requester
	Requester string `json:"requester,omitempty"`

	// revoked
	Revoked string `json:"revoked,omitempty"`

	// serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// ssh cert
	SSHCert string `json:"ssh_cert,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated
	Updated string `json:"updated,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this db cert info
func (m *DbCertInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this db cert info based on context it is used
func (m *DbCertInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DbCertInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DbCertInfo) UnmarshalBinary(b []byte) error {
	var res DbCertInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
