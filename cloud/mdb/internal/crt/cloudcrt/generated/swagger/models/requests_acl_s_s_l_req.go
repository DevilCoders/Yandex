// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestsACLSSLReq requests ACL s s l req
//
// swagger:model requests.ACLSSLReq
type RequestsACLSSLReq struct {

	// abc service
	// Required: true
	AbcService *int64 `json:"abc_service"`

	// ca type
	// Required: true
	CaType *string `json:"ca_type"`

	// regex
	// Required: true
	Regex *string `json:"regex"`

	// user
	// Required: true
	User *string `json:"user"`

	// wildcard
	Wildcard bool `json:"wildcard,omitempty"`
}

// Validate validates this requests ACL s s l req
func (m *RequestsACLSSLReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbcService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestsACLSSLReq) validateAbcService(formats strfmt.Registry) error {

	if err := validate.Required("abc_service", "body", m.AbcService); err != nil {
		return err
	}

	return nil
}

func (m *RequestsACLSSLReq) validateCaType(formats strfmt.Registry) error {

	if err := validate.Required("ca_type", "body", m.CaType); err != nil {
		return err
	}

	return nil
}

func (m *RequestsACLSSLReq) validateRegex(formats strfmt.Registry) error {

	if err := validate.Required("regex", "body", m.Regex); err != nil {
		return err
	}

	return nil
}

func (m *RequestsACLSSLReq) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this requests ACL s s l req based on context it is used
func (m *RequestsACLSSLReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestsACLSSLReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestsACLSSLReq) UnmarshalBinary(b []byte) error {
	var res RequestsACLSSLReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
