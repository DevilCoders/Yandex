// Code generated by go-swagger; DO NOT EDIT.

package acl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new acl API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for acl API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIACLID(params *DeleteAPIACLIDParams, opts ...ClientOption) (*DeleteAPIACLIDOK, error)

	GetAPIACL(params *GetAPIACLParams, opts ...ClientOption) (*GetAPIACLOK, error)

	GetAPIACLID(params *GetAPIACLIDParams, opts ...ClientOption) (*GetAPIACLIDOK, error)

	PostAPIACL(params *PostAPIACLParams, opts ...ClientOption) (*PostAPIACLCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIACLID removes ACL by ID
*/
func (a *Client) DeleteAPIACLID(params *DeleteAPIACLIDParams, opts ...ClientOption) (*DeleteAPIACLIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIACLIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIACLID",
		Method:             "DELETE",
		PathPattern:        "/api/acl/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAPIACLIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIACLIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIACLID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIACL gets all ACL for certificates
*/
func (a *Client) GetAPIACL(params *GetAPIACLParams, opts ...ClientOption) (*GetAPIACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIACL",
		Method:             "GET",
		PathPattern:        "/api/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPIACLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIACLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIACL: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIACLID gets ACL by ID
*/
func (a *Client) GetAPIACLID(params *GetAPIACLIDParams, opts ...ClientOption) (*GetAPIACLIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIACLIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIACLID",
		Method:             "GET",
		PathPattern:        "/api/acl/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPIACLIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIACLIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIACLID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIACL adds ACL for certificates
*/
func (a *Client) PostAPIACL(params *PostAPIACLParams, opts ...ClientOption) (*PostAPIACLCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIACL",
		Method:             "POST",
		PathPattern:        "/api/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAPIACLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIACLCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIACL: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
