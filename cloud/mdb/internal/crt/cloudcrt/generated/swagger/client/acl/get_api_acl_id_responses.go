// Code generated by go-swagger; DO NOT EDIT.

package acl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"a.yandex-team.ru/cloud/mdb/internal/crt/cloudcrt/generated/swagger/models"
)

// GetAPIACLIDReader is a Reader for the GetAPIACLID structure.
type GetAPIACLIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIACLIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIACLIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAPIACLIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAPIACLIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAPIACLIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAPIACLIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAPIACLIDOK creates a GetAPIACLIDOK with default headers values
func NewGetAPIACLIDOK() *GetAPIACLIDOK {
	return &GetAPIACLIDOK{}
}

/* GetAPIACLIDOK describes a response with status code 200, with default header values.

OK
*/
type GetAPIACLIDOK struct {
	Payload *models.DbACLSSL
}

func (o *GetAPIACLIDOK) Error() string {
	return fmt.Sprintf("[GET /api/acl/{id}/][%d] getApiAclIdOK  %+v", 200, o.Payload)
}
func (o *GetAPIACLIDOK) GetPayload() *models.DbACLSSL {
	return o.Payload
}

func (o *GetAPIACLIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DbACLSSL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIACLIDUnauthorized creates a GetAPIACLIDUnauthorized with default headers values
func NewGetAPIACLIDUnauthorized() *GetAPIACLIDUnauthorized {
	return &GetAPIACLIDUnauthorized{}
}

/* GetAPIACLIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAPIACLIDUnauthorized struct {
	Payload *models.RequestsErrorResponse
}

func (o *GetAPIACLIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/acl/{id}/][%d] getApiAclIdUnauthorized  %+v", 401, o.Payload)
}
func (o *GetAPIACLIDUnauthorized) GetPayload() *models.RequestsErrorResponse {
	return o.Payload
}

func (o *GetAPIACLIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIACLIDForbidden creates a GetAPIACLIDForbidden with default headers values
func NewGetAPIACLIDForbidden() *GetAPIACLIDForbidden {
	return &GetAPIACLIDForbidden{}
}

/* GetAPIACLIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAPIACLIDForbidden struct {
	Payload *models.RequestsErrorResponse
}

func (o *GetAPIACLIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/acl/{id}/][%d] getApiAclIdForbidden  %+v", 403, o.Payload)
}
func (o *GetAPIACLIDForbidden) GetPayload() *models.RequestsErrorResponse {
	return o.Payload
}

func (o *GetAPIACLIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIACLIDNotFound creates a GetAPIACLIDNotFound with default headers values
func NewGetAPIACLIDNotFound() *GetAPIACLIDNotFound {
	return &GetAPIACLIDNotFound{}
}

/* GetAPIACLIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAPIACLIDNotFound struct {
	Payload *models.RequestsErrorResponse
}

func (o *GetAPIACLIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/acl/{id}/][%d] getApiAclIdNotFound  %+v", 404, o.Payload)
}
func (o *GetAPIACLIDNotFound) GetPayload() *models.RequestsErrorResponse {
	return o.Payload
}

func (o *GetAPIACLIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIACLIDInternalServerError creates a GetAPIACLIDInternalServerError with default headers values
func NewGetAPIACLIDInternalServerError() *GetAPIACLIDInternalServerError {
	return &GetAPIACLIDInternalServerError{}
}

/* GetAPIACLIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAPIACLIDInternalServerError struct {
	Payload *models.RequestsErrorResponse
}

func (o *GetAPIACLIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/acl/{id}/][%d] getApiAclIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAPIACLIDInternalServerError) GetPayload() *models.RequestsErrorResponse {
	return o.Payload
}

func (o *GetAPIACLIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
