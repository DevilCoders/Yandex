// Code generated by go-swagger; DO NOT EDIT.

package s_s_l_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s s l certificates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s s l certificates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPICertificateID(params *DeleteAPICertificateIDParams, opts ...ClientOption) (*DeleteAPICertificateIDOK, error)

	GetAPICertificate(params *GetAPICertificateParams, opts ...ClientOption) (*GetAPICertificateOK, error)

	GetAPICertificateID(params *GetAPICertificateIDParams, opts ...ClientOption) (*GetAPICertificateIDOK, error)

	GetAPICertificateIDDownloadPem(params *GetAPICertificateIDDownloadPemParams, opts ...ClientOption) (*GetAPICertificateIDDownloadPemOK, error)

	GetAPICertificateIDDownloadPfx(params *GetAPICertificateIDDownloadPfxParams, opts ...ClientOption) error

	PostAPICertificate(params *PostAPICertificateParams, opts ...ClientOption) (*PostAPICertificateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPICertificateID revokes certificate by ID
*/
func (a *Client) DeleteAPICertificateID(params *DeleteAPICertificateIDParams, opts ...ClientOption) (*DeleteAPICertificateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPICertificateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPICertificateID",
		Method:             "DELETE",
		PathPattern:        "/api/certificate/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAPICertificateIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPICertificateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPICertificateID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPICertificate gets all certificates
*/
func (a *Client) GetAPICertificate(params *GetAPICertificateParams, opts ...ClientOption) (*GetAPICertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPICertificate",
		Method:             "GET",
		PathPattern:        "/api/certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPICertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPICertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPICertificateID gets certificate by ID
*/
func (a *Client) GetAPICertificateID(params *GetAPICertificateIDParams, opts ...ClientOption) (*GetAPICertificateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICertificateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPICertificateID",
		Method:             "GET",
		PathPattern:        "/api/certificate/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPICertificateIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICertificateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPICertificateID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPICertificateIDDownloadPem gets pem by ID
*/
func (a *Client) GetAPICertificateIDDownloadPem(params *GetAPICertificateIDDownloadPemParams, opts ...ClientOption) (*GetAPICertificateIDDownloadPemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICertificateIDDownloadPemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPICertificateIDDownloadPem",
		Method:             "GET",
		PathPattern:        "/api/certificate/{id}/download.pem",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPICertificateIDDownloadPemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICertificateIDDownloadPemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPICertificateIDDownloadPem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPICertificateIDDownloadPfx gets pfx by ID
*/
func (a *Client) GetAPICertificateIDDownloadPfx(params *GetAPICertificateIDDownloadPfxParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICertificateIDDownloadPfxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPICertificateIDDownloadPfx",
		Method:             "GET",
		PathPattern:        "/api/certificate/{id}/download.pfx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPICertificateIDDownloadPfxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  PostAPICertificate issues certificate
*/
func (a *Client) PostAPICertificate(params *PostAPICertificateParams, opts ...ClientOption) (*PostAPICertificateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPICertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPICertificate",
		Method:             "POST",
		PathPattern:        "/api/certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAPICertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPICertificateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPICertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
