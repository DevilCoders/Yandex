// Code generated by go-swagger; DO NOT EDIT.

package s_s_l_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAPICertificateParams creates a new GetAPICertificateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPICertificateParams() *GetAPICertificateParams {
	return &GetAPICertificateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPICertificateParamsWithTimeout creates a new GetAPICertificateParams object
// with the ability to set a timeout on a request.
func NewGetAPICertificateParamsWithTimeout(timeout time.Duration) *GetAPICertificateParams {
	return &GetAPICertificateParams{
		timeout: timeout,
	}
}

// NewGetAPICertificateParamsWithContext creates a new GetAPICertificateParams object
// with the ability to set a context for a request.
func NewGetAPICertificateParamsWithContext(ctx context.Context) *GetAPICertificateParams {
	return &GetAPICertificateParams{
		Context: ctx,
	}
}

// NewGetAPICertificateParamsWithHTTPClient creates a new GetAPICertificateParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPICertificateParamsWithHTTPClient(client *http.Client) *GetAPICertificateParams {
	return &GetAPICertificateParams{
		HTTPClient: client,
	}
}

/* GetAPICertificateParams contains all the parameters to send to the API endpoint
   for the get API certificate operation.

   Typically these are written to a http.Request.
*/
type GetAPICertificateParams struct {

	/* Authorization.

	   OAuth token
	*/
	Authorization string

	/* CaType.

	   CA type
	*/
	CaType *string

	/* Host.

	   Fqdn
	*/
	Host *string

	/* User.

	   Username
	*/
	User *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPICertificateParams) WithDefaults() *GetAPICertificateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPICertificateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API certificate params
func (o *GetAPICertificateParams) WithTimeout(timeout time.Duration) *GetAPICertificateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API certificate params
func (o *GetAPICertificateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API certificate params
func (o *GetAPICertificateParams) WithContext(ctx context.Context) *GetAPICertificateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API certificate params
func (o *GetAPICertificateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API certificate params
func (o *GetAPICertificateParams) WithHTTPClient(client *http.Client) *GetAPICertificateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API certificate params
func (o *GetAPICertificateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get API certificate params
func (o *GetAPICertificateParams) WithAuthorization(authorization string) *GetAPICertificateParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get API certificate params
func (o *GetAPICertificateParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithCaType adds the caType to the get API certificate params
func (o *GetAPICertificateParams) WithCaType(caType *string) *GetAPICertificateParams {
	o.SetCaType(caType)
	return o
}

// SetCaType adds the caType to the get API certificate params
func (o *GetAPICertificateParams) SetCaType(caType *string) {
	o.CaType = caType
}

// WithHost adds the host to the get API certificate params
func (o *GetAPICertificateParams) WithHost(host *string) *GetAPICertificateParams {
	o.SetHost(host)
	return o
}

// SetHost adds the host to the get API certificate params
func (o *GetAPICertificateParams) SetHost(host *string) {
	o.Host = host
}

// WithUser adds the user to the get API certificate params
func (o *GetAPICertificateParams) WithUser(user *string) *GetAPICertificateParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the get API certificate params
func (o *GetAPICertificateParams) SetUser(user *string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPICertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.CaType != nil {

		// query param ca_type
		var qrCaType string

		if o.CaType != nil {
			qrCaType = *o.CaType
		}
		qCaType := qrCaType
		if qCaType != "" {

			if err := r.SetQueryParam("ca_type", qCaType); err != nil {
				return err
			}
		}
	}

	if o.Host != nil {

		// query param host
		var qrHost string

		if o.Host != nil {
			qrHost = *o.Host
		}
		qHost := qrHost
		if qHost != "" {

			if err := r.SetQueryParam("host", qHost); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// query param user
		var qrUser string

		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
