// Code generated by go-swagger; DO NOT EDIT.

package soft_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"a.yandex-team.ru/cloud/mdb/internal/crt/cloudcrt/generated/swagger/models"
)

// NewPostAPISessionCertificateParams creates a new PostAPISessionCertificateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostAPISessionCertificateParams() *PostAPISessionCertificateParams {
	return &PostAPISessionCertificateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostAPISessionCertificateParamsWithTimeout creates a new PostAPISessionCertificateParams object
// with the ability to set a timeout on a request.
func NewPostAPISessionCertificateParamsWithTimeout(timeout time.Duration) *PostAPISessionCertificateParams {
	return &PostAPISessionCertificateParams{
		timeout: timeout,
	}
}

// NewPostAPISessionCertificateParamsWithContext creates a new PostAPISessionCertificateParams object
// with the ability to set a context for a request.
func NewPostAPISessionCertificateParamsWithContext(ctx context.Context) *PostAPISessionCertificateParams {
	return &PostAPISessionCertificateParams{
		Context: ctx,
	}
}

// NewPostAPISessionCertificateParamsWithHTTPClient creates a new PostAPISessionCertificateParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostAPISessionCertificateParamsWithHTTPClient(client *http.Client) *PostAPISessionCertificateParams {
	return &PostAPISessionCertificateParams{
		HTTPClient: client,
	}
}

/* PostAPISessionCertificateParams contains all the parameters to send to the API endpoint
   for the post API session certificate operation.

   Typically these are written to a http.Request.
*/
type PostAPISessionCertificateParams struct {

	/* Issuesoftcertificaterequest.

	   Issue SoftCertificate Request
	*/
	Issuesoftcertificaterequest *models.RequestsSessionCertSignReq

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post API session certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostAPISessionCertificateParams) WithDefaults() *PostAPISessionCertificateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post API session certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostAPISessionCertificateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post API session certificate params
func (o *PostAPISessionCertificateParams) WithTimeout(timeout time.Duration) *PostAPISessionCertificateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post API session certificate params
func (o *PostAPISessionCertificateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post API session certificate params
func (o *PostAPISessionCertificateParams) WithContext(ctx context.Context) *PostAPISessionCertificateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post API session certificate params
func (o *PostAPISessionCertificateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post API session certificate params
func (o *PostAPISessionCertificateParams) WithHTTPClient(client *http.Client) *PostAPISessionCertificateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post API session certificate params
func (o *PostAPISessionCertificateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIssuesoftcertificaterequest adds the issuesoftcertificaterequest to the post API session certificate params
func (o *PostAPISessionCertificateParams) WithIssuesoftcertificaterequest(issuesoftcertificaterequest *models.RequestsSessionCertSignReq) *PostAPISessionCertificateParams {
	o.SetIssuesoftcertificaterequest(issuesoftcertificaterequest)
	return o
}

// SetIssuesoftcertificaterequest adds the issuesoftcertificaterequest to the post API session certificate params
func (o *PostAPISessionCertificateParams) SetIssuesoftcertificaterequest(issuesoftcertificaterequest *models.RequestsSessionCertSignReq) {
	o.Issuesoftcertificaterequest = issuesoftcertificaterequest
}

// WriteToRequest writes these params to a swagger request
func (o *PostAPISessionCertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Issuesoftcertificaterequest != nil {
		if err := r.SetBodyParam(o.Issuesoftcertificaterequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
