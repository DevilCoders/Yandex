// Code generated by go-swagger; DO NOT EDIT.

package acl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"a.yandex-team.ru/cloud/mdb/internal/crt/cloudcrt/generated/swagger/models"
)

// GetAPIACLReader is a Reader for the GetAPIACL structure.
type GetAPIACLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIACLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIACLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAPIACLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAPIACLUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAPIACLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAPIACLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAPIACLOK creates a GetAPIACLOK with default headers values
func NewGetAPIACLOK() *GetAPIACLOK {
	return &GetAPIACLOK{}
}

/* GetAPIACLOK describes a response with status code 200, with default header values.

OK
*/
type GetAPIACLOK struct {
	Payload *models.ServerListACLResponse
}

func (o *GetAPIACLOK) Error() string {
	return fmt.Sprintf("[GET /api/acl][%d] getApiAclOK  %+v", 200, o.Payload)
}
func (o *GetAPIACLOK) GetPayload() *models.ServerListACLResponse {
	return o.Payload
}

func (o *GetAPIACLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerListACLResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIACLBadRequest creates a GetAPIACLBadRequest with default headers values
func NewGetAPIACLBadRequest() *GetAPIACLBadRequest {
	return &GetAPIACLBadRequest{}
}

/* GetAPIACLBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAPIACLBadRequest struct {
	Payload *models.RequestsErrorResponse
}

func (o *GetAPIACLBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/acl][%d] getApiAclBadRequest  %+v", 400, o.Payload)
}
func (o *GetAPIACLBadRequest) GetPayload() *models.RequestsErrorResponse {
	return o.Payload
}

func (o *GetAPIACLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIACLUnauthorized creates a GetAPIACLUnauthorized with default headers values
func NewGetAPIACLUnauthorized() *GetAPIACLUnauthorized {
	return &GetAPIACLUnauthorized{}
}

/* GetAPIACLUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAPIACLUnauthorized struct {
	Payload *models.RequestsErrorResponse
}

func (o *GetAPIACLUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/acl][%d] getApiAclUnauthorized  %+v", 401, o.Payload)
}
func (o *GetAPIACLUnauthorized) GetPayload() *models.RequestsErrorResponse {
	return o.Payload
}

func (o *GetAPIACLUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIACLForbidden creates a GetAPIACLForbidden with default headers values
func NewGetAPIACLForbidden() *GetAPIACLForbidden {
	return &GetAPIACLForbidden{}
}

/* GetAPIACLForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAPIACLForbidden struct {
	Payload *models.RequestsErrorResponse
}

func (o *GetAPIACLForbidden) Error() string {
	return fmt.Sprintf("[GET /api/acl][%d] getApiAclForbidden  %+v", 403, o.Payload)
}
func (o *GetAPIACLForbidden) GetPayload() *models.RequestsErrorResponse {
	return o.Payload
}

func (o *GetAPIACLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIACLInternalServerError creates a GetAPIACLInternalServerError with default headers values
func NewGetAPIACLInternalServerError() *GetAPIACLInternalServerError {
	return &GetAPIACLInternalServerError{}
}

/* GetAPIACLInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAPIACLInternalServerError struct {
	Payload *models.RequestsErrorResponse
}

func (o *GetAPIACLInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/acl][%d] getApiAclInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAPIACLInternalServerError) GetPayload() *models.RequestsErrorResponse {
	return o.Payload
}

func (o *GetAPIACLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
