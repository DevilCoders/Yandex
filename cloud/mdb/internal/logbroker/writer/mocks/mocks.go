// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/logbroker/writer (interfaces: Writer)

// Package mocks is a generated GoMock package.
package mocks

import (
	writer "a.yandex-team.ru/cloud/mdb/internal/logbroker/writer"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockWriter) Write(arg0 int64, arg1 []byte, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockWriterMockRecorder) Write(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), arg0, arg1, arg2)
}

// WriteResponses mocks base method.
func (m *MockWriter) WriteResponses() <-chan writer.WriteResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteResponses")
	ret0, _ := ret[0].(<-chan writer.WriteResponse)
	return ret0
}

// WriteResponses indicates an expected call of WriteResponses.
func (mr *MockWriterMockRecorder) WriteResponses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResponses", reflect.TypeOf((*MockWriter)(nil).WriteResponses))
}
