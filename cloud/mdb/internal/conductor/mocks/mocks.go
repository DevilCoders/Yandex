// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/conductor (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	conductor "a.yandex-team.ru/cloud/mdb/internal/conductor"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DCByName mocks base method.
func (m *MockClient) DCByName(arg0 context.Context, arg1 string) (conductor.DataCenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DCByName", arg0, arg1)
	ret0, _ := ret[0].(conductor.DataCenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DCByName indicates an expected call of DCByName.
func (mr *MockClientMockRecorder) DCByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DCByName", reflect.TypeOf((*MockClient)(nil).DCByName), arg0, arg1)
}

// ExecuterData mocks base method.
func (m *MockClient) ExecuterData(arg0 context.Context, arg1 string) (conductor.ExecuterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuterData", arg0, arg1)
	ret0, _ := ret[0].(conductor.ExecuterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuterData indicates an expected call of ExecuterData.
func (mr *MockClientMockRecorder) ExecuterData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuterData", reflect.TypeOf((*MockClient)(nil).ExecuterData), arg0, arg1)
}

// GroupInfoByName mocks base method.
func (m *MockClient) GroupInfoByName(arg0 context.Context, arg1 string) (conductor.GroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupInfoByName", arg0, arg1)
	ret0, _ := ret[0].(conductor.GroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupInfoByName indicates an expected call of GroupInfoByName.
func (mr *MockClientMockRecorder) GroupInfoByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupInfoByName", reflect.TypeOf((*MockClient)(nil).GroupInfoByName), arg0, arg1)
}

// GroupToHosts mocks base method.
func (m *MockClient) GroupToHosts(arg0 context.Context, arg1 string, arg2 conductor.GroupToHostsAttrs) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupToHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupToHosts indicates an expected call of GroupToHosts.
func (mr *MockClientMockRecorder) GroupToHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupToHosts", reflect.TypeOf((*MockClient)(nil).GroupToHosts), arg0, arg1, arg2)
}

// HostCreate mocks base method.
func (m *MockClient) HostCreate(arg0 context.Context, arg1 conductor.HostCreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HostCreate indicates an expected call of HostCreate.
func (mr *MockClientMockRecorder) HostCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostCreate", reflect.TypeOf((*MockClient)(nil).HostCreate), arg0, arg1)
}

// HostToGroups mocks base method.
func (m *MockClient) HostToGroups(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostToGroups", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostToGroups indicates an expected call of HostToGroups.
func (mr *MockClientMockRecorder) HostToGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostToGroups", reflect.TypeOf((*MockClient)(nil).HostToGroups), arg0, arg1)
}

// HostsInfo mocks base method.
func (m *MockClient) HostsInfo(arg0 context.Context, arg1 []string) ([]conductor.HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostsInfo", arg0, arg1)
	ret0, _ := ret[0].([]conductor.HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostsInfo indicates an expected call of HostsInfo.
func (mr *MockClientMockRecorder) HostsInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostsInfo", reflect.TypeOf((*MockClient)(nil).HostsInfo), arg0, arg1)
}

// ParentGroup mocks base method.
func (m *MockClient) ParentGroup(arg0 context.Context, arg1 conductor.GroupInfo) (conductor.GroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentGroup", arg0, arg1)
	ret0, _ := ret[0].(conductor.GroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParentGroup indicates an expected call of ParentGroup.
func (mr *MockClientMockRecorder) ParentGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentGroup", reflect.TypeOf((*MockClient)(nil).ParentGroup), arg0, arg1)
}
