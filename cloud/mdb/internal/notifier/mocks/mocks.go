// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/notifier (interfaces: API)

// Package mocks is a generated GoMock package.
package mocks

import (
	notifier "a.yandex-team.ru/cloud/mdb/internal/notifier"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockAPI) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockAPIMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockAPI)(nil).IsReady), arg0)
}

// NotifyCloud mocks base method.
func (m *MockAPI) NotifyCloud(arg0 context.Context, arg1 string, arg2 notifier.TemplateID, arg3 map[string]interface{}, arg4 []notifier.TransportID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyCloud", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyCloud indicates an expected call of NotifyCloud.
func (mr *MockAPIMockRecorder) NotifyCloud(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCloud", reflect.TypeOf((*MockAPI)(nil).NotifyCloud), arg0, arg1, arg2, arg3, arg4)
}

// NotifyUser mocks base method.
func (m *MockAPI) NotifyUser(arg0 context.Context, arg1 string, arg2 notifier.TemplateID, arg3 map[string]interface{}, arg4 []notifier.TransportID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUser", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyUser indicates an expected call of NotifyUser.
func (mr *MockAPIMockRecorder) NotifyUser(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUser", reflect.TypeOf((*MockAPI)(nil).NotifyUser), arg0, arg1, arg2, arg3, arg4)
}
