// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/dbm (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	dbm "a.yandex-team.ru/cloud/mdb/internal/dbm"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AreNewHostsAllowed mocks base method.
func (m *MockClient) AreNewHostsAllowed(arg0 context.Context, arg1 string) (dbm.NewHostsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreNewHostsAllowed", arg0, arg1)
	ret0, _ := ret[0].(dbm.NewHostsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AreNewHostsAllowed indicates an expected call of AreNewHostsAllowed.
func (mr *MockClientMockRecorder) AreNewHostsAllowed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreNewHostsAllowed", reflect.TypeOf((*MockClient)(nil).AreNewHostsAllowed), arg0, arg1)
}

// ClusterContainers mocks base method.
func (m *MockClient) ClusterContainers(arg0 context.Context, arg1 string) ([]dbm.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterContainers", arg0, arg1)
	ret0, _ := ret[0].([]dbm.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterContainers indicates an expected call of ClusterContainers.
func (mr *MockClientMockRecorder) ClusterContainers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterContainers", reflect.TypeOf((*MockClient)(nil).ClusterContainers), arg0, arg1)
}

// Dom0Containers mocks base method.
func (m *MockClient) Dom0Containers(arg0 context.Context, arg1 string) ([]dbm.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dom0Containers", arg0, arg1)
	ret0, _ := ret[0].([]dbm.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dom0Containers indicates an expected call of Dom0Containers.
func (mr *MockClientMockRecorder) Dom0Containers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dom0Containers", reflect.TypeOf((*MockClient)(nil).Dom0Containers), arg0, arg1)
}

// UpdateNewHostsAllowed mocks base method.
func (m *MockClient) UpdateNewHostsAllowed(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNewHostsAllowed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNewHostsAllowed indicates an expected call of UpdateNewHostsAllowed.
func (mr *MockClientMockRecorder) UpdateNewHostsAllowed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewHostsAllowed", reflect.TypeOf((*MockClient)(nil).UpdateNewHostsAllowed), arg0, arg1, arg2)
}

// VolumesByDom0 mocks base method.
func (m *MockClient) VolumesByDom0(arg0 context.Context, arg1 string) (map[string]dbm.ContainerVolumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumesByDom0", arg0, arg1)
	ret0, _ := ret[0].(map[string]dbm.ContainerVolumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumesByDom0 indicates an expected call of VolumesByDom0.
func (mr *MockClientMockRecorder) VolumesByDom0(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumesByDom0", reflect.TypeOf((*MockClient)(nil).VolumesByDom0), arg0, arg1)
}
