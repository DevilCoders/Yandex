// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/leaderelection (interfaces: LeaderElector)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLeaderElector is a mock of LeaderElector interface.
type MockLeaderElector struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderElectorMockRecorder
}

// MockLeaderElectorMockRecorder is the mock recorder for MockLeaderElector.
type MockLeaderElectorMockRecorder struct {
	mock *MockLeaderElector
}

// NewMockLeaderElector creates a new mock instance.
func NewMockLeaderElector(ctrl *gomock.Controller) *MockLeaderElector {
	mock := &MockLeaderElector{ctrl: ctrl}
	mock.recorder = &MockLeaderElectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderElector) EXPECT() *MockLeaderElectorMockRecorder {
	return m.recorder
}

// IsLeader mocks base method.
func (m *MockLeaderElector) IsLeader(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeader", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLeader indicates an expected call of IsLeader.
func (mr *MockLeaderElectorMockRecorder) IsLeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeader", reflect.TypeOf((*MockLeaderElector)(nil).IsLeader), arg0)
}
