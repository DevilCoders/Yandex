// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/metadb (interfaces: MetaDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	metadb "a.yandex-team.ru/cloud/mdb/internal/metadb"
	gomock "github.com/golang/mock/gomock"
	hasql "golang.yandex/hasql"
)

// MockMetaDB is a mock of MetaDB interface.
type MockMetaDB struct {
	ctrl     *gomock.Controller
	recorder *MockMetaDBMockRecorder
}

// MockMetaDBMockRecorder is the mock recorder for MockMetaDB.
type MockMetaDBMockRecorder struct {
	mock *MockMetaDB
}

// NewMockMetaDB creates a new mock instance.
func NewMockMetaDB(ctrl *gomock.Controller) *MockMetaDB {
	mock := &MockMetaDB{ctrl: ctrl}
	mock.recorder = &MockMetaDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaDB) EXPECT() *MockMetaDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockMetaDB) Begin(arg0 context.Context, arg1 hasql.NodeStateCriteria) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockMetaDBMockRecorder) Begin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockMetaDB)(nil).Begin), arg0, arg1)
}

// Close mocks base method.
func (m *MockMetaDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetaDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetaDB)(nil).Close))
}

// Clouds mocks base method.
func (m *MockMetaDB) Clouds(arg0 context.Context) ([]metadb.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clouds", arg0)
	ret0, _ := ret[0].([]metadb.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clouds indicates an expected call of Clouds.
func (mr *MockMetaDBMockRecorder) Clouds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clouds", reflect.TypeOf((*MockMetaDB)(nil).Clouds), arg0)
}

// ClusterAtRev mocks base method.
func (m *MockMetaDB) ClusterAtRev(arg0 context.Context, arg1 string, arg2 int64) (metadb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAtRev", arg0, arg1, arg2)
	ret0, _ := ret[0].(metadb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterAtRev indicates an expected call of ClusterAtRev.
func (mr *MockMetaDBMockRecorder) ClusterAtRev(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAtRev", reflect.TypeOf((*MockMetaDB)(nil).ClusterAtRev), arg0, arg1, arg2)
}

// ClusterHealthNonaggregatable mocks base method.
func (m *MockMetaDB) ClusterHealthNonaggregatable(arg0 context.Context, arg1 string, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterHealthNonaggregatable", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterHealthNonaggregatable indicates an expected call of ClusterHealthNonaggregatable.
func (mr *MockMetaDBMockRecorder) ClusterHealthNonaggregatable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterHealthNonaggregatable", reflect.TypeOf((*MockMetaDB)(nil).ClusterHealthNonaggregatable), arg0, arg1, arg2)
}

// ClusterHostsAtRev mocks base method.
func (m *MockMetaDB) ClusterHostsAtRev(arg0 context.Context, arg1 string, arg2 int64) ([]metadb.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterHostsAtRev", arg0, arg1, arg2)
	ret0, _ := ret[0].([]metadb.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterHostsAtRev indicates an expected call of ClusterHostsAtRev.
func (mr *MockMetaDBMockRecorder) ClusterHostsAtRev(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterHostsAtRev", reflect.TypeOf((*MockMetaDB)(nil).ClusterHostsAtRev), arg0, arg1, arg2)
}

// ClusterInfo mocks base method.
func (m *MockMetaDB) ClusterInfo(arg0 context.Context, arg1 string) (metadb.ClusterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterInfo", arg0, arg1)
	ret0, _ := ret[0].(metadb.ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterInfo indicates an expected call of ClusterInfo.
func (mr *MockMetaDBMockRecorder) ClusterInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInfo", reflect.TypeOf((*MockMetaDB)(nil).ClusterInfo), arg0, arg1)
}

// ClusterShards mocks base method.
func (m *MockMetaDB) ClusterShards(arg0 context.Context, arg1 string) ([]metadb.ShardInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterShards", arg0, arg1)
	ret0, _ := ret[0].([]metadb.ShardInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterShards indicates an expected call of ClusterShards.
func (mr *MockMetaDBMockRecorder) ClusterShards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterShards", reflect.TypeOf((*MockMetaDB)(nil).ClusterShards), arg0, arg1)
}

// ClustersRevs mocks base method.
func (m *MockMetaDB) ClustersRevs(arg0 context.Context) ([]metadb.ClusterRev, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClustersRevs", arg0)
	ret0, _ := ret[0].([]metadb.ClusterRev)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClustersRevs indicates an expected call of ClustersRevs.
func (mr *MockMetaDBMockRecorder) ClustersRevs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClustersRevs", reflect.TypeOf((*MockMetaDB)(nil).ClustersRevs), arg0)
}

// Commit mocks base method.
func (m *MockMetaDB) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockMetaDBMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockMetaDB)(nil).Commit), arg0)
}

// CreateCloud mocks base method.
func (m *MockMetaDB) CreateCloud(arg0 context.Context, arg1 string, arg2 metadb.Resources, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloud", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloud indicates an expected call of CreateCloud.
func (mr *MockMetaDBMockRecorder) CreateCloud(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloud", reflect.TypeOf((*MockMetaDB)(nil).CreateCloud), arg0, arg1, arg2, arg3)
}

// FolderExtIDByClusterID mocks base method.
func (m *MockMetaDB) FolderExtIDByClusterID(arg0 context.Context, arg1 string, arg2 metadb.ClusterType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderExtIDByClusterID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FolderExtIDByClusterID indicates an expected call of FolderExtIDByClusterID.
func (mr *MockMetaDBMockRecorder) FolderExtIDByClusterID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderExtIDByClusterID", reflect.TypeOf((*MockMetaDB)(nil).FolderExtIDByClusterID), arg0, arg1, arg2)
}

// GetClusterCustomRolesAtRev mocks base method.
func (m *MockMetaDB) GetClusterCustomRolesAtRev(arg0 context.Context, arg1 metadb.ClusterType, arg2 string, arg3 int64) (map[string]metadb.CustomRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterCustomRolesAtRev", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]metadb.CustomRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterCustomRolesAtRev indicates an expected call of GetClusterCustomRolesAtRev.
func (mr *MockMetaDBMockRecorder) GetClusterCustomRolesAtRev(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterCustomRolesAtRev", reflect.TypeOf((*MockMetaDB)(nil).GetClusterCustomRolesAtRev), arg0, arg1, arg2, arg3)
}

// GetHostByFQDN mocks base method.
func (m *MockMetaDB) GetHostByFQDN(arg0 context.Context, arg1 string) (metadb.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByFQDN", arg0, arg1)
	ret0, _ := ret[0].(metadb.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByFQDN indicates an expected call of GetHostByFQDN.
func (mr *MockMetaDBMockRecorder) GetHostByFQDN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByFQDN", reflect.TypeOf((*MockMetaDB)(nil).GetHostByFQDN), arg0, arg1)
}

// GetHostByVtypeID mocks base method.
func (m *MockMetaDB) GetHostByVtypeID(arg0 context.Context, arg1 string) (metadb.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByVtypeID", arg0, arg1)
	ret0, _ := ret[0].(metadb.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByVtypeID indicates an expected call of GetHostByVtypeID.
func (mr *MockMetaDBMockRecorder) GetHostByVtypeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByVtypeID", reflect.TypeOf((*MockMetaDB)(nil).GetHostByVtypeID), arg0, arg1)
}

// GetHostsByShardID mocks base method.
func (m *MockMetaDB) GetHostsByShardID(arg0 context.Context, arg1 string) ([]metadb.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsByShardID", arg0, arg1)
	ret0, _ := ret[0].([]metadb.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsByShardID indicates an expected call of GetHostsByShardID.
func (mr *MockMetaDBMockRecorder) GetHostsByShardID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsByShardID", reflect.TypeOf((*MockMetaDB)(nil).GetHostsByShardID), arg0, arg1)
}

// GetHostsBySubcid mocks base method.
func (m *MockMetaDB) GetHostsBySubcid(arg0 context.Context, arg1 string) ([]metadb.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsBySubcid", arg0, arg1)
	ret0, _ := ret[0].([]metadb.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsBySubcid indicates an expected call of GetHostsBySubcid.
func (mr *MockMetaDBMockRecorder) GetHostsBySubcid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsBySubcid", reflect.TypeOf((*MockMetaDB)(nil).GetHostsBySubcid), arg0, arg1)
}

// GetTaskTypeByAction mocks base method.
func (m *MockMetaDB) GetTaskTypeByAction(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskTypeByAction", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskTypeByAction indicates an expected call of GetTaskTypeByAction.
func (mr *MockMetaDBMockRecorder) GetTaskTypeByAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskTypeByAction", reflect.TypeOf((*MockMetaDB)(nil).GetTaskTypeByAction), arg0, arg1)
}

// IsReady mocks base method.
func (m *MockMetaDB) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockMetaDBMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockMetaDB)(nil).IsReady), arg0)
}

// LastOperationsByType mocks base method.
func (m *MockMetaDB) LastOperationsByType(arg0 context.Context, arg1 string, arg2 time.Time) ([]metadb.CidAndTimestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastOperationsByType", arg0, arg1, arg2)
	ret0, _ := ret[0].([]metadb.CidAndTimestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastOperationsByType indicates an expected call of LastOperationsByType.
func (mr *MockMetaDBMockRecorder) LastOperationsByType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastOperationsByType", reflect.TypeOf((*MockMetaDB)(nil).LastOperationsByType), arg0, arg1, arg2)
}

// OldestUnsetStartEvent mocks base method.
func (m *MockMetaDB) OldestUnsetStartEvent(arg0 context.Context) (metadb.WorkerQueueEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldestUnsetStartEvent", arg0)
	ret0, _ := ret[0].(metadb.WorkerQueueEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OldestUnsetStartEvent indicates an expected call of OldestUnsetStartEvent.
func (mr *MockMetaDBMockRecorder) OldestUnsetStartEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldestUnsetStartEvent", reflect.TypeOf((*MockMetaDB)(nil).OldestUnsetStartEvent), arg0)
}

// OnUnsentWorkerQueueDoneEvents mocks base method.
func (m *MockMetaDB) OnUnsentWorkerQueueDoneEvents(arg0 context.Context, arg1 int64, arg2 metadb.OnWorkerQueueEventsHandler) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnUnsentWorkerQueueDoneEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnUnsentWorkerQueueDoneEvents indicates an expected call of OnUnsentWorkerQueueDoneEvents.
func (mr *MockMetaDBMockRecorder) OnUnsentWorkerQueueDoneEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUnsentWorkerQueueDoneEvents", reflect.TypeOf((*MockMetaDB)(nil).OnUnsentWorkerQueueDoneEvents), arg0, arg1, arg2)
}

// OnUnsentWorkerQueueStartEvents mocks base method.
func (m *MockMetaDB) OnUnsentWorkerQueueStartEvents(arg0 context.Context, arg1 int64, arg2 metadb.OnWorkerQueueEventsHandler) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnUnsentWorkerQueueStartEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnUnsentWorkerQueueStartEvents indicates an expected call of OnUnsentWorkerQueueStartEvents.
func (mr *MockMetaDBMockRecorder) OnUnsentWorkerQueueStartEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUnsentWorkerQueueStartEvents", reflect.TypeOf((*MockMetaDB)(nil).OnUnsentWorkerQueueStartEvents), arg0, arg1, arg2)
}

// Operation mocks base method.
func (m *MockMetaDB) Operation(arg0 context.Context, arg1 string) (*metadb.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operation", arg0, arg1)
	ret0, _ := ret[0].(*metadb.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operation indicates an expected call of Operation.
func (mr *MockMetaDBMockRecorder) Operation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operation", reflect.TypeOf((*MockMetaDB)(nil).Operation), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockMetaDB) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockMetaDBMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockMetaDB)(nil).Rollback), arg0)
}

// SetCloudQuota mocks base method.
func (m *MockMetaDB) SetCloudQuota(arg0 context.Context, arg1 string, arg2 metadb.ResourcesChange, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCloudQuota", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCloudQuota indicates an expected call of SetCloudQuota.
func (mr *MockMetaDBMockRecorder) SetCloudQuota(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloudQuota", reflect.TypeOf((*MockMetaDB)(nil).SetCloudQuota), arg0, arg1, arg2, arg3)
}

// ShardByID mocks base method.
func (m *MockMetaDB) ShardByID(arg0 context.Context, arg1 string) (metadb.ShardInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardByID", arg0, arg1)
	ret0, _ := ret[0].(metadb.ShardInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardByID indicates an expected call of ShardByID.
func (mr *MockMetaDBMockRecorder) ShardByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardByID", reflect.TypeOf((*MockMetaDB)(nil).ShardByID), arg0, arg1)
}
