// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/sentry (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CaptureError mocks base method.
func (m *MockClient) CaptureError(arg0 context.Context, arg1 error, arg2 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CaptureError", arg0, arg1, arg2)
}

// CaptureError indicates an expected call of CaptureError.
func (mr *MockClientMockRecorder) CaptureError(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureError", reflect.TypeOf((*MockClient)(nil).CaptureError), arg0, arg1, arg2)
}

// CaptureErrorAndWait mocks base method.
func (m *MockClient) CaptureErrorAndWait(arg0 context.Context, arg1 error, arg2 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CaptureErrorAndWait", arg0, arg1, arg2)
}

// CaptureErrorAndWait indicates an expected call of CaptureErrorAndWait.
func (mr *MockClientMockRecorder) CaptureErrorAndWait(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureErrorAndWait", reflect.TypeOf((*MockClient)(nil).CaptureErrorAndWait), arg0, arg1, arg2)
}
