// Code generated by go-swagger; DO NOT EDIT.

package namespaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new namespaces API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for namespaces API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V2NamespacesGetNamespaces(params *V2NamespacesGetNamespacesParams, opts ...ClientOption) (*V2NamespacesGetNamespacesOK, error)

	V2NamespacesRemoveNamespace(params *V2NamespacesRemoveNamespaceParams, opts ...ClientOption) (*V2NamespacesRemoveNamespaceOK, error)

	V2NamespacesSetNamespace(params *V2NamespacesSetNamespaceParams, opts ...ClientOption) (*V2NamespacesSetNamespaceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  V2NamespacesGetNamespaces Returns namespaces matching specified `name` or `abc_service`. Glob filters can be used.
*/
func (a *Client) V2NamespacesGetNamespaces(params *V2NamespacesGetNamespacesParams, opts ...ClientOption) (*V2NamespacesGetNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2NamespacesGetNamespacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/namespaces/get_namespaces",
		Method:             "POST",
		PathPattern:        "/v2/namespaces/get_namespaces",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2NamespacesGetNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2NamespacesGetNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2NamespacesGetNamespacesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2NamespacesRemoveNamespace Removes the namespace with specified `id`.
    Will fail if it has some checks, unless `force` is used.
*/
func (a *Client) V2NamespacesRemoveNamespace(params *V2NamespacesRemoveNamespaceParams, opts ...ClientOption) (*V2NamespacesRemoveNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2NamespacesRemoveNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/namespaces/remove_namespace",
		Method:             "POST",
		PathPattern:        "/v2/namespaces/remove_namespace",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2NamespacesRemoveNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2NamespacesRemoveNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2NamespacesRemoveNamespaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2NamespacesSetNamespace Creates or updates a namespace (depending on whether `id` parameter is set).
    **Namespace renaming is not supported.**
*/
func (a *Client) V2NamespacesSetNamespace(params *V2NamespacesSetNamespaceParams, opts ...ClientOption) (*V2NamespacesSetNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2NamespacesSetNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/namespaces/set_namespace",
		Method:             "POST",
		PathPattern:        "/v2/namespaces/set_namespace",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2NamespacesSetNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2NamespacesSetNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2NamespacesSetNamespaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
