// Code generated by go-swagger; DO NOT EDIT.

package mutes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mutes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mutes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V2MutesGetMutes(params *V2MutesGetMutesParams, opts ...ClientOption) (*V2MutesGetMutesOK, error)

	V2MutesRemoveMutes(params *V2MutesRemoveMutesParams, opts ...ClientOption) (*V2MutesRemoveMutesOK, error)

	V2MutesSetMutes(params *V2MutesSetMutesParams, opts ...ClientOption) (*V2MutesSetMutesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  V2MutesGetMutes Returns list of mutes matching any of the specified `filters`.
*/
func (a *Client) V2MutesGetMutes(params *V2MutesGetMutesParams, opts ...ClientOption) (*V2MutesGetMutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2MutesGetMutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/mutes/get_mutes",
		Method:             "POST",
		PathPattern:        "/v2/mutes/get_mutes",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2MutesGetMutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2MutesGetMutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2MutesGetMutesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2MutesRemoveMutes Removes any mutes with specified `mute_ids`.
*/
func (a *Client) V2MutesRemoveMutes(params *V2MutesRemoveMutesParams, opts ...ClientOption) (*V2MutesRemoveMutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2MutesRemoveMutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/mutes/remove_mutes",
		Method:             "POST",
		PathPattern:        "/v2/mutes/remove_mutes",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2MutesRemoveMutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2MutesRemoveMutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2MutesRemoveMutesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2MutesSetMutes Creates a mute that would mute any notification matching any of the specified `filters`.
*/
func (a *Client) V2MutesSetMutes(params *V2MutesSetMutesParams, opts ...ClientOption) (*V2MutesSetMutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2MutesSetMutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/mutes/set_mutes",
		Method:             "POST",
		PathPattern:        "/v2/mutes/set_mutes",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2MutesSetMutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2MutesSetMutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2MutesSetMutesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
