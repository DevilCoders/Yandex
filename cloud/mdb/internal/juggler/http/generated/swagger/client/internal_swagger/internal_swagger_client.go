// Code generated by go-swagger; DO NOT EDIT.

package internal_swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new internal swagger API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for internal swagger API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V2AgentGetConfig(params *V2AgentGetConfigParams, opts ...ClientOption) (*V2AgentGetConfigOK, error)

	V2BookmarksGetBookmarks(params *V2BookmarksGetBookmarksParams, opts ...ClientOption) (*V2BookmarksGetBookmarksOK, error)

	V2BookmarksRemoveBookmark(params *V2BookmarksRemoveBookmarkParams, opts ...ClientOption) (*V2BookmarksRemoveBookmarkOK, error)

	V2BookmarksSetBookmark(params *V2BookmarksSetBookmarkParams, opts ...ClientOption) (*V2BookmarksSetBookmarkOK, error)

	V2ChecksGetActiveJobs(params *V2ChecksGetActiveJobsParams, opts ...ClientOption) (*V2ChecksGetActiveJobsOK, error)

	V2ChecksGetMatchingNotifyRules(params *V2ChecksGetMatchingNotifyRulesParams, opts ...ClientOption) (*V2ChecksGetMatchingNotifyRulesOK, error)

	V2NamespacesGetRulesWithoutNamespace(params *V2NamespacesGetRulesWithoutNamespaceParams, opts ...ClientOption) (*V2NamespacesGetRulesWithoutNamespaceOK, error)

	V2SuggestConvertBlinov(params *V2SuggestConvertBlinovParams, opts ...ClientOption) (*V2SuggestConvertBlinovOK, error)

	V2SuggestLogins(params *V2SuggestLoginsParams, opts ...ClientOption) (*V2SuggestLoginsOK, error)

	V2SuggestObjects(params *V2SuggestObjectsParams, opts ...ClientOption) (*V2SuggestObjectsOK, error)

	V2SuggestionsGetDowntimedUserChecks(params *V2SuggestionsGetDowntimedUserChecksParams, opts ...ClientOption) (*V2SuggestionsGetDowntimedUserChecksOK, error)

	V2SuggestionsGetInvalidUserChecks(params *V2SuggestionsGetInvalidUserChecksParams, opts ...ClientOption) (*V2SuggestionsGetInvalidUserChecksOK, error)

	V2SuggestionsGetNoDataUserChecks(params *V2SuggestionsGetNoDataUserChecksParams, opts ...ClientOption) (*V2SuggestionsGetNoDataUserChecksOK, error)

	V2SuggestionsGetNotifyRulesWithoutPredicates(params *V2SuggestionsGetNotifyRulesWithoutPredicatesParams, opts ...ClientOption) (*V2SuggestionsGetNotifyRulesWithoutPredicatesOK, error)

	V2SuggestionsGetUnreachableUserChecks(params *V2SuggestionsGetUnreachableUserChecksParams, opts ...ClientOption) (*V2SuggestionsGetUnreachableUserChecksOK, error)

	V2UserConfigGetUserConfig(params *V2UserConfigGetUserConfigParams, opts ...ClientOption) (*V2UserConfigGetUserConfigOK, error)

	V2UserConfigSetUserConfig(params *V2UserConfigSetUserConfigParams, opts ...ClientOption) (*V2UserConfigSetUserConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  V2AgentGetConfig Experimental API, subject to breakage
*/
func (a *Client) V2AgentGetConfig(params *V2AgentGetConfigParams, opts ...ClientOption) (*V2AgentGetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AgentGetConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/agent/get_config",
		Method:             "POST",
		PathPattern:        "/v2/agent/get_config",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2AgentGetConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2AgentGetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2AgentGetConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2BookmarksGetBookmarks Experimental API, subject to breakage
*/
func (a *Client) V2BookmarksGetBookmarks(params *V2BookmarksGetBookmarksParams, opts ...ClientOption) (*V2BookmarksGetBookmarksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2BookmarksGetBookmarksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/bookmarks/get_bookmarks",
		Method:             "POST",
		PathPattern:        "/v2/bookmarks/get_bookmarks",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2BookmarksGetBookmarksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2BookmarksGetBookmarksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2BookmarksGetBookmarksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2BookmarksRemoveBookmark Experimental API, subject to breakage
*/
func (a *Client) V2BookmarksRemoveBookmark(params *V2BookmarksRemoveBookmarkParams, opts ...ClientOption) (*V2BookmarksRemoveBookmarkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2BookmarksRemoveBookmarkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/bookmarks/remove_bookmark",
		Method:             "POST",
		PathPattern:        "/v2/bookmarks/remove_bookmark",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2BookmarksRemoveBookmarkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2BookmarksRemoveBookmarkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2BookmarksRemoveBookmarkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2BookmarksSetBookmark Experimental API, subject to breakage
*/
func (a *Client) V2BookmarksSetBookmark(params *V2BookmarksSetBookmarkParams, opts ...ClientOption) (*V2BookmarksSetBookmarkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2BookmarksSetBookmarkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/bookmarks/set_bookmark",
		Method:             "POST",
		PathPattern:        "/v2/bookmarks/set_bookmark",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2BookmarksSetBookmarkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2BookmarksSetBookmarkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2BookmarksSetBookmarkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2ChecksGetActiveJobs Experimental API, subject to breakage
*/
func (a *Client) V2ChecksGetActiveJobs(params *V2ChecksGetActiveJobsParams, opts ...ClientOption) (*V2ChecksGetActiveJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ChecksGetActiveJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/checks/get_active_jobs",
		Method:             "POST",
		PathPattern:        "/v2/checks/get_active_jobs",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2ChecksGetActiveJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2ChecksGetActiveJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2ChecksGetActiveJobsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2ChecksGetMatchingNotifyRules Experimental API, subject to breakage
*/
func (a *Client) V2ChecksGetMatchingNotifyRules(params *V2ChecksGetMatchingNotifyRulesParams, opts ...ClientOption) (*V2ChecksGetMatchingNotifyRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ChecksGetMatchingNotifyRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/checks/get_matching_notify_rules",
		Method:             "POST",
		PathPattern:        "/v2/checks/get_matching_notify_rules",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2ChecksGetMatchingNotifyRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2ChecksGetMatchingNotifyRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2ChecksGetMatchingNotifyRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2NamespacesGetRulesWithoutNamespace Experimental API, subject to breakage
*/
func (a *Client) V2NamespacesGetRulesWithoutNamespace(params *V2NamespacesGetRulesWithoutNamespaceParams, opts ...ClientOption) (*V2NamespacesGetRulesWithoutNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2NamespacesGetRulesWithoutNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/namespaces/get_rules_without_namespace",
		Method:             "POST",
		PathPattern:        "/v2/namespaces/get_rules_without_namespace",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2NamespacesGetRulesWithoutNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2NamespacesGetRulesWithoutNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2NamespacesGetRulesWithoutNamespaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2SuggestConvertBlinov Experimental API, subject to breakage
*/
func (a *Client) V2SuggestConvertBlinov(params *V2SuggestConvertBlinovParams, opts ...ClientOption) (*V2SuggestConvertBlinovOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SuggestConvertBlinovParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/suggest/convert_blinov",
		Method:             "POST",
		PathPattern:        "/v2/suggest/convert_blinov",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2SuggestConvertBlinovReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SuggestConvertBlinovOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2SuggestConvertBlinovDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2SuggestLogins Experimental API, subject to breakage
*/
func (a *Client) V2SuggestLogins(params *V2SuggestLoginsParams, opts ...ClientOption) (*V2SuggestLoginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SuggestLoginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/suggest/logins",
		Method:             "POST",
		PathPattern:        "/v2/suggest/logins",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2SuggestLoginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SuggestLoginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2SuggestLoginsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2SuggestObjects Experimental API, subject to breakage
*/
func (a *Client) V2SuggestObjects(params *V2SuggestObjectsParams, opts ...ClientOption) (*V2SuggestObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SuggestObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/suggest/objects",
		Method:             "POST",
		PathPattern:        "/v2/suggest/objects",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2SuggestObjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SuggestObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2SuggestObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2SuggestionsGetDowntimedUserChecks Experimental API, subject to breakage
*/
func (a *Client) V2SuggestionsGetDowntimedUserChecks(params *V2SuggestionsGetDowntimedUserChecksParams, opts ...ClientOption) (*V2SuggestionsGetDowntimedUserChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SuggestionsGetDowntimedUserChecksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/suggestions/get_downtimed_user_checks",
		Method:             "POST",
		PathPattern:        "/v2/suggestions/get_downtimed_user_checks",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2SuggestionsGetDowntimedUserChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SuggestionsGetDowntimedUserChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2SuggestionsGetDowntimedUserChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2SuggestionsGetInvalidUserChecks Experimental API, subject to breakage
*/
func (a *Client) V2SuggestionsGetInvalidUserChecks(params *V2SuggestionsGetInvalidUserChecksParams, opts ...ClientOption) (*V2SuggestionsGetInvalidUserChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SuggestionsGetInvalidUserChecksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/suggestions/get_invalid_user_checks",
		Method:             "POST",
		PathPattern:        "/v2/suggestions/get_invalid_user_checks",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2SuggestionsGetInvalidUserChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SuggestionsGetInvalidUserChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2SuggestionsGetInvalidUserChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2SuggestionsGetNoDataUserChecks Experimental API, subject to breakage
*/
func (a *Client) V2SuggestionsGetNoDataUserChecks(params *V2SuggestionsGetNoDataUserChecksParams, opts ...ClientOption) (*V2SuggestionsGetNoDataUserChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SuggestionsGetNoDataUserChecksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/suggestions/get_no_data_user_checks",
		Method:             "POST",
		PathPattern:        "/v2/suggestions/get_no_data_user_checks",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2SuggestionsGetNoDataUserChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SuggestionsGetNoDataUserChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2SuggestionsGetNoDataUserChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2SuggestionsGetNotifyRulesWithoutPredicates Experimental API, subject to breakage
*/
func (a *Client) V2SuggestionsGetNotifyRulesWithoutPredicates(params *V2SuggestionsGetNotifyRulesWithoutPredicatesParams, opts ...ClientOption) (*V2SuggestionsGetNotifyRulesWithoutPredicatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SuggestionsGetNotifyRulesWithoutPredicatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/suggestions/get_notify_rules_without_predicates",
		Method:             "POST",
		PathPattern:        "/v2/suggestions/get_notify_rules_without_predicates",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2SuggestionsGetNotifyRulesWithoutPredicatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SuggestionsGetNotifyRulesWithoutPredicatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2SuggestionsGetNotifyRulesWithoutPredicatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2SuggestionsGetUnreachableUserChecks Experimental API, subject to breakage
*/
func (a *Client) V2SuggestionsGetUnreachableUserChecks(params *V2SuggestionsGetUnreachableUserChecksParams, opts ...ClientOption) (*V2SuggestionsGetUnreachableUserChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SuggestionsGetUnreachableUserChecksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/suggestions/get_unreachable_user_checks",
		Method:             "POST",
		PathPattern:        "/v2/suggestions/get_unreachable_user_checks",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2SuggestionsGetUnreachableUserChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SuggestionsGetUnreachableUserChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2SuggestionsGetUnreachableUserChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2UserConfigGetUserConfig Experimental API, subject to breakage
*/
func (a *Client) V2UserConfigGetUserConfig(params *V2UserConfigGetUserConfigParams, opts ...ClientOption) (*V2UserConfigGetUserConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2UserConfigGetUserConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/user_config/get_user_config",
		Method:             "POST",
		PathPattern:        "/v2/user_config/get_user_config",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2UserConfigGetUserConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2UserConfigGetUserConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2UserConfigGetUserConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2UserConfigSetUserConfig Experimental API, subject to breakage
*/
func (a *Client) V2UserConfigSetUserConfig(params *V2UserConfigSetUserConfigParams, opts ...ClientOption) (*V2UserConfigSetUserConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2UserConfigSetUserConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/user_config/set_user_config",
		Method:             "POST",
		PathPattern:        "/v2/user_config/set_user_config",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2UserConfigSetUserConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2UserConfigSetUserConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2UserConfigSetUserConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
