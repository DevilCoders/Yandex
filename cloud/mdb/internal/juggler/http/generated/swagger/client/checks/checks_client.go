// Code generated by go-swagger; DO NOT EDIT.

package checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new checks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for checks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V2ChecksGetChecksConfig(params *V2ChecksGetChecksConfigParams, opts ...ClientOption) (*V2ChecksGetChecksConfigOK, error)

	V2ChecksGetChecksCount(params *V2ChecksGetChecksCountParams, opts ...ClientOption) (*V2ChecksGetChecksCountOK, error)

	V2ChecksGetChecksState(params *V2ChecksGetChecksStateParams, opts ...ClientOption) (*V2ChecksGetChecksStateOK, error)

	V2HistoryGetCheckHistory(params *V2HistoryGetCheckHistoryParams, opts ...ClientOption) (*V2HistoryGetCheckHistoryOK, error)

	V2HistoryGetCheckHistoryRollups(params *V2HistoryGetCheckHistoryRollupsParams, opts ...ClientOption) (*V2HistoryGetCheckHistoryRollupsOK, error)

	V2HistoryGetCheckSnapshot(params *V2HistoryGetCheckSnapshotParams, opts ...ClientOption) (*V2HistoryGetCheckSnapshotOK, error)

	V2NamespacesMigrateChecks(params *V2NamespacesMigrateChecksParams, opts ...ClientOption) (*V2NamespacesMigrateChecksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  V2ChecksGetChecksConfig Returns checks matching any of the specified `filters`
*/
func (a *Client) V2ChecksGetChecksConfig(params *V2ChecksGetChecksConfigParams, opts ...ClientOption) (*V2ChecksGetChecksConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ChecksGetChecksConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/checks/get_checks_config",
		Method:             "POST",
		PathPattern:        "/v2/checks/get_checks_config",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2ChecksGetChecksConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2ChecksGetChecksConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2ChecksGetChecksConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2ChecksGetChecksCount Returns the number of checks matching any of the specified `filters`
*/
func (a *Client) V2ChecksGetChecksCount(params *V2ChecksGetChecksCountParams, opts ...ClientOption) (*V2ChecksGetChecksCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ChecksGetChecksCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/checks/get_checks_count",
		Method:             "POST",
		PathPattern:        "/v2/checks/get_checks_count",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2ChecksGetChecksCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2ChecksGetChecksCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2ChecksGetChecksCountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2ChecksGetChecksState Returns state of checks matching any of the specified `filters`.
    **Status filter is applied only to the first 10000 matching checks, so the result might be incorrect for very broad selectors.**

*/
func (a *Client) V2ChecksGetChecksState(params *V2ChecksGetChecksStateParams, opts ...ClientOption) (*V2ChecksGetChecksStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ChecksGetChecksStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/checks/get_checks_state",
		Method:             "POST",
		PathPattern:        "/v2/checks/get_checks_state",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2ChecksGetChecksStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2ChecksGetChecksStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2ChecksGetChecksStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2HistoryGetCheckHistory Experimental API, subject to breakage
*/
func (a *Client) V2HistoryGetCheckHistory(params *V2HistoryGetCheckHistoryParams, opts ...ClientOption) (*V2HistoryGetCheckHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2HistoryGetCheckHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/history/get_check_history",
		Method:             "POST",
		PathPattern:        "/v2/history/get_check_history",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2HistoryGetCheckHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2HistoryGetCheckHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2HistoryGetCheckHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2HistoryGetCheckHistoryRollups Experimental API, subject to breakage
*/
func (a *Client) V2HistoryGetCheckHistoryRollups(params *V2HistoryGetCheckHistoryRollupsParams, opts ...ClientOption) (*V2HistoryGetCheckHistoryRollupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2HistoryGetCheckHistoryRollupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/history/get_check_history_rollups",
		Method:             "POST",
		PathPattern:        "/v2/history/get_check_history_rollups",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2HistoryGetCheckHistoryRollupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2HistoryGetCheckHistoryRollupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2HistoryGetCheckHistoryRollupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2HistoryGetCheckSnapshot Experimental API, subject to breakage
*/
func (a *Client) V2HistoryGetCheckSnapshot(params *V2HistoryGetCheckSnapshotParams, opts ...ClientOption) (*V2HistoryGetCheckSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2HistoryGetCheckSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/history/get_check_snapshot",
		Method:             "POST",
		PathPattern:        "/v2/history/get_check_snapshot",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2HistoryGetCheckSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2HistoryGetCheckSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2HistoryGetCheckSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  V2NamespacesMigrateChecks Migrates all checks matched by `filters` to specified `namespace`.
*/
func (a *Client) V2NamespacesMigrateChecks(params *V2NamespacesMigrateChecksParams, opts ...ClientOption) (*V2NamespacesMigrateChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2NamespacesMigrateChecksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "/v2/namespaces/migrate_checks",
		Method:             "POST",
		PathPattern:        "/v2/namespaces/migrate_checks",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &V2NamespacesMigrateChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2NamespacesMigrateChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*V2NamespacesMigrateChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
