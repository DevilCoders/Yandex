// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon v2 checks get active jobs o k body digests items value common
//
// swagger:model v2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon
type V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon struct {

	// Dns
	DNS *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonDNS `json:"Dns,omitempty"`

	// graphite
	Graphite *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonGraphite `json:"Graphite,omitempty"`

	// Http
	HTTP *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTP `json:"Http,omitempty"`

	// Https
	HTTPS *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPS `json:"Https,omitempty"`

	// Https cert
	HTTPSCert *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSCert `json:"HttpsCert,omitempty"`

	// icmp ping
	IcmpPing *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonIcmpPing `json:"IcmpPing,omitempty"`

	// mail
	Mail *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail `json:"Mail,omitempty"`

	// nanny deploy status
	NannyDeployStatus *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonNannyDeployStatus `json:"NannyDeployStatus,omitempty"`

	// netmon
	Netmon *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonNetmon `json:"Netmon,omitempty"`

	// Ssh
	SSH *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonSSH `json:"Ssh,omitempty"`

	// Tcp chat
	TCPChat *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonTCPChat `json:"TcpChat,omitempty"`

	// type
	// Enum: [NoActive Meta IcmpPing TcpChat Ssh Smtp Imap Http Https X509Cert HttpsCert Dns Graphite NannyDeployStatus Netmon]
	Type interface{} `json:"Type,omitempty"`

	// x509 cert
	X509Cert *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonX509Cert `json:"X509Cert,omitempty"`
}

// Validate validates this v2 checks get active jobs o k body digests items value common
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPSCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcmpPing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNannyDeployStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetmon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCPChat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateX509Cert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateDNS(formats strfmt.Registry) error {
	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	if m.DNS != nil {
		if err := m.DNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dns")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateGraphite(formats strfmt.Registry) error {
	if swag.IsZero(m.Graphite) { // not required
		return nil
	}

	if m.Graphite != nil {
		if err := m.Graphite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Graphite")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateHTTP(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTP) { // not required
		return nil
	}

	if m.HTTP != nil {
		if err := m.HTTP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Http")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateHTTPS(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPS) { // not required
		return nil
	}

	if m.HTTPS != nil {
		if err := m.HTTPS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Https")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateHTTPSCert(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPSCert) { // not required
		return nil
	}

	if m.HTTPSCert != nil {
		if err := m.HTTPSCert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HttpsCert")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateIcmpPing(formats strfmt.Registry) error {
	if swag.IsZero(m.IcmpPing) { // not required
		return nil
	}

	if m.IcmpPing != nil {
		if err := m.IcmpPing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IcmpPing")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateMail(formats strfmt.Registry) error {
	if swag.IsZero(m.Mail) { // not required
		return nil
	}

	if m.Mail != nil {
		if err := m.Mail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Mail")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateNannyDeployStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.NannyDeployStatus) { // not required
		return nil
	}

	if m.NannyDeployStatus != nil {
		if err := m.NannyDeployStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NannyDeployStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateNetmon(formats strfmt.Registry) error {
	if swag.IsZero(m.Netmon) { // not required
		return nil
	}

	if m.Netmon != nil {
		if err := m.Netmon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Netmon")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateSSH(formats strfmt.Registry) error {
	if swag.IsZero(m.SSH) { // not required
		return nil
	}

	if m.SSH != nil {
		if err := m.SSH.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Ssh")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateTCPChat(formats strfmt.Registry) error {
	if swag.IsZero(m.TCPChat) { // not required
		return nil
	}

	if m.TCPChat != nil {
		if err := m.TCPChat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TcpChat")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) validateX509Cert(formats strfmt.Registry) error {
	if swag.IsZero(m.X509Cert) { // not required
		return nil
	}

	if m.X509Cert != nil {
		if err := m.X509Cert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("X509Cert")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 checks get active jobs o k body digests items value common based on the context it is used
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGraphite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTPS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTPSCert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIcmpPing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNannyDeployStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetmon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSH(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTCPChat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateX509Cert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateDNS(ctx context.Context, formats strfmt.Registry) error {

	if m.DNS != nil {
		if err := m.DNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dns")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateGraphite(ctx context.Context, formats strfmt.Registry) error {

	if m.Graphite != nil {
		if err := m.Graphite.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Graphite")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateHTTP(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTP != nil {
		if err := m.HTTP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Http")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateHTTPS(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPS != nil {
		if err := m.HTTPS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Https")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateHTTPSCert(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPSCert != nil {
		if err := m.HTTPSCert.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HttpsCert")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateIcmpPing(ctx context.Context, formats strfmt.Registry) error {

	if m.IcmpPing != nil {
		if err := m.IcmpPing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IcmpPing")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateMail(ctx context.Context, formats strfmt.Registry) error {

	if m.Mail != nil {
		if err := m.Mail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Mail")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateNannyDeployStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.NannyDeployStatus != nil {
		if err := m.NannyDeployStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NannyDeployStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateNetmon(ctx context.Context, formats strfmt.Registry) error {

	if m.Netmon != nil {
		if err := m.Netmon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Netmon")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateSSH(ctx context.Context, formats strfmt.Registry) error {

	if m.SSH != nil {
		if err := m.SSH.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Ssh")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateTCPChat(ctx context.Context, formats strfmt.Registry) error {

	if m.TCPChat != nil {
		if err := m.TCPChat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TcpChat")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) contextValidateX509Cert(ctx context.Context, formats strfmt.Registry) error {

	if m.X509Cert != nil {
		if err := m.X509Cert.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("X509Cert")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon) UnmarshalBinary(b []byte) error {
	var res V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
