// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems v2 escalations get escalations log o k body escalations items log items
//
// swagger:model v2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems
type V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems struct {

	// abc duty login
	AbcDutyLogin *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItemsAbcDutyLogin `json:"abc_duty_login,omitempty"`

	// calls
	Calls []*V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItemsCallsItems `json:"calls"`

	// iteration
	Iteration int64 `json:"iteration,omitempty"`

	// simple login
	SimpleLogin string `json:"simple_login,omitempty"`

	// skip reason
	// Enum: [NONE GAPS BAD_PHONE DISMISSED REJECTED MUTED NO_ABC_DUTY]
	SkipReason interface{} `json:"skip_reason,omitempty"`
}

// Validate validates this v2 escalations get escalations log o k body escalations items log items
func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbcDutyLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems) validateAbcDutyLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.AbcDutyLogin) { // not required
		return nil
	}

	if m.AbcDutyLogin != nil {
		if err := m.AbcDutyLogin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abc_duty_login")
			}
			return err
		}
	}

	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems) validateCalls(formats strfmt.Registry) error {
	if swag.IsZero(m.Calls) { // not required
		return nil
	}

	for i := 0; i < len(m.Calls); i++ {
		if swag.IsZero(m.Calls[i]) { // not required
			continue
		}

		if m.Calls[i] != nil {
			if err := m.Calls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("calls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v2 escalations get escalations log o k body escalations items log items based on the context it is used
func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbcDutyLogin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems) contextValidateAbcDutyLogin(ctx context.Context, formats strfmt.Registry) error {

	if m.AbcDutyLogin != nil {
		if err := m.AbcDutyLogin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abc_duty_login")
			}
			return err
		}
	}

	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems) contextValidateCalls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Calls); i++ {

		if m.Calls[i] != nil {
			if err := m.Calls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("calls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems) UnmarshalBinary(b []byte) error {
	var res V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
