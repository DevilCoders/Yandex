// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2AgentGetConfigOKBody v2 agent get config o k body
//
// swagger:model v2AgentGetConfigOKBody
type V2AgentGetConfigOKBody struct {

	// bundles
	Bundles []*V2AgentGetConfigOKBodyBundlesItems `json:"bundles"`

	// checks config
	ChecksConfig []*V2AgentGetConfigOKBodyChecksConfigItems `json:"checks_config"`

	// limits
	Limits []*V2AgentGetConfigOKBodyLimitsItems `json:"limits"`

	// meta
	Meta *V2AgentGetConfigOKBodyMeta `json:"meta,omitempty"`

	// targets
	Targets []*V2AgentGetConfigOKBodyTargetsItems `json:"targets"`
}

// Validate validates this v2 agent get config o k body
func (m *V2AgentGetConfigOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChecksConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2AgentGetConfigOKBody) validateBundles(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundles) { // not required
		return nil
	}

	for i := 0; i < len(m.Bundles); i++ {
		if swag.IsZero(m.Bundles[i]) { // not required
			continue
		}

		if m.Bundles[i] != nil {
			if err := m.Bundles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2AgentGetConfigOKBody) validateChecksConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ChecksConfig) { // not required
		return nil
	}

	for i := 0; i < len(m.ChecksConfig); i++ {
		if swag.IsZero(m.ChecksConfig[i]) { // not required
			continue
		}

		if m.ChecksConfig[i] != nil {
			if err := m.ChecksConfig[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks_config" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2AgentGetConfigOKBody) validateLimits(formats strfmt.Registry) error {
	if swag.IsZero(m.Limits) { // not required
		return nil
	}

	for i := 0; i < len(m.Limits); i++ {
		if swag.IsZero(m.Limits[i]) { // not required
			continue
		}

		if m.Limits[i] != nil {
			if err := m.Limits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("limits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2AgentGetConfigOKBody) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *V2AgentGetConfigOKBody) validateTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.Targets) { // not required
		return nil
	}

	for i := 0; i < len(m.Targets); i++ {
		if swag.IsZero(m.Targets[i]) { // not required
			continue
		}

		if m.Targets[i] != nil {
			if err := m.Targets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v2 agent get config o k body based on the context it is used
func (m *V2AgentGetConfigOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChecksConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2AgentGetConfigOKBody) contextValidateBundles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bundles); i++ {

		if m.Bundles[i] != nil {
			if err := m.Bundles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2AgentGetConfigOKBody) contextValidateChecksConfig(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChecksConfig); i++ {

		if m.ChecksConfig[i] != nil {
			if err := m.ChecksConfig[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks_config" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2AgentGetConfigOKBody) contextValidateLimits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Limits); i++ {

		if m.Limits[i] != nil {
			if err := m.Limits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("limits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2AgentGetConfigOKBody) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *V2AgentGetConfigOKBody) contextValidateTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Targets); i++ {

		if m.Targets[i] != nil {
			if err := m.Targets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2AgentGetConfigOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2AgentGetConfigOKBody) UnmarshalBinary(b []byte) error {
	var res V2AgentGetConfigOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
