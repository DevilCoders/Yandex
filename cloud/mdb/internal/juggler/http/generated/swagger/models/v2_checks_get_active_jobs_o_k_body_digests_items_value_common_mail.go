// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail v2 checks get active jobs o k body digests items value common mail
//
// swagger:model v2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail
type V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail struct {

	// allow self signed
	AllowSelfSigned bool `json:"AllowSelfSigned,omitempty"`

	// check cert
	CheckCert bool `json:"CheckCert,omitempty"`

	// crit expire
	CritExpire int64 `json:"CritExpire,omitempty"`

	// port
	Port int64 `json:"Port,omitempty"`

	// ssl mode
	// Enum: [Empty Ssl StartTls]
	SslMode interface{} `json:"SslMode,omitempty"`

	// target config
	TargetConfig *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMailTargetConfig `json:"TargetConfig,omitempty"`

	// thresholds
	Thresholds *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMailThresholds `json:"Thresholds,omitempty"`

	// timeout
	Timeout int64 `json:"Timeout,omitempty"`

	// validate hostname
	ValidateHostname bool `json:"ValidateHostname,omitempty"`

	// warn expire
	WarnExpire int64 `json:"WarnExpire,omitempty"`
}

// Validate validates this v2 checks get active jobs o k body digests items value common mail
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail) validateTargetConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetConfig) { // not required
		return nil
	}

	if m.TargetConfig != nil {
		if err := m.TargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail) validateThresholds(formats strfmt.Registry) error {
	if swag.IsZero(m.Thresholds) { // not required
		return nil
	}

	if m.Thresholds != nil {
		if err := m.Thresholds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Thresholds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 checks get active jobs o k body digests items value common mail based on the context it is used
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail) contextValidateTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetConfig != nil {
		if err := m.TargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail) contextValidateThresholds(ctx context.Context, formats strfmt.Registry) error {

	if m.Thresholds != nil {
		if err := m.Thresholds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Thresholds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail) UnmarshalBinary(b []byte) error {
	var res V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonMail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
