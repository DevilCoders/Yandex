// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions v2 checks get active jobs o k body digests items value common Https base Http options
//
// swagger:model v2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHttpsBaseHttpOptions
type V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions struct {

	// always show body
	AlwaysShowBody bool `json:"AlwaysShowBody,omitempty"`

	// expect gzip
	ExpectGzip bool `json:"ExpectGzip,omitempty"`

	// headers
	Headers []*V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptionsHeadersItems `json:"Headers"`

	// ok codes
	OkCodes []int64 `json:"OkCodes"`

	// path
	Path string `json:"Path,omitempty"`

	// port
	Port int64 `json:"Port,omitempty"`

	// regexp
	Regexp string `json:"Regexp,omitempty"`

	// substring
	Substring string `json:"Substring,omitempty"`

	// target config
	TargetConfig *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptionsTargetConfig `json:"TargetConfig,omitempty"`

	// thresholds
	Thresholds *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptionsThresholds `json:"Thresholds,omitempty"`

	// timeout
	Timeout int64 `json:"Timeout,omitempty"`

	// warn codes
	WarnCodes []int64 `json:"WarnCodes"`
}

// Validate validates this v2 checks get active jobs o k body digests items value common Https base Http options
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) validateHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	for i := 0; i < len(m.Headers); i++ {
		if swag.IsZero(m.Headers[i]) { // not required
			continue
		}

		if m.Headers[i] != nil {
			if err := m.Headers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) validateTargetConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetConfig) { // not required
		return nil
	}

	if m.TargetConfig != nil {
		if err := m.TargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) validateThresholds(formats strfmt.Registry) error {
	if swag.IsZero(m.Thresholds) { // not required
		return nil
	}

	if m.Thresholds != nil {
		if err := m.Thresholds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Thresholds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 checks get active jobs o k body digests items value common Https base Http options based on the context it is used
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) contextValidateHeaders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Headers); i++ {

		if m.Headers[i] != nil {
			if err := m.Headers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) contextValidateTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetConfig != nil {
		if err := m.TargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) contextValidateThresholds(ctx context.Context, formats strfmt.Registry) error {

	if m.Thresholds != nil {
		if err := m.Thresholds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Thresholds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions) UnmarshalBinary(b []byte) error {
	var res V2ChecksGetActiveJobsOKBodyDigestsItemsValueCommonHTTPSBaseHTTPOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
