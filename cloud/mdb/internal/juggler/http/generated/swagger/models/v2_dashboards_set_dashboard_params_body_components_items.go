// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2DashboardsSetDashboardParamsBodyComponentsItems v2 dashboards set dashboard params body components items
//
// swagger:model v2DashboardsSetDashboardParamsBodyComponentsItems
type V2DashboardsSetDashboardParamsBodyComponentsItems struct {

	// aggregate checks options
	AggregateChecksOptions *V2DashboardsSetDashboardParamsBodyComponentsItemsAggregateChecksOptions `json:"aggregate_checks_options,omitempty"`

	// col
	Col int64 `json:"col,omitempty"`

	// colspan
	Colspan int64 `json:"colspan,omitempty"`

	// component type
	// Enum: [AGGREGATE_CHECKS RAW_EVENTS DOWNTIMES DOWNTIME_BUTTON NOTIFICATIONS IFRAME ESCALATIONS MUTES]
	ComponentType interface{} `json:"component_type,omitempty"`

	// downtime button options
	DowntimeButtonOptions *V2DashboardsSetDashboardParamsBodyComponentsItemsDowntimeButtonOptions `json:"downtime_button_options,omitempty"`

	// downtimes options
	DowntimesOptions *V2DashboardsSetDashboardParamsBodyComponentsItemsDowntimesOptions `json:"downtimes_options,omitempty"`

	// elements in row
	ElementsInRow int64 `json:"elements_in_row,omitempty"`

	// escalations options
	EscalationsOptions *V2DashboardsSetDashboardParamsBodyComponentsItemsEscalationsOptions `json:"escalations_options,omitempty"`

	// height percent
	HeightPercent int64 `json:"height_percent,omitempty"`

	// height px
	HeightPx int64 `json:"height_px,omitempty"`

	// iframe options
	IframeOptions *V2DashboardsSetDashboardParamsBodyComponentsItemsIframeOptions `json:"iframe_options,omitempty"`

	// links
	Links []*V2DashboardsSetDashboardParamsBodyComponentsItemsLinksItems `json:"links"`

	// mutes options
	MutesOptions *V2DashboardsSetDashboardParamsBodyComponentsItemsMutesOptions `json:"mutes_options,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notifications options
	NotificationsOptions *V2DashboardsSetDashboardParamsBodyComponentsItemsNotificationsOptions `json:"notifications_options,omitempty"`

	// raw events options
	RawEventsOptions *V2DashboardsSetDashboardParamsBodyComponentsItemsRawEventsOptions `json:"raw_events_options,omitempty"`

	// row
	Row int64 `json:"row,omitempty"`

	// rowspan
	Rowspan int64 `json:"rowspan,omitempty"`

	// view type
	// Enum: [COMPACT DETAILED]
	ViewType interface{} `json:"view_type,omitempty"`

	// width percent
	WidthPercent int64 `json:"width_percent,omitempty"`

	// width px
	WidthPx int64 `json:"width_px,omitempty"`
}

// Validate validates this v2 dashboards set dashboard params body components items
func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregateChecksOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDowntimeButtonOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDowntimesOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEscalationsOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIframeOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutesOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationsOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawEventsOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateAggregateChecksOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregateChecksOptions) { // not required
		return nil
	}

	if m.AggregateChecksOptions != nil {
		if err := m.AggregateChecksOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregate_checks_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateDowntimeButtonOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DowntimeButtonOptions) { // not required
		return nil
	}

	if m.DowntimeButtonOptions != nil {
		if err := m.DowntimeButtonOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downtime_button_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateDowntimesOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DowntimesOptions) { // not required
		return nil
	}

	if m.DowntimesOptions != nil {
		if err := m.DowntimesOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downtimes_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateEscalationsOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.EscalationsOptions) { // not required
		return nil
	}

	if m.EscalationsOptions != nil {
		if err := m.EscalationsOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalations_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateIframeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.IframeOptions) { // not required
		return nil
	}

	if m.IframeOptions != nil {
		if err := m.IframeOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iframe_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateMutesOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.MutesOptions) { // not required
		return nil
	}

	if m.MutesOptions != nil {
		if err := m.MutesOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutes_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateNotificationsOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationsOptions) { // not required
		return nil
	}

	if m.NotificationsOptions != nil {
		if err := m.NotificationsOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) validateRawEventsOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.RawEventsOptions) { // not required
		return nil
	}

	if m.RawEventsOptions != nil {
		if err := m.RawEventsOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw_events_options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 dashboards set dashboard params body components items based on the context it is used
func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregateChecksOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDowntimeButtonOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDowntimesOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEscalationsOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIframeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMutesOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotificationsOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRawEventsOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateAggregateChecksOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AggregateChecksOptions != nil {
		if err := m.AggregateChecksOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregate_checks_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateDowntimeButtonOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.DowntimeButtonOptions != nil {
		if err := m.DowntimeButtonOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downtime_button_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateDowntimesOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.DowntimesOptions != nil {
		if err := m.DowntimesOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downtimes_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateEscalationsOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.EscalationsOptions != nil {
		if err := m.EscalationsOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalations_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateIframeOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.IframeOptions != nil {
		if err := m.IframeOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iframe_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {
			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateMutesOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.MutesOptions != nil {
		if err := m.MutesOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutes_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateNotificationsOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.NotificationsOptions != nil {
		if err := m.NotificationsOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications_options")
			}
			return err
		}
	}

	return nil
}

func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) contextValidateRawEventsOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.RawEventsOptions != nil {
		if err := m.RawEventsOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw_events_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2DashboardsSetDashboardParamsBodyComponentsItems) UnmarshalBinary(b []byte) error {
	var res V2DashboardsSetDashboardParamsBodyComponentsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
