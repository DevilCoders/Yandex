// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2ChecksGetChecksStateOKBodyItemsItems v2 checks get checks state o k body items items
//
// swagger:model v2ChecksGetChecksStateOKBodyItemsItems
type V2ChecksGetChecksStateOKBodyItemsItems struct {

	// aggregation time
	AggregationTime float64 `json:"aggregation_time,omitempty"`

	// change time
	ChangeTime float64 `json:"change_time,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// downtime ids
	DowntimeIds []string `json:"downtime_ids"`

	// host
	Host string `json:"host,omitempty"`

	// meta
	Meta string `json:"meta,omitempty"`

	// mutes
	Mutes []*V2ChecksGetChecksStateOKBodyItemsItemsMutesItems `json:"mutes"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// state kind
	// Enum: [ACTUAL INVALID FLAPPING REWRITTEN_BY_AGGREGATOR CHILD_GROUP_INVALID AGGREGATOR_SKIP DOWNTIME_SKIP DOWNTIME_FORCE_OK UNREACH_SKIP UNREACH_FORCE_OK NO_DATA_SKIP NO_DATA_FORCE_OK NO_DATA_FORCE_CRIT NO_DATA_FORCE_WARN RECENT_EVENTS_FORCE_CRIT]
	StateKind interface{} `json:"state_kind,omitempty"`

	// status
	// Enum: [OK WARN CRIT INFO]
	Status interface{} `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this v2 checks get checks state o k body items items
func (m *V2ChecksGetChecksStateOKBodyItemsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetChecksStateOKBodyItemsItems) validateMutes(formats strfmt.Registry) error {
	if swag.IsZero(m.Mutes) { // not required
		return nil
	}

	for i := 0; i < len(m.Mutes); i++ {
		if swag.IsZero(m.Mutes[i]) { // not required
			continue
		}

		if m.Mutes[i] != nil {
			if err := m.Mutes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mutes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v2 checks get checks state o k body items items based on the context it is used
func (m *V2ChecksGetChecksStateOKBodyItemsItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetChecksStateOKBodyItemsItems) contextValidateMutes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mutes); i++ {

		if m.Mutes[i] != nil {
			if err := m.Mutes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mutes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2ChecksGetChecksStateOKBodyItemsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ChecksGetChecksStateOKBodyItemsItems) UnmarshalBinary(b []byte) error {
	var res V2ChecksGetChecksStateOKBodyItemsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
