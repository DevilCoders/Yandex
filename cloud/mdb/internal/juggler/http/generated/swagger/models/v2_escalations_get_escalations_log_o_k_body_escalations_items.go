// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2EscalationsGetEscalationsLogOKBodyEscalationsItems v2 escalations get escalations log o k body escalations items
//
// swagger:model v2EscalationsGetEscalationsLogOKBodyEscalationsItems
type V2EscalationsGetEscalationsLogOKBodyEscalationsItems struct {

	// end reason
	// Enum: [NONE SCRIPT_ENDED NOT_ACTUAL_REASON USER_STOPPED]
	EndReason interface{} `json:"end_reason,omitempty"`

	// escalation id
	EscalationID string `json:"escalation_id,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// iteration
	Iteration int64 `json:"iteration,omitempty"`

	// log
	Log []*V2EscalationsGetEscalationsLogOKBodyEscalationsItemsLogItems `json:"log"`

	// plan
	Plan []*V2EscalationsGetEscalationsLogOKBodyEscalationsItemsPlanItems `json:"plan"`

	// repeat
	Repeat int64 `json:"repeat,omitempty"`

	// restart reason
	// Enum: [NONE_RESTART_REASON EVENT_RESTART_REASON RESTART_AFTER_OPTION_RESTART_REASON]
	RestartReason interface{} `json:"restart_reason,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// stage
	// Enum: [RUNNING STOPPED NOT_ACTUAL]
	Stage interface{} `json:"stage,omitempty"`

	// start time
	StartTime float64 `json:"start_time,omitempty"`

	// stopped
	Stopped *V2EscalationsGetEscalationsLogOKBodyEscalationsItemsStopped `json:"stopped,omitempty"`
}

// Validate validates this v2 escalations get escalations log o k body escalations items
func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopped(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) validateLog(formats strfmt.Registry) error {
	if swag.IsZero(m.Log) { // not required
		return nil
	}

	for i := 0; i < len(m.Log); i++ {
		if swag.IsZero(m.Log[i]) { // not required
			continue
		}

		if m.Log[i] != nil {
			if err := m.Log[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("log" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) validatePlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	for i := 0; i < len(m.Plan); i++ {
		if swag.IsZero(m.Plan[i]) { // not required
			continue
		}

		if m.Plan[i] != nil {
			if err := m.Plan[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plan" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) validateStopped(formats strfmt.Registry) error {
	if swag.IsZero(m.Stopped) { // not required
		return nil
	}

	if m.Stopped != nil {
		if err := m.Stopped.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopped")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 escalations get escalations log o k body escalations items based on the context it is used
func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopped(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) contextValidateLog(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Log); i++ {

		if m.Log[i] != nil {
			if err := m.Log[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("log" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plan); i++ {

		if m.Plan[i] != nil {
			if err := m.Plan[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plan" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) contextValidateStopped(ctx context.Context, formats strfmt.Registry) error {

	if m.Stopped != nil {
		if err := m.Stopped.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopped")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2EscalationsGetEscalationsLogOKBodyEscalationsItems) UnmarshalBinary(b []byte) error {
	var res V2EscalationsGetEscalationsLogOKBodyEscalationsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
