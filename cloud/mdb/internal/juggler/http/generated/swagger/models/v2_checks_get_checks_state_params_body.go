// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2ChecksGetChecksStateParamsBody v2 checks get checks state params body
//
// swagger:model v2ChecksGetChecksStateParamsBody
type V2ChecksGetChecksStateParamsBody struct {

	// filters
	Filters []*V2ChecksGetChecksStateParamsBodyFiltersItems `json:"filters"`

	// include mutes
	IncludeMutes bool `json:"include_mutes,omitempty"`

	// limit
	Limit int64 `json:"limit,omitempty"`

	// sort
	Sort *V2ChecksGetChecksStateParamsBodySort `json:"sort,omitempty"`

	// statuses
	Statuses []interface{} `json:"statuses"`
}

// Validate validates this v2 checks get checks state params body
func (m *V2ChecksGetChecksStateParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatuses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetChecksStateParamsBody) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	for i := 0; i < len(m.Filters); i++ {
		if swag.IsZero(m.Filters[i]) { // not required
			continue
		}

		if m.Filters[i] != nil {
			if err := m.Filters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2ChecksGetChecksStateParamsBody) validateSort(formats strfmt.Registry) error {
	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	if m.Sort != nil {
		if err := m.Sort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sort")
			}
			return err
		}
	}

	return nil
}

var v2ChecksGetChecksStateParamsBodyStatusesItemsEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["OK","WARN","CRIT","INFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2ChecksGetChecksStateParamsBodyStatusesItemsEnum = append(v2ChecksGetChecksStateParamsBodyStatusesItemsEnum, v)
	}
}

func (m *V2ChecksGetChecksStateParamsBody) validateStatusesItemsEnum(path, location string, value interface{}) error {
	if err := validate.EnumCase(path, location, value, v2ChecksGetChecksStateParamsBodyStatusesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V2ChecksGetChecksStateParamsBody) validateStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.Statuses) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this v2 checks get checks state params body based on the context it is used
func (m *V2ChecksGetChecksStateParamsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ChecksGetChecksStateParamsBody) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Filters); i++ {

		if m.Filters[i] != nil {
			if err := m.Filters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2ChecksGetChecksStateParamsBody) contextValidateSort(ctx context.Context, formats strfmt.Registry) error {

	if m.Sort != nil {
		if err := m.Sort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sort")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2ChecksGetChecksStateParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ChecksGetChecksStateParamsBody) UnmarshalBinary(b []byte) error {
	var res V2ChecksGetChecksStateParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
