// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/juggler (interfaces: API)

// Package mocks is a generated GoMock package.
package mocks

import (
	juggler "a.yandex-team.ru/cloud/mdb/internal/juggler"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetChecksState mocks base method.
func (m *MockAPI) GetChecksState(arg0 context.Context, arg1, arg2 string) ([]juggler.CheckState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecksState", arg0, arg1, arg2)
	ret0, _ := ret[0].([]juggler.CheckState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecksState indicates an expected call of GetChecksState.
func (mr *MockAPIMockRecorder) GetChecksState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecksState", reflect.TypeOf((*MockAPI)(nil).GetChecksState), arg0, arg1, arg2)
}

// GetDowntimes mocks base method.
func (m *MockAPI) GetDowntimes(arg0 context.Context, arg1 juggler.Downtime) ([]juggler.Downtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDowntimes", arg0, arg1)
	ret0, _ := ret[0].([]juggler.Downtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDowntimes indicates an expected call of GetDowntimes.
func (mr *MockAPIMockRecorder) GetDowntimes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDowntimes", reflect.TypeOf((*MockAPI)(nil).GetDowntimes), arg0, arg1)
}

// RawEvents mocks base method.
func (m *MockAPI) RawEvents(arg0 context.Context, arg1, arg2 []string) ([]juggler.RawEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]juggler.RawEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawEvents indicates an expected call of RawEvents.
func (mr *MockAPIMockRecorder) RawEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawEvents", reflect.TypeOf((*MockAPI)(nil).RawEvents), arg0, arg1, arg2)
}

// SetDowntimes mocks base method.
func (m *MockAPI) SetDowntimes(arg0 context.Context, arg1 juggler.Downtime) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDowntimes", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDowntimes indicates an expected call of SetDowntimes.
func (mr *MockAPIMockRecorder) SetDowntimes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDowntimes", reflect.TypeOf((*MockAPI)(nil).SetDowntimes), arg0, arg1)
}
