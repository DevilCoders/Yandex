// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/compute/iam (interfaces: TokenService,CredentialsService,AbcService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	iam "a.yandex-team.ru/cloud/mdb/internal/compute/iam"
	gomock "github.com/golang/mock/gomock"
)

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// ServiceAccountCredentials mocks base method.
func (m *MockTokenService) ServiceAccountCredentials(arg0 iam.ServiceAccount) iam.CredentialsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccountCredentials", arg0)
	ret0, _ := ret[0].(iam.CredentialsService)
	return ret0
}

// ServiceAccountCredentials indicates an expected call of ServiceAccountCredentials.
func (mr *MockTokenServiceMockRecorder) ServiceAccountCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccountCredentials", reflect.TypeOf((*MockTokenService)(nil).ServiceAccountCredentials), arg0)
}

// ServiceAccountToken mocks base method.
func (m *MockTokenService) ServiceAccountToken(arg0 context.Context, arg1 iam.ServiceAccount) (iam.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccountToken", arg0, arg1)
	ret0, _ := ret[0].(iam.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceAccountToken indicates an expected call of ServiceAccountToken.
func (mr *MockTokenServiceMockRecorder) ServiceAccountToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccountToken", reflect.TypeOf((*MockTokenService)(nil).ServiceAccountToken), arg0, arg1)
}

// TokenFromOauth mocks base method.
func (m *MockTokenService) TokenFromOauth(arg0 context.Context, arg1 string) (iam.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenFromOauth", arg0, arg1)
	ret0, _ := ret[0].(iam.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenFromOauth indicates an expected call of TokenFromOauth.
func (mr *MockTokenServiceMockRecorder) TokenFromOauth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenFromOauth", reflect.TypeOf((*MockTokenService)(nil).TokenFromOauth), arg0, arg1)
}

// MockCredentialsService is a mock of CredentialsService interface.
type MockCredentialsService struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsServiceMockRecorder
}

// MockCredentialsServiceMockRecorder is the mock recorder for MockCredentialsService.
type MockCredentialsServiceMockRecorder struct {
	mock *MockCredentialsService
}

// NewMockCredentialsService creates a new mock instance.
func NewMockCredentialsService(ctrl *gomock.Controller) *MockCredentialsService {
	mock := &MockCredentialsService{ctrl: ctrl}
	mock.recorder = &MockCredentialsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsService) EXPECT() *MockCredentialsServiceMockRecorder {
	return m.recorder
}

// GetRequestMetadata mocks base method.
func (m *MockCredentialsService) GetRequestMetadata(arg0 context.Context, arg1 ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRequestMetadata", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestMetadata indicates an expected call of GetRequestMetadata.
func (mr *MockCredentialsServiceMockRecorder) GetRequestMetadata(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestMetadata", reflect.TypeOf((*MockCredentialsService)(nil).GetRequestMetadata), varargs...)
}

// RequireTransportSecurity mocks base method.
func (m *MockCredentialsService) RequireTransportSecurity() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireTransportSecurity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RequireTransportSecurity indicates an expected call of RequireTransportSecurity.
func (mr *MockCredentialsServiceMockRecorder) RequireTransportSecurity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireTransportSecurity", reflect.TypeOf((*MockCredentialsService)(nil).RequireTransportSecurity))
}

// Token mocks base method.
func (m *MockCredentialsService) Token(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockCredentialsServiceMockRecorder) Token(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockCredentialsService)(nil).Token), arg0)
}

// MockAbcService is a mock of AbcService interface.
type MockAbcService struct {
	ctrl     *gomock.Controller
	recorder *MockAbcServiceMockRecorder
}

// MockAbcServiceMockRecorder is the mock recorder for MockAbcService.
type MockAbcServiceMockRecorder struct {
	mock *MockAbcService
}

// NewMockAbcService creates a new mock instance.
func NewMockAbcService(ctrl *gomock.Controller) *MockAbcService {
	mock := &MockAbcService{ctrl: ctrl}
	mock.recorder = &MockAbcServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbcService) EXPECT() *MockAbcServiceMockRecorder {
	return m.recorder
}

// ResolveByABCSlug mocks base method.
func (m *MockAbcService) ResolveByABCSlug(arg0 context.Context, arg1 string) (iam.ABC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByABCSlug", arg0, arg1)
	ret0, _ := ret[0].(iam.ABC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByABCSlug indicates an expected call of ResolveByABCSlug.
func (mr *MockAbcServiceMockRecorder) ResolveByABCSlug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByABCSlug", reflect.TypeOf((*MockAbcService)(nil).ResolveByABCSlug), arg0, arg1)
}

// ResolveByCloudID mocks base method.
func (m *MockAbcService) ResolveByCloudID(arg0 context.Context, arg1 string) (iam.ABC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByCloudID", arg0, arg1)
	ret0, _ := ret[0].(iam.ABC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByCloudID indicates an expected call of ResolveByCloudID.
func (mr *MockAbcServiceMockRecorder) ResolveByCloudID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByCloudID", reflect.TypeOf((*MockAbcService)(nil).ResolveByCloudID), arg0, arg1)
}

// ResolveByFolderID mocks base method.
func (m *MockAbcService) ResolveByFolderID(arg0 context.Context, arg1 string) (iam.ABC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByFolderID", arg0, arg1)
	ret0, _ := ret[0].(iam.ABC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByFolderID indicates an expected call of ResolveByFolderID.
func (mr *MockAbcServiceMockRecorder) ResolveByFolderID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByFolderID", reflect.TypeOf((*MockAbcService)(nil).ResolveByFolderID), arg0, arg1)
}
