// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/compute/marketplace (interfaces: LicenseService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLicenseService is a mock of LicenseService interface.
type MockLicenseService struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseServiceMockRecorder
}

// MockLicenseServiceMockRecorder is the mock recorder for MockLicenseService.
type MockLicenseServiceMockRecorder struct {
	mock *MockLicenseService
}

// NewMockLicenseService creates a new mock instance.
func NewMockLicenseService(ctrl *gomock.Controller) *MockLicenseService {
	mock := &MockLicenseService{ctrl: ctrl}
	mock.recorder = &MockLicenseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseService) EXPECT() *MockLicenseServiceMockRecorder {
	return m.recorder
}

// CheckLicenseResult mocks base method.
func (m *MockLicenseService) CheckLicenseResult(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLicenseResult", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckLicenseResult indicates an expected call of CheckLicenseResult.
func (mr *MockLicenseServiceMockRecorder) CheckLicenseResult(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLicenseResult", reflect.TypeOf((*MockLicenseService)(nil).CheckLicenseResult), arg0, arg1, arg2)
}
