// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/compute/resmanager (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	resmanager "a.yandex-team.ru/cloud/mdb/internal/compute/resmanager"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckServiceAccountRole mocks base method.
func (m *MockClient) CheckServiceAccountRole(arg0 context.Context, arg1, arg2, arg3, arg4 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceAccountRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckServiceAccountRole indicates an expected call of CheckServiceAccountRole.
func (mr *MockClientMockRecorder) CheckServiceAccountRole(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceAccountRole", reflect.TypeOf((*MockClient)(nil).CheckServiceAccountRole), arg0, arg1, arg2, arg3, arg4)
}

// Cloud mocks base method.
func (m *MockClient) Cloud(arg0 context.Context, arg1 string) (resmanager.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud", arg0, arg1)
	ret0, _ := ret[0].(resmanager.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cloud indicates an expected call of Cloud.
func (mr *MockClientMockRecorder) Cloud(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockClient)(nil).Cloud), arg0, arg1)
}

// ListAccessBindings mocks base method.
func (m *MockClient) ListAccessBindings(arg0 context.Context, arg1 string, arg2 bool) ([]resmanager.AccessBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessBindings", arg0, arg1, arg2)
	ret0, _ := ret[0].([]resmanager.AccessBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessBindings indicates an expected call of ListAccessBindings.
func (mr *MockClientMockRecorder) ListAccessBindings(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessBindings", reflect.TypeOf((*MockClient)(nil).ListAccessBindings), arg0, arg1, arg2)
}

// PermissionStages mocks base method.
func (m *MockClient) PermissionStages(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermissionStages", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PermissionStages indicates an expected call of PermissionStages.
func (mr *MockClientMockRecorder) PermissionStages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermissionStages", reflect.TypeOf((*MockClient)(nil).PermissionStages), arg0, arg1)
}

// ResolveFolders mocks base method.
func (m *MockClient) ResolveFolders(arg0 context.Context, arg1 []string) ([]resmanager.ResolvedFolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveFolders", arg0, arg1)
	ret0, _ := ret[0].([]resmanager.ResolvedFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveFolders indicates an expected call of ResolveFolders.
func (mr *MockClientMockRecorder) ResolveFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveFolders", reflect.TypeOf((*MockClient)(nil).ResolveFolders), arg0, arg1)
}
