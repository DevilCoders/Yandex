// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/internal/compute/compute (interfaces: HostGroupService,ImageService,OperationService,HostTypeService)

// Package mocks is a generated GoMock package.
package mocks

import (
	compute "a.yandex-team.ru/cloud/mdb/internal/compute/compute"
	operations "a.yandex-team.ru/cloud/mdb/internal/compute/operations"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHostGroupService is a mock of HostGroupService interface.
type MockHostGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockHostGroupServiceMockRecorder
}

// MockHostGroupServiceMockRecorder is the mock recorder for MockHostGroupService.
type MockHostGroupServiceMockRecorder struct {
	mock *MockHostGroupService
}

// NewMockHostGroupService creates a new mock instance.
func NewMockHostGroupService(ctrl *gomock.Controller) *MockHostGroupService {
	mock := &MockHostGroupService{ctrl: ctrl}
	mock.recorder = &MockHostGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostGroupService) EXPECT() *MockHostGroupServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHostGroupService) Get(arg0 context.Context, arg1 string) (compute.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(compute.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHostGroupServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHostGroupService)(nil).Get), arg0, arg1)
}

// MockImageService is a mock of ImageService interface.
type MockImageService struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceMockRecorder
}

// MockImageServiceMockRecorder is the mock recorder for MockImageService.
type MockImageServiceMockRecorder struct {
	mock *MockImageService
}

// NewMockImageService creates a new mock instance.
func NewMockImageService(ctrl *gomock.Controller) *MockImageService {
	mock := &MockImageService{ctrl: ctrl}
	mock.recorder = &MockImageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageService) EXPECT() *MockImageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImageService) Create(arg0 context.Context, arg1, arg2 string, arg3 compute.CreateImageSource, arg4 compute.OS, arg5 compute.CreateImageOpts) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockImageServiceMockRecorder) Create(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageService)(nil).Create), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Delete mocks base method.
func (m *MockImageService) Delete(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockImageServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockImageService) Get(arg0 context.Context, arg1 string) (compute.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(compute.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImageServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockImageService) List(arg0 context.Context, arg1 string, arg2 compute.ListImagesOpts) (compute.ListImagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.ListImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockImageServiceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockImageService)(nil).List), arg0, arg1, arg2)
}

// ListOperations mocks base method.
func (m *MockImageService) ListOperations(arg0 context.Context, arg1 compute.ListOperationsOpts) ([]operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", arg0, arg1)
	ret0, _ := ret[0].([]operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockImageServiceMockRecorder) ListOperations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockImageService)(nil).ListOperations), arg0, arg1)
}

// UpdateLabels mocks base method.
func (m *MockImageService) UpdateLabels(arg0 context.Context, arg1 string, arg2 map[string]string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabels", arg0, arg1, arg2)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLabels indicates an expected call of UpdateLabels.
func (mr *MockImageServiceMockRecorder) UpdateLabels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabels", reflect.TypeOf((*MockImageService)(nil).UpdateLabels), arg0, arg1, arg2)
}

// MockOperationService is a mock of OperationService interface.
type MockOperationService struct {
	ctrl     *gomock.Controller
	recorder *MockOperationServiceMockRecorder
}

// MockOperationServiceMockRecorder is the mock recorder for MockOperationService.
type MockOperationServiceMockRecorder struct {
	mock *MockOperationService
}

// NewMockOperationService creates a new mock instance.
func NewMockOperationService(ctrl *gomock.Controller) *MockOperationService {
	mock := &MockOperationService{ctrl: ctrl}
	mock.recorder = &MockOperationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationService) EXPECT() *MockOperationServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockOperationService) Cancel(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockOperationServiceMockRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockOperationService)(nil).Cancel), arg0, arg1)
}

// Get mocks base method.
func (m *MockOperationService) Get(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOperationServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperationService)(nil).Get), arg0, arg1)
}

// GetDone mocks base method.
func (m *MockOperationService) GetDone(arg0 context.Context, arg1 string) (operations.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDone", arg0, arg1)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDone indicates an expected call of GetDone.
func (mr *MockOperationServiceMockRecorder) GetDone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDone", reflect.TypeOf((*MockOperationService)(nil).GetDone), arg0, arg1)
}

// MockHostTypeService is a mock of HostTypeService interface.
type MockHostTypeService struct {
	ctrl     *gomock.Controller
	recorder *MockHostTypeServiceMockRecorder
}

// MockHostTypeServiceMockRecorder is the mock recorder for MockHostTypeService.
type MockHostTypeServiceMockRecorder struct {
	mock *MockHostTypeService
}

// NewMockHostTypeService creates a new mock instance.
func NewMockHostTypeService(ctrl *gomock.Controller) *MockHostTypeService {
	mock := &MockHostTypeService{ctrl: ctrl}
	mock.recorder = &MockHostTypeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostTypeService) EXPECT() *MockHostTypeServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHostTypeService) Get(arg0 context.Context, arg1 string) (compute.HostType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(compute.HostType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHostTypeServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHostTypeService)(nil).Get), arg0, arg1)
}
