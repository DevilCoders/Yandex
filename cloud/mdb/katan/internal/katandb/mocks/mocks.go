// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/katan/internal/katandb (interfaces: KatanDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	optional "a.yandex-team.ru/cloud/mdb/internal/optional"
	katandb "a.yandex-team.ru/cloud/mdb/katan/internal/katandb"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockKatanDB is a mock of KatanDB interface.
type MockKatanDB struct {
	ctrl     *gomock.Controller
	recorder *MockKatanDBMockRecorder
}

// MockKatanDBMockRecorder is the mock recorder for MockKatanDB.
type MockKatanDBMockRecorder struct {
	mock *MockKatanDB
}

// NewMockKatanDB creates a new mock instance.
func NewMockKatanDB(ctrl *gomock.Controller) *MockKatanDB {
	mock := &MockKatanDB{ctrl: ctrl}
	mock.recorder = &MockKatanDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKatanDB) EXPECT() *MockKatanDBMockRecorder {
	return m.recorder
}

// AddCluster mocks base method.
func (m *MockKatanDB) AddCluster(arg0 context.Context, arg1 katandb.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCluster indicates an expected call of AddCluster.
func (mr *MockKatanDBMockRecorder) AddCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockKatanDB)(nil).AddCluster), arg0, arg1)
}

// AddHost mocks base method.
func (m *MockKatanDB) AddHost(arg0 context.Context, arg1 katandb.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHost indicates an expected call of AddHost.
func (mr *MockKatanDBMockRecorder) AddHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockKatanDB)(nil).AddHost), arg0, arg1)
}

// AddRollout mocks base method.
func (m *MockKatanDB) AddRollout(arg0 context.Context, arg1, arg2, arg3 string, arg4 int32, arg5 optional.Int64, arg6 []string) (katandb.Rollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRollout", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(katandb.Rollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRollout indicates an expected call of AddRollout.
func (mr *MockKatanDBMockRecorder) AddRollout(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRollout", reflect.TypeOf((*MockKatanDB)(nil).AddRollout), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AddRolloutShipment mocks base method.
func (m *MockKatanDB) AddRolloutShipment(arg0 context.Context, arg1 int64, arg2 []string, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolloutShipment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRolloutShipment indicates an expected call of AddRolloutShipment.
func (mr *MockKatanDBMockRecorder) AddRolloutShipment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolloutShipment", reflect.TypeOf((*MockKatanDB)(nil).AddRolloutShipment), arg0, arg1, arg2, arg3)
}

// AutoUpdatedClustersBySchedule mocks base method.
func (m *MockKatanDB) AutoUpdatedClustersBySchedule(arg0 context.Context, arg1 string, arg2 int64, arg3, arg4, arg5 time.Duration, arg6 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoUpdatedClustersBySchedule", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoUpdatedClustersBySchedule indicates an expected call of AutoUpdatedClustersBySchedule.
func (mr *MockKatanDBMockRecorder) AutoUpdatedClustersBySchedule(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoUpdatedClustersBySchedule", reflect.TypeOf((*MockKatanDB)(nil).AutoUpdatedClustersBySchedule), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AutoUpdatedClustersIDsByQuery mocks base method.
func (m *MockKatanDB) AutoUpdatedClustersIDsByQuery(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoUpdatedClustersIDsByQuery", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoUpdatedClustersIDsByQuery indicates an expected call of AutoUpdatedClustersIDsByQuery.
func (mr *MockKatanDBMockRecorder) AutoUpdatedClustersIDsByQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoUpdatedClustersIDsByQuery", reflect.TypeOf((*MockKatanDB)(nil).AutoUpdatedClustersIDsByQuery), arg0, arg1)
}

// Close mocks base method.
func (m *MockKatanDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKatanDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKatanDB)(nil).Close))
}

// ClusterHosts mocks base method.
func (m *MockKatanDB) ClusterHosts(arg0 context.Context, arg1 string) ([]katandb.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterHosts", arg0, arg1)
	ret0, _ := ret[0].([]katandb.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterHosts indicates an expected call of ClusterHosts.
func (mr *MockKatanDBMockRecorder) ClusterHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterHosts", reflect.TypeOf((*MockKatanDB)(nil).ClusterHosts), arg0, arg1)
}

// ClusterRollouts mocks base method.
func (m *MockKatanDB) ClusterRollouts(arg0 context.Context, arg1 int64) ([]katandb.ClusterRollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRollouts", arg0, arg1)
	ret0, _ := ret[0].([]katandb.ClusterRollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterRollouts indicates an expected call of ClusterRollouts.
func (mr *MockKatanDBMockRecorder) ClusterRollouts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRollouts", reflect.TypeOf((*MockKatanDB)(nil).ClusterRollouts), arg0, arg1)
}

// ClusterRolloutsFailedInSchedule mocks base method.
func (m *MockKatanDB) ClusterRolloutsFailedInSchedule(arg0 context.Context, arg1 int64) ([]katandb.ClusterRollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRolloutsFailedInSchedule", arg0, arg1)
	ret0, _ := ret[0].([]katandb.ClusterRollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterRolloutsFailedInSchedule indicates an expected call of ClusterRolloutsFailedInSchedule.
func (mr *MockKatanDBMockRecorder) ClusterRolloutsFailedInSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRolloutsFailedInSchedule", reflect.TypeOf((*MockKatanDB)(nil).ClusterRolloutsFailedInSchedule), arg0, arg1)
}

// ClustersByTagsQuery mocks base method.
func (m *MockKatanDB) ClustersByTagsQuery(arg0 context.Context, arg1 string) ([]katandb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClustersByTagsQuery", arg0, arg1)
	ret0, _ := ret[0].([]katandb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClustersByTagsQuery indicates an expected call of ClustersByTagsQuery.
func (mr *MockKatanDBMockRecorder) ClustersByTagsQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClustersByTagsQuery", reflect.TypeOf((*MockKatanDB)(nil).ClustersByTagsQuery), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockKatanDB) DeleteCluster(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockKatanDBMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockKatanDB)(nil).DeleteCluster), arg0, arg1)
}

// DeleteHosts mocks base method.
func (m *MockKatanDB) DeleteHosts(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHosts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHosts indicates an expected call of DeleteHosts.
func (mr *MockKatanDBMockRecorder) DeleteHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHosts", reflect.TypeOf((*MockKatanDB)(nil).DeleteHosts), arg0, arg1)
}

// FinishRollout mocks base method.
func (m *MockKatanDB) FinishRollout(arg0 context.Context, arg1 int64, arg2 optional.String) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishRollout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishRollout indicates an expected call of FinishRollout.
func (mr *MockKatanDBMockRecorder) FinishRollout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishRollout", reflect.TypeOf((*MockKatanDB)(nil).FinishRollout), arg0, arg1, arg2)
}

// IsReady mocks base method.
func (m *MockKatanDB) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockKatanDBMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockKatanDB)(nil).IsReady), arg0)
}

// LastRolloutsBySchedule mocks base method.
func (m *MockKatanDB) LastRolloutsBySchedule(arg0 context.Context, arg1 int64, arg2 time.Time, arg3 int) ([]katandb.Rollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastRolloutsBySchedule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]katandb.Rollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastRolloutsBySchedule indicates an expected call of LastRolloutsBySchedule.
func (mr *MockKatanDBMockRecorder) LastRolloutsBySchedule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastRolloutsBySchedule", reflect.TypeOf((*MockKatanDB)(nil).LastRolloutsBySchedule), arg0, arg1, arg2, arg3)
}

// MarkClusterRollout mocks base method.
func (m *MockKatanDB) MarkClusterRollout(arg0 context.Context, arg1 int64, arg2 string, arg3 katandb.ClusterRolloutState, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkClusterRollout", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkClusterRollout indicates an expected call of MarkClusterRollout.
func (mr *MockKatanDBMockRecorder) MarkClusterRollout(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkClusterRollout", reflect.TypeOf((*MockKatanDB)(nil).MarkClusterRollout), arg0, arg1, arg2, arg3, arg4)
}

// MarkSchedule mocks base method.
func (m *MockKatanDB) MarkSchedule(arg0 context.Context, arg1 int64, arg2 katandb.ScheduleState, arg3 int64, arg4 []katandb.ScheduleFail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSchedule", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSchedule indicates an expected call of MarkSchedule.
func (mr *MockKatanDBMockRecorder) MarkSchedule(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSchedule", reflect.TypeOf((*MockKatanDB)(nil).MarkSchedule), arg0, arg1, arg2, arg3, arg4)
}

// OldestRunningRollout mocks base method.
func (m *MockKatanDB) OldestRunningRollout(arg0 context.Context) (katandb.RolloutDates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldestRunningRollout", arg0)
	ret0, _ := ret[0].(katandb.RolloutDates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OldestRunningRollout indicates an expected call of OldestRunningRollout.
func (mr *MockKatanDBMockRecorder) OldestRunningRollout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldestRunningRollout", reflect.TypeOf((*MockKatanDB)(nil).OldestRunningRollout), arg0)
}

// Rollout mocks base method.
func (m *MockKatanDB) Rollout(arg0 context.Context, arg1 int64) (katandb.Rollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollout", arg0, arg1)
	ret0, _ := ret[0].(katandb.Rollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollout indicates an expected call of Rollout.
func (mr *MockKatanDBMockRecorder) Rollout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollout", reflect.TypeOf((*MockKatanDB)(nil).Rollout), arg0, arg1)
}

// RolloutClusters mocks base method.
func (m *MockKatanDB) RolloutClusters(arg0 context.Context, arg1 int64) ([]katandb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutClusters", arg0, arg1)
	ret0, _ := ret[0].([]katandb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutClusters indicates an expected call of RolloutClusters.
func (mr *MockKatanDBMockRecorder) RolloutClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutClusters", reflect.TypeOf((*MockKatanDB)(nil).RolloutClusters), arg0, arg1)
}

// RolloutClustersHosts mocks base method.
func (m *MockKatanDB) RolloutClustersHosts(arg0 context.Context, arg1 int64) ([]katandb.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutClustersHosts", arg0, arg1)
	ret0, _ := ret[0].([]katandb.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutClustersHosts indicates an expected call of RolloutClustersHosts.
func (mr *MockKatanDBMockRecorder) RolloutClustersHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutClustersHosts", reflect.TypeOf((*MockKatanDB)(nil).RolloutClustersHosts), arg0, arg1)
}

// RolloutShipmentsByCluster mocks base method.
func (m *MockKatanDB) RolloutShipmentsByCluster(arg0 context.Context, arg1 int64, arg2 string) ([]katandb.RolloutShipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutShipmentsByCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].([]katandb.RolloutShipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutShipmentsByCluster indicates an expected call of RolloutShipmentsByCluster.
func (mr *MockKatanDBMockRecorder) RolloutShipmentsByCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutShipmentsByCluster", reflect.TypeOf((*MockKatanDB)(nil).RolloutShipmentsByCluster), arg0, arg1, arg2)
}

// Schedules mocks base method.
func (m *MockKatanDB) Schedules(arg0 context.Context) ([]katandb.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedules", arg0)
	ret0, _ := ret[0].([]katandb.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedules indicates an expected call of Schedules.
func (mr *MockKatanDBMockRecorder) Schedules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedules", reflect.TypeOf((*MockKatanDB)(nil).Schedules), arg0)
}

// StartPendingRollout mocks base method.
func (m *MockKatanDB) StartPendingRollout(arg0 context.Context, arg1 string) (katandb.Rollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPendingRollout", arg0, arg1)
	ret0, _ := ret[0].(katandb.Rollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPendingRollout indicates an expected call of StartPendingRollout.
func (mr *MockKatanDBMockRecorder) StartPendingRollout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPendingRollout", reflect.TypeOf((*MockKatanDB)(nil).StartPendingRollout), arg0, arg1)
}

// TouchClusterRollout mocks base method.
func (m *MockKatanDB) TouchClusterRollout(arg0 context.Context, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TouchClusterRollout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TouchClusterRollout indicates an expected call of TouchClusterRollout.
func (mr *MockKatanDBMockRecorder) TouchClusterRollout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TouchClusterRollout", reflect.TypeOf((*MockKatanDB)(nil).TouchClusterRollout), arg0, arg1, arg2)
}

// UnfinishedRollouts mocks base method.
func (m *MockKatanDB) UnfinishedRollouts(arg0 context.Context, arg1 string) ([]katandb.Rollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfinishedRollouts", arg0, arg1)
	ret0, _ := ret[0].([]katandb.Rollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnfinishedRollouts indicates an expected call of UnfinishedRollouts.
func (mr *MockKatanDBMockRecorder) UnfinishedRollouts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfinishedRollouts", reflect.TypeOf((*MockKatanDB)(nil).UnfinishedRollouts), arg0, arg1)
}

// UpdateClusterTags mocks base method.
func (m *MockKatanDB) UpdateClusterTags(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterTags indicates an expected call of UpdateClusterTags.
func (mr *MockKatanDBMockRecorder) UpdateClusterTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterTags", reflect.TypeOf((*MockKatanDB)(nil).UpdateClusterTags), arg0, arg1, arg2)
}

// UpdateHostTags mocks base method.
func (m *MockKatanDB) UpdateHostTags(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHostTags indicates an expected call of UpdateHostTags.
func (mr *MockKatanDBMockRecorder) UpdateHostTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostTags", reflect.TypeOf((*MockKatanDB)(nil).UpdateHostTags), arg0, arg1, arg2)
}
