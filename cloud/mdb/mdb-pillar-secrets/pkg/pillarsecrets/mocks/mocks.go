// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-pillar-secrets/pkg/pillarsecrets (interfaces: PillarSecretsClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	secret "a.yandex-team.ru/cloud/mdb/internal/secret"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPillarSecretsClient is a mock of PillarSecretsClient interface.
type MockPillarSecretsClient struct {
	ctrl     *gomock.Controller
	recorder *MockPillarSecretsClientMockRecorder
}

// MockPillarSecretsClientMockRecorder is the mock recorder for MockPillarSecretsClient.
type MockPillarSecretsClientMockRecorder struct {
	mock *MockPillarSecretsClient
}

// NewMockPillarSecretsClient creates a new mock instance.
func NewMockPillarSecretsClient(ctrl *gomock.Controller) *MockPillarSecretsClient {
	mock := &MockPillarSecretsClient{ctrl: ctrl}
	mock.recorder = &MockPillarSecretsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPillarSecretsClient) EXPECT() *MockPillarSecretsClientMockRecorder {
	return m.recorder
}

// GetClusterPillarSecret mocks base method.
func (m *MockPillarSecretsClient) GetClusterPillarSecret(arg0 context.Context, arg1 string, arg2 []string) (secret.String, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterPillarSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(secret.String)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterPillarSecret indicates an expected call of GetClusterPillarSecret.
func (mr *MockPillarSecretsClientMockRecorder) GetClusterPillarSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterPillarSecret", reflect.TypeOf((*MockPillarSecretsClient)(nil).GetClusterPillarSecret), arg0, arg1, arg2)
}

// GetHostPillarSecret mocks base method.
func (m *MockPillarSecretsClient) GetHostPillarSecret(arg0 context.Context, arg1, arg2 string, arg3 []string) (secret.String, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostPillarSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(secret.String)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostPillarSecret indicates an expected call of GetHostPillarSecret.
func (mr *MockPillarSecretsClientMockRecorder) GetHostPillarSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostPillarSecret", reflect.TypeOf((*MockPillarSecretsClient)(nil).GetHostPillarSecret), arg0, arg1, arg2, arg3)
}

// GetShardPillarSecret mocks base method.
func (m *MockPillarSecretsClient) GetShardPillarSecret(arg0 context.Context, arg1, arg2 string, arg3 []string) (secret.String, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardPillarSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(secret.String)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardPillarSecret indicates an expected call of GetShardPillarSecret.
func (mr *MockPillarSecretsClientMockRecorder) GetShardPillarSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardPillarSecret", reflect.TypeOf((*MockPillarSecretsClient)(nil).GetShardPillarSecret), arg0, arg1, arg2, arg3)
}

// GetSubClusterPillarSecret mocks base method.
func (m *MockPillarSecretsClient) GetSubClusterPillarSecret(arg0 context.Context, arg1, arg2 string, arg3 []string) (secret.String, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubClusterPillarSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(secret.String)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubClusterPillarSecret indicates an expected call of GetSubClusterPillarSecret.
func (mr *MockPillarSecretsClientMockRecorder) GetSubClusterPillarSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubClusterPillarSecret", reflect.TypeOf((*MockPillarSecretsClient)(nil).GetSubClusterPillarSecret), arg0, arg1, arg2, arg3)
}

// IsReady mocks base method.
func (m *MockPillarSecretsClient) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockPillarSecretsClientMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockPillarSecretsClient)(nil).IsReady), arg0)
}
