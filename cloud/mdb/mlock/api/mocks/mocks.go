// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mlock/api (interfaces: LockServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	mlock "a.yandex-team.ru/cloud/mdb/mlock/api"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLockServiceClient is a mock of LockServiceClient interface.
type MockLockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLockServiceClientMockRecorder
}

// MockLockServiceClientMockRecorder is the mock recorder for MockLockServiceClient.
type MockLockServiceClientMockRecorder struct {
	mock *MockLockServiceClient
}

// NewMockLockServiceClient creates a new mock instance.
func NewMockLockServiceClient(ctrl *gomock.Controller) *MockLockServiceClient {
	mock := &MockLockServiceClient{ctrl: ctrl}
	mock.recorder = &MockLockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockServiceClient) EXPECT() *MockLockServiceClientMockRecorder {
	return m.recorder
}

// CreateLock mocks base method.
func (m *MockLockServiceClient) CreateLock(arg0 context.Context, arg1 *mlock.CreateLockRequest, arg2 ...grpc.CallOption) (*mlock.CreateLockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLock", varargs...)
	ret0, _ := ret[0].(*mlock.CreateLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLock indicates an expected call of CreateLock.
func (mr *MockLockServiceClientMockRecorder) CreateLock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLock", reflect.TypeOf((*MockLockServiceClient)(nil).CreateLock), varargs...)
}

// GetLockStatus mocks base method.
func (m *MockLockServiceClient) GetLockStatus(arg0 context.Context, arg1 *mlock.GetLockStatusRequest, arg2 ...grpc.CallOption) (*mlock.LockStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLockStatus", varargs...)
	ret0, _ := ret[0].(*mlock.LockStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLockStatus indicates an expected call of GetLockStatus.
func (mr *MockLockServiceClientMockRecorder) GetLockStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockStatus", reflect.TypeOf((*MockLockServiceClient)(nil).GetLockStatus), varargs...)
}

// ListLocks mocks base method.
func (m *MockLockServiceClient) ListLocks(arg0 context.Context, arg1 *mlock.ListLocksRequest, arg2 ...grpc.CallOption) (*mlock.ListLocksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLocks", varargs...)
	ret0, _ := ret[0].(*mlock.ListLocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocks indicates an expected call of ListLocks.
func (mr *MockLockServiceClientMockRecorder) ListLocks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocks", reflect.TypeOf((*MockLockServiceClient)(nil).ListLocks), varargs...)
}

// ReleaseLock mocks base method.
func (m *MockLockServiceClient) ReleaseLock(arg0 context.Context, arg1 *mlock.ReleaseLockRequest, arg2 ...grpc.CallOption) (*mlock.ReleaseLockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseLock", varargs...)
	ret0, _ := ret[0].(*mlock.ReleaseLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseLock indicates an expected call of ReleaseLock.
func (mr *MockLockServiceClientMockRecorder) ReleaseLock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLock", reflect.TypeOf((*MockLockServiceClient)(nil).ReleaseLock), varargs...)
}
