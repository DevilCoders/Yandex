// Code generated by go-swagger; DO NOT EDIT.

package hostshealth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"a.yandex-team.ru/cloud/mdb/mdb-health/generated/swagger/models"
)

// NewUpdateHostHealthParams creates a new UpdateHostHealthParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateHostHealthParams() *UpdateHostHealthParams {
	return &UpdateHostHealthParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateHostHealthParamsWithTimeout creates a new UpdateHostHealthParams object
// with the ability to set a timeout on a request.
func NewUpdateHostHealthParamsWithTimeout(timeout time.Duration) *UpdateHostHealthParams {
	return &UpdateHostHealthParams{
		timeout: timeout,
	}
}

// NewUpdateHostHealthParamsWithContext creates a new UpdateHostHealthParams object
// with the ability to set a context for a request.
func NewUpdateHostHealthParamsWithContext(ctx context.Context) *UpdateHostHealthParams {
	return &UpdateHostHealthParams{
		Context: ctx,
	}
}

// NewUpdateHostHealthParamsWithHTTPClient creates a new UpdateHostHealthParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateHostHealthParamsWithHTTPClient(client *http.Client) *UpdateHostHealthParams {
	return &UpdateHostHealthParams{
		HTTPClient: client,
	}
}

/* UpdateHostHealthParams contains all the parameters to send to the API endpoint
   for the update host health operation.

   Typically these are written to a http.Request.
*/
type UpdateHostHealthParams struct {

	/* XRequestID.

	   Unique request ID (must be generated for each separate request, even retries)
	*/
	XRequestID *string

	/* XSignature.

	   Base64-encoded signature of request body. Uses RSA-PSS to sign SHA512(body).
	*/
	XSignature string

	/* Body.

	   Host health to be updated
	*/
	Body *models.HostHealthUpdate

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update host health params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateHostHealthParams) WithDefaults() *UpdateHostHealthParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update host health params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateHostHealthParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update host health params
func (o *UpdateHostHealthParams) WithTimeout(timeout time.Duration) *UpdateHostHealthParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update host health params
func (o *UpdateHostHealthParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update host health params
func (o *UpdateHostHealthParams) WithContext(ctx context.Context) *UpdateHostHealthParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update host health params
func (o *UpdateHostHealthParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update host health params
func (o *UpdateHostHealthParams) WithHTTPClient(client *http.Client) *UpdateHostHealthParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update host health params
func (o *UpdateHostHealthParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the update host health params
func (o *UpdateHostHealthParams) WithXRequestID(xRequestID *string) *UpdateHostHealthParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the update host health params
func (o *UpdateHostHealthParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithXSignature adds the xSignature to the update host health params
func (o *UpdateHostHealthParams) WithXSignature(xSignature string) *UpdateHostHealthParams {
	o.SetXSignature(xSignature)
	return o
}

// SetXSignature adds the xSignature to the update host health params
func (o *UpdateHostHealthParams) SetXSignature(xSignature string) {
	o.XSignature = xSignature
}

// WithBody adds the body to the update host health params
func (o *UpdateHostHealthParams) WithBody(body *models.HostHealthUpdate) *UpdateHostHealthParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update host health params
func (o *UpdateHostHealthParams) SetBody(body *models.HostHealthUpdate) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateHostHealthParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	// header param X-Signature
	if err := r.SetHeaderParam("X-Signature", o.XSignature); err != nil {
		return err
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
