// Code generated by go-swagger; DO NOT EDIT.

package unhealthyaggregatedinfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetUnhealthyAggregatedInfoParams creates a new GetUnhealthyAggregatedInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUnhealthyAggregatedInfoParams() *GetUnhealthyAggregatedInfoParams {
	return &GetUnhealthyAggregatedInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUnhealthyAggregatedInfoParamsWithTimeout creates a new GetUnhealthyAggregatedInfoParams object
// with the ability to set a timeout on a request.
func NewGetUnhealthyAggregatedInfoParamsWithTimeout(timeout time.Duration) *GetUnhealthyAggregatedInfoParams {
	return &GetUnhealthyAggregatedInfoParams{
		timeout: timeout,
	}
}

// NewGetUnhealthyAggregatedInfoParamsWithContext creates a new GetUnhealthyAggregatedInfoParams object
// with the ability to set a context for a request.
func NewGetUnhealthyAggregatedInfoParamsWithContext(ctx context.Context) *GetUnhealthyAggregatedInfoParams {
	return &GetUnhealthyAggregatedInfoParams{
		Context: ctx,
	}
}

// NewGetUnhealthyAggregatedInfoParamsWithHTTPClient creates a new GetUnhealthyAggregatedInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUnhealthyAggregatedInfoParamsWithHTTPClient(client *http.Client) *GetUnhealthyAggregatedInfoParams {
	return &GetUnhealthyAggregatedInfoParams{
		HTTPClient: client,
	}
}

/* GetUnhealthyAggregatedInfoParams contains all the parameters to send to the API endpoint
   for the get unhealthy aggregated info operation.

   Typically these are written to a http.Request.
*/
type GetUnhealthyAggregatedInfoParams struct {

	/* XRequestID.

	   Unique request ID (must be generated for each separate request, even retries)
	*/
	XRequestID *string

	/* AggType.

	   Type of aggregation
	*/
	AggType string

	/* CType.

	   Type of cluster to aggregate
	*/
	CType string

	/* Env.

	   Environment of cluster
	*/
	Env *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get unhealthy aggregated info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUnhealthyAggregatedInfoParams) WithDefaults() *GetUnhealthyAggregatedInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get unhealthy aggregated info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUnhealthyAggregatedInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) WithTimeout(timeout time.Duration) *GetUnhealthyAggregatedInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) WithContext(ctx context.Context) *GetUnhealthyAggregatedInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) WithHTTPClient(client *http.Client) *GetUnhealthyAggregatedInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) WithXRequestID(xRequestID *string) *GetUnhealthyAggregatedInfoParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithAggType adds the aggType to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) WithAggType(aggType string) *GetUnhealthyAggregatedInfoParams {
	o.SetAggType(aggType)
	return o
}

// SetAggType adds the aggType to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) SetAggType(aggType string) {
	o.AggType = aggType
}

// WithCType adds the cType to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) WithCType(cType string) *GetUnhealthyAggregatedInfoParams {
	o.SetCType(cType)
	return o
}

// SetCType adds the cType to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) SetCType(cType string) {
	o.CType = cType
}

// WithEnv adds the env to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) WithEnv(env *string) *GetUnhealthyAggregatedInfoParams {
	o.SetEnv(env)
	return o
}

// SetEnv adds the env to the get unhealthy aggregated info params
func (o *GetUnhealthyAggregatedInfoParams) SetEnv(env *string) {
	o.Env = env
}

// WriteToRequest writes these params to a swagger request
func (o *GetUnhealthyAggregatedInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	// query param agg_type
	qrAggType := o.AggType
	qAggType := qrAggType
	if qAggType != "" {

		if err := r.SetQueryParam("agg_type", qAggType); err != nil {
			return err
		}
	}

	// query param c_type
	qrCType := o.CType
	qCType := qrCType
	if qCType != "" {

		if err := r.SetQueryParam("c_type", qCType); err != nil {
			return err
		}
	}

	if o.Env != nil {

		// query param env
		var qrEnv string

		if o.Env != nil {
			qrEnv = *o.Env
		}
		qEnv := qrEnv
		if qEnv != "" {

			if err := r.SetQueryParam("env", qEnv); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
