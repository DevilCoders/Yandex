// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServiceReplicaType Replica type for service
//
// swagger:model ServiceReplicaType
type ServiceReplicaType string

func NewServiceReplicaType(value ServiceReplicaType) *ServiceReplicaType {
	v := value
	return &v
}

const (

	// ServiceReplicaTypeUnknown captures enum value "Unknown"
	ServiceReplicaTypeUnknown ServiceReplicaType = "Unknown"

	// ServiceReplicaTypeAsync captures enum value "Async"
	ServiceReplicaTypeAsync ServiceReplicaType = "Async"

	// ServiceReplicaTypeQuorum captures enum value "Quorum"
	ServiceReplicaTypeQuorum ServiceReplicaType = "Quorum"

	// ServiceReplicaTypeSync captures enum value "Sync"
	ServiceReplicaTypeSync ServiceReplicaType = "Sync"
)

// for schema
var serviceReplicaTypeEnum []interface{}

func init() {
	var res []ServiceReplicaType
	if err := json.Unmarshal([]byte(`["Unknown","Async","Quorum","Sync"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceReplicaTypeEnum = append(serviceReplicaTypeEnum, v)
	}
}

func (m ServiceReplicaType) validateServiceReplicaTypeEnum(path, location string, value ServiceReplicaType) error {
	if err := validate.EnumCase(path, location, value, serviceReplicaTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this service replica type
func (m ServiceReplicaType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceReplicaTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this service replica type based on context it is used
func (m ServiceReplicaType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
