// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UAInfo u a info
//
// swagger:model UAInfo
type UAInfo struct {

	// no sla
	NoSLA *UAInfoNoSLA `json:"no_sla,omitempty"`

	// sla
	SLA *UAInfoSLA `json:"sla,omitempty"`
}

// Validate validates this u a info
func (m *UAInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNoSLA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLA(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UAInfo) validateNoSLA(formats strfmt.Registry) error {
	if swag.IsZero(m.NoSLA) { // not required
		return nil
	}

	if m.NoSLA != nil {
		if err := m.NoSLA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("no_sla")
			}
			return err
		}
	}

	return nil
}

func (m *UAInfo) validateSLA(formats strfmt.Registry) error {
	if swag.IsZero(m.SLA) { // not required
		return nil
	}

	if m.SLA != nil {
		if err := m.SLA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sla")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this u a info based on the context it is used
func (m *UAInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNoSLA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSLA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UAInfo) contextValidateNoSLA(ctx context.Context, formats strfmt.Registry) error {

	if m.NoSLA != nil {
		if err := m.NoSLA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("no_sla")
			}
			return err
		}
	}

	return nil
}

func (m *UAInfo) contextValidateSLA(ctx context.Context, formats strfmt.Registry) error {

	if m.SLA != nil {
		if err := m.SLA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sla")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UAInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UAInfo) UnmarshalBinary(b []byte) error {
	var res UAInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UAInfoNoSLA u a info no SLA
//
// swagger:model UAInfoNoSLA
type UAInfoNoSLA struct {

	// by availability
	ByAvailability UAAvailability `json:"by_availability,omitempty"`

	// by health
	ByHealth UAHealth `json:"by_health,omitempty"`

	// by warning geo
	ByWarningGeo UAWarningGeo `json:"by_warning_geo,omitempty"`
}

// Validate validates this u a info no SLA
func (m *UAInfoNoSLA) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByWarningGeo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UAInfoNoSLA) validateByAvailability(formats strfmt.Registry) error {
	if swag.IsZero(m.ByAvailability) { // not required
		return nil
	}

	if err := m.ByAvailability.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("no_sla" + "." + "by_availability")
		}
		return err
	}

	return nil
}

func (m *UAInfoNoSLA) validateByHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.ByHealth) { // not required
		return nil
	}

	if err := m.ByHealth.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("no_sla" + "." + "by_health")
		}
		return err
	}

	return nil
}

func (m *UAInfoNoSLA) validateByWarningGeo(formats strfmt.Registry) error {
	if swag.IsZero(m.ByWarningGeo) { // not required
		return nil
	}

	if err := m.ByWarningGeo.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("no_sla" + "." + "by_warning_geo")
		}
		return err
	}

	return nil
}

// ContextValidate validate this u a info no SLA based on the context it is used
func (m *UAInfoNoSLA) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateByAvailability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateByHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateByWarningGeo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UAInfoNoSLA) contextValidateByAvailability(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ByAvailability.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("no_sla" + "." + "by_availability")
		}
		return err
	}

	return nil
}

func (m *UAInfoNoSLA) contextValidateByHealth(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ByHealth.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("no_sla" + "." + "by_health")
		}
		return err
	}

	return nil
}

func (m *UAInfoNoSLA) contextValidateByWarningGeo(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ByWarningGeo.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("no_sla" + "." + "by_warning_geo")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UAInfoNoSLA) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UAInfoNoSLA) UnmarshalBinary(b []byte) error {
	var res UAInfoNoSLA
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UAInfoSLA u a info SLA
//
// swagger:model UAInfoSLA
type UAInfoSLA struct {

	// by availability
	ByAvailability UAAvailability `json:"by_availability,omitempty"`

	// by health
	ByHealth UAHealth `json:"by_health,omitempty"`

	// by warning geo
	ByWarningGeo UAWarningGeo `json:"by_warning_geo,omitempty"`
}

// Validate validates this u a info SLA
func (m *UAInfoSLA) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByWarningGeo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UAInfoSLA) validateByAvailability(formats strfmt.Registry) error {
	if swag.IsZero(m.ByAvailability) { // not required
		return nil
	}

	if err := m.ByAvailability.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sla" + "." + "by_availability")
		}
		return err
	}

	return nil
}

func (m *UAInfoSLA) validateByHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.ByHealth) { // not required
		return nil
	}

	if err := m.ByHealth.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sla" + "." + "by_health")
		}
		return err
	}

	return nil
}

func (m *UAInfoSLA) validateByWarningGeo(formats strfmt.Registry) error {
	if swag.IsZero(m.ByWarningGeo) { // not required
		return nil
	}

	if err := m.ByWarningGeo.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sla" + "." + "by_warning_geo")
		}
		return err
	}

	return nil
}

// ContextValidate validate this u a info SLA based on the context it is used
func (m *UAInfoSLA) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateByAvailability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateByHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateByWarningGeo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UAInfoSLA) contextValidateByAvailability(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ByAvailability.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sla" + "." + "by_availability")
		}
		return err
	}

	return nil
}

func (m *UAInfoSLA) contextValidateByHealth(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ByHealth.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sla" + "." + "by_health")
		}
		return err
	}

	return nil
}

func (m *UAInfoSLA) contextValidateByWarningGeo(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ByWarningGeo.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sla" + "." + "by_warning_geo")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UAInfoSLA) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UAInfoSLA) UnmarshalBinary(b []byte) error {
	var res UAInfoSLA
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
