// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceHealth service health
//
// swagger:model ServiceHealth
type ServiceHealth struct {

	// K/V map with metrics
	Metrics map[string]string `json:"metrics,omitempty"`

	// Service name
	// Required: true
	Name string `json:"name"`

	// Replication lag in seconds
	ReplicaLag int64 `json:"replica_lag,omitempty"`

	// Actual replication source FQDN. Available for replicas.
	ReplicaUpstream string `json:"replica_upstream,omitempty"`

	// replicatype
	Replicatype ServiceReplicaType `json:"replicatype,omitempty"`

	// role
	Role ServiceRole `json:"role,omitempty"`

	// status
	// Required: true
	Status *ServiceStatus `json:"status"`

	// Time and date of data in Unix Time format. Available only when status is known.
	// Required: true
	Timestamp int64 `json:"timestamp"`
}

// Validate validates this service health
func (m *ServiceHealth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicatype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceHealth) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ServiceHealth) validateReplicatype(formats strfmt.Registry) error {
	if swag.IsZero(m.Replicatype) { // not required
		return nil
	}

	if err := m.Replicatype.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("replicatype")
		}
		return err
	}

	return nil
}

func (m *ServiceHealth) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		}
		return err
	}

	return nil
}

func (m *ServiceHealth) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceHealth) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", int64(m.Timestamp)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service health based on the context it is used
func (m *ServiceHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplicatype(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceHealth) contextValidateReplicatype(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Replicatype.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("replicatype")
		}
		return err
	}

	return nil
}

func (m *ServiceHealth) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Role.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		}
		return err
	}

	return nil
}

func (m *ServiceHealth) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceHealth) UnmarshalBinary(b []byte) error {
	var res ServiceHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
