// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterStatus Allowed cluster statuses
//
// swagger:model ClusterStatus
type ClusterStatus string

func NewClusterStatus(value ClusterStatus) *ClusterStatus {
	v := value
	return &v
}

const (

	// ClusterStatusAlive captures enum value "Alive"
	ClusterStatusAlive ClusterStatus = "Alive"

	// ClusterStatusDegraded captures enum value "Degraded"
	ClusterStatusDegraded ClusterStatus = "Degraded"

	// ClusterStatusDead captures enum value "Dead"
	ClusterStatusDead ClusterStatus = "Dead"

	// ClusterStatusUnknown captures enum value "Unknown"
	ClusterStatusUnknown ClusterStatus = "Unknown"
)

// for schema
var clusterStatusEnum []interface{}

func init() {
	var res []ClusterStatus
	if err := json.Unmarshal([]byte(`["Alive","Degraded","Dead","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStatusEnum = append(clusterStatusEnum, v)
	}
}

func (m ClusterStatus) validateClusterStatusEnum(path, location string, value ClusterStatus) error {
	if err := validate.EnumCase(path, location, value, clusterStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster status
func (m ClusterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster status based on context it is used
func (m ClusterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
