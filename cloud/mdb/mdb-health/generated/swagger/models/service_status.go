// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServiceStatus Allowed service statuses
//
// swagger:model ServiceStatus
type ServiceStatus string

func NewServiceStatus(value ServiceStatus) *ServiceStatus {
	v := value
	return &v
}

const (

	// ServiceStatusAlive captures enum value "Alive"
	ServiceStatusAlive ServiceStatus = "Alive"

	// ServiceStatusDead captures enum value "Dead"
	ServiceStatusDead ServiceStatus = "Dead"

	// ServiceStatusUnknown captures enum value "Unknown"
	ServiceStatusUnknown ServiceStatus = "Unknown"
)

// for schema
var serviceStatusEnum []interface{}

func init() {
	var res []ServiceStatus
	if err := json.Unmarshal([]byte(`["Alive","Dead","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceStatusEnum = append(serviceStatusEnum, v)
	}
}

func (m ServiceStatus) validateServiceStatusEnum(path, location string, value ServiceStatus) error {
	if err := validate.EnumCase(path, location, value, serviceStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this service status
func (m ServiceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this service status based on context it is used
func (m ServiceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
