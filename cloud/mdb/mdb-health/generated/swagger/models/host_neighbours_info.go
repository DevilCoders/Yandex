// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostNeighboursInfo host neighbours info
//
// swagger:model HostNeighboursInfo
type HostNeighboursInfo struct {

	// Cluster ID this host belongs to
	Cid string `json:"cid,omitempty"`

	// Environment this host belongs to
	Env string `json:"env,omitempty"`

	// Host's fqdn
	// Required: true
	Fqdn string `json:"fqdn"`

	// This host belongs to HA cluster
	Hacluster bool `json:"hacluster,omitempty"`

	// This host belongs to HA shard
	Hashard bool `json:"hashard,omitempty"`

	// List of roles this host belongs to
	Roles []string `json:"roles"`

	// Other alive count of hosts in cluster or shard for same roles support
	Samerolesalive int64 `json:"samerolesalive,omitempty"`

	// The oldest timestamp of same roles hosts
	Samerolestimestamp int64 `json:"samerolestimestamp,omitempty"`

	// Other total count of hosts in cluster or shard for same roles support
	Samerolestotal int64 `json:"samerolestotal,omitempty"`

	// Shard ID this host belongs to
	Sid string `json:"sid,omitempty"`
}

// Validate validates this host neighbours info
func (m *HostNeighboursInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFqdn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostNeighboursInfo) validateFqdn(formats strfmt.Registry) error {

	if err := validate.RequiredString("fqdn", "body", m.Fqdn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this host neighbours info based on context it is used
func (m *HostNeighboursInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HostNeighboursInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostNeighboursInfo) UnmarshalBinary(b []byte) error {
	var res HostNeighboursInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
