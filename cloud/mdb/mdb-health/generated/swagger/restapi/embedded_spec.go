// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Accumulates cluster metrics per fqdn and allows querying accumulated data.",
    "title": "MDB Health",
    "contact": {
      "email": "sidh@yandex-team.ru"
    },
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/clusterhealth": {
      "get": {
        "tags": [
          "clusterhealth"
        ],
        "summary": "Returns cluster health information",
        "operationId": "GetClusterHealth",
        "parameters": [
          {
            "type": "string",
            "description": "Cluster ID to retrieve data for",
            "name": "cid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Data for requested cluster",
            "schema": {
              "$ref": "#/definitions/ClusterHealth"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        }
      ]
    },
    "/hostneighbours": {
      "get": {
        "tags": [
          "hostneighbours"
        ],
        "summary": "Returns db host neighbours information",
        "operationId": "GetHostNeighbours",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "List of fqdns to retrieve data for",
            "name": "fqdns",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Data for requested hosts",
            "schema": {
              "$ref": "#/definitions/HostNeighboursResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        }
      ]
    },
    "/hostshealth": {
      "get": {
        "tags": [
          "hostshealth"
        ],
        "summary": "Returns host status and metrics",
        "operationId": "GetHostsHealth",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "List of fqdns to retrieve data for",
            "name": "fqdns",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Data for requested hosts",
            "schema": {
              "$ref": "#/definitions/HostsHealthResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "hostshealth"
        ],
        "summary": "Update host status and metric",
        "operationId": "UpdateHostHealth",
        "parameters": [
          {
            "description": "Host health to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HostHealthUpdate"
            }
          },
          {
            "type": "string",
            "description": "Base64-encoded signature of request body. Uses RSA-PSS to sign SHA512(body).",
            "name": "X-Signature",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Host's health data updated"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        }
      ]
    },
    "/listhostshealth": {
      "post": {
        "tags": [
          "listhostshealth"
        ],
        "summary": "Returns hosts status and metrics",
        "operationId": "ListHostsHealth",
        "parameters": [
          {
            "description": "List of hosts fqdn for collect health status",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HostsList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data for requested hosts",
            "schema": {
              "$ref": "#/definitions/HostsHealthResp"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        }
      ]
    },
    "/ping": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Reports service status",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "Service is alive and well"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        }
      ]
    },
    "/stats": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Reports service stats",
        "operationId": "Stats",
        "responses": {
          "200": {
            "description": "Reports service stats",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/unhealthyaggregatedinfo": {
      "get": {
        "tags": [
          "unhealthyaggregatedinfo"
        ],
        "summary": "Reports unhealthy aggregated info",
        "operationId": "GetUnhealthyAggregatedInfo",
        "parameters": [
          {
            "enum": [
              "clusters",
              "shards"
            ],
            "type": "string",
            "description": "Type of aggregation",
            "name": "agg_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Type of cluster to aggregate",
            "name": "c_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Environment of cluster",
            "name": "env",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Reports aggregated info",
            "schema": {
              "$ref": "#/definitions/UAInfo"
            }
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/RequestIdHeader"
        }
      ]
    }
  },
  "definitions": {
    "CPUMetrics": {
      "description": "CPU used metrics",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Time and date in UNIX time format. Date of collecting CPU metrics",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "used": {
          "description": "Summary usage of CPU",
          "type": "number",
          "format": "float64",
          "x-nullable": false
        }
      }
    },
    "ClusterHealth": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "lastalivetimestamp": {
          "description": "Time and date of last alive cluster status in Unix Time format.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "status": {
          "x-nullable": false,
          "$ref": "#/definitions/ClusterStatus"
        },
        "timestamp": {
          "description": "The oldest known timestamp of service data in Unix Time format. It's mean we got status of cluster for this time.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "ClusterStatus": {
      "description": "Allowed cluster statuses",
      "type": "string",
      "enum": [
        "Alive",
        "Degraded",
        "Dead",
        "Unknown"
      ]
    },
    "DiskMetrics": {
      "description": "Disk used metrics",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Time and date in UNIX time format. Date of collecting disk metrics",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "total": {
          "description": "Total volume of disk",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "used": {
          "description": "Usage volume of disk",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        }
      }
    },
    "HostHealth": {
      "type": "object",
      "required": [
        "cid",
        "fqdn"
      ],
      "properties": {
        "cid": {
          "description": "Cluster ID this host belongs to",
          "type": "string",
          "x-nullable": false
        },
        "fqdn": {
          "description": "Host's fqdn",
          "type": "string",
          "x-nullable": false
        },
        "mode": {
          "x-nullable": false,
          "$ref": "#/definitions/HostMode"
        },
        "services": {
          "description": "List of services and their health",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceHealth"
          }
        },
        "status": {
          "x-nullable": false,
          "$ref": "#/definitions/HostStatus"
        },
        "system": {
          "$ref": "#/definitions/HostSystemMetrics"
        }
      }
    },
    "HostHealthUpdate": {
      "description": "Update of host health",
      "type": "object",
      "required": [
        "hosthealth"
      ],
      "properties": {
        "hosthealth": {
          "description": "Host health data",
          "x-nullable": false,
          "$ref": "#/definitions/HostHealth"
        },
        "ttl": {
          "description": "The custom TTL value in seconds for host health data.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "HostMode": {
      "description": "Host mode information like read and write availability.",
      "type": "object",
      "required": [
        "timestamp"
      ],
      "properties": {
        "instance_userfault_broken": {
          "description": "Is instance broken by user fault (space limit reached etc)",
          "type": "boolean",
          "x-nullable": false
        },
        "read": {
          "description": "Is read from host available",
          "type": "boolean",
          "x-nullable": false
        },
        "timestamp": {
          "description": "The timestamp of data in Unix Time format.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "write": {
          "description": "Is write to host available",
          "type": "boolean",
          "x-nullable": false
        }
      }
    },
    "HostNeighboursInfo": {
      "type": "object",
      "required": [
        "fqdn"
      ],
      "properties": {
        "cid": {
          "description": "Cluster ID this host belongs to",
          "type": "string",
          "x-nullable": false
        },
        "env": {
          "description": "Environment this host belongs to",
          "type": "string",
          "x-nullable": false
        },
        "fqdn": {
          "description": "Host's fqdn",
          "type": "string",
          "x-nullable": false
        },
        "hacluster": {
          "description": "This host belongs to HA cluster",
          "type": "boolean",
          "x-nullable": false
        },
        "hashard": {
          "description": "This host belongs to HA shard",
          "type": "boolean",
          "x-nullable": false
        },
        "roles": {
          "description": "List of roles this host belongs to",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "samerolesalive": {
          "description": "Other alive count of hosts in cluster or shard for same roles support",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "samerolestimestamp": {
          "description": "The oldest timestamp of same roles hosts",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "samerolestotal": {
          "description": "Other total count of hosts in cluster or shard for same roles support",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "sid": {
          "description": "Shard ID this host belongs to",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "HostNeighboursResp": {
      "description": "Result for request about hosts neighbours",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "List of hosts with information about hosts neighbours",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostNeighboursInfo"
          }
        }
      }
    },
    "HostStatus": {
      "description": "Allowed cluster statuses",
      "type": "string",
      "enum": [
        "Alive",
        "Degraded",
        "Dead",
        "Unknown"
      ]
    },
    "HostSystemMetrics": {
      "description": "Collection of system metrics",
      "type": "object",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/CPUMetrics"
        },
        "disk": {
          "$ref": "#/definitions/DiskMetrics"
        },
        "mem": {
          "$ref": "#/definitions/MemoryMetrics"
        }
      }
    },
    "HostsHealthResp": {
      "description": "Health of number of hosts",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "List of hosts with their health",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostHealth"
          }
        }
      }
    },
    "HostsList": {
      "description": "Update of host health",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "List of fqdns to retrieve data for",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MemoryMetrics": {
      "description": "Memory used metrics",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Time and date in UNIX time format. Date of collecting memory metrics",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "total": {
          "description": "Total volume of memory",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "used": {
          "description": "Usage volume of memory",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "ServiceHealth": {
      "type": "object",
      "required": [
        "name",
        "timestamp",
        "status"
      ],
      "properties": {
        "metrics": {
          "description": "K/V map with metrics",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Service name",
          "type": "string",
          "x-nullable": false
        },
        "replica_lag": {
          "description": "Replication lag in seconds",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "replica_upstream": {
          "description": "Actual replication source FQDN. Available for replicas.",
          "type": "string",
          "x-nullable": false
        },
        "replicatype": {
          "x-nullable": false,
          "$ref": "#/definitions/ServiceReplicaType"
        },
        "role": {
          "x-nullable": false,
          "$ref": "#/definitions/ServiceRole"
        },
        "status": {
          "x-nullable": false,
          "$ref": "#/definitions/ServiceStatus"
        },
        "timestamp": {
          "description": "Time and date of data in Unix Time format. Available only when status is known.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "ServiceReplicaType": {
      "description": "Replica type for service",
      "type": "string",
      "enum": [
        "Unknown",
        "Async",
        "Quorum",
        "Sync"
      ]
    },
    "ServiceRole": {
      "description": "Allowed service roles",
      "type": "string",
      "enum": [
        "Master",
        "Replica",
        "Unknown"
      ]
    },
    "ServiceStatus": {
      "description": "Allowed service statuses",
      "type": "string",
      "enum": [
        "Alive",
        "Dead",
        "Unknown"
      ]
    },
    "Stats": {
      "description": "Collection of service stats",
      "type": "array",
      "items": {
        "description": "Specific stats",
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    },
    "UAAvailability": {
      "description": "Array of clusters/shards which are readable or writable and its read/write counts.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "x-omitempty": false
          },
          "examples": {
            "type": "array",
            "items": {
              "description": "IDs of cluster or shard",
              "type": "string"
            }
          },
          "no_read_count": {
            "type": "integer",
            "format": "int64",
            "x-omitempty": false
          },
          "no_write_count": {
            "type": "integer",
            "format": "int64",
            "x-omitempty": false
          },
          "readable": {
            "type": "boolean",
            "x-omitempty": false
          },
          "userfaultBroken": {
            "type": "boolean",
            "x-omitempty": false
          },
          "writable": {
            "type": "boolean",
            "x-omitempty": false
          }
        }
      }
    },
    "UAHealth": {
      "description": "Array of status and its counts",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "x-omitempty": false
          },
          "examples": {
            "type": "array",
            "items": {
              "description": "IDs of cluster or shard",
              "type": "string"
            }
          },
          "status": {
            "$ref": "#/definitions/ClusterStatus"
          }
        }
      }
    },
    "UAInfo": {
      "type": "object",
      "properties": {
        "no_sla": {
          "type": "object",
          "properties": {
            "by_availability": {
              "$ref": "#/definitions/UAAvailability"
            },
            "by_health": {
              "$ref": "#/definitions/UAHealth"
            },
            "by_warning_geo": {
              "$ref": "#/definitions/UAWarningGeo"
            }
          }
        },
        "sla": {
          "type": "object",
          "properties": {
            "by_availability": {
              "$ref": "#/definitions/UAAvailability"
            },
            "by_health": {
              "$ref": "#/definitions/UAHealth"
            },
            "by_warning_geo": {
              "$ref": "#/definitions/UAWarningGeo"
            }
          }
        }
      }
    },
    "UAWarningGeo": {
      "description": "Array of geos in warning state and its counts",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "x-omitempty": false
          },
          "examples": {
            "type": "array",
            "items": {
              "description": "IDs of cluster or shard",
              "type": "string"
            }
          },
          "geo": {
            "description": "IDs of geo",
            "type": "string"
          }
        }
      }
    }
  },
  "parameters": {
    "RequestIdHeader": {
      "type": "string",
      "description": "Unique request ID (must be generated for each separate request, even retries)",
      "name": "X-Request-Id",
      "in": "header"
    }
  },
  "responses": {
    "Error": {
      "description": "Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Accumulates cluster metrics per fqdn and allows querying accumulated data.",
    "title": "MDB Health",
    "contact": {
      "email": "sidh@yandex-team.ru"
    },
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/clusterhealth": {
      "get": {
        "tags": [
          "clusterhealth"
        ],
        "summary": "Returns cluster health information",
        "operationId": "GetClusterHealth",
        "parameters": [
          {
            "type": "string",
            "description": "Cluster ID to retrieve data for",
            "name": "cid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Data for requested cluster",
            "schema": {
              "$ref": "#/definitions/ClusterHealth"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        }
      ]
    },
    "/hostneighbours": {
      "get": {
        "tags": [
          "hostneighbours"
        ],
        "summary": "Returns db host neighbours information",
        "operationId": "GetHostNeighbours",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "List of fqdns to retrieve data for",
            "name": "fqdns",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Data for requested hosts",
            "schema": {
              "$ref": "#/definitions/HostNeighboursResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        }
      ]
    },
    "/hostshealth": {
      "get": {
        "tags": [
          "hostshealth"
        ],
        "summary": "Returns host status and metrics",
        "operationId": "GetHostsHealth",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "List of fqdns to retrieve data for",
            "name": "fqdns",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Data for requested hosts",
            "schema": {
              "$ref": "#/definitions/HostsHealthResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "hostshealth"
        ],
        "summary": "Update host status and metric",
        "operationId": "UpdateHostHealth",
        "parameters": [
          {
            "description": "Host health to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HostHealthUpdate"
            }
          },
          {
            "type": "string",
            "description": "Base64-encoded signature of request body. Uses RSA-PSS to sign SHA512(body).",
            "name": "X-Signature",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Host's health data updated"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        }
      ]
    },
    "/listhostshealth": {
      "post": {
        "tags": [
          "listhostshealth"
        ],
        "summary": "Returns hosts status and metrics",
        "operationId": "ListHostsHealth",
        "parameters": [
          {
            "description": "List of hosts fqdn for collect health status",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HostsList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data for requested hosts",
            "schema": {
              "$ref": "#/definitions/HostsHealthResp"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        }
      ]
    },
    "/ping": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Reports service status",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "Service is alive and well"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        }
      ]
    },
    "/stats": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Reports service stats",
        "operationId": "Stats",
        "responses": {
          "200": {
            "description": "Reports service stats",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unhealthyaggregatedinfo": {
      "get": {
        "tags": [
          "unhealthyaggregatedinfo"
        ],
        "summary": "Reports unhealthy aggregated info",
        "operationId": "GetUnhealthyAggregatedInfo",
        "parameters": [
          {
            "enum": [
              "clusters",
              "shards"
            ],
            "type": "string",
            "description": "Type of aggregation",
            "name": "agg_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Type of cluster to aggregate",
            "name": "c_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Environment of cluster",
            "name": "env",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Reports aggregated info",
            "schema": {
              "$ref": "#/definitions/UAInfo"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique request ID (must be generated for each separate request, even retries)",
          "name": "X-Request-Id",
          "in": "header"
        }
      ]
    }
  },
  "definitions": {
    "CPUMetrics": {
      "description": "CPU used metrics",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Time and date in UNIX time format. Date of collecting CPU metrics",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "used": {
          "description": "Summary usage of CPU",
          "type": "number",
          "format": "float64",
          "x-nullable": false
        }
      }
    },
    "ClusterHealth": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "lastalivetimestamp": {
          "description": "Time and date of last alive cluster status in Unix Time format.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "status": {
          "x-nullable": false,
          "$ref": "#/definitions/ClusterStatus"
        },
        "timestamp": {
          "description": "The oldest known timestamp of service data in Unix Time format. It's mean we got status of cluster for this time.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "ClusterStatus": {
      "description": "Allowed cluster statuses",
      "type": "string",
      "enum": [
        "Alive",
        "Degraded",
        "Dead",
        "Unknown"
      ]
    },
    "DiskMetrics": {
      "description": "Disk used metrics",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Time and date in UNIX time format. Date of collecting disk metrics",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "total": {
          "description": "Total volume of disk",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "used": {
          "description": "Usage volume of disk",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        }
      }
    },
    "HostHealth": {
      "type": "object",
      "required": [
        "cid",
        "fqdn"
      ],
      "properties": {
        "cid": {
          "description": "Cluster ID this host belongs to",
          "type": "string",
          "x-nullable": false
        },
        "fqdn": {
          "description": "Host's fqdn",
          "type": "string",
          "x-nullable": false
        },
        "mode": {
          "x-nullable": false,
          "$ref": "#/definitions/HostMode"
        },
        "services": {
          "description": "List of services and their health",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceHealth"
          }
        },
        "status": {
          "x-nullable": false,
          "$ref": "#/definitions/HostStatus"
        },
        "system": {
          "$ref": "#/definitions/HostSystemMetrics"
        }
      }
    },
    "HostHealthUpdate": {
      "description": "Update of host health",
      "type": "object",
      "required": [
        "hosthealth"
      ],
      "properties": {
        "hosthealth": {
          "description": "Host health data",
          "x-nullable": false,
          "$ref": "#/definitions/HostHealth"
        },
        "ttl": {
          "description": "The custom TTL value in seconds for host health data.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "HostMode": {
      "description": "Host mode information like read and write availability.",
      "type": "object",
      "required": [
        "timestamp"
      ],
      "properties": {
        "instance_userfault_broken": {
          "description": "Is instance broken by user fault (space limit reached etc)",
          "type": "boolean",
          "x-nullable": false
        },
        "read": {
          "description": "Is read from host available",
          "type": "boolean",
          "x-nullable": false
        },
        "timestamp": {
          "description": "The timestamp of data in Unix Time format.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "write": {
          "description": "Is write to host available",
          "type": "boolean",
          "x-nullable": false
        }
      }
    },
    "HostNeighboursInfo": {
      "type": "object",
      "required": [
        "fqdn"
      ],
      "properties": {
        "cid": {
          "description": "Cluster ID this host belongs to",
          "type": "string",
          "x-nullable": false
        },
        "env": {
          "description": "Environment this host belongs to",
          "type": "string",
          "x-nullable": false
        },
        "fqdn": {
          "description": "Host's fqdn",
          "type": "string",
          "x-nullable": false
        },
        "hacluster": {
          "description": "This host belongs to HA cluster",
          "type": "boolean",
          "x-nullable": false
        },
        "hashard": {
          "description": "This host belongs to HA shard",
          "type": "boolean",
          "x-nullable": false
        },
        "roles": {
          "description": "List of roles this host belongs to",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "samerolesalive": {
          "description": "Other alive count of hosts in cluster or shard for same roles support",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "samerolestimestamp": {
          "description": "The oldest timestamp of same roles hosts",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "samerolestotal": {
          "description": "Other total count of hosts in cluster or shard for same roles support",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "sid": {
          "description": "Shard ID this host belongs to",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "HostNeighboursResp": {
      "description": "Result for request about hosts neighbours",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "List of hosts with information about hosts neighbours",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostNeighboursInfo"
          }
        }
      }
    },
    "HostStatus": {
      "description": "Allowed cluster statuses",
      "type": "string",
      "enum": [
        "Alive",
        "Degraded",
        "Dead",
        "Unknown"
      ]
    },
    "HostSystemMetrics": {
      "description": "Collection of system metrics",
      "type": "object",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/CPUMetrics"
        },
        "disk": {
          "$ref": "#/definitions/DiskMetrics"
        },
        "mem": {
          "$ref": "#/definitions/MemoryMetrics"
        }
      }
    },
    "HostsHealthResp": {
      "description": "Health of number of hosts",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "List of hosts with their health",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostHealth"
          }
        }
      }
    },
    "HostsList": {
      "description": "Update of host health",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "List of fqdns to retrieve data for",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MemoryMetrics": {
      "description": "Memory used metrics",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Time and date in UNIX time format. Date of collecting memory metrics",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "total": {
          "description": "Total volume of memory",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "used": {
          "description": "Usage volume of memory",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "ServiceHealth": {
      "type": "object",
      "required": [
        "name",
        "timestamp",
        "status"
      ],
      "properties": {
        "metrics": {
          "description": "K/V map with metrics",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Service name",
          "type": "string",
          "x-nullable": false
        },
        "replica_lag": {
          "description": "Replication lag in seconds",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "replica_upstream": {
          "description": "Actual replication source FQDN. Available for replicas.",
          "type": "string",
          "x-nullable": false
        },
        "replicatype": {
          "x-nullable": false,
          "$ref": "#/definitions/ServiceReplicaType"
        },
        "role": {
          "x-nullable": false,
          "$ref": "#/definitions/ServiceRole"
        },
        "status": {
          "x-nullable": false,
          "$ref": "#/definitions/ServiceStatus"
        },
        "timestamp": {
          "description": "Time and date of data in Unix Time format. Available only when status is known.",
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        }
      }
    },
    "ServiceReplicaType": {
      "description": "Replica type for service",
      "type": "string",
      "enum": [
        "Unknown",
        "Async",
        "Quorum",
        "Sync"
      ]
    },
    "ServiceRole": {
      "description": "Allowed service roles",
      "type": "string",
      "enum": [
        "Master",
        "Replica",
        "Unknown"
      ]
    },
    "ServiceStatus": {
      "description": "Allowed service statuses",
      "type": "string",
      "enum": [
        "Alive",
        "Dead",
        "Unknown"
      ]
    },
    "Stats": {
      "description": "Collection of service stats",
      "type": "array",
      "items": {
        "description": "Specific stats",
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    },
    "UAAvailability": {
      "description": "Array of clusters/shards which are readable or writable and its read/write counts.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UAAvailabilityItems0"
      }
    },
    "UAAvailabilityItems0": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "examples": {
          "type": "array",
          "items": {
            "description": "IDs of cluster or shard",
            "type": "string"
          }
        },
        "no_read_count": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "no_write_count": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "readable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "userfaultBroken": {
          "type": "boolean",
          "x-omitempty": false
        },
        "writable": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "UAHealth": {
      "description": "Array of status and its counts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UAHealthItems0"
      }
    },
    "UAHealthItems0": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "examples": {
          "type": "array",
          "items": {
            "description": "IDs of cluster or shard",
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        }
      }
    },
    "UAInfo": {
      "type": "object",
      "properties": {
        "no_sla": {
          "type": "object",
          "properties": {
            "by_availability": {
              "$ref": "#/definitions/UAAvailability"
            },
            "by_health": {
              "$ref": "#/definitions/UAHealth"
            },
            "by_warning_geo": {
              "$ref": "#/definitions/UAWarningGeo"
            }
          }
        },
        "sla": {
          "type": "object",
          "properties": {
            "by_availability": {
              "$ref": "#/definitions/UAAvailability"
            },
            "by_health": {
              "$ref": "#/definitions/UAHealth"
            },
            "by_warning_geo": {
              "$ref": "#/definitions/UAWarningGeo"
            }
          }
        }
      }
    },
    "UAInfoNoSLA": {
      "type": "object",
      "properties": {
        "by_availability": {
          "$ref": "#/definitions/UAAvailability"
        },
        "by_health": {
          "$ref": "#/definitions/UAHealth"
        },
        "by_warning_geo": {
          "$ref": "#/definitions/UAWarningGeo"
        }
      }
    },
    "UAInfoSLA": {
      "type": "object",
      "properties": {
        "by_availability": {
          "$ref": "#/definitions/UAAvailability"
        },
        "by_health": {
          "$ref": "#/definitions/UAHealth"
        },
        "by_warning_geo": {
          "$ref": "#/definitions/UAWarningGeo"
        }
      }
    },
    "UAWarningGeo": {
      "description": "Array of geos in warning state and its counts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UAWarningGeoItems0"
      }
    },
    "UAWarningGeoItems0": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "examples": {
          "type": "array",
          "items": {
            "description": "IDs of cluster or shard",
            "type": "string"
          }
        },
        "geo": {
          "description": "IDs of geo",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "RequestIdHeader": {
      "type": "string",
      "description": "Unique request ID (must be generated for each separate request, even retries)",
      "name": "X-Request-Id",
      "in": "header"
    }
  },
  "responses": {
    "Error": {
      "description": "Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
}
