// Code generated by go-swagger; DO NOT EDIT.

package hostshealth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetHostsHealthHandlerFunc turns a function with the right signature into a get hosts health handler
type GetHostsHealthHandlerFunc func(GetHostsHealthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHostsHealthHandlerFunc) Handle(params GetHostsHealthParams) middleware.Responder {
	return fn(params)
}

// GetHostsHealthHandler interface for that can handle valid get hosts health params
type GetHostsHealthHandler interface {
	Handle(GetHostsHealthParams) middleware.Responder
}

// NewGetHostsHealth creates a new http.Handler for the get hosts health operation
func NewGetHostsHealth(ctx *middleware.Context, handler GetHostsHealthHandler) *GetHostsHealth {
	return &GetHostsHealth{Context: ctx, Handler: handler}
}

/* GetHostsHealth swagger:route GET /hostshealth hostshealth getHostsHealth

Returns host status and metrics

*/
type GetHostsHealth struct {
	Context *middleware.Context
	Handler GetHostsHealthHandler
}

func (o *GetHostsHealth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetHostsHealthParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
