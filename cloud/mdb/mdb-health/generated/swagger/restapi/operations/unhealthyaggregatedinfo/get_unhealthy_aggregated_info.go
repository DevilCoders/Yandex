// Code generated by go-swagger; DO NOT EDIT.

package unhealthyaggregatedinfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUnhealthyAggregatedInfoHandlerFunc turns a function with the right signature into a get unhealthy aggregated info handler
type GetUnhealthyAggregatedInfoHandlerFunc func(GetUnhealthyAggregatedInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUnhealthyAggregatedInfoHandlerFunc) Handle(params GetUnhealthyAggregatedInfoParams) middleware.Responder {
	return fn(params)
}

// GetUnhealthyAggregatedInfoHandler interface for that can handle valid get unhealthy aggregated info params
type GetUnhealthyAggregatedInfoHandler interface {
	Handle(GetUnhealthyAggregatedInfoParams) middleware.Responder
}

// NewGetUnhealthyAggregatedInfo creates a new http.Handler for the get unhealthy aggregated info operation
func NewGetUnhealthyAggregatedInfo(ctx *middleware.Context, handler GetUnhealthyAggregatedInfoHandler) *GetUnhealthyAggregatedInfo {
	return &GetUnhealthyAggregatedInfo{Context: ctx, Handler: handler}
}

/* GetUnhealthyAggregatedInfo swagger:route GET /unhealthyaggregatedinfo unhealthyaggregatedinfo getUnhealthyAggregatedInfo

Reports unhealthy aggregated info

*/
type GetUnhealthyAggregatedInfo struct {
	Context *middleware.Context
	Handler GetUnhealthyAggregatedInfoHandler
}

func (o *GetUnhealthyAggregatedInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUnhealthyAggregatedInfoParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
