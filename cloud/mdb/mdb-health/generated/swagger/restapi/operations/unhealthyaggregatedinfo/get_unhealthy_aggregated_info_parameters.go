// Code generated by go-swagger; DO NOT EDIT.

package unhealthyaggregatedinfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetUnhealthyAggregatedInfoParams creates a new GetUnhealthyAggregatedInfoParams object
//
// There are no default values defined in the spec.
func NewGetUnhealthyAggregatedInfoParams() GetUnhealthyAggregatedInfoParams {

	return GetUnhealthyAggregatedInfoParams{}
}

// GetUnhealthyAggregatedInfoParams contains all the bound params for the get unhealthy aggregated info operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetUnhealthyAggregatedInfo
type GetUnhealthyAggregatedInfoParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Unique request ID (must be generated for each separate request, even retries)
	  In: header
	*/
	XRequestID *string
	/*Type of aggregation
	  Required: true
	  In: query
	*/
	AggType string
	/*Type of cluster to aggregate
	  Required: true
	  In: query
	*/
	CType string
	/*Environment of cluster
	  In: query
	*/
	Env *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetUnhealthyAggregatedInfoParams() beforehand.
func (o *GetUnhealthyAggregatedInfoParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-Id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qAggType, qhkAggType, _ := qs.GetOK("agg_type")
	if err := o.bindAggType(qAggType, qhkAggType, route.Formats); err != nil {
		res = append(res, err)
	}

	qCType, qhkCType, _ := qs.GetOK("c_type")
	if err := o.bindCType(qCType, qhkCType, route.Formats); err != nil {
		res = append(res, err)
	}

	qEnv, qhkEnv, _ := qs.GetOK("env")
	if err := o.bindEnv(qEnv, qhkEnv, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *GetUnhealthyAggregatedInfoParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.XRequestID = &raw

	return nil
}

// bindAggType binds and validates parameter AggType from query.
func (o *GetUnhealthyAggregatedInfoParams) bindAggType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("agg_type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("agg_type", "query", raw); err != nil {
		return err
	}
	o.AggType = raw

	if err := o.validateAggType(formats); err != nil {
		return err
	}

	return nil
}

// validateAggType carries on validations for parameter AggType
func (o *GetUnhealthyAggregatedInfoParams) validateAggType(formats strfmt.Registry) error {

	if err := validate.EnumCase("agg_type", "query", o.AggType, []interface{}{"clusters", "shards"}, true); err != nil {
		return err
	}

	return nil
}

// bindCType binds and validates parameter CType from query.
func (o *GetUnhealthyAggregatedInfoParams) bindCType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("c_type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("c_type", "query", raw); err != nil {
		return err
	}
	o.CType = raw

	return nil
}

// bindEnv binds and validates parameter Env from query.
func (o *GetUnhealthyAggregatedInfoParams) bindEnv(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Env = &raw

	return nil
}
