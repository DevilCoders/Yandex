// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-health/pkg/client (interfaces: MDBHealthClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	crypto "a.yandex-team.ru/cloud/mdb/internal/crypto"
	client "a.yandex-team.ru/cloud/mdb/mdb-health/pkg/client"
	types "a.yandex-team.ru/cloud/mdb/mdb-health/pkg/core/types"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMDBHealthClient is a mock of MDBHealthClient interface.
type MockMDBHealthClient struct {
	ctrl     *gomock.Controller
	recorder *MockMDBHealthClientMockRecorder
}

// MockMDBHealthClientMockRecorder is the mock recorder for MockMDBHealthClient.
type MockMDBHealthClientMockRecorder struct {
	mock *MockMDBHealthClient
}

// NewMockMDBHealthClient creates a new mock instance.
func NewMockMDBHealthClient(ctrl *gomock.Controller) *MockMDBHealthClient {
	mock := &MockMDBHealthClient{ctrl: ctrl}
	mock.recorder = &MockMDBHealthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMDBHealthClient) EXPECT() *MockMDBHealthClientMockRecorder {
	return m.recorder
}

// GetClusterHealth mocks base method.
func (m *MockMDBHealthClient) GetClusterHealth(arg0 context.Context, arg1 string) (client.ClusterHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterHealth", arg0, arg1)
	ret0, _ := ret[0].(client.ClusterHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterHealth indicates an expected call of GetClusterHealth.
func (mr *MockMDBHealthClientMockRecorder) GetClusterHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterHealth", reflect.TypeOf((*MockMDBHealthClient)(nil).GetClusterHealth), arg0, arg1)
}

// GetHostNeighboursInfo mocks base method.
func (m *MockMDBHealthClient) GetHostNeighboursInfo(arg0 context.Context, arg1 []string) (map[string]types.HostNeighboursInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostNeighboursInfo", arg0, arg1)
	ret0, _ := ret[0].(map[string]types.HostNeighboursInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostNeighboursInfo indicates an expected call of GetHostNeighboursInfo.
func (mr *MockMDBHealthClientMockRecorder) GetHostNeighboursInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostNeighboursInfo", reflect.TypeOf((*MockMDBHealthClient)(nil).GetHostNeighboursInfo), arg0, arg1)
}

// GetHostsHealth mocks base method.
func (m *MockMDBHealthClient) GetHostsHealth(arg0 context.Context, arg1 []string) ([]types.HostHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsHealth", arg0, arg1)
	ret0, _ := ret[0].([]types.HostHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsHealth indicates an expected call of GetHostsHealth.
func (mr *MockMDBHealthClientMockRecorder) GetHostsHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsHealth", reflect.TypeOf((*MockMDBHealthClient)(nil).GetHostsHealth), arg0, arg1)
}

// Ping mocks base method.
func (m *MockMDBHealthClient) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMDBHealthClientMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMDBHealthClient)(nil).Ping), arg0)
}

// Stats mocks base method.
func (m *MockMDBHealthClient) Stats(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockMDBHealthClientMockRecorder) Stats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockMDBHealthClient)(nil).Stats), arg0)
}

// UpdateHostHealth mocks base method.
func (m *MockMDBHealthClient) UpdateHostHealth(arg0 context.Context, arg1 types.HostHealth, arg2 *crypto.PrivateKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHostHealth indicates an expected call of UpdateHostHealth.
func (mr *MockMDBHealthClientMockRecorder) UpdateHostHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostHealth", reflect.TypeOf((*MockMDBHealthClient)(nil).UpdateHostHealth), arg0, arg1, arg2)
}
