// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-health/pkg/datastore (interfaces: Backend)

// Package mocks is a generated GoMock package.
package mocks

import (
	metadb "a.yandex-team.ru/cloud/mdb/internal/metadb"
	unhealthy "a.yandex-team.ru/cloud/mdb/mdb-health/internal/unhealthy"
	types "a.yandex-team.ru/cloud/mdb/mdb-health/pkg/core/types"
	datastore "a.yandex-team.ru/cloud/mdb/mdb-health/pkg/datastore"
	healthstore "a.yandex-team.ru/cloud/mdb/mdb-health/pkg/healthstore"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CaptureTheLead mocks base method.
func (m *MockBackend) CaptureTheLead(arg0 context.Context, arg1 string, arg2 time.Time, arg3 time.Duration) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureTheLead", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CaptureTheLead indicates an expected call of CaptureTheLead.
func (mr *MockBackendMockRecorder) CaptureTheLead(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureTheLead", reflect.TypeOf((*MockBackend)(nil).CaptureTheLead), arg0, arg1, arg2, arg3)
}

// Close mocks base method.
func (m *MockBackend) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBackend)(nil).Close))
}

// GetClusterHealth mocks base method.
func (m *MockBackend) GetClusterHealth(arg0 context.Context, arg1 string) (types.ClusterHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterHealth", arg0, arg1)
	ret0, _ := ret[0].(types.ClusterHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterHealth indicates an expected call of GetClusterHealth.
func (mr *MockBackendMockRecorder) GetClusterHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterHealth", reflect.TypeOf((*MockBackend)(nil).GetClusterHealth), arg0, arg1)
}

// GetHostNeighboursInfo mocks base method.
func (m *MockBackend) GetHostNeighboursInfo(arg0 context.Context, arg1 []string) (map[string]types.HostNeighboursInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostNeighboursInfo", arg0, arg1)
	ret0, _ := ret[0].(map[string]types.HostNeighboursInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostNeighboursInfo indicates an expected call of GetHostNeighboursInfo.
func (mr *MockBackendMockRecorder) GetHostNeighboursInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostNeighboursInfo", reflect.TypeOf((*MockBackend)(nil).GetHostNeighboursInfo), arg0, arg1)
}

// IsReady mocks base method.
func (m *MockBackend) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockBackendMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockBackend)(nil).IsReady), arg0)
}

// LoadAggregateInfo mocks base method.
func (m *MockBackend) LoadAggregateInfo(arg0 context.Context) ([]datastore.AggregatedInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAggregateInfo", arg0)
	ret0, _ := ret[0].([]datastore.AggregatedInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAggregateInfo indicates an expected call of LoadAggregateInfo.
func (mr *MockBackendMockRecorder) LoadAggregateInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAggregateInfo", reflect.TypeOf((*MockBackend)(nil).LoadAggregateInfo), arg0)
}

// LoadClusterSecret mocks base method.
func (m *MockBackend) LoadClusterSecret(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadClusterSecret", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadClusterSecret indicates an expected call of LoadClusterSecret.
func (mr *MockBackendMockRecorder) LoadClusterSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadClusterSecret", reflect.TypeOf((*MockBackend)(nil).LoadClusterSecret), arg0, arg1)
}

// LoadFewClustersHealth mocks base method.
func (m *MockBackend) LoadFewClustersHealth(arg0 context.Context, arg1 metadb.ClusterType, arg2 string) (datastore.FewClusterHealthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFewClustersHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(datastore.FewClusterHealthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFewClustersHealth indicates an expected call of LoadFewClustersHealth.
func (mr *MockBackendMockRecorder) LoadFewClustersHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFewClustersHealth", reflect.TypeOf((*MockBackend)(nil).LoadFewClustersHealth), arg0, arg1, arg2)
}

// LoadHostsHealth mocks base method.
func (m *MockBackend) LoadHostsHealth(arg0 context.Context, arg1 []string) ([]types.HostHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadHostsHealth", arg0, arg1)
	ret0, _ := ret[0].([]types.HostHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadHostsHealth indicates an expected call of LoadHostsHealth.
func (mr *MockBackendMockRecorder) LoadHostsHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHostsHealth", reflect.TypeOf((*MockBackend)(nil).LoadHostsHealth), arg0, arg1)
}

// LoadUnhealthyAggregatedInfo mocks base method.
func (m *MockBackend) LoadUnhealthyAggregatedInfo(arg0 context.Context, arg1 metadb.ClusterType, arg2 types.AggType) (unhealthy.UAInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUnhealthyAggregatedInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(unhealthy.UAInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUnhealthyAggregatedInfo indicates an expected call of LoadUnhealthyAggregatedInfo.
func (mr *MockBackendMockRecorder) LoadUnhealthyAggregatedInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUnhealthyAggregatedInfo", reflect.TypeOf((*MockBackend)(nil).LoadUnhealthyAggregatedInfo), arg0, arg1, arg2)
}

// Name mocks base method.
func (m *MockBackend) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBackendMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBackend)(nil).Name))
}

// RetouchTopology mocks base method.
func (m *MockBackend) RetouchTopology(arg0 context.Context, arg1 []metadb.ClusterRev, arg2 time.Duration) ([]metadb.ClusterRev, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetouchTopology", arg0, arg1, arg2)
	ret0, _ := ret[0].([]metadb.ClusterRev)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetouchTopology indicates an expected call of RetouchTopology.
func (mr *MockBackendMockRecorder) RetouchTopology(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetouchTopology", reflect.TypeOf((*MockBackend)(nil).RetouchTopology), arg0, arg1, arg2)
}

// SaveClustersHealth mocks base method.
func (m *MockBackend) SaveClustersHealth(arg0 context.Context, arg1 []types.ClusterHealth, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClustersHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveClustersHealth indicates an expected call of SaveClustersHealth.
func (mr *MockBackendMockRecorder) SaveClustersHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClustersHealth", reflect.TypeOf((*MockBackend)(nil).SaveClustersHealth), arg0, arg1, arg2)
}

// SetAggregateInfo mocks base method.
func (m *MockBackend) SetAggregateInfo(arg0 context.Context, arg1 datastore.AggregatedInfo, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAggregateInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAggregateInfo indicates an expected call of SetAggregateInfo.
func (mr *MockBackendMockRecorder) SetAggregateInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAggregateInfo", reflect.TypeOf((*MockBackend)(nil).SetAggregateInfo), arg0, arg1, arg2)
}

// SetClustersTopology mocks base method.
func (m *MockBackend) SetClustersTopology(arg0 context.Context, arg1 []datastore.ClusterTopology, arg2 time.Duration, arg3 metadb.MetaDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClustersTopology", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClustersTopology indicates an expected call of SetClustersTopology.
func (mr *MockBackendMockRecorder) SetClustersTopology(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClustersTopology", reflect.TypeOf((*MockBackend)(nil).SetClustersTopology), arg0, arg1, arg2, arg3)
}

// SetUnhealthyAggregatedInfo mocks base method.
func (m *MockBackend) SetUnhealthyAggregatedInfo(arg0 context.Context, arg1 metadb.ClusterType, arg2 unhealthy.UAInfo, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnhealthyAggregatedInfo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnhealthyAggregatedInfo indicates an expected call of SetUnhealthyAggregatedInfo.
func (mr *MockBackendMockRecorder) SetUnhealthyAggregatedInfo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnhealthyAggregatedInfo", reflect.TypeOf((*MockBackend)(nil).SetUnhealthyAggregatedInfo), arg0, arg1, arg2, arg3)
}

// StoreClusterSecret mocks base method.
func (m *MockBackend) StoreClusterSecret(arg0 context.Context, arg1 string, arg2 []byte, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreClusterSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreClusterSecret indicates an expected call of StoreClusterSecret.
func (mr *MockBackendMockRecorder) StoreClusterSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClusterSecret", reflect.TypeOf((*MockBackend)(nil).StoreClusterSecret), arg0, arg1, arg2, arg3)
}

// StoreHostHealth mocks base method.
func (m *MockBackend) StoreHostHealth(arg0 context.Context, arg1 types.HostHealth, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreHostHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreHostHealth indicates an expected call of StoreHostHealth.
func (mr *MockBackendMockRecorder) StoreHostHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreHostHealth", reflect.TypeOf((*MockBackend)(nil).StoreHostHealth), arg0, arg1, arg2)
}

// StoreHostsHealth mocks base method.
func (m *MockBackend) StoreHostsHealth(arg0 context.Context, arg1 []healthstore.HostHealthToStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreHostsHealth", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreHostsHealth indicates an expected call of StoreHostsHealth.
func (mr *MockBackendMockRecorder) StoreHostsHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreHostsHealth", reflect.TypeOf((*MockBackend)(nil).StoreHostsHealth), arg0, arg1)
}

// WriteStats mocks base method.
func (m *MockBackend) WriteStats() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteStats")
}

// WriteStats indicates an expected call of WriteStats.
func (mr *MockBackendMockRecorder) WriteStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStats", reflect.TypeOf((*MockBackend)(nil).WriteStats))
}
