"""
Django settings for mdbui project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import configparser
import os
import sys

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

from .installation import InstallationType

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = '/var/ui/'

config = configparser.ConfigParser()
ETC_DIR = os.environ.get('UI_CONFIG_DIR')
if ETC_DIR is not None:
    CONFIG_FILE = os.path.join(ETC_DIR, 'config.ini')
    config.read(CONFIG_FILE)
else:
    UI_LOAD_CONFIG_FROM_PKG = os.environ.get('UI_LOAD_CONFIG_FROM_PKG')

    import pkgutil

    load_from = UI_LOAD_CONFIG_FROM_PKG.split(',')  # noqa
    result = pkgutil.get_data(*load_from)
    config.read_string(result.decode('UTF-8'))  # noqa


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/
BASE_HOST = config['main'].get('BASE_HOST', None)

ALLOWED_HOSTS = ['localhost', '*']
if ':' in BASE_HOST:
    ALLOWED_HOSTS.append(BASE_HOST[: BASE_HOST.find(':')])
else:
    ALLOWED_HOSTS.append(BASE_HOST)
if 'BALANCER_IP' in config['main']:
    ALLOWED_HOSTS.append('[' + config['main'].get('BALANCER_IP') + ']')

DEBUG = config['main'].getboolean('DEBUG', False)  # noqa
SECRET_KEY = os.environ.get('UI_SECRET_KEY')
INSTALLATION = InstallationType(config['main']['INSTALLATION'])

# Application definition


INSTALLED_APPS = [
    'django_object_actions',
    'admin_tools',
    'admin_tools.theming',
    'admin_tools.menu',
    'admin_tools.dashboard',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'nested_inline',
    'django_admin_inline_paginator',
]


from .enabled_apps import KnownEnabledApps

UI_APPS = config['apps']
ENABLED_APPS = KnownEnabledApps(
    cms=UI_APPS.getboolean('CMS', False),
    meta=UI_APPS.getboolean('META', False),
    deploy=UI_APPS.getboolean('DEPLOY', False),
    katan=UI_APPS.getboolean('KATAN', False),
    dbm=UI_APPS.getboolean('DBM', False),
)

APP_MAP = {
    'cloud.mdb.ui.internal.meta': ENABLED_APPS.meta,
    'cloud.mdb.ui.internal.katan': ENABLED_APPS.katan,
    'cloud.mdb.ui.internal.deploy': ENABLED_APPS.deploy,
    'cloud.mdb.ui.internal.cms': ENABLED_APPS.cms,
    'cloud.mdb.ui.internal.dbm': ENABLED_APPS.cms,
}

for app_name, enabled in APP_MAP.items():
    if enabled:
        INSTALLED_APPS.append(app_name)


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'cloud.mdb.ui.internal.mdbui.blackbox_auth.BlackboxAuthMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

BLACKBOX_URL = config['auth'].get('BLACKBOX_URL', None)
ALLOWED_LOGINS = config['auth'].get('ALLOWED_LOGINS', [])
USE_TVM = config['auth'].getboolean('USE_TVM', False)  # noqa
TVM_BLACKBOX_ENV = config['auth'].get('TVM_BLACKBOX_ENV', None)
TVM_CLIENT_ID = config['auth'].get('TVM_CLIENT_ID', None)
TVM_SECRET = os.environ.get('UI_TVM_TOKEN')

RESTART_TASKS_WHITE_LIST = config['main'].get('RESTART_TASKS_WHITE_LIST', [])

ROOT_URLCONF = 'cloud.mdb.ui.internal.mdbui.urls'


ADMIN_TOOLS_THEMING_CSS = 'site_static/admin/admin.css'
ADMIN_TOOLS_MENU = 'cloud.mdb.ui.internal.menu.CustomMenu'
ADMIN_TOOLS_INDEX_DASHBOARD = 'cloud.mdb.ui.internal.dashboard.CustomIndexDashboard'

WSGI_APPLICATION = 'cloud.mdb.ui.internal.mdbui.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASE_ROUTERS = ('cloud.mdb.ui.internal.mdbui.routers.DBRouter',)

WITH_POOL = True


from typing import NamedTuple


class DBScenario(NamedTuple):
    write = 'write'
    read = 'read'


DB_ENGINE = 'django_postgrespool2' if WITH_POOL else 'django.db.backends.postgresql_psycopg2'


def settings_options(scenario: str, schemas: list) -> dict:
    if scenario == DBScenario.write:
        t_s_a = 'read-write'
    elif scenario == DBScenario.read:
        t_s_a = 'any'
    else:
        raise Exception
    return {
        'options': '--search_path=' + ','.join(schemas),
        'sslmode': 'require',
        'sslrootcert': os.environ.get('PGSSLROOTCERT'),
        'keepalives': 1,
        'keepalives_idle': 15,
        'keepalives_interval': 5,
        'keepalives_count': 3,
        'connect_timeout': 1,
        'target_session_attrs': t_s_a,
    }


DATABASE_POOL_ARGS = {'max_overflow': 5, 'pool_size': 2, 'recycle': 300}

DB_SCHEMAS = {
    'META': ['dbaas', 'code'],
    'DEPLOY': ['deploy', 'code'],
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
}
DB_MAP = {
    'META': lambda: {
        'meta_slave': {
            'ENGINE': DB_ENGINE,
            'HOST': config['metadb']['HOST'],
            'PORT': config['metadb']['PORT'],
            'NAME': config['metadb']['DBNAME'],
            'USER': config['metadb']['USER'],
            'PASSWORD': os.environ.get('UI_META_DB_PASSWORD'),
            'OPTIONS': settings_options(DBScenario.read, DB_SCHEMAS['META']),
            'DISABLE_SERVER_SIDE_CURSORS': True,
        },
        'meta_primary': {
            'ENGINE': DB_ENGINE,
            'HOST': config['metadb']['HOST'],
            'PORT': config['metadb']['PORT'],
            'NAME': config['metadb']['DBNAME'],
            'USER': config['metadb']['USER'],
            'PASSWORD': os.environ.get('UI_META_DB_PASSWORD'),
            'OPTIONS': settings_options(DBScenario.write, DB_SCHEMAS['META']),
            'DISABLE_SERVER_SIDE_CURSORS': True,
        },
    },
    'KATAN': lambda: {
        'katan_slave': {
            'ENGINE': DB_ENGINE,
            'HOST': config['katandb']['HOST'],
            'PORT': 6432,
            'NAME': 'katandb',
            'USER': 'mdb_ui',
            'PASSWORD': os.environ.get('UI_KATAN_DB_PASSWORD'),
            'OPTIONS': settings_options(DBScenario.read, []),
            'DISABLE_SERVER_SIDE_CURSORS': True,
        },
    },
    'DEPLOY': lambda: {
        'deploy_slave': {
            'ENGINE': DB_ENGINE,
            'HOST': config['deploydb']['HOST'],
            'PORT': config['deploydb']['PORT'],
            'NAME': config['deploydb']['DBNAME'],
            'USER': config['deploydb']['USER'],
            'PASSWORD': os.environ.get('UI_DEPLOY_DB_PASSWORD'),
            'OPTIONS': settings_options(DBScenario.write, DB_SCHEMAS['DEPLOY']),
            'DISABLE_SERVER_SIDE_CURSORS': True,
        },
    },
    'CMS': lambda: {
        'cms_slave': {
            'ENGINE': DB_ENGINE,
            'HOST': config['cmsdb']['HOST'],
            'PORT': 6432,
            'NAME': 'cmsdb',
            'USER': 'mdb_ui',
            'PASSWORD': os.environ.get('UI_CMS_DB_PASSWORD'),
            'OPTIONS': settings_options(DBScenario.read, []),
            'DISABLE_SERVER_SIDE_CURSORS': True,
        },
        'cms_primary': {
            'ENGINE': DB_ENGINE,
            'HOST': config['cmsdb']['HOST'],
            'PORT': 6432,
            'NAME': 'cmsdb',
            'USER': 'mdb_ui',
            'PASSWORD': os.environ.get('UI_CMS_DB_PASSWORD'),
            'OPTIONS': settings_options(DBScenario.write, []),
            'DISABLE_SERVER_SIDE_CURSORS': True,
        },
    },
    'DBM': lambda: {
        'dbm_slave': {
            'ENGINE': DB_ENGINE,
            'HOST': config['dbmdb']['HOST'],
            'PORT': 6432,
            'NAME': 'dbm',
            'USER': 'mdb_ui',
            'PASSWORD': os.environ.get('UI_DBM_DB_PASSWORD'),
            'OPTIONS': settings_options(DBScenario.read, []),
            'DISABLE_SERVER_SIDE_CURSORS': True,
        },
    },
}

for key, db_config in DB_MAP.items():
    if UI_APPS.getboolean(key, False):
        DATABASES.update(db_config())


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = "Europe/Moscow"
USE_I18N = False
USE_L10N = False
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
SOURCE_STATIC_URL = '/static/site_static/'
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
SOURCE_STATIC_ROOT = os.path.join(STATIC_ROOT, 'site_static')

# will be autofilled by patch_settings_for_arcadia
TEMPLATES = [
    {
        'BACKEND': 'library.python.django.template.backends.arcadia.ArcadiaTemplates',
        'OPTIONS': {
            'debug': DEBUG,
            'loaders': [
                'library.python.django.template.loaders.resource.Loader',
                'library.python.django.template.loaders.app_resource.Loader',
                'admin_tools.template_loaders.Loader',
            ],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
FORM_RENDERER = 'library.python.django.template.backends.forms_renderer.ArcadiaRenderer'
STATICFILES_FINDERS = []

STATICFILES_DIRS = ('cloud/mdb/ui/internal/', 'site_static')


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {},
    'formatters': {
        'default': {
            '()': 'ylog.context.ContextFormatter',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'fmt': '%(asctime)s %(process)6d:%(threadName)-15s  %(name)-15s %(levelname)-10s %(message)s',
        },
        'json': {
            '()': 'ylog.format.QloudJsonFormatter',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['stream'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db': {
            'handlers': ['stream'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'handlers': {
        'stream': {'class': 'logging.StreamHandler', 'formatter': 'json', 'stream': sys.stdout, 'level': 'INFO'},
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
    },
    'root': {'level': 'DEBUG', 'handlers': ['stream']},
}

BASE_SITE_URL = ''

DATE_FORMAT = 'd.m.Y'
TIME_FORMAT = 'H:i'
DATETIME_FORMAT = 'd.m.Y H:i'

DATETIME_INPUT_FORMATS = [
    '%d.%m.%Y %H:%M',
]
DATE_INPUT_FORMATS = [
    '%d.%m.%Y',
]

TIME_INPUT_FORMATS = [
    '%H:%M',
    '%H',
]

DECIMAL_SEPARATOR = '.'

if not DEBUG and 'SENTRY_DSN' in config['main']:
    sentry_sdk.init(
        dsn=os.environ.get('UI_SENTRY_DSN'),
        integrations=[DjangoIntegration()],
        ca_certs='/opt/yandex/allCAs.pem',
        environment=INSTALLATION.value,
    )
    sentry_sdk.integrations.logging.ignore_logger('tvm2.thread_tvm2')

from library.python.django.utils import patch_settings_for_arcadia

patch_settings_for_arcadia()
