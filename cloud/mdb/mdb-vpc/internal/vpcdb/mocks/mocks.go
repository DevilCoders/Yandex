// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/mdb/mdb-vpc/internal/vpcdb (interfaces: VPCDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "a.yandex-team.ru/cloud/mdb/mdb-vpc/internal/vpcdb/models"
	gomock "github.com/golang/mock/gomock"
	hasql "golang.yandex/hasql"
)

// MockVPCDB is a mock of VPCDB interface.
type MockVPCDB struct {
	ctrl     *gomock.Controller
	recorder *MockVPCDBMockRecorder
}

// MockVPCDBMockRecorder is the mock recorder for MockVPCDB.
type MockVPCDBMockRecorder struct {
	mock *MockVPCDB
}

// NewMockVPCDB creates a new mock instance.
func NewMockVPCDB(ctrl *gomock.Controller) *MockVPCDB {
	mock := &MockVPCDB{ctrl: ctrl}
	mock.recorder = &MockVPCDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPCDB) EXPECT() *MockVPCDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockVPCDB) Begin(arg0 context.Context, arg1 hasql.NodeStateCriteria) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockVPCDBMockRecorder) Begin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockVPCDB)(nil).Begin), arg0, arg1)
}

// Close mocks base method.
func (m *MockVPCDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockVPCDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockVPCDB)(nil).Close))
}

// Commit mocks base method.
func (m *MockVPCDB) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockVPCDBMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockVPCDB)(nil).Commit), arg0)
}

// CreateNetwork mocks base method.
func (m *MockVPCDB) CreateNetwork(arg0 context.Context, arg1 string, arg2 models.Provider, arg3, arg4, arg5, arg6 string, arg7 models.ExternalResources) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockVPCDBMockRecorder) CreateNetwork(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockVPCDB)(nil).CreateNetwork), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// CreateNetworkConnection mocks base method.
func (m *MockVPCDB) CreateNetworkConnection(arg0 context.Context, arg1, arg2 string, arg3 models.Provider, arg4, arg5 string, arg6 models.NetworkConnectionParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkConnection", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkConnection indicates an expected call of CreateNetworkConnection.
func (mr *MockVPCDBMockRecorder) CreateNetworkConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkConnection", reflect.TypeOf((*MockVPCDB)(nil).CreateNetworkConnection), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// DeleteNetwork mocks base method.
func (m *MockVPCDB) DeleteNetwork(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockVPCDBMockRecorder) DeleteNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockVPCDB)(nil).DeleteNetwork), arg0, arg1)
}

// DeleteNetworkConnection mocks base method.
func (m *MockVPCDB) DeleteNetworkConnection(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkConnection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkConnection indicates an expected call of DeleteNetworkConnection.
func (mr *MockVPCDBMockRecorder) DeleteNetworkConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkConnection", reflect.TypeOf((*MockVPCDB)(nil).DeleteNetworkConnection), arg0, arg1)
}

// FinishNetworkConnectionCreating mocks base method.
func (m *MockVPCDB) FinishNetworkConnectionCreating(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishNetworkConnectionCreating", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishNetworkConnectionCreating indicates an expected call of FinishNetworkConnectionCreating.
func (mr *MockVPCDBMockRecorder) FinishNetworkConnectionCreating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishNetworkConnectionCreating", reflect.TypeOf((*MockVPCDB)(nil).FinishNetworkConnectionCreating), arg0, arg1)
}

// FinishNetworkCreating mocks base method.
func (m *MockVPCDB) FinishNetworkCreating(arg0 context.Context, arg1, arg2 string, arg3 models.ExternalResources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishNetworkCreating", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishNetworkCreating indicates an expected call of FinishNetworkCreating.
func (mr *MockVPCDBMockRecorder) FinishNetworkCreating(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishNetworkCreating", reflect.TypeOf((*MockVPCDB)(nil).FinishNetworkCreating), arg0, arg1, arg2, arg3)
}

// ImportedNetworks mocks base method.
func (m *MockVPCDB) ImportedNetworks(arg0 context.Context, arg1, arg2 string, arg3 models.Provider) ([]models.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportedNetworks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportedNetworks indicates an expected call of ImportedNetworks.
func (mr *MockVPCDBMockRecorder) ImportedNetworks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportedNetworks", reflect.TypeOf((*MockVPCDB)(nil).ImportedNetworks), arg0, arg1, arg2, arg3)
}

// InsertOperation mocks base method.
func (m *MockVPCDB) InsertOperation(arg0 context.Context, arg1, arg2, arg3 string, arg4 models.OperationParams, arg5 models.OperationAction, arg6 models.Provider, arg7 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOperation", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOperation indicates an expected call of InsertOperation.
func (mr *MockVPCDBMockRecorder) InsertOperation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOperation", reflect.TypeOf((*MockVPCDB)(nil).InsertOperation), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// IsReady mocks base method.
func (m *MockVPCDB) IsReady(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockVPCDBMockRecorder) IsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockVPCDB)(nil).IsReady), arg0)
}

// MarkNetworkConnectionDeleting mocks base method.
func (m *MockVPCDB) MarkNetworkConnectionDeleting(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNetworkConnectionDeleting", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNetworkConnectionDeleting indicates an expected call of MarkNetworkConnectionDeleting.
func (mr *MockVPCDBMockRecorder) MarkNetworkConnectionDeleting(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNetworkConnectionDeleting", reflect.TypeOf((*MockVPCDB)(nil).MarkNetworkConnectionDeleting), arg0, arg1, arg2)
}

// MarkNetworkConnectionPending mocks base method.
func (m *MockVPCDB) MarkNetworkConnectionPending(arg0 context.Context, arg1, arg2 string, arg3 models.NetworkConnectionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNetworkConnectionPending", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNetworkConnectionPending indicates an expected call of MarkNetworkConnectionPending.
func (mr *MockVPCDBMockRecorder) MarkNetworkConnectionPending(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNetworkConnectionPending", reflect.TypeOf((*MockVPCDB)(nil).MarkNetworkConnectionPending), arg0, arg1, arg2, arg3)
}

// MarkNetworkDeleting mocks base method.
func (m *MockVPCDB) MarkNetworkDeleting(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNetworkDeleting", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNetworkDeleting indicates an expected call of MarkNetworkDeleting.
func (mr *MockVPCDBMockRecorder) MarkNetworkDeleting(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNetworkDeleting", reflect.TypeOf((*MockVPCDB)(nil).MarkNetworkDeleting), arg0, arg1, arg2)
}

// NetworkByID mocks base method.
func (m *MockVPCDB) NetworkByID(arg0 context.Context, arg1 string) (models.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkByID", arg0, arg1)
	ret0, _ := ret[0].(models.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkByID indicates an expected call of NetworkByID.
func (mr *MockVPCDBMockRecorder) NetworkByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkByID", reflect.TypeOf((*MockVPCDB)(nil).NetworkByID), arg0, arg1)
}

// NetworkConnectionByID mocks base method.
func (m *MockVPCDB) NetworkConnectionByID(arg0 context.Context, arg1 string) (models.NetworkConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConnectionByID", arg0, arg1)
	ret0, _ := ret[0].(models.NetworkConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConnectionByID indicates an expected call of NetworkConnectionByID.
func (mr *MockVPCDBMockRecorder) NetworkConnectionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConnectionByID", reflect.TypeOf((*MockVPCDB)(nil).NetworkConnectionByID), arg0, arg1)
}

// NetworkConnectionsByNetworkID mocks base method.
func (m *MockVPCDB) NetworkConnectionsByNetworkID(arg0 context.Context, arg1 string) ([]models.NetworkConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConnectionsByNetworkID", arg0, arg1)
	ret0, _ := ret[0].([]models.NetworkConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConnectionsByNetworkID indicates an expected call of NetworkConnectionsByNetworkID.
func (mr *MockVPCDBMockRecorder) NetworkConnectionsByNetworkID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConnectionsByNetworkID", reflect.TypeOf((*MockVPCDB)(nil).NetworkConnectionsByNetworkID), arg0, arg1)
}

// NetworkConnectionsByProjectID mocks base method.
func (m *MockVPCDB) NetworkConnectionsByProjectID(arg0 context.Context, arg1 string) ([]models.NetworkConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConnectionsByProjectID", arg0, arg1)
	ret0, _ := ret[0].([]models.NetworkConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConnectionsByProjectID indicates an expected call of NetworkConnectionsByProjectID.
func (mr *MockVPCDBMockRecorder) NetworkConnectionsByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConnectionsByProjectID", reflect.TypeOf((*MockVPCDB)(nil).NetworkConnectionsByProjectID), arg0, arg1)
}

// NetworksByProjectID mocks base method.
func (m *MockVPCDB) NetworksByProjectID(arg0 context.Context, arg1 string) ([]models.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworksByProjectID", arg0, arg1)
	ret0, _ := ret[0].([]models.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworksByProjectID indicates an expected call of NetworksByProjectID.
func (mr *MockVPCDBMockRecorder) NetworksByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworksByProjectID", reflect.TypeOf((*MockVPCDB)(nil).NetworksByProjectID), arg0, arg1)
}

// OperationByID mocks base method.
func (m *MockVPCDB) OperationByID(arg0 context.Context, arg1 string) (models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationByID", arg0, arg1)
	ret0, _ := ret[0].(models.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationByID indicates an expected call of OperationByID.
func (mr *MockVPCDBMockRecorder) OperationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationByID", reflect.TypeOf((*MockVPCDB)(nil).OperationByID), arg0, arg1)
}

// OperationToProcess mocks base method.
func (m *MockVPCDB) OperationToProcess(arg0 context.Context) (models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationToProcess", arg0)
	ret0, _ := ret[0].(models.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationToProcess indicates an expected call of OperationToProcess.
func (mr *MockVPCDBMockRecorder) OperationToProcess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationToProcess", reflect.TypeOf((*MockVPCDB)(nil).OperationToProcess), arg0)
}

// Rollback mocks base method.
func (m *MockVPCDB) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockVPCDBMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockVPCDB)(nil).Rollback), arg0)
}

// UpdateOperationFields mocks base method.
func (m *MockVPCDB) UpdateOperationFields(arg0 context.Context, arg1 models.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationFields", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationFields indicates an expected call of UpdateOperationFields.
func (mr *MockVPCDBMockRecorder) UpdateOperationFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationFields", reflect.TypeOf((*MockVPCDB)(nil).UpdateOperationFields), arg0, arg1)
}
