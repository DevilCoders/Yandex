// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yandex/cloud/priv/accessservice/v2/access_service.proto

package accessservice_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessServiceClient is the client API for AccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessServiceClient interface {
	// Verify the identity of a subject.
	//
	// gRPC error codes
	//
	// Ok:              the provided credentials are valid
	// Unauthenticated: the provided credentials are invalid or may have expired
	// InvalidArgument: the client specified an invalid argument (please note that this applies to the request in itself,
	//                  not to the content of the request, i.e. you will get the InvalidArgument error if the message
	//                  size exceeds the server limit but Unauthenticated if the token format is not recognized)
	// Unavailable:     the service is currently unavailable, the client should retry again
	// Internal:        the service is broken
	//
	// Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// Check if a subject is allowed to perform an action. This also authenticates the subject if any credentials are
	// passed as an identity.
	//
	// gRPC error codes
	//
	// Ok:               the provided credentials (if any) are valid and the subject has permissions to access the
	//                   specified resource
	// Unauthenticated:  the provided credentials are invalid or may have expired
	// PermissionDenied: the subject does not have permissions to access the specified resource
	// InvalidArgument:  the client specified an invalid argument (please note that this applies to the request in itself,
	//                   not to the content of the request, i.e. you will get the InvalidArgument error if the message
	//                   size exceeds the server limit or the specified permission does not exist but Unauthenticated if
	//                   the token format is not recognized)
	// Unavailable:      the service is currently unavailable, the client should retry again
	// Internal:         the service is broken
	//
	// Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	// Similar to Authorize, but requests multiple actions for one subject.
	//
	// gRPC error codes will be the same, except for these cases:
	// - An Unauthenticated error of BulkAuthorizeRequest.identity is returned in
	//   BulkAuthorizeResponse.unauthenticated_error.
	// - All PermissionDenied of BulkAuthorizeRequest.authorizations are returned in
	//   BulkAuthorizeResponse.results.
	//
	// You can control the information returned in BulkAuthorizeResponse.results with:
	// - result_filter : return all errors (ALL_FAILED) or only the first one (FIRST_FAILED), if any.
	// - result_mask : You can choose the fields returned (all by default),
	//     from the fields in BulkAuthorizeResponse.Result.
	//
	BulkAuthorize(ctx context.Context, in *BulkAuthorizeRequest, opts ...grpc.CallOption) (*BulkAuthorizeResponse, error)
}

type accessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessServiceClient(cc grpc.ClientConnInterface) AccessServiceClient {
	return &accessServiceClient{cc}
}

func (c *accessServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.accessservice.v2.AccessService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.accessservice.v2.AccessService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) BulkAuthorize(ctx context.Context, in *BulkAuthorizeRequest, opts ...grpc.CallOption) (*BulkAuthorizeResponse, error) {
	out := new(BulkAuthorizeResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.accessservice.v2.AccessService/BulkAuthorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessServiceServer is the server API for AccessService service.
// All implementations should embed UnimplementedAccessServiceServer
// for forward compatibility
type AccessServiceServer interface {
	// Verify the identity of a subject.
	//
	// gRPC error codes
	//
	// Ok:              the provided credentials are valid
	// Unauthenticated: the provided credentials are invalid or may have expired
	// InvalidArgument: the client specified an invalid argument (please note that this applies to the request in itself,
	//                  not to the content of the request, i.e. you will get the InvalidArgument error if the message
	//                  size exceeds the server limit but Unauthenticated if the token format is not recognized)
	// Unavailable:     the service is currently unavailable, the client should retry again
	// Internal:        the service is broken
	//
	// Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// Check if a subject is allowed to perform an action. This also authenticates the subject if any credentials are
	// passed as an identity.
	//
	// gRPC error codes
	//
	// Ok:               the provided credentials (if any) are valid and the subject has permissions to access the
	//                   specified resource
	// Unauthenticated:  the provided credentials are invalid or may have expired
	// PermissionDenied: the subject does not have permissions to access the specified resource
	// InvalidArgument:  the client specified an invalid argument (please note that this applies to the request in itself,
	//                   not to the content of the request, i.e. you will get the InvalidArgument error if the message
	//                   size exceeds the server limit or the specified permission does not exist but Unauthenticated if
	//                   the token format is not recognized)
	// Unavailable:      the service is currently unavailable, the client should retry again
	// Internal:         the service is broken
	//
	// Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	// Similar to Authorize, but requests multiple actions for one subject.
	//
	// gRPC error codes will be the same, except for these cases:
	// - An Unauthenticated error of BulkAuthorizeRequest.identity is returned in
	//   BulkAuthorizeResponse.unauthenticated_error.
	// - All PermissionDenied of BulkAuthorizeRequest.authorizations are returned in
	//   BulkAuthorizeResponse.results.
	//
	// You can control the information returned in BulkAuthorizeResponse.results with:
	// - result_filter : return all errors (ALL_FAILED) or only the first one (FIRST_FAILED), if any.
	// - result_mask : You can choose the fields returned (all by default),
	//     from the fields in BulkAuthorizeResponse.Result.
	//
	BulkAuthorize(context.Context, *BulkAuthorizeRequest) (*BulkAuthorizeResponse, error)
}

// UnimplementedAccessServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccessServiceServer struct {
}

func (UnimplementedAccessServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAccessServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAccessServiceServer) BulkAuthorize(context.Context, *BulkAuthorizeRequest) (*BulkAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAuthorize not implemented")
}

// UnsafeAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessServiceServer will
// result in compilation errors.
type UnsafeAccessServiceServer interface {
	mustEmbedUnimplementedAccessServiceServer()
}

func RegisterAccessServiceServer(s grpc.ServiceRegistrar, srv AccessServiceServer) {
	s.RegisterService(&AccessService_ServiceDesc, srv)
}

func _AccessService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.accessservice.v2.AccessService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.accessservice.v2.AccessService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_BulkAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).BulkAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.accessservice.v2.AccessService/BulkAuthorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).BulkAuthorize(ctx, req.(*BulkAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessService_ServiceDesc is the grpc.ServiceDesc for AccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.accessservice.v2.AccessService",
	HandlerType: (*AccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AccessService_Authenticate_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _AccessService_Authorize_Handler,
		},
		{
			MethodName: "BulkAuthorize",
			Handler:    _AccessService_BulkAuthorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/accessservice/v2/access_service.proto",
}
