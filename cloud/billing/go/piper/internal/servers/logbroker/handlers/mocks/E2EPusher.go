// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "a.yandex-team.ru/cloud/billing/go/piper/internal/core/entities"

	mock "github.com/stretchr/testify/mock"
)

// E2EPusher is an autogenerated mock type for the E2EPusher type
type E2EPusher struct {
	mock.Mock
}

// FlushE2EQuantityMetrics provides a mock function with given fields: ctx
func (_m *E2EPusher) FlushE2EQuantityMetrics(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushE2EPricingQuantityMetric provides a mock function with given fields: _a0, _a1, _a2
func (_m *E2EPusher) PushE2EPricingQuantityMetric(_a0 context.Context, _a1 entities.ProcessingScope, _a2 entities.E2EMetric) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, entities.E2EMetric) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushE2EUsageQuantityMetric provides a mock function with given fields: _a0, _a1, _a2
func (_m *E2EPusher) PushE2EUsageQuantityMetric(_a0 context.Context, _a1 entities.ProcessingScope, _a2 entities.E2EMetric) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, entities.E2EMetric) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
