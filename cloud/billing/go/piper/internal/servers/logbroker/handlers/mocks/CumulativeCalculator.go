// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "a.yandex-team.ru/cloud/billing/go/piper/internal/core/entities"

	mock "github.com/stretchr/testify/mock"
)

// CumulativeCalculator is an autogenerated mock type for the CumulativeCalculator type
type CumulativeCalculator struct {
	mock.Mock
}

// CalculateCumulativeUsage provides a mock function with given fields: ctx, scope, period, src
func (_m *CumulativeCalculator) CalculateCumulativeUsage(ctx context.Context, scope entities.ProcessingScope, period entities.UsagePeriod, src []entities.CumulativeSource) (int, []entities.CumulativeUsageLog, error) {
	ret := _m.Called(ctx, scope, period, src)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, entities.UsagePeriod, []entities.CumulativeSource) int); ok {
		r0 = rf(ctx, scope, period, src)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []entities.CumulativeUsageLog
	if rf, ok := ret.Get(1).(func(context.Context, entities.ProcessingScope, entities.UsagePeriod, []entities.CumulativeSource) []entities.CumulativeUsageLog); ok {
		r1 = rf(ctx, scope, period, src)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entities.CumulativeUsageLog)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, entities.ProcessingScope, entities.UsagePeriod, []entities.CumulativeSource) error); ok {
		r2 = rf(ctx, scope, period, src)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
