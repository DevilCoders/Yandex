// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "a.yandex-team.ru/cloud/billing/go/piper/internal/core/entities"

	mock "github.com/stretchr/testify/mock"
)

// MetricsPusher is an autogenerated mock type for the MetricsPusher type
type MetricsPusher struct {
	mock.Mock
}

// EnrichedMetricPartitions provides a mock function with given fields:
func (_m *MetricsPusher) EnrichedMetricPartitions() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FlushEnriched provides a mock function with given fields: _a0
func (_m *MetricsPusher) FlushEnriched(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushInvalidMetrics provides a mock function with given fields: _a0
func (_m *MetricsPusher) FlushInvalidMetrics(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushEnrichedMetricToPartition provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MetricsPusher) PushEnrichedMetricToPartition(_a0 context.Context, _a1 entities.ProcessingScope, _a2 entities.EnrichedMetric, _a3 int) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, entities.EnrichedMetric, int) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushInvalidMetric provides a mock function with given fields: _a0, _a1, _a2
func (_m *MetricsPusher) PushInvalidMetric(_a0 context.Context, _a1 entities.ProcessingScope, _a2 entities.InvalidMetric) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, entities.InvalidMetric) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
