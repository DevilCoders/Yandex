// Code generated by mockery v2.3.0. DO NOT EDIT.

package logbroker

import (
	context "context"

	lbtypes "a.yandex-team.ru/cloud/billing/go/pkg/logbroker/lbtypes"
	mock "github.com/stretchr/testify/mock"
)

// mockShardProducer is an autogenerated mock type for the ShardProducer type
type mockShardProducer struct {
	mock.Mock
}

// GetOffset provides a mock function with given fields: _a0, _a1
func (_m *mockShardProducer) GetOffset(_a0 context.Context, _a1 lbtypes.SourceID) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, lbtypes.SourceID) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, lbtypes.SourceID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartitionsCount provides a mock function with given fields:
func (_m *mockShardProducer) PartitionsCount() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// Write provides a mock function with given fields: ctx, srcID, partition, messages
func (_m *mockShardProducer) Write(ctx context.Context, srcID lbtypes.SourceID, partition uint32, messages []lbtypes.ShardMessage) (uint64, error) {
	ret := _m.Called(ctx, srcID, partition, messages)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, lbtypes.SourceID, uint32, []lbtypes.ShardMessage) uint64); ok {
		r0 = rf(ctx, srcID, partition, messages)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, lbtypes.SourceID, uint32, []lbtypes.ShardMessage) error); ok {
		r1 = rf(ctx, srcID, partition, messages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
