// Code generated by mockery. DO NOT EDIT.

package ydb

import (
	context "context"

	table "a.yandex-team.ru/kikimr/public/sdk/go/ydb/table"
	mock "github.com/stretchr/testify/mock"
)

// MockSchemeSession is an autogenerated mock type for the SchemeSession type
type MockSchemeSession struct {
	mock.Mock
}

// DescribeTable provides a mock function with given fields: ctx, path, opts
func (_m *MockSchemeSession) DescribeTable(ctx context.Context, path string, opts ...table.DescribeTableOption) (table.Description, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, path)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 table.Description
	if rf, ok := ret.Get(0).(func(context.Context, string, ...table.DescribeTableOption) table.Description); ok {
		r0 = rf(ctx, path, opts...)
	} else {
		r0 = ret.Get(0).(table.Description)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...table.DescribeTableOption) error); ok {
		r1 = rf(ctx, path, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteSchemeQuery provides a mock function with given fields: ctx, query, opts
func (_m *MockSchemeSession) ExecuteSchemeQuery(ctx context.Context, query string, opts ...table.ExecuteSchemeQueryOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...table.ExecuteSchemeQueryOption) error); ok {
		r0 = rf(ctx, query, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
