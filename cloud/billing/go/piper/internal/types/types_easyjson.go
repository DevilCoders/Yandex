// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes(in *jlexer.Lexer, out *SourceMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labels":
			(out.UserLabels).UnmarshalEasyJSON(in)
		case "id":
			out.ID = string(in.String())
		case "schema":
			out.Schema = string(in.String())
		case "cloud_id":
			out.CloudID = string(in.String())
		case "folder_id":
			out.FolderID = string(in.String())
		case "abc_id":
			out.AbcID = int64(in.Int64())
		case "abc_folder_id":
			out.AbcFolderID = string(in.String())
		case "billing_account_id":
			out.BillingAccountID = string(in.String())
		case "usage":
			easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes1(in, &out.Usage)
		case "tags":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Tags).UnmarshalJSON(data))
			}
		case "sku_id":
			out.SkuID = string(in.String())
		case "resource_id":
			out.ResourceID = string(in.String())
		case "source_wt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SourceWriteTime).UnmarshalJSON(data))
			}
		case "source_id":
			out.SourceID = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes(out *jwriter.Writer, in SourceMetric) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix[1:])
		if in.UserLabels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v1First := true
			for v1Name, v1Value := range in.UserLabels {
				if v1First {
					v1First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v1Name))
				out.RawByte(':')
				out.Raw((v1Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"schema\":"
		out.RawString(prefix)
		out.String(string(in.Schema))
	}
	{
		const prefix string = ",\"cloud_id\":"
		out.RawString(prefix)
		out.String(string(in.CloudID))
	}
	{
		const prefix string = ",\"folder_id\":"
		out.RawString(prefix)
		out.String(string(in.FolderID))
	}
	{
		const prefix string = ",\"abc_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.AbcID))
	}
	{
		const prefix string = ",\"abc_folder_id\":"
		out.RawString(prefix)
		out.String(string(in.AbcFolderID))
	}
	{
		const prefix string = ",\"billing_account_id\":"
		out.RawString(prefix)
		out.String(string(in.BillingAccountID))
	}
	{
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes1(out, in.Usage)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		out.Raw((in.Tags).MarshalJSON())
	}
	{
		const prefix string = ",\"sku_id\":"
		out.RawString(prefix)
		out.String(string(in.SkuID))
	}
	{
		const prefix string = ",\"resource_id\":"
		out.RawString(prefix)
		out.String(string(in.ResourceID))
	}
	{
		const prefix string = ",\"source_wt\":"
		out.RawString(prefix)
		out.Raw((in.SourceWriteTime).MarshalJSON())
	}
	{
		const prefix string = ",\"source_id\":"
		out.RawString(prefix)
		out.String(string(in.SourceID))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SourceMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SourceMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SourceMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SourceMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes1(in *jlexer.Lexer, out *MetricUsage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quantity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Quantity).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		case "unit":
			out.Unit = string(in.String())
		case "start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Start).UnmarshalJSON(data))
			}
		case "finish":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Finish).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes1(out *jwriter.Writer, in MetricUsage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix[1:])
		out.Raw((in.Quantity).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Raw((in.Start).MarshalJSON())
	}
	{
		const prefix string = ",\"finish\":"
		out.RawString(prefix)
		out.Raw((in.Finish).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes2(in *jlexer.Lexer, out *ReshardedQueueMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_expired":
			out.IsExpired = bool(in.Bool())
		case "sequence_id":
			out.SequenceID = uint64(in.Uint64())
		case "resharding_key":
			out.ReshardingKey = string(in.String())
		case "usage_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UsageTime).UnmarshalJSON(data))
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.UserLabels = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.UserLabels)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "is_user_labels_allowed":
			out.IsUserLabelsAllowed = bool(in.Bool())
		case "message_write_ts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MessageWriteTS).UnmarshalJSON(data))
			}
		case "pricing_quantity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PricingQuantity).UnmarshalJSON(data))
			}
		case "pricing_unit":
			out.PricingUnit = string(in.String())
		case "sku_name":
			out.SkuName = string(in.String())
		case "start_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "end_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndTime).UnmarshalJSON(data))
			}
		case "master_account_id":
			out.MasterAccountID = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "schema":
			out.Schema = string(in.String())
		case "cloud_id":
			out.CloudID = string(in.String())
		case "folder_id":
			out.FolderID = string(in.String())
		case "abc_id":
			out.AbcID = int64(in.Int64())
		case "abc_folder_id":
			out.AbcFolderID = string(in.String())
		case "billing_account_id":
			out.BillingAccountID = string(in.String())
		case "usage":
			easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes1(in, &out.Usage)
		case "tags":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Tags).UnmarshalJSON(data))
			}
		case "sku_id":
			out.SkuID = string(in.String())
		case "resource_id":
			out.ResourceID = string(in.String())
		case "source_wt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SourceWriteTime).UnmarshalJSON(data))
			}
		case "source_id":
			out.SourceID = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes2(out *jwriter.Writer, in ReshardedQueueMetric) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_expired\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsExpired))
	}
	{
		const prefix string = ",\"sequence_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SequenceID))
	}
	{
		const prefix string = ",\"resharding_key\":"
		out.RawString(prefix)
		out.String(string(in.ReshardingKey))
	}
	{
		const prefix string = ",\"usage_time\":"
		out.RawString(prefix)
		out.Raw((in.UsageTime).MarshalJSON())
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		if in.UserLabels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.UserLabels {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"is_user_labels_allowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUserLabelsAllowed))
	}
	{
		const prefix string = ",\"message_write_ts\":"
		out.RawString(prefix)
		out.Raw((in.MessageWriteTS).MarshalJSON())
	}
	{
		const prefix string = ",\"pricing_quantity\":"
		out.RawString(prefix)
		out.Raw((in.PricingQuantity).MarshalJSON())
	}
	{
		const prefix string = ",\"pricing_unit\":"
		out.RawString(prefix)
		out.String(string(in.PricingUnit))
	}
	{
		const prefix string = ",\"sku_name\":"
		out.RawString(prefix)
		out.String(string(in.SkuName))
	}
	{
		const prefix string = ",\"start_time\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"end_time\":"
		out.RawString(prefix)
		out.Raw((in.EndTime).MarshalJSON())
	}
	{
		const prefix string = ",\"master_account_id\":"
		out.RawString(prefix)
		out.String(string(in.MasterAccountID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"schema\":"
		out.RawString(prefix)
		out.String(string(in.Schema))
	}
	{
		const prefix string = ",\"cloud_id\":"
		out.RawString(prefix)
		out.String(string(in.CloudID))
	}
	{
		const prefix string = ",\"folder_id\":"
		out.RawString(prefix)
		out.String(string(in.FolderID))
	}
	{
		const prefix string = ",\"abc_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.AbcID))
	}
	{
		const prefix string = ",\"abc_folder_id\":"
		out.RawString(prefix)
		out.String(string(in.AbcFolderID))
	}
	{
		const prefix string = ",\"billing_account_id\":"
		out.RawString(prefix)
		out.String(string(in.BillingAccountID))
	}
	{
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes1(out, in.Usage)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		out.Raw((in.Tags).MarshalJSON())
	}
	{
		const prefix string = ",\"sku_id\":"
		out.RawString(prefix)
		out.String(string(in.SkuID))
	}
	{
		const prefix string = ",\"resource_id\":"
		out.RawString(prefix)
		out.String(string(in.ResourceID))
	}
	{
		const prefix string = ",\"source_wt\":"
		out.RawString(prefix)
		out.Raw((in.SourceWriteTime).MarshalJSON())
	}
	{
		const prefix string = ",\"source_id\":"
		out.RawString(prefix)
		out.String(string(in.SourceID))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReshardedQueueMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReshardedQueueMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReshardedQueueMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReshardedQueueMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes2(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes3(in *jlexer.Lexer, out *QueueError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sequence_id":
			out.SequenceID = uint64(in.Uint64())
		case "reason":
			out.Reason = string(in.String())
		case "metric_source_id":
			out.MetricSourceID = string(in.String())
		case "source_id":
			out.SourceID = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "reason_comment":
			out.ReasonComment = string(in.String())
		case "metric_resource_id":
			out.MetricResourceID = string(in.String())
		case "source_name":
			out.SourceName = string(in.String())
		case "metric_schema":
			out.MetricSchema = string(in.String())
		case "metric":
			out.Metric = string(in.String())
		case "uploaded_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UploadedAt).UnmarshalJSON(data))
			}
		case "metric_id":
			out.MetricID = string(in.String())
		case "raw_metric":
			out.RawMetric = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes3(out *jwriter.Writer, in QueueError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sequence_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.SequenceID))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"metric_source_id\":"
		out.RawString(prefix)
		out.String(string(in.MetricSourceID))
	}
	{
		const prefix string = ",\"source_id\":"
		out.RawString(prefix)
		out.String(string(in.SourceID))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"reason_comment\":"
		out.RawString(prefix)
		out.String(string(in.ReasonComment))
	}
	{
		const prefix string = ",\"metric_resource_id\":"
		out.RawString(prefix)
		out.String(string(in.MetricResourceID))
	}
	{
		const prefix string = ",\"source_name\":"
		out.RawString(prefix)
		out.String(string(in.SourceName))
	}
	{
		const prefix string = ",\"metric_schema\":"
		out.RawString(prefix)
		out.String(string(in.MetricSchema))
	}
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		out.String(string(in.Metric))
	}
	{
		const prefix string = ",\"uploaded_at\":"
		out.RawString(prefix)
		out.Raw((in.UploadedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"metric_id\":"
		out.RawString(prefix)
		out.String(string(in.MetricID))
	}
	{
		const prefix string = ",\"raw_metric\":"
		out.RawString(prefix)
		out.String(string(in.RawMetric))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueueError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueueError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueueError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueueError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes3(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes4(in *jlexer.Lexer, out *EnrichedQueueMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_expired":
			out.IsExpired = bool(in.Bool())
		case "sequence_id":
			out.SequenceID = uint64(in.Uint64())
		case "resharding_key":
			out.ReshardingKey = string(in.String())
		case "usage_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UsageTime).UnmarshalJSON(data))
			}
		case "labels":
			easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes5(in, &out.Labels)
		case "is_user_labels_allowed":
			out.IsUserLabelsAllowed = bool(in.Bool())
		case "message_write_ts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MessageWriteTS).UnmarshalJSON(data))
			}
		case "pricing_quantity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PricingQuantity).UnmarshalJSON(data))
			}
		case "pricing_unit":
			out.PricingUnit = string(in.String())
		case "sku_name":
			out.SkuName = string(in.String())
		case "start_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "end_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndTime).UnmarshalJSON(data))
			}
		case "master_account_id":
			out.MasterAccountID = string(in.String())
		case "labels_hash":
			out.LabelsHash = uint64(in.Uint64())
		case "cost":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cost).UnmarshalJSON(data))
			}
		case "credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Credit).UnmarshalJSON(data))
			}
		case "cud_credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CudCredit).UnmarshalJSON(data))
			}
		case "monetary_grant_credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MonetaryGrantCredit).UnmarshalJSON(data))
			}
		case "volume_incentive_credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.VolumeIncentiveCredit).UnmarshalJSON(data))
			}
		case "cloud_name":
			out.CloudName = string(in.String())
		case "folder_name":
			out.FolderName = string(in.String())
		case "service_id":
			out.ServiceID = string(in.String())
		case "labels_json":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LabelsJSON).UnmarshalJSON(data))
			}
		case "pricing_version_id":
			out.PricingVersionID = string(in.String())
		case "rate_id":
			out.RateID = int(in.Int())
		case "sku_overridden":
			out.SkuOverridden = bool(in.Bool())
		case "currency":
			out.Currency = string(in.String())
		case "unit_price":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UnitPrice).UnmarshalJSON(data))
			}
		case "currency_multiplier":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CurrencyMultiplier).UnmarshalJSON(data))
			}
		case "expense":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Expense).UnmarshalJSON(data))
			}
		case "rewarded_expense":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RewardedExpense).UnmarshalJSON(data))
			}
		case "revenue":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Revenue).UnmarshalJSON(data))
			}
		case "cud_compensated_pricing_quantity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CudCompensatedPricingQuantity).UnmarshalJSON(data))
			}
		case "service_credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ServiceCredit).UnmarshalJSON(data))
			}
		case "trial_credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TrialCredit).UnmarshalJSON(data))
			}
		case "disabled_credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DisabledCredit).UnmarshalJSON(data))
			}
		case "var_incentive_credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.VarIncentiveCredit).UnmarshalJSON(data))
			}
		case "volume_reward":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.VolumeReward).UnmarshalJSON(data))
			}
		case "reward":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Reward).UnmarshalJSON(data))
			}
		case "credit_charges":
			if in.IsNull() {
				in.Skip()
				out.CreditCharges = nil
			} else {
				in.Delim('[')
				if out.CreditCharges == nil {
					if !in.IsDelim(']') {
						out.CreditCharges = make([]CreditCharges, 0, 0)
					} else {
						out.CreditCharges = []CreditCharges{}
					}
				} else {
					out.CreditCharges = (out.CreditCharges)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CreditCharges
					easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes6(in, &v4)
					out.CreditCharges = append(out.CreditCharges, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volume_reward_info":
			if in.IsNull() {
				in.Skip()
				out.VolumeRewardInfo = nil
			} else {
				in.Delim('[')
				if out.VolumeRewardInfo == nil {
					if !in.IsDelim(']') {
						out.VolumeRewardInfo = make([]VolumeRewardInfo, 0, 0)
					} else {
						out.VolumeRewardInfo = []VolumeRewardInfo{}
					}
				} else {
					out.VolumeRewardInfo = (out.VolumeRewardInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v5 VolumeRewardInfo
					easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes7(in, &v5)
					out.VolumeRewardInfo = append(out.VolumeRewardInfo, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tiered_pricing_quantity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TiredPricingQuantity).UnmarshalJSON(data))
			}
		case "publisher_account_id":
			out.PublisherAccountID = string(in.String())
		case "publisher_balance_client_id":
			out.PublisherBalanceAccountID = string(in.String())
		case "publisher_currency":
			out.PublisherCurrency = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "schema":
			out.Schema = string(in.String())
		case "cloud_id":
			out.CloudID = string(in.String())
		case "folder_id":
			out.FolderID = string(in.String())
		case "abc_id":
			out.AbcID = int64(in.Int64())
		case "abc_folder_id":
			out.AbcFolderID = string(in.String())
		case "billing_account_id":
			out.BillingAccountID = string(in.String())
		case "usage":
			easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes1(in, &out.Usage)
		case "tags":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Tags).UnmarshalJSON(data))
			}
		case "sku_id":
			out.SkuID = string(in.String())
		case "resource_id":
			out.ResourceID = string(in.String())
		case "source_wt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SourceWriteTime).UnmarshalJSON(data))
			}
		case "source_id":
			out.SourceID = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes4(out *jwriter.Writer, in EnrichedQueueMetric) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_expired\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsExpired))
	}
	{
		const prefix string = ",\"sequence_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SequenceID))
	}
	{
		const prefix string = ",\"resharding_key\":"
		out.RawString(prefix)
		out.String(string(in.ReshardingKey))
	}
	{
		const prefix string = ",\"usage_time\":"
		out.RawString(prefix)
		out.Raw((in.UsageTime).MarshalJSON())
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes5(out, in.Labels)
	}
	{
		const prefix string = ",\"is_user_labels_allowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUserLabelsAllowed))
	}
	{
		const prefix string = ",\"message_write_ts\":"
		out.RawString(prefix)
		out.Raw((in.MessageWriteTS).MarshalJSON())
	}
	{
		const prefix string = ",\"pricing_quantity\":"
		out.RawString(prefix)
		out.Raw((in.PricingQuantity).MarshalJSON())
	}
	{
		const prefix string = ",\"pricing_unit\":"
		out.RawString(prefix)
		out.String(string(in.PricingUnit))
	}
	{
		const prefix string = ",\"sku_name\":"
		out.RawString(prefix)
		out.String(string(in.SkuName))
	}
	{
		const prefix string = ",\"start_time\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"end_time\":"
		out.RawString(prefix)
		out.Raw((in.EndTime).MarshalJSON())
	}
	{
		const prefix string = ",\"master_account_id\":"
		out.RawString(prefix)
		out.String(string(in.MasterAccountID))
	}
	{
		const prefix string = ",\"labels_hash\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.LabelsHash))
	}
	{
		const prefix string = ",\"cost\":"
		out.RawString(prefix)
		out.Raw((in.Cost).MarshalJSON())
	}
	{
		const prefix string = ",\"credit\":"
		out.RawString(prefix)
		out.Raw((in.Credit).MarshalJSON())
	}
	{
		const prefix string = ",\"cud_credit\":"
		out.RawString(prefix)
		out.Raw((in.CudCredit).MarshalJSON())
	}
	{
		const prefix string = ",\"monetary_grant_credit\":"
		out.RawString(prefix)
		out.Raw((in.MonetaryGrantCredit).MarshalJSON())
	}
	{
		const prefix string = ",\"volume_incentive_credit\":"
		out.RawString(prefix)
		out.Raw((in.VolumeIncentiveCredit).MarshalJSON())
	}
	{
		const prefix string = ",\"cloud_name\":"
		out.RawString(prefix)
		out.String(string(in.CloudName))
	}
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix)
		out.String(string(in.FolderName))
	}
	{
		const prefix string = ",\"service_id\":"
		out.RawString(prefix)
		out.String(string(in.ServiceID))
	}
	{
		const prefix string = ",\"labels_json\":"
		out.RawString(prefix)
		out.Raw((in.LabelsJSON).MarshalJSON())
	}
	{
		const prefix string = ",\"pricing_version_id\":"
		out.RawString(prefix)
		out.String(string(in.PricingVersionID))
	}
	{
		const prefix string = ",\"rate_id\":"
		out.RawString(prefix)
		out.Int(int(in.RateID))
	}
	{
		const prefix string = ",\"sku_overridden\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkuOverridden))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"unit_price\":"
		out.RawString(prefix)
		out.Raw((in.UnitPrice).MarshalJSON())
	}
	{
		const prefix string = ",\"currency_multiplier\":"
		out.RawString(prefix)
		out.Raw((in.CurrencyMultiplier).MarshalJSON())
	}
	{
		const prefix string = ",\"expense\":"
		out.RawString(prefix)
		out.Raw((in.Expense).MarshalJSON())
	}
	{
		const prefix string = ",\"rewarded_expense\":"
		out.RawString(prefix)
		out.Raw((in.RewardedExpense).MarshalJSON())
	}
	{
		const prefix string = ",\"revenue\":"
		out.RawString(prefix)
		out.Raw((in.Revenue).MarshalJSON())
	}
	{
		const prefix string = ",\"cud_compensated_pricing_quantity\":"
		out.RawString(prefix)
		out.Raw((in.CudCompensatedPricingQuantity).MarshalJSON())
	}
	{
		const prefix string = ",\"service_credit\":"
		out.RawString(prefix)
		out.Raw((in.ServiceCredit).MarshalJSON())
	}
	{
		const prefix string = ",\"trial_credit\":"
		out.RawString(prefix)
		out.Raw((in.TrialCredit).MarshalJSON())
	}
	{
		const prefix string = ",\"disabled_credit\":"
		out.RawString(prefix)
		out.Raw((in.DisabledCredit).MarshalJSON())
	}
	{
		const prefix string = ",\"var_incentive_credit\":"
		out.RawString(prefix)
		out.Raw((in.VarIncentiveCredit).MarshalJSON())
	}
	{
		const prefix string = ",\"volume_reward\":"
		out.RawString(prefix)
		out.Raw((in.VolumeReward).MarshalJSON())
	}
	{
		const prefix string = ",\"reward\":"
		out.RawString(prefix)
		out.Raw((in.Reward).MarshalJSON())
	}
	{
		const prefix string = ",\"credit_charges\":"
		out.RawString(prefix)
		if in.CreditCharges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.CreditCharges {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes6(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"volume_reward_info\":"
		out.RawString(prefix)
		if in.VolumeRewardInfo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.VolumeRewardInfo {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes7(out, v9)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tiered_pricing_quantity\":"
		out.RawString(prefix)
		out.Raw((in.TiredPricingQuantity).MarshalJSON())
	}
	{
		const prefix string = ",\"publisher_account_id\":"
		out.RawString(prefix)
		out.String(string(in.PublisherAccountID))
	}
	{
		const prefix string = ",\"publisher_balance_client_id\":"
		out.RawString(prefix)
		out.String(string(in.PublisherBalanceAccountID))
	}
	{
		const prefix string = ",\"publisher_currency\":"
		out.RawString(prefix)
		out.String(string(in.PublisherCurrency))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"schema\":"
		out.RawString(prefix)
		out.String(string(in.Schema))
	}
	{
		const prefix string = ",\"cloud_id\":"
		out.RawString(prefix)
		out.String(string(in.CloudID))
	}
	{
		const prefix string = ",\"folder_id\":"
		out.RawString(prefix)
		out.String(string(in.FolderID))
	}
	{
		const prefix string = ",\"abc_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.AbcID))
	}
	{
		const prefix string = ",\"abc_folder_id\":"
		out.RawString(prefix)
		out.String(string(in.AbcFolderID))
	}
	{
		const prefix string = ",\"billing_account_id\":"
		out.RawString(prefix)
		out.String(string(in.BillingAccountID))
	}
	{
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes1(out, in.Usage)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		out.Raw((in.Tags).MarshalJSON())
	}
	{
		const prefix string = ",\"sku_id\":"
		out.RawString(prefix)
		out.String(string(in.SkuID))
	}
	{
		const prefix string = ",\"resource_id\":"
		out.RawString(prefix)
		out.String(string(in.ResourceID))
	}
	{
		const prefix string = ",\"source_wt\":"
		out.RawString(prefix)
		out.Raw((in.SourceWriteTime).MarshalJSON())
	}
	{
		const prefix string = ",\"source_id\":"
		out.RawString(prefix)
		out.String(string(in.SourceID))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnrichedQueueMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnrichedQueueMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnrichedQueueMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnrichedQueueMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes4(l, v)
}
func easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes7(in *jlexer.Lexer, out *VolumeRewardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "var_incentive_id":
			out.VarIncentiveID = string(in.String())
		case "previous_multiplier":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousMultiplier).UnmarshalJSON(data))
			}
		case "current_multiplier":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CurrentMultiplier).UnmarshalJSON(data))
			}
		case "previous_expense":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousExpense).UnmarshalJSON(data))
			}
		case "current_expense":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CurrentExpense).UnmarshalJSON(data))
			}
		case "reward":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Reward).UnmarshalJSON(data))
			}
		case "adjustment":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Adjustment).UnmarshalJSON(data))
			}
		case "total":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Total).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes7(out *jwriter.Writer, in VolumeRewardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"var_incentive_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.VarIncentiveID))
	}
	{
		const prefix string = ",\"previous_multiplier\":"
		out.RawString(prefix)
		out.Raw((in.PreviousMultiplier).MarshalJSON())
	}
	{
		const prefix string = ",\"current_multiplier\":"
		out.RawString(prefix)
		out.Raw((in.CurrentMultiplier).MarshalJSON())
	}
	{
		const prefix string = ",\"previous_expense\":"
		out.RawString(prefix)
		out.Raw((in.PreviousExpense).MarshalJSON())
	}
	{
		const prefix string = ",\"current_expense\":"
		out.RawString(prefix)
		out.Raw((in.CurrentExpense).MarshalJSON())
	}
	{
		const prefix string = ",\"reward\":"
		out.RawString(prefix)
		out.Raw((in.Reward).MarshalJSON())
	}
	{
		const prefix string = ",\"adjustment\":"
		out.RawString(prefix)
		out.Raw((in.Adjustment).MarshalJSON())
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Raw((in.Total).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes6(in *jlexer.Lexer, out *CreditCharges) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "compensated_pricing_quantity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CompensatedPricingQuantity).UnmarshalJSON(data))
			}
		case "credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Credit).UnmarshalJSON(data))
			}
		case "unused_credit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UnusedCredit).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes6(out *jwriter.Writer, in CreditCharges) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"compensated_pricing_quantity\":"
		out.RawString(prefix)
		out.Raw((in.CompensatedPricingQuantity).MarshalJSON())
	}
	{
		const prefix string = ",\"credit\":"
		out.RawString(prefix)
		out.Raw((in.Credit).MarshalJSON())
	}
	{
		const prefix string = ",\"unused_credit\":"
		out.RawString(prefix)
		out.Raw((in.UnusedCredit).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeAYandexTeamRuCloudBillingGoPiperInternalTypes5(in *jlexer.Lexer, out *MetricLabels) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.User = make(map[string]JSONAnyString)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 JSONAnyString
					if data := in.Raw(); in.Ok() {
						in.AddError((v10).UnmarshalJSON(data))
					}
					(out.User)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "system_labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.System = make(map[string]JSONAnyString)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 JSONAnyString
					if data := in.Raw(); in.Ok() {
						in.AddError((v11).UnmarshalJSON(data))
					}
					(out.System)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeAYandexTeamRuCloudBillingGoPiperInternalTypes5(out *jwriter.Writer, in MetricLabels) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_labels\":"
		out.RawString(prefix[1:])
		if in.User == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.User {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				out.Raw((v12Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"system_labels\":"
		out.RawString(prefix)
		if in.System == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.System {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				out.Raw((v13Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
