// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	iam "a.yandex-team.ru/cloud/billing/go/piper/internal/interconnect/iam"
	mock "github.com/stretchr/testify/mock"
)

// RMClient is an autogenerated mock type for the RMClient type
type RMClient struct {
	mock.Mock
}

// HealthCheck provides a mock function with given fields: _a0
func (_m *RMClient) HealthCheck(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResolveFolder provides a mock function with given fields: ctx, folderIDs
func (_m *RMClient) ResolveFolder(ctx context.Context, folderIDs ...string) ([]iam.ResolvedFolder, error) {
	_va := make([]interface{}, len(folderIDs))
	for _i := range folderIDs {
		_va[_i] = folderIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []iam.ResolvedFolder
	if rf, ok := ret.Get(0).(func(context.Context, ...string) []iam.ResolvedFolder); ok {
		r0 = rf(ctx, folderIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.ResolvedFolder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, folderIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
