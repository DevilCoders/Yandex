// Code generated by "stringer -type=UsageType,MetricFailReason,MatchRuleType,ResourceBindingType,UsagePeriodType -linecomment -output enums_string.go"; DO NOT EDIT.

package entities

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DeltaUsage-0]
	_ = x[CumulativeUsage-1]
	_ = x[GaugeUsage-2]
	_ = x[UnknownUsage-255]
}

const (
	_UsageType_name_0 = "deltacumulativegauge"
	_UsageType_name_1 = "unknown"
)

var (
	_UsageType_index_0 = [...]uint8{0, 5, 15, 20}
)

func (i UsageType) String() string {
	switch {
	case i <= 2:
		return _UsageType_name_0[_UsageType_index_0[i]:_UsageType_index_0[i+1]]
	case i == 255:
		return _UsageType_name_1
	default:
		return "UsageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FailedByBillingAccountResolving-0]
	_ = x[FailedByExpired-1]
	_ = x[FailedByFinishedAfterWrite-2]
	_ = x[FailedByInvalidModel-3]
	_ = x[FailedByInvalidTags-4]
	_ = x[FailedByNegativeQuantity-5]
	_ = x[FailedBySkuResolving-6]
	_ = x[FailedByUnparsedJSON-7]
	_ = x[FailedByTooBigChunk-8]
	_ = x[FailedByDuplicate-9]
}

const _MetricFailReason_name = "billing_account_resolvingexpiredfinish_gt_msg_write_tsinvalid_modelinvalid_tagsnegative_quantitysku_resolvingunparsed_jsontoo_big_chunkduplicate"

var _MetricFailReason_index = [...]uint8{0, 25, 32, 54, 67, 79, 96, 109, 122, 135, 144}

func (i MetricFailReason) String() string {
	if i >= MetricFailReason(len(_MetricFailReason_index)-1) {
		return "MetricFailReason(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MetricFailReason_name[_MetricFailReason_index[i]:_MetricFailReason_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExistenceRule-0]
	_ = x[ValueRule-1]
}

const _MatchRuleType_name = "existsvalue"

var _MatchRuleType_index = [...]uint8{0, 6, 11}

func (i MatchRuleType) String() string {
	if i >= MatchRuleType(len(_MatchRuleType_index)-1) {
		return "MatchRuleType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MatchRuleType_name[_MatchRuleType_index[i]:_MatchRuleType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoResourceBinding-0]
	_ = x[TrackerResourceBinding-1]
}

const _ResourceBindingType_name = "no_bindingtracker"

var _ResourceBindingType_index = [...]uint8{0, 10, 17}

func (i ResourceBindingType) String() string {
	if i >= ResourceBindingType(len(_ResourceBindingType_index)-1) {
		return "ResourceBindingType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ResourceBindingType_name[_ResourceBindingType_index[i]:_ResourceBindingType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownPeriod-0]
	_ = x[MonthlyUsage-1]
}

const _UsagePeriodType_name = "unknownmonthly"

var _UsagePeriodType_index = [...]uint8{0, 7, 14}

func (i UsagePeriodType) String() string {
	if i >= UsagePeriodType(len(_UsagePeriodType_index)-1) {
		return "UsagePeriodType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _UsagePeriodType_name[_UsagePeriodType_index[i]:_UsagePeriodType_index[i+1]]
}
