// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "a.yandex-team.ru/cloud/billing/go/piper/internal/core/entities"
	mock "github.com/stretchr/testify/mock"
)

// BillingAccountsGetter is an autogenerated mock type for the BillingAccountsGetter type
type BillingAccountsGetter struct {
	mock.Mock
}

// GetBillingAccounts provides a mock function with given fields: ctx, scope, ids
func (_m *BillingAccountsGetter) GetBillingAccounts(ctx context.Context, scope entities.ProcessingScope, ids []string) ([]entities.BillingAccount, error) {
	ret := _m.Called(ctx, scope, ids)

	var r0 []entities.BillingAccount
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, []string) []entities.BillingAccount); ok {
		r0 = rf(ctx, scope, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.BillingAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.ProcessingScope, []string) error); ok {
		r1 = rf(ctx, scope, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudBindings provides a mock function with given fields: ctx, scope, ids
func (_m *BillingAccountsGetter) GetCloudBindings(ctx context.Context, scope entities.ProcessingScope, ids []entities.CloudAtTime) ([]entities.CloudBinding, error) {
	ret := _m.Called(ctx, scope, ids)

	var r0 []entities.CloudBinding
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, []entities.CloudAtTime) []entities.CloudBinding); ok {
		r0 = rf(ctx, scope, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.CloudBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.ProcessingScope, []entities.CloudAtTime) error); ok {
		r1 = rf(ctx, scope, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceBindings provides a mock function with given fields: ctx, scope, ids
func (_m *BillingAccountsGetter) GetResourceBindings(ctx context.Context, scope entities.ProcessingScope, ids []entities.ResourceAtTime) ([]entities.ResourceBinding, error) {
	ret := _m.Called(ctx, scope, ids)

	var r0 []entities.ResourceBinding
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, []entities.ResourceAtTime) []entities.ResourceBinding); ok {
		r0 = rf(ctx, scope, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ResourceBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.ProcessingScope, []entities.ResourceAtTime) error); ok {
		r1 = rf(ctx, scope, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
