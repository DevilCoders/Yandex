// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "a.yandex-team.ru/cloud/billing/go/piper/internal/core/entities"
	mock "github.com/stretchr/testify/mock"
)

// SkuMapper is an autogenerated mock type for the SkuMapper type
type SkuMapper struct {
	mock.Mock
}

// GetSkuResolving provides a mock function with given fields: ctx, scope, schemas, productSchemas, explicitSkus
func (_m *SkuMapper) GetSkuResolving(ctx context.Context, scope entities.ProcessingScope, schemas []string, productSchemas []string, explicitSkus []string) ([]entities.SkuResolveRules, []entities.SkuResolveRules, []entities.Sku, error) {
	ret := _m.Called(ctx, scope, schemas, productSchemas, explicitSkus)

	var r0 []entities.SkuResolveRules
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, []string, []string, []string) []entities.SkuResolveRules); ok {
		r0 = rf(ctx, scope, schemas, productSchemas, explicitSkus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.SkuResolveRules)
		}
	}

	var r1 []entities.SkuResolveRules
	if rf, ok := ret.Get(1).(func(context.Context, entities.ProcessingScope, []string, []string, []string) []entities.SkuResolveRules); ok {
		r1 = rf(ctx, scope, schemas, productSchemas, explicitSkus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entities.SkuResolveRules)
		}
	}

	var r2 []entities.Sku
	if rf, ok := ret.Get(2).(func(context.Context, entities.ProcessingScope, []string, []string, []string) []entities.Sku); ok {
		r2 = rf(ctx, scope, schemas, productSchemas, explicitSkus)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]entities.Sku)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, entities.ProcessingScope, []string, []string, []string) error); ok {
		r3 = rf(ctx, scope, schemas, productSchemas, explicitSkus)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
