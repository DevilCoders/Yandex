// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "a.yandex-team.ru/cloud/billing/go/piper/internal/core/entities"
	decimal "a.yandex-team.ru/cloud/billing/go/pkg/decimal"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UnitsConverter is an autogenerated mock type for the UnitsConverter type
type UnitsConverter struct {
	mock.Mock
}

// ConvertQuantity provides a mock function with given fields: ctx, scope, at, srcUnit, dstUnit, quantity
func (_m *UnitsConverter) ConvertQuantity(ctx context.Context, scope entities.ProcessingScope, at time.Time, srcUnit string, dstUnit string, quantity decimal.Decimal128) (decimal.Decimal128, error) {
	ret := _m.Called(ctx, scope, at, srcUnit, dstUnit, quantity)

	var r0 decimal.Decimal128
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProcessingScope, time.Time, string, string, decimal.Decimal128) decimal.Decimal128); ok {
		r0 = rf(ctx, scope, at, srcUnit, dstUnit, quantity)
	} else {
		r0 = ret.Get(0).(decimal.Decimal128)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.ProcessingScope, time.Time, string, string, decimal.Decimal128) error); ok {
		r1 = rf(ctx, scope, at, srcUnit, dstUnit, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
