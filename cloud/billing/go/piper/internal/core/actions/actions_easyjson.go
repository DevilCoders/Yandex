// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package actions

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB97b45a3DecodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions(in *jlexer.Lexer, out *s3RequestTagsSchema) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handler":
			out.Handler = string(in.String())
		case "storage_class":
			out.StorageClass = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "status_code":
			out.StatusCode = string(in.String())
		case "net_type":
			out.NetType = string(in.String())
		case "transferred":
			out.Transferred = uint64(in.Uint64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions(out *jwriter.Writer, in s3RequestTagsSchema) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Handler != "" {
		const prefix string = ",\"handler\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Handler))
	}
	{
		const prefix string = ",\"storage_class\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StorageClass))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"status_code\":"
		out.RawString(prefix)
		out.String(string(in.StatusCode))
	}
	{
		const prefix string = ",\"net_type\":"
		out.RawString(prefix)
		out.String(string(in.NetType))
	}
	{
		const prefix string = ",\"transferred\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Transferred))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v s3RequestTagsSchema) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v s3RequestTagsSchema) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *s3RequestTagsSchema) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *s3RequestTagsSchema) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions(l, v)
}
func easyjsonB97b45a3DecodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions1(in *jlexer.Lexer, out *dnsRequestTagsSchema) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request_type":
			out.RequestType = string(in.String())
		case "forwarding":
			out.Forwarding = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions1(out *jwriter.Writer, in dnsRequestTagsSchema) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.RequestType))
	}
	{
		const prefix string = ",\"forwarding\":"
		out.RawString(prefix)
		out.Bool(bool(in.Forwarding))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dnsRequestTagsSchema) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dnsRequestTagsSchema) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dnsRequestTagsSchema) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dnsRequestTagsSchema) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeAYandexTeamRuCloudBillingGoPiperInternalCoreActions1(l, v)
}
