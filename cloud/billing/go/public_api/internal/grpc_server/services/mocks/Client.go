// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	console "a.yandex-team.ru/cloud/billing/go/public_api/internal/console"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ActivateCustomer provides a mock function with given fields: ctx, request
func (_m *Client) ActivateCustomer(ctx context.Context, request *console.ActivateCustomerRequest) (*console.OperationResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.OperationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.ActivateCustomerRequest) *console.OperationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.OperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.ActivateCustomerRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BindBillableObject provides a mock function with given fields: ctx, request
func (_m *Client) BindBillableObject(ctx context.Context, request *console.BindBillableObjectRequest) (*console.OperationResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.OperationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.BindBillableObjectRequest) *console.OperationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.OperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.BindBillableObjectRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBudget provides a mock function with given fields: ctx, request
func (_m *Client) CreateBudget(ctx context.Context, request *console.CreateBudgetRequest) (*console.OperationResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.OperationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.CreateBudgetRequest) *console.OperationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.OperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.CreateBudgetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillingAccount provides a mock function with given fields: ctx, request
func (_m *Client) GetBillingAccount(ctx context.Context, request *console.GetBillingAccountRequest) (*console.BillingAccountResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.BillingAccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.GetBillingAccountRequest) *console.BillingAccountResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.BillingAccountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.GetBillingAccountRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudget provides a mock function with given fields: ctx, request
func (_m *Client) GetBudget(ctx context.Context, request *console.GetBudgetRequest) (*console.BudgetResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.BudgetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.GetBudgetRequest) *console.BudgetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.BudgetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.GetBudgetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: ctx, request
func (_m *Client) GetOperation(ctx context.Context, request *console.GetOperationRequest) (*console.OperationResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.OperationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.GetOperationRequest) *console.OperationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.OperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.GetOperationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: ctx, request
func (_m *Client) GetService(ctx context.Context, request *console.GetServiceRequest) (*console.ServiceResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.ServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.GetServiceRequest) *console.ServiceResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.ServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.GetServiceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSku provides a mock function with given fields: ctx, req
func (_m *Client) GetSku(ctx context.Context, req *console.GetSkuRequest) (*console.Sku, error) {
	ret := _m.Called(ctx, req)

	var r0 *console.Sku
	if rf, ok := ret.Get(0).(func(context.Context, *console.GetSkuRequest) *console.Sku); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.Sku)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.GetSkuRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteCustomer provides a mock function with given fields: ctx, request
func (_m *Client) InviteCustomer(ctx context.Context, request *console.InviteCustomerRequest) (*console.OperationResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.OperationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.InviteCustomerRequest) *console.OperationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.OperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.InviteCustomerRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessBindings provides a mock function with given fields: ctx, request, authData
func (_m *Client) ListAccessBindings(ctx context.Context, request *console.ListAccessBindingsRequest, authData *console.AuthData) (*console.ListAccessBindingsResponse, error) {
	ret := _m.Called(ctx, request, authData)

	var r0 *console.ListAccessBindingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.ListAccessBindingsRequest, *console.AuthData) *console.ListAccessBindingsResponse); ok {
		r0 = rf(ctx, request, authData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.ListAccessBindingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.ListAccessBindingsRequest, *console.AuthData) error); ok {
		r1 = rf(ctx, request, authData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillableObjectBindings provides a mock function with given fields: ctx, request
func (_m *Client) ListBillableObjectBindings(ctx context.Context, request *console.ListBillableObjectBindingsRequest) (*console.BillableObjectBindingsListResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.BillableObjectBindingsListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.ListBillableObjectBindingsRequest) *console.BillableObjectBindingsListResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.BillableObjectBindingsListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.ListBillableObjectBindingsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillingAccounts provides a mock function with given fields: ctx, request
func (_m *Client) ListBillingAccounts(ctx context.Context, request *console.ListBillingAccountsRequest) (*console.ListBillingAccountsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.ListBillingAccountsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.ListBillingAccountsRequest) *console.ListBillingAccountsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.ListBillingAccountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.ListBillingAccountsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBudgets provides a mock function with given fields: ctx, request
func (_m *Client) ListBudgets(ctx context.Context, request *console.ListBudgetRequest) (*console.ListBudgetResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.ListBudgetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.ListBudgetRequest) *console.ListBudgetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.ListBudgetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.ListBudgetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomers provides a mock function with given fields: ctx, request
func (_m *Client) ListCustomers(ctx context.Context, request *console.ListCustomersRequest) (*console.ListCustomersResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.ListCustomersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.ListCustomersRequest) *console.ListCustomersResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.ListCustomersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.ListCustomersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx, request
func (_m *Client) ListServices(ctx context.Context, request *console.ListServiceRequest) (*console.ListServiceResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.ListServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.ListServiceRequest) *console.ListServiceResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.ListServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.ListServiceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSkus provides a mock function with given fields: ctx, req
func (_m *Client) ListSkus(ctx context.Context, req *console.ListSkuRequest) (*console.ListSkuResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *console.ListSkuResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.ListSkuRequest) *console.ListSkuResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.ListSkuResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.ListSkuRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuspendCustomer provides a mock function with given fields: ctx, request
func (_m *Client) SuspendCustomer(ctx context.Context, request *console.SuspendCustomerRequest) (*console.OperationResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *console.OperationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.SuspendCustomerRequest) *console.OperationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.OperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.SuspendCustomerRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccessBindings provides a mock function with given fields: ctx, request, authData
func (_m *Client) UpdateAccessBindings(ctx context.Context, request *console.UpdateAccessBindingsRequest, authData *console.AuthData) (*console.OperationResponse, error) {
	ret := _m.Called(ctx, request, authData)

	var r0 *console.OperationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *console.UpdateAccessBindingsRequest, *console.AuthData) *console.OperationResponse); ok {
		r0 = rf(ctx, request, authData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*console.OperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *console.UpdateAccessBindingsRequest, *console.AuthData) error); ok {
		r1 = rf(ctx, request, authData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
