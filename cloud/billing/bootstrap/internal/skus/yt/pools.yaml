service: yt
skus:
  yt.ada.compute_pool:
    ru: Ada. Вычислительный пул
    en: Ada. Compute pool
    reporting_service: yt/ada
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.arnold.compute_pool:
    ru: Arnold. Вычислительный пул
    en: Arnold. Compute pool
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.bohr.compute_pool:
    ru: Bohr. Вычислительный пул
    en: Bohr. Compute pool
    reporting_service: yt/bohr
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.freud.compute_pool:
    ru: Freud. Вычислительный пул
    en: Freud. Compute pool
    reporting_service: yt/freud
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.hahn.compute_pool:
    ru: Hahn. Вычислительный пул
    en: Hahn. Compute pool
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.hume.compute_pool:
    ru: Hume. Вычислительный пул
    en: Hume. Compute pool
    reporting_service: yt/hume
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.landau.compute_pool:
    ru: Landau. Вычислительный пул
    en: Landau. Compute pool
    reporting_service: yt/landau
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.locke.compute_pool:
    ru: Locke. Вычислительный пул
    en: Locke. Compute pool
    reporting_service: yt/locke
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.markov.compute_pool:
    ru: Markov. Вычислительный пул
    en: Markov. Compute pool
    reporting_service: yt/markov
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.ofd-xdc.compute_pool:
    ru: Ofd-xdc. Вычислительный пул
    en: Ofd-xdc. Compute pool
    reporting_service: yt/xdc
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.pythia.compute_pool:
    ru: Pythia. Вычислительный пул
    en: Pythia. Compute pool
    reporting_service: yt/pythia
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.seneca-man.compute_pool:
    ru: Seneca-man. Вычислительный пул
    en: Seneca-man. Compute pool
    reporting_service: yt/man
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.seneca-sas.compute_pool:
    ru: Seneca-sas. Вычислительный пул
    en: Seneca-sas. Compute pool
    reporting_service: yt/sas
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.seneca-vla.compute_pool:
    ru: Seneca-vla. Вычислительный пул
    en: Seneca-vla. Compute pool
    reporting_service: yt/vla
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.vanga.compute_pool:
    ru: Vanga. Вычислительный пул
    en: Vanga. Compute pool
    reporting_service: yt/vanga
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.yp-iva.compute_pool:
    ru: Yp-iva. Вычислительный пул
    en: Yp-iva. Compute pool
    reporting_service: yt/iva
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.yp-man-pre.compute_pool:
    ru: Yp-man-pre. Вычислительный пул
    en: Yp-man-pre. Compute pool
    reporting_service: yt/pre
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.yp-man.compute_pool:
    ru: Yp-man. Вычислительный пул
    en: Yp-man. Compute pool
    reporting_service: yt/man
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.yp-myt.compute_pool:
    ru: Yp-myt. Вычислительный пул
    en: Yp-myt. Compute pool
    reporting_service: yt/myt
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.yp-sas-test.compute_pool:
    ru: Yp-sas-test. Вычислительный пул
    en: Yp-sas-test. Compute pool
    reporting_service: yt/test
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.yp-sas.compute_pool:
    ru: Yp-sas. Вычислительный пул
    en: Yp-sas. Compute pool
    reporting_service: yt/sas
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.yp-vla.compute_pool:
    ru: Yp-vla. Вычислительный пул
    en: Yp-vla. Compute pool
    reporting_service: yt/vla
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.yp-xdc.compute_pool:
    ru: Yp-xdc. Вычислительный пул
    en: Yp-xdc. Compute pool
    reporting_service: yt/xdc
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
  yt.zeno.compute_pool:
    ru: Zeno. Вычислительный пул
    en: Zeno. Compute pool
    reporting_service: yt/zeno
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*hour
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: "`false`"
