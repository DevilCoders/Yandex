service: yt
skus:
  yt.ada.dynamic_tables:
    ru: Ada. Динамические таблицы
    en: Ada. Dynamic tables
    reporting_service: yt/ada
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.arnold.dynamic_tables:
    ru: Arnold. Динамические таблицы
    en: Arnold. Dynamic tables
    reporting_service: yt/arnold
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.arnold.dynamic_tables.tablet_cell:
    ru: Arnold. Выделенные мощности для Динамических таблиц
    en: Arnold. Dynamic Tables Tablet Cells
    reporting_service: yt/arnold
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `arnold` && tags.tablet_cell_count != null
  yt.bohr.dynamic_tables:
    ru: Bohr. Динамические таблицы
    en: Bohr. Dynamic tables
    reporting_service: yt/bohr
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.bohr.dynamic_tables.tablet_cell:
    ru: Bohr. Выделенные мощности для Динамических таблиц
    en: Bohr. Dynamic Tables Tablet Cells
    reporting_service: yt/bohr
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `bohr` && tags.tablet_cell_count != null
  yt.freud.dynamic_tables:
    ru: Freud. Динамические таблицы
    en: Freud. Dynamic tables
    reporting_service: yt/freud
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.freud.dynamic_tables.tablet_cell:
    ru: Freud. Выделенные мощности для Динамических таблиц
    en: Freud. Dynamic Tables Tablet Cells
    reporting_service: yt/freud
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `freud` && tags.tablet_cell_count != null
  yt.hahn.dynamic_tables:
    ru: Hahn. Динамические таблицы
    en: Hahn. Dynamic tables
    reporting_service: yt/hahn
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.hahn.dynamic_tables.tablet_cell:
    ru: Hahn. Выделенные мощности для Динамических таблиц
    en: Hahn. Dynamic Tables Tablet Cells
    reporting_service: yt/hahn
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `hahn` && tags.tablet_cell_count != null
  yt.hume.dynamic_tables:
    ru: Hume. Динамические таблицы
    en: Hume. Dynamic tables
    reporting_service: yt/hume
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.hume.dynamic_tables.tablet_cell:
    ru: Hume. Выделенные мощности для Динамических таблиц
    en: Hume. Dynamic Tables Tablet Cells
    reporting_service: yt/hume
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `hume` && tags.tablet_cell_count != null
  yt.landau.dynamic_tables:
    ru: Landau. Динамические таблицы
    en: Landau. Dynamic tables
    reporting_service: yt/landau
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.landau.dynamic_tables.tablet_cell:
    ru: Landau. Выделенные мощности для Динамических таблиц
    en: Landau. Dynamic Tables Tablet Cells
    reporting_service: yt/landau
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `landau` && tags.tablet_cell_count != null
  yt.locke.dynamic_tables:
    ru: Locke. Динамические таблицы
    en: Locke. Dynamic tables
    reporting_service: yt/locke
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.markov.dynamic_tables:
    ru: Markov. Динамические таблицы
    en: Markov. Dynamic tables
    reporting_service: yt/markov
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.markov.dynamic_tables.tablet_cell:
    ru: Markov. Выделенные мощности для Динамических таблиц
    en: Markov. Dynamic Tables Tablet Cells
    reporting_service: yt/markov
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `markov` && tags.tablet_cell_count != null
  yt.ofd-xdc.dynamic_tables:
    ru: Ofd-xdc. Динамические таблицы
    en: Ofd-xdc. Dynamic tables
    reporting_service: yt/ofd-xdc
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.pythia.dynamic_tables:
    ru: Pythia. Динамические таблицы
    en: Pythia. Dynamic tables
    reporting_service: yt/pythia
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.pythia.dynamic_tables.tablet_cell:
    ru: Pythia. Выделенные мощности для Динамических таблиц
    en: Pythia. Dynamic Tables Tablet Cells
    reporting_service: yt/pythia
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `pythia` && tags.tablet_cell_count != null
  yt.seneca-man.dynamic_tables:
    ru: Seneca-man. Динамические таблицы
    en: Seneca-man. Dynamic tables
    reporting_service: yt/seneca-man
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.seneca-man.dynamic_tables.tablet_cell:
    ru: Seneca-Man. Выделенные мощности для Динамических таблиц
    en: Seneca-Man. Dynamic Tables Tablet Cells
    reporting_service: yt/seneca-man
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `seneca-man` && tags.tablet_cell_count != null
  yt.seneca-sas.dynamic_tables:
    ru: Seneca-sas. Динамические таблицы
    en: Seneca-sas. Dynamic tables
    reporting_service: yt/seneca-sas
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.seneca-sas.dynamic_tables.tablet_cell:
    ru: Seneca-Sas. Выделенные мощности для Динамических таблиц
    en: Seneca-Sas. Dynamic Tables Tablet Cells
    reporting_service: yt/seneca-sas
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `seneca-sas` && tags.tablet_cell_count != null
  yt.seneca-vla.dynamic_tables:
    ru: Seneca-vla. Динамические таблицы
    en: Seneca-vla. Dynamic tables
    reporting_service: yt/seneca-vla
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.seneca-vla.dynamic_tables.tablet_cell:
    ru: Seneca-Vla. Выделенные мощности для Динамических таблиц
    en: Seneca-Vla. Dynamic Tables Tablet Cells
    reporting_service: yt/seneca-vla
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `seneca-vla` && tags.tablet_cell_count != null
  yt.vanga.dynamic_tables:
    ru: Vanga. Динамические таблицы
    en: Vanga. Dynamic tables
    reporting_service: yt/vanga
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.vanga.dynamic_tables.tablet_cell:
    ru: Vanga. Выделенные мощности для Динамических таблиц
    en: Vanga. Dynamic Tables Tablet Cells
    reporting_service: yt/vanga
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `vanga` && tags.tablet_cell_count != null
  yt.yp-iva.dynamic_tables:
    ru: Yp-iva. Динамические таблицы
    en: Yp-iva. Dynamic tables
    reporting_service: yt/yp-iva
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.yp-man-pre.dynamic_tables:
    ru: Yp-man-pre. Динамические таблицы
    en: Yp-man-pre. Dynamic tables
    reporting_service: yt/yp-man-pre
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.yp-man.dynamic_tables:
    ru: Yp-man. Динамические таблицы
    en: Yp-man. Dynamic tables
    reporting_service: yt/yp-man
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.yp-myt.dynamic_tables:
    ru: Yp-myt. Динамические таблицы
    en: Yp-myt. Dynamic tables
    reporting_service: yt/yp-myt
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.yp-sas-test.dynamic_tables:
    ru: Yp-sas-test. Динамические таблицы
    en: Yp-sas-test. Dynamic tables
    reporting_service: yt/yp-sas-test
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.yp-sas.dynamic_tables:
    ru: Yp-sas. Динамические таблицы
    en: Yp-sas. Dynamic tables
    reporting_service: yt/yp-sas
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.yp-vla.dynamic_tables:
    ru: Yp-vla. Динамические таблицы
    en: Yp-vla. Dynamic tables
    reporting_service: yt/yp-vla
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.yp-xdc.dynamic_tables:
    ru: Yp-xdc. Динамические таблицы
    en: Yp-xdc. Dynamic tables
    reporting_service: yt/yp-xdc
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.zeno.dynamic_tables:
    ru: Zeno. Динамические таблицы
    en: Zeno. Dynamic tables
    reporting_service: yt/zeno
    pricing_formula: mul(mul(tags.tablet_cell_count, tags.cpu_per_tablet_slot), usage.quantity)
    units:
      usage: dyntable unit * second
      pricing: dyntable unit * hour
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: "`false`"
  yt.zeno.dynamic_tables.tablet_cell:
    ru: Zeno. Выделенные мощности для Динамических таблиц
    en: Zeno. Dynamic Tables Tablet Cells
    reporting_service: yt/zeno
    pricing_formula: mul(tags.tablet_cell_count, usage.quantity)
    units:
      usage: dyntable_unit*second
      pricing: dyntable_unit*month
    schemas:
      - yt.dynamic_tables.tablet_cell_bundle.v1
    resolving_policy: tags.cluster == `zeno` && tags.tablet_cell_count != null
