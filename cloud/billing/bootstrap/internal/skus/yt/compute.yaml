service: yt
skus:
  yt.arnold.compute.cloud.usage.cpu:
    ru: Arnold. Использование CPU в облачных пулах
    en: Arnold. CPU Usage in cloud pools
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.cpu != null && tags.billing_type == null
  yt.arnold.compute.integral_guarantee.burst.cpu:
    ru: Arnold. Пиковая гарантия
    en: Arnold. Burst Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.burst_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.burst_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.arnold.compute.integral_guarantee.relaxed.cpu:
    ru: Arnold. Интегральная гарантия
    en: Arnold. Relaxed Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.resource_flow.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.resource_flow.cpu != null && tags.billing_type == `default`
  yt.arnold.compute.strong_guarantee.cpu:
    ru: Arnold. Строгая гарантия
    en: Arnold. Strong Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.strong_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.arnold.compute.usage.cpu:
    ru: Arnold. CPU
    en: Arnold. CPU
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.cpu != null && tags.billing_type == `default`
  yt.arnold.compute.usage.memory:
    ru: Arnold. Оперативная память
    en: Arnold. Memory
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.user_memory)
    units:
      usage: byte*millisecond
      pricing: gbyte*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.user_memory != null && tags.billing_type == `default`
  yt.arnold.gpu.geforce_1080ti.strong_guarantee.gpu:
    ru: Arnold. Geforce_1080Ti Строгая гарантия на карту
    en: Arnold. Geforce_1080Ti Card Strong Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `geforce_1080ti`
  yt.arnold.gpu.geforce_1080ti.usage.gpu:
    ru: Arnold. Использование карты Geforce_1080Ti
    en: Arnold. Geforce_1080Ti Usage
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.gpu != null && tags.gpu_type == `geforce_1080ti`
  yt.arnold.gpu.tesla_a100.strong_guarantee.gpu:
    ru: Arnold. Tesla_A100 Строгая гарантия на карту
    en: Arnold. Tesla_A100 Card Strong Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_a100`
  yt.arnold.gpu.tesla_a100.usage.gpu:
    ru: Arnold. Использование карты Tesla_A100
    en: Arnold. Tesla_A100 Usage
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_a100`
  yt.arnold.gpu.tesla_a100_80g.strong_guarantee.gpu:
    ru: Arnold. Tesla_A100_80G Строгая гарантия на карту
    en: Arnold. Tesla_A100_80G Card Strong Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_a100_80g`
  yt.arnold.gpu.tesla_a100_80g.usage.gpu:
    ru: Arnold. Использование карты Tesla_A100_80G
    en: Arnold. Tesla_A100_80G Usage
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_a100_80g`
  yt.arnold.gpu.tesla_k40.strong_guarantee.gpu:
    ru: Arnold. Tesla_K40 Строгая гарантия на карту
    en: Arnold. Tesla_K40 Card Strong Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_k40`
  yt.arnold.gpu.tesla_k40.usage.gpu:
    ru: Arnold. Использование карты Tesla_K40
    en: Arnold. Tesla_K40 Usage
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_k40`
  yt.arnold.gpu.tesla_m40.strong_guarantee.gpu:
    ru: Arnold. Tesla_M40 Строгая гарантия на карту
    en: Arnold. Tesla_M40 Card Strong Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_m40`
  yt.arnold.gpu.tesla_m40.usage.gpu:
    ru: Arnold. Использование карты Tesla_M40
    en: Arnold. Tesla_M40 Usage
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_m40`
  yt.arnold.gpu.tesla_p40.strong_guarantee.gpu:
    ru: Arnold. Tesla_P40 Строгая гарантия на карту
    en: Arnold. Tesla_P40 Card Strong Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_p40`
  yt.arnold.gpu.tesla_p40.usage.gpu:
    ru: Arnold. Использование карты Tesla_P40
    en: Arnold. Tesla_P40 Usage
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_p40`
  yt.arnold.gpu.tesla_v100.strong_guarantee.gpu:
    ru: Arnold. Tesla_v100 Строгая гарантия на карту
    en: Arnold. Tesla_v100 Card Strong Guarantee
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.strong_guarantee_resources.gpu != null && (tags.gpu_type == `bert_tesla_v100` || tags.gpu_type == `tesla_v100` || tags.gpu_type == `tesla_v100_nvlink` || tags.gpu_type == `tesla_v100_test`)
  yt.arnold.gpu.tesla_v100.usage.gpu:
    ru: Arnold. Использование карты Tesla_v100
    en: Arnold. Tesla_v100 card Usage
    reporting_service: yt/arnold
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `arnold` && tags.allocated_resources.gpu != null && (tags.gpu_type == `bert_tesla_v100` || tags.gpu_type == `tesla_v100` || tags.gpu_type == `tesla_v100_nvlink` || tags.gpu_type == `tesla_v100_test`)
  yt.bohr.compute.cloud.usage.cpu:
    ru: Bohr. Использование CPU в облачных пулах
    en: Bohr. CPU Usage in cloud pools
    reporting_service: yt/bohr
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `bohr` && tags.allocated_resources.cpu != null && tags.billing_type == null
  yt.bohr.compute.integral_guarantee.burst.cpu:
    ru: Bohr. Пиковая гарантия
    en: Bohr. Burst Guarantee
    reporting_service: yt/bohr
    pricing_formula: mul(usage.quantity, tags.burst_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `bohr` && tags.burst_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.bohr.compute.integral_guarantee.relaxed.cpu:
    ru: Bohr. Интегральная гарантия
    en: Bohr. Relaxed Guarantee
    reporting_service: yt/bohr
    pricing_formula: mul(usage.quantity, tags.resource_flow.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `bohr` && tags.resource_flow.cpu != null && tags.billing_type == `default`
  yt.bohr.compute.strong_guarantee.cpu:
    ru: Bohr. Строгая гарантия
    en: Bohr. Strong Guarantee
    reporting_service: yt/bohr
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `bohr` && tags.strong_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.bohr.compute.usage.cpu:
    ru: Bohr. CPU
    en: Bohr. CPU
    reporting_service: yt/bohr
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `bohr` && tags.allocated_resources.cpu != null && tags.billing_type == `default`
  yt.bohr.compute.usage.memory:
    ru: Bohr. Оперативная память
    en: Bohr. Memory
    reporting_service: yt/bohr
    pricing_formula: mul(usage.quantity, tags.allocated_resources.user_memory)
    units:
      usage: byte*millisecond
      pricing: gbyte*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `bohr` && tags.allocated_resources.user_memory != null && tags.billing_type == `default`
  yt.freud.compute.cloud.usage.cpu:
    ru: Freud. Использование CPU в облачных пулах
    en: Freud. CPU Usage in cloud pools
    reporting_service: yt/freud
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `freud` && tags.allocated_resources.cpu != null && tags.billing_type == null
  yt.freud.compute.integral_guarantee.burst.cpu:
    ru: Freud. Пиковая гарантия
    en: Freud. Burst Guarantee
    reporting_service: yt/freud
    pricing_formula: mul(usage.quantity, tags.burst_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `freud` && tags.burst_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.freud.compute.integral_guarantee.relaxed.cpu:
    ru: Freud. Интегральная гарантия
    en: Freud. Relaxed Guarantee
    reporting_service: yt/freud
    pricing_formula: mul(usage.quantity, tags.resource_flow.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `freud` && tags.resource_flow.cpu != null && tags.billing_type == `default`
  yt.freud.compute.strong_guarantee.cpu:
    ru: Freud. Строгая гарантия
    en: Freud. Strong Guarantee
    reporting_service: yt/freud
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `freud` && tags.strong_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.freud.compute.usage.cpu:
    ru: Freud. CPU
    en: Freud. CPU
    reporting_service: yt/freud
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `freud` && tags.allocated_resources.cpu != null && tags.billing_type == `default`
  yt.freud.compute.usage.memory:
    ru: Freud. Оперативная память
    en: Freud. Memory
    reporting_service: yt/freud
    pricing_formula: mul(usage.quantity, tags.allocated_resources.user_memory)
    units:
      usage: byte*millisecond
      pricing: gbyte*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `freud` && tags.allocated_resources.user_memory != null && tags.billing_type == `default`
  yt.hahn.compute.cloud.usage.cpu:
    ru: Hahn. Использование CPU в облачных пулах
    en: Hahn. CPU Usage in cloud pools
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.cpu != null && tags.billing_type == null
  yt.hahn.compute.integral_guarantee.burst.cpu:
    ru: Hahn. Пиковая гарантия
    en: Hahn. Burst Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.burst_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.burst_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.hahn.compute.integral_guarantee.relaxed.cpu:
    ru: Hahn. Интегральная гарантия
    en: Hahn. Relaxed Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.resource_flow.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.resource_flow.cpu != null && tags.billing_type == `default`
  yt.hahn.compute.strong_guarantee.cpu:
    ru: Hahn. Строгая гарантия
    en: Hahn. Strong Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.strong_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.hahn.compute.usage.cpu:
    ru: Hahn. CPU
    en: Hahn. CPU
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.cpu != null && tags.billing_type == `default`
  yt.hahn.compute.usage.memory:
    ru: Hahn. Оперативная память
    en: Hahn. Memory
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.user_memory)
    units:
      usage: byte*millisecond
      pricing: gbyte*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.user_memory != null && tags.billing_type == `default`
  yt.hahn.gpu.geforce_1080ti.strong_guarantee.gpu:
    ru: Hahn. Geforce_1080Ti Строгая гарантия на карту
    en: Hahn. Geforce_1080Ti Card Strong Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `geforce_1080ti`
  yt.hahn.gpu.geforce_1080ti.usage.gpu:
    ru: Hahn. Использование карты Geforce_1080Ti
    en: Hahn. Geforce_1080Ti Usage
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.gpu != null && tags.gpu_type == `geforce_1080ti`
  yt.hahn.gpu.tesla_a100.strong_guarantee.gpu:
    ru: Hahn. Tesla_A100 Строгая гарантия на карту
    en: Hahn. Tesla_A100 Card Strong Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_a100`
  yt.hahn.gpu.tesla_a100.usage.gpu:
    ru: Hahn. Использование карты Tesla_A100
    en: Hahn. Tesla_A100 Usage
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_a100`
  yt.hahn.gpu.tesla_a100_80g.strong_guarantee.gpu:
    ru: Hahn. Tesla_A100_80G Строгая гарантия на карту
    en: Hahn. Tesla_A100_80G Card Strong Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_a100_80g`
  yt.hahn.gpu.tesla_a100_80g.usage.gpu:
    ru: Hahn. Использование карты Tesla_A100_80G
    en: Hahn. Tesla_A100_80G Usage
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_a100_80g`
  yt.hahn.gpu.tesla_k40.strong_guarantee.gpu:
    ru: Hahn. Tesla_K40 Строгая гарантия на карту
    en: Hahn. Tesla_K40 Card Strong Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_k40`
  yt.hahn.gpu.tesla_k40.usage.gpu:
    ru: Hahn. Использование карты Tesla_K40
    en: Hahn. Tesla_K40 Usage
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_k40`
  yt.hahn.gpu.tesla_m40.strong_guarantee.gpu:
    ru: Hahn. Tesla_M40 Строгая гарантия на карту
    en: Hahn. Tesla_M40 Card Strong Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_m40`
  yt.hahn.gpu.tesla_m40.usage.gpu:
    ru: Hahn. Использование карты Tesla_M40
    en: Hahn. Tesla_M40 Usage
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_m40`
  yt.hahn.gpu.tesla_p40.strong_guarantee.gpu:
    ru: Hahn. Tesla_P40 Строгая гарантия на карту
    en: Hahn. Tesla_P40 Card Strong Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.strong_guarantee_resources.gpu != null && tags.gpu_type == `tesla_p40`
  yt.hahn.gpu.tesla_p40.usage.gpu:
    ru: Hahn. Использование карты Tesla_P40
    en: Hahn. Tesla_P40 Usage
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.gpu != null && tags.gpu_type == `tesla_p40`
  yt.hahn.gpu.tesla_v100.strong_guarantee.gpu:
    ru: Hahn. Tesla_v100 Строгая гарантия на карту
    en: Hahn. Tesla_v100 Card Strong Guarantee
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.strong_guarantee_resources.gpu != null && (tags.gpu_type == `bert_tesla_v100` || tags.gpu_type == `tesla_v100` || tags.gpu_type == `tesla_v100_nvlink` || tags.gpu_type == `tesla_v100_test`)
  yt.hahn.gpu.tesla_v100.usage.gpu:
    ru: Hahn. Использование карты Tesla_v100
    en: Hahn. Tesla_v100 card Usage
    reporting_service: yt/hahn
    pricing_formula: mul(usage.quantity, tags.allocated_resources.gpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hahn` && tags.allocated_resources.gpu != null && (tags.gpu_type == `bert_tesla_v100` || tags.gpu_type == `tesla_v100` || tags.gpu_type == `tesla_v100_nvlink` || tags.gpu_type == `tesla_v100_test`)
  yt.hume.compute.cloud.usage.cpu:
    ru: Hume. Использование CPU в облачных пулах
    en: Hume. CPU Usage in cloud pools
    reporting_service: yt/hume
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hume` && tags.allocated_resources.cpu != null && tags.billing_type == null
  yt.hume.compute.integral_guarantee.burst.cpu:
    ru: Hume. Пиковая гарантия
    en: Hume. Burst Guarantee
    reporting_service: yt/hume
    pricing_formula: mul(usage.quantity, tags.burst_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hume` && tags.burst_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.hume.compute.integral_guarantee.relaxed.cpu:
    ru: Hume. Интегральная гарантия
    en: Hume. Relaxed Guarantee
    reporting_service: yt/hume
    pricing_formula: mul(usage.quantity, tags.resource_flow.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hume` && tags.resource_flow.cpu != null && tags.billing_type == `default`
  yt.hume.compute.strong_guarantee.cpu:
    ru: Hume. Строгая гарантия
    en: Hume. Strong Guarantee
    reporting_service: yt/hume
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hume` && tags.strong_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.hume.compute.usage.cpu:
    ru: Hume. CPU
    en: Hume. CPU
    reporting_service: yt/hume
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hume` && tags.allocated_resources.cpu != null && tags.billing_type == `default`
  yt.hume.compute.usage.memory:
    ru: Hume. Оперативная память
    en: Hume. Memory
    reporting_service: yt/hume
    pricing_formula: mul(usage.quantity, tags.allocated_resources.user_memory)
    units:
      usage: byte*millisecond
      pricing: gbyte*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `hume` && tags.allocated_resources.user_memory != null && tags.billing_type == `default`
  yt.landau.compute.cloud.usage.cpu:
    ru: Landau. Использование CPU в облачных пулах
    en: Landau. CPU Usage in cloud pools
    reporting_service: yt/landau
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `landau` && tags.allocated_resources.cpu != null && tags.billing_type == null
  yt.landau.compute.integral_guarantee.burst.cpu:
    ru: Landau. Пиковая гарантия
    en: Landau. Burst Guarantee
    reporting_service: yt/landau
    pricing_formula: mul(usage.quantity, tags.burst_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `landau` && tags.burst_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.landau.compute.integral_guarantee.relaxed.cpu:
    ru: Landau. Интегральная гарантия
    en: Landau. Relaxed Guarantee
    reporting_service: yt/landau
    pricing_formula: mul(usage.quantity, tags.resource_flow.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `landau` && tags.resource_flow.cpu != null && tags.billing_type == `default`
  yt.landau.compute.strong_guarantee.cpu:
    ru: Landau. Строгая гарантия
    en: Landau. Strong Guarantee
    reporting_service: yt/landau
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `landau` && tags.strong_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.landau.compute.usage.cpu:
    ru: Landau. CPU
    en: Landau. CPU
    reporting_service: yt/landau
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `landau` && tags.allocated_resources.cpu != null && tags.billing_type == `default`
  yt.landau.compute.usage.memory:
    ru: Landau. Оперативная память
    en: Landau. Memory
    reporting_service: yt/landau
    pricing_formula: mul(usage.quantity, tags.allocated_resources.user_memory)
    units:
      usage: byte*millisecond
      pricing: gbyte*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `landau` && tags.allocated_resources.user_memory != null && tags.billing_type == `default`
  yt.pythia.compute.cloud.usage.cpu:
    ru: Pythia. Использование CPU в облачных пулах
    en: Pythia. CPU Usage in cloud pools
    reporting_service: yt/pythia
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `pythia` && tags.allocated_resources.cpu != null && tags.billing_type == null
  yt.pythia.compute.strong_guarantee.cpu:
    ru: Pythia. Строгая гарантия
    en: Pythia. Strong Guarantee
    reporting_service: yt/pythia
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `pythia` && tags.strong_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.pythia.compute.usage.cpu:
    ru: Pythia. CPU
    en: Pythia. CPU
    reporting_service: yt/pythia
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `pythia` && tags.allocated_resources.cpu != null && tags.billing_type == `default`
  yt.pythia.compute.usage.memory:
    ru: Pythia. Оперативная память
    en: Pythia. Memory
    reporting_service: yt/pythia
    pricing_formula: mul(usage.quantity, tags.allocated_resources.user_memory)
    units:
      usage: byte*millisecond
      pricing: gbyte*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `pythia` && tags.allocated_resources.user_memory != null && tags.billing_type == `default`
  yt.vanga.compute.cloud.usage.cpu:
    ru: Vanga. Использование CPU в облачных пулах
    en: Vanga. CPU Usage in cloud pools
    reporting_service: yt/vanga
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `vanga` && tags.allocated_resources.cpu != null && tags.billing_type == null
  yt.vanga.compute.strong_guarantee.cpu:
    ru: Vanga. Строгая гарантия
    en: Vanga. Strong Guarantee
    reporting_service: yt/vanga
    pricing_formula: mul(usage.quantity, tags.strong_guarantee_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `vanga` && tags.strong_guarantee_resources.cpu != null && tags.billing_type == `default`
  yt.vanga.compute.usage.cpu:
    ru: Vanga. CPU
    en: Vanga. CPU
    reporting_service: yt/vanga
    pricing_formula: mul(usage.quantity, tags.allocated_resources.cpu)
    units:
      usage: compute_unit*millisecond
      pricing: compute_unit*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `vanga` && tags.allocated_resources.cpu != null && tags.billing_type == `default`
  yt.vanga.compute.usage.memory:
    ru: Vanga. Оперативная память
    en: Vanga. Memory
    reporting_service: yt/vanga
    pricing_formula: mul(usage.quantity, tags.allocated_resources.user_memory)
    units:
      usage: byte*millisecond
      pricing: gbyte*month
    schemas:
      - yt.scheduler.pools.compute.v1
    resolving_policy: tags.cluster == `vanga` && tags.allocated_resources.user_memory != null && tags.billing_type == `default`
