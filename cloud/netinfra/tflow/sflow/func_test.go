package sflow

import (
	"a.yandex-team.ru/cloud/netinfra/tflow/consumer"
	"a.yandex-team.ru/cloud/netinfra/tflow/worker"
	"a.yandex-team.ru/library/go/core/log"
	"a.yandex-team.ru/library/go/core/log/zap"
	"net"
	"regexp"
	"sync"
	"testing"
)

func TestDecodeSample(t *testing.T) {
	data := []byte{
		0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
		0x00, 0x01, 0xac, 0x10, 0x02, 0x83, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x7b, 0xaa, 0x2d, 0x0e, 0x50,
		0xfd, 0xcc, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0x60, 0x00, 0x0f,
		0xb8, 0xd9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x10, 0x00, 0xfb, 0x8d,
		0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x90, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x22, 0x82, 0x00, 0x00,
		0x00, 0x80, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x2a, 0x50, 0x6b, 0x4b, 0xdb, 0x74, 0x21, 0x81, 0x00,
		0x00, 0x6a, 0x86, 0xdd, 0x60, 0x01, 0x59, 0xa6, 0x22, 0xc4, 0x06, 0x40, 0x2a, 0x02, 0x06, 0xb8,
		0xbf, 0x00, 0x11, 0x06, 0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb, 0x74, 0x21, 0x2a, 0x02, 0x06, 0xb8,
		0xbf, 0x00, 0x11, 0x0a, 0xee, 0x0d, 0x9a, 0xff, 0xfe, 0x97, 0xe2, 0x03, 0x84, 0x54, 0x4a, 0x39,
		0x79, 0x15, 0x3d, 0xb8, 0x68, 0x26, 0xa6, 0x29, 0x80, 0x10, 0x4a, 0x79, 0x42, 0x95, 0x00, 0x00,
		0x01, 0x01, 0x08, 0x0a, 0xe5, 0x9a, 0xe5, 0x0a, 0xb6, 0x1e, 0x4d, 0xcf, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x23, 0x02, 0x50, 0x6b,
		0x4b, 0xdb, 0x74, 0x21, 0x00, 0x00, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x2a, 0x00, 0x00, 0x00, 0x00,
		0x86, 0xdd, 0x00, 0x00, 0x03, 0xe9, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
		0x00, 0x38, 0x00, 0x00, 0x22, 0xec, 0x00, 0x00, 0x00, 0x06, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00,
		0x11, 0x06, 0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb, 0x74, 0x21, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00,
		0x11, 0x0a, 0xee, 0x0d, 0x9a, 0xff, 0xfe, 0x97, 0xe2, 0x03, 0x00, 0x00, 0x84, 0x54, 0x00, 0x00,
		0x4a, 0x39, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xea, 0x00, 0x00,
		0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xc1, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
		0x00, 0x03, 0x00, 0x00, 0x01, 0x60, 0x00, 0x0a, 0x95, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x85, 0x00, 0x00, 0x10, 0x00, 0xa9, 0x56, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
		0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x22, 0xda, 0x00, 0x00, 0x22, 0x5a, 0x00, 0x00, 0x00, 0x80, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x2a,
		0x8a, 0x39, 0x06, 0xdb, 0x6f, 0x91, 0x81, 0x00, 0x00, 0x6a, 0x86, 0xdd, 0x60, 0x00, 0x53, 0x1e,
		0x22, 0x9c, 0x06, 0x40, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00, 0x11, 0x06, 0x88, 0x39, 0x06, 0xff,
		0xfe, 0xdb, 0x6f, 0x91, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00, 0x11, 0x04, 0x52, 0x6b, 0x4b, 0xff,
		0xfe, 0xdb, 0x7c, 0xe9, 0xa1, 0x66, 0x26, 0x26, 0xb2, 0x24, 0x4e, 0xd0, 0xd9, 0xe6, 0x34, 0x68,
		0x80, 0x10, 0x64, 0x00, 0xb0, 0x39, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0xb1, 0xa2, 0x80, 0x44,
		0x69, 0xe4, 0x78, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
		0x00, 0x18, 0x00, 0x00, 0x22, 0xda, 0x8a, 0x39, 0x06, 0xdb, 0x6f, 0x91, 0x00, 0x00, 0x9c, 0x71,
		0x3a, 0x07, 0x6d, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x86, 0xdd, 0x00, 0x00, 0x03, 0xe9, 0x00, 0x00,
		0x00, 0x10, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x22, 0xc4, 0x00, 0x00,
		0x00, 0x06, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00, 0x11, 0x06, 0x88, 0x39, 0x06, 0xff, 0xfe, 0xdb,
		0x6f, 0x91, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00, 0x11, 0x04, 0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb,
		0x7c, 0xe9, 0x00, 0x00, 0xa1, 0x66, 0x00, 0x00, 0x26, 0x26, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x03, 0xea, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0xfe, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xd2, 0x00, 0x00,
		0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0x60, 0x00, 0x0a,
		0x95, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x10, 0x00, 0xa9, 0x56,
		0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x90, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x22, 0x82, 0x00, 0x00,
		0x00, 0x80, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x2a, 0x50, 0x6b, 0x4b, 0xdb, 0x6f, 0x91, 0x81, 0x00,
		0x00, 0x6a, 0x86, 0xdd, 0x60, 0x0b, 0x16, 0x85, 0x22, 0xc4, 0x06, 0x40, 0x2a, 0x02, 0x06, 0xb8,
		0xbf, 0x00, 0x11, 0x06, 0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb, 0x6f, 0x91, 0x2a, 0x02, 0x06, 0xb8,
		0xbf, 0x00, 0x11, 0x04, 0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb, 0x75, 0x51, 0x4a, 0x39, 0xe3, 0x2a,
		0x9c, 0x61, 0xb4, 0x80, 0x50, 0xe4, 0xf6, 0x08, 0x80, 0x10, 0x46, 0xab, 0x5a, 0x69, 0x00, 0x00,
		0x01, 0x01, 0x08, 0x0a, 0x86, 0xc0, 0x88, 0x2d, 0xff, 0x09, 0x7d, 0xfa, 0xa8, 0xf8, 0x7d, 0x6b,
		0xc6, 0xf9, 0x2c, 0xc2, 0xb1, 0x8a, 0x5f, 0xa7, 0xe1, 0x78, 0x8a, 0x62, 0xb2, 0xa0, 0x71, 0xc2,
		0x17, 0x59, 0x8e, 0xfd, 0x0e, 0x9a, 0x6f, 0x68, 0x84, 0xe7, 0x19, 0x88, 0x3c, 0x85, 0xc3, 0x88,
		0xb2, 0xc4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x23, 0x02, 0x50, 0x6b,
		0x4b, 0xdb, 0x6f, 0x91, 0x00, 0x00, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x2a, 0x00, 0x00, 0x00, 0x00,
		0x86, 0xdd, 0x00, 0x00, 0x03, 0xe9, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
		0x00, 0x38, 0x00, 0x00, 0x22, 0xec, 0x00, 0x00, 0x00, 0x06, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00,
		0x11, 0x06, 0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb, 0x6f, 0x91, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00,
		0x11, 0x04, 0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb, 0x75, 0x51, 0x00, 0x00, 0x4a, 0x39, 0x00, 0x00,
		0xe3, 0x2a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xea, 0x00, 0x00,
		0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xc1, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40,
	}
	agentAddress := "172.16.2.131"
	seqNum := "175876653"
	samplingRate := "4096"
	sampleSeqs := []string{"1030361", "693607", "693608"}
	sampleSrcAddrs := []string{
		"2a02:6b8:bf00:1106:526b:4bff:fedb:7421",
		"2a02:6b8:bf00:1106:8839:6ff:fedb:6f91",
		"2a02:6b8:bf00:1106:526b:4bff:fedb:6f91",
	}
	sampleDstAddrs := []string{
		"2a02:6b8:bf00:110a:ee0d:9aff:fe97:e203",
		"2a02:6b8:bf00:1104:526b:4bff:fedb:7ce9",
		"2a02:6b8:bf00:1104:526b:4bff:fedb:7551",
	}
	sampleSrcPorts := []string{"33876", "41318", "19001"}
	sampleDstPorts := []string{"19001", "9766", "58154"}
	numSamples := 3
	j := worker.NewJob(
		worker.UDPMsg{
			Raddr: &net.UDPAddr{net.IPv4(10,140,7,1), 55722, ""},
			Body: data,
		},
		&sync.Pool{},
		0,
	)
	out := make(chan consumer.Message, numSamples)
	logger := makeLogger()
	SampleFunc(*j, out, logger)
	close(out)
	if len(out) != numSamples {
		t.Fatalf("got %v messages expected %v", len(out), numSamples)
	}
	for i := 0; i < numSamples; i++ {
		x := <-out
		if x.Type != consumer.SFlowSample {
			t.Fatalf("msg %v got message type %v expected %v", i, x.Type, consumer.SFlowSample)
		}
		//there is just 1 packet sampled in every of flow samples
		str := x.Elements[0].String()
		checkHelper(i, str, "agent", agentAddress, t)
		checkHelper(i, str, "sequence_number", seqNum, t)
		checkHelper(i, str, "sampling_rate",  samplingRate, t)
		checkHelper(i, str, "sample_seq_number", sampleSeqs[i], t)
		checkHelper(i, str, "src_ip", sampleSrcAddrs[i], t)
		checkHelper(i, str, "dst_ip", sampleDstAddrs[i], t)
		checkHelper(i, str, "src_port", sampleSrcPorts[i], t)
		checkHelper(i, str, "dst_port", sampleDstPorts[i], t)
	}
}

func TestDecodeEncap(t *testing.T){
	data := []byte{
		0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
		0x00, 0x01, 0xac, 0x10, 0x02, 0x81, 0x00, 0x00, 0x00, 0x01, 0x0d, 0x42, 0x59, 0x00, 0x0e, 0x50,
		0xe9, 0x54, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0x60, 0x00, 0x0e,
		0x66, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x10, 0x00, 0xe6, 0x6a,
		0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x90, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x23, 0x0c, 0x00, 0x00, 0x22, 0x8c, 0x00, 0x00,
		0x00, 0x80, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x4a, 0x8a, 0x39, 0x07, 0xdb, 0x6f, 0x29, 0x81, 0x00,
		0x00, 0x6a, 0x86, 0xdd, 0x60, 0x0b, 0xe2, 0x3b, 0x22, 0xce, 0x06, 0x40, 0x2a, 0x02, 0x06, 0xb8,
		0xbf, 0x00, 0x11, 0x02, 0x88, 0x39, 0x07, 0xff, 0xfe, 0xdb, 0x6f, 0x29, 0x2a, 0x02, 0x06, 0xb8,
		0xbf, 0x00, 0x11, 0x04, 0x88, 0x39, 0x07, 0xff, 0xfe, 0xdb, 0x72, 0x69, 0x08, 0x57, 0xcb, 0x42,
		0x42, 0x9d, 0x5d, 0x28, 0xe8, 0x07, 0x38, 0x60, 0x80, 0x10, 0x64, 0x00, 0x5c, 0xda, 0x00, 0x00,
		0x01, 0x01, 0x08, 0x0a, 0x24, 0x04, 0x24, 0xbb, 0x0c, 0x39, 0x34, 0x89, 0xf1, 0x7f, 0xc4, 0xff,
		0x91, 0xfe, 0x47, 0xfa, 0x1f, 0xe1, 0x7f, 0x64, 0x00, 0x90, 0x00, 0x00, 0x24, 0x00, 0x00, 0xf9,
		0x7f, 0xe4, 0xff, 0x91, 0x00, 0x40, 0xfc, 0x1f, 0xf9, 0x7f, 0x54, 0x00, 0xd0, 0xfe, 0x07, 0xe4,
		0xff, 0x91, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x23, 0x0c, 0x8a, 0x39,
		0x07, 0xdb, 0x6f, 0x29, 0x00, 0x00, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x4a, 0x00, 0x00, 0x00, 0x00,
		0x86, 0xdd, 0x00, 0x00, 0x03, 0xe9, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
		0x00, 0x38, 0x00, 0x00, 0x22, 0xf6, 0x00, 0x00, 0x00, 0x06, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00,
		0x11, 0x02, 0x88, 0x39, 0x07, 0xff, 0xfe, 0xdb, 0x6f, 0x29, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00,
		0x11, 0x04, 0x88, 0x39, 0x07, 0xff, 0xfe, 0xdb, 0x72, 0x69, 0x00, 0x00, 0x08, 0x57, 0x00, 0x00,
		0xcb, 0x42, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xea, 0x00, 0x00,
		0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xc1, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
		0x00, 0x03, 0x00, 0x00, 0x01, 0x3c, 0x00, 0x0b, 0x26, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x58, 0x00, 0x00, 0x10, 0x00, 0xb2, 0x67, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
		0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x01, 0xda, 0x00, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x00, 0x80, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x48,
		0x8a, 0x39, 0x00, 0xdb, 0x74, 0x91, 0x81, 0x00, 0x00, 0x68, 0x08, 0x00, 0x45, 0x00, 0x01, 0xc4,
		0x28, 0xfe, 0x00, 0x00, 0x40, 0x2f, 0x3a, 0x96, 0x0a, 0x00, 0x81, 0x5c, 0x0a, 0x00, 0x80, 0x1b,
		0x00, 0x00, 0x88, 0x47, 0x00, 0x30, 0x61, 0x7f, 0x45, 0x00, 0x01, 0xa8, 0x28, 0xfe, 0x40, 0x00,
		0x7f, 0x11, 0x9e, 0xe7, 0x54, 0xc9, 0xb1, 0x24, 0x53, 0xa9, 0xd8, 0xc8, 0x13, 0xc0, 0x1f, 0x40,
		0x01, 0x94, 0x93, 0xd4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x5b, 0xca, 0xf6, 0x41, 0x75, 0x40, 0x50,
		0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x0e, 0xfe, 0x00, 0x00, 0x40, 0x10,
		0xf3, 0x04, 0xc9, 0x00, 0x02, 0xf5, 0x68, 0x00, 0x03, 0x62, 0x0a, 0x7a, 0x00, 0x07, 0x69, 0x00,
		0x00, 0x03, 0xf4, 0x6f, 0x00, 0x2a, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
		0x00, 0x18, 0x00, 0x00, 0x01, 0xda, 0x8a, 0x39, 0x00, 0xdb, 0x74, 0x91, 0x00, 0x00, 0x9c, 0x71,
		0x3a, 0x07, 0x6d, 0x48, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0xe9, 0x00, 0x00,
		0x00, 0x10, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0xc4, 0x00, 0x00,
		0x00, 0x2f, 0x0a, 0x00, 0x81, 0x5c, 0x0a, 0x00, 0x80, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xea, 0x00, 0x00,
		0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0x60, 0x00, 0x0d, 0x65, 0x79, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x10, 0x00, 0xd6, 0x57, 0x90, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x02, 0xbf, 0x00, 0x00, 0x02, 0x3f, 0x00, 0x00, 0x00, 0x80, 0x9c, 0x71,
		0x3a, 0x07, 0x6d, 0x4a, 0x50, 0x6b, 0x4b, 0xdb, 0x74, 0x89, 0x81, 0x00, 0x00, 0x6a, 0x86, 0xdd,
		0x60, 0x0b, 0xae, 0x4a, 0x02, 0x81, 0x06, 0x40, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00, 0x11, 0x02,
		0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb, 0x74, 0x89, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00, 0x11, 0x04,
		0x52, 0x6b, 0x4b, 0xff, 0xfe, 0xdb, 0x75, 0x51, 0x4a, 0x39, 0xed, 0xb2, 0x21, 0xdf, 0xb8, 0x1a,
		0xe9, 0xd6, 0xad, 0x60, 0x80, 0x18, 0x4f, 0xe8, 0x00, 0xa6, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a,
		0xa4, 0xb1, 0xf1, 0xff, 0x43, 0x77, 0x8c, 0x35, 0xe9, 0x0a, 0xc3, 0xb1, 0x56, 0xbd, 0x2f, 0xa4,
		0x98, 0x0a, 0xfc, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xba, 0xaa, 0x05, 0x00, 0x00, 0x00, 0x00,
		0x41, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x08, 0x01, 0x00, 0x00,
		0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x02, 0xbf, 0x50, 0x6b, 0x4b, 0xdb, 0x74, 0x89,
		0x00, 0x00, 0x9c, 0x71, 0x3a, 0x07, 0x6d, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x86, 0xdd, 0x00, 0x00,
		0x03, 0xe9, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
		0x02, 0xa9, 0x00, 0x00, 0x00, 0x06, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00, 0x11, 0x02, 0x52, 0x6b,
		0x4b, 0xff, 0xfe, 0xdb, 0x74, 0x89, 0x2a, 0x02, 0x06, 0xb8, 0xbf, 0x00, 0x11, 0x04, 0x52, 0x6b,
		0x4b, 0xff, 0xfe, 0xdb, 0x75, 0x51, 0x00, 0x00, 0x4a, 0x39, 0x00, 0x00, 0xed, 0xb2, 0x00, 0x00,
		0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xea, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00,
		0x00, 0x02, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1,
		0x00, 0xd2, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
		0x00, 0xe0, 0x00, 0x08, 0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
		0x10, 0x00, 0x83, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00,
		0x00, 0x02, 0x00, 0x00, 0x00, 0x64, 0x8a, 0x39, 0x00, 0xdb, 0x6f, 0xa1, 0x8a, 0x39, 0x01, 0xdb,
		0x70, 0x09, 0x81, 0x00, 0x00, 0x68, 0x08, 0x00, 0x45, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
		0xfd, 0x2f, 0xa6, 0x65, 0x0a, 0x00, 0x81, 0x4b, 0x0a, 0x00, 0x81, 0xce, 0x00, 0x00, 0x88, 0x47,
		0x00, 0x01, 0xc1, 0x40, 0x45, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x06, 0xbd, 0x08,
		0xc6, 0x12, 0xeb, 0x73, 0x0a, 0x1f, 0x04, 0x17, 0xb5, 0x6d, 0x00, 0x50, 0x3d, 0x15, 0x2e, 0xa0,
		0x18, 0x14, 0xdc, 0x6b, 0x80, 0x10, 0x00, 0xd1, 0xfc, 0xcb, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a,
		0x43, 0xed, 0x55, 0x96, 0x73, 0xa2, 0x96, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
		0x00, 0x18, 0x00, 0x00, 0x00, 0x66, 0x8a, 0x39, 0x01, 0xdb, 0x70, 0x09, 0x00, 0x00, 0x8a, 0x39,
		0x00, 0xdb, 0x6f, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0xe9, 0x00, 0x00,
		0x00, 0x10, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
	}
	agentAddress := "172.16.2.129"
	seqNum := "222451968"
	samplingRate := "4096"
	sampleSeqs := []string{"943788", "730740", "877945", "536833"}
	sampleSrcAddrs := []string{
		"2a02:6b8:bf00:1102:8839:7ff:fedb:6f29",
		"10.0.129.92",
		"2a02:6b8:bf00:1102:526b:4bff:fedb:7489",
		"10.0.129.75",
	}
	sampleDstAddrs := []string{
		"2a02:6b8:bf00:1104:8839:7ff:fedb:7269",
		"10.0.128.27",
		"2a02:6b8:bf00:1104:526b:4bff:fedb:7551",
		"10.0.129.206",
	}
	encapSrcAddrs := []string{
		"84.201.177.36",
		"198.18.235.115",
	}
	encapDstAddrs := []string{
		"83.169.216.200",
		"10.31.4.23",
	}
	numSamples := 4
	numEncaped := 2
	j := worker.NewJob(
		worker.UDPMsg{
			Raddr: &net.UDPAddr{net.IPv4(10,140,7,1), 55722, ""},
			Body: data,
		},
		&sync.Pool{},
		0,
	)
	out := make(chan consumer.Message, numSamples + numEncaped)
	logger := makeLogger()
	EncapFunc(*j, out, logger)
	close(out)
	samples := []consumer.Message{}
	encaped := []consumer.Message{}
	for x := range out {
		if x.Type == consumer.SFlowSample {
			samples = append(samples, x)
		} else if x.Type == consumer.SFlowEncap {
			encaped = append(encaped, x)
		} else {
			t.Fatalf("unexpected message type %v", x.Type)
		}
	}
	if len(samples) != numSamples {
		t.Fatalf("got %v sample messages expected %v", len(samples), numSamples)
	}
	if len(encaped) != numEncaped {
		t.Fatalf("got %v encap messages expected %v", len(encaped), numEncaped)
	}
	for i := 0; i < numSamples; i++ {
		//there is just 1 packet sampled in every of flow samples
		str := samples[i].Elements[0].String()
		checkHelper(i, str, "agent", agentAddress, t)
		checkHelper(i, str, "sequence_number", seqNum, t)
		checkHelper(i, str, "sampling_rate",  samplingRate, t)
		checkHelper(i, str, "sample_seq_number", sampleSeqs[i], t)
		checkHelper(i, str, "src_ip", sampleSrcAddrs[i], t)
		checkHelper(i, str, "dst_ip", sampleDstAddrs[i], t)
	}
	for i := 0; i < numEncaped; i++ {
		//there is just 1 packet sampled in every of flow samples
		str := encaped[i].Elements[0].String()
		checkHelper(i, str, "agent", agentAddress, t)
		checkHelper(i, str, "src_ip", encapSrcAddrs[i], t)
		checkHelper(i, str, "dst_ip", encapDstAddrs[i], t)
	}	
}

func checkHelper(i int, str string, key string, expected string, t *testing.T) {
	value := getValue(str, key)
	if value != expected {
		t.Errorf("msg %v got %v %v expected %v", i, key, value, expected)
	}
}

func getValue(str string, key string) string {
	re := regexp.MustCompile(key + `=(.*?)[\t\n]`)
	result := re.FindStringSubmatch(str)
	if len(result) > 1 {
		return result[1]
	} else {
		return "none"
	}
}

func makeLogger() log.Logger {
	level, err := log.ParseLevel("error")
	if err != nil {
		panic(err)
	}
	logCfg := zap.ConsoleConfig(level)
	logger, err := zap.New(logCfg)
	if err != nil {
		panic(err)
	}
	return logger
}