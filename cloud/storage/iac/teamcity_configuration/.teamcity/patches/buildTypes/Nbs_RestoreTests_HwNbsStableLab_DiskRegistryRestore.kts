package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.BuildType
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.sshAgent
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.script
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.schedule
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, create a buildType with id = 'Nbs_RestoreTests_HwNbsStableLab_DiskRegistryRestore'
in the project with id = 'Nbs_RestoreTests_HwNbsStableLab', and delete the patch script.
*/
create(RelativeId("Nbs_RestoreTests_HwNbsStableLab"), BuildType({
    id("Nbs_RestoreTests_HwNbsStableLab_DiskRegistryRestore")
    name = "Disk Registry restore"

    artifactRules = "backup.tar"

    params {
        param("docker.image", "registry.yandex.net/yandex-cloud/yc-nbs-disk-registry-restore:latest")
        param("env.HOST", "myt1-ct5-15.cloud.yandex.net")
    }

    steps {
        script {
            scriptContent = """
                #!/usr/bin/env bash
                set -ex
                
                #https://nda.ya.ru/t/cUtLa2ee5GgweU
                blockstore-dr-restore.sh ${'$'}HOST
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerPull = true
            dockerImage = "%docker.image%"
            dockerRunParameters = """
                -u root
                --rm
                --network host
                --privileged
            """.trimIndent()
        }
    }

    triggers {
        schedule {
            schedulingPolicy = cron {
            }
            branchFilter = ""
            triggerBuild = always()
            withPendingChangesOnly = false
        }
    }

    features {
        sshAgent {
            teamcitySshKey = "robot-yc-nbs"
        }
    }

    requirements {
        doesNotMatch("teamcity.agent.name", "cm-build-agent-.*")
        doesNotContain("teamcity.agent.name", "kiwi")
    }
}))

