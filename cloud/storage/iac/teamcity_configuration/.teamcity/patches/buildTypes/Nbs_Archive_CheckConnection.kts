package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.BuildType
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.freeDiskSpace
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.perfmon
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.sshAgent
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.swabra
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.script
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.schedule
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, create a buildType with id = 'Nbs_Archive_CheckConnection'
in the project with id = 'Nbs_Archive', and delete the patch script.
*/
create(RelativeId("Nbs_Archive"), BuildType({
    id("Nbs_Archive_CheckConnection")
    name = "check connection"

    allowExternalStatus = true
    artifactRules = """
        ssh-*.log
        tcpdump-*.txt
    """.trimIndent()
    maxRunningBuilds = 1
    publishArtifacts = PublishMode.SUCCESSFUL

    params {
        param("env.CLUSTER", "")
        param("env.IP", "")
    }

    steps {
        script {
            scriptContent = """
                #!/usr/bin/env bash
                
                set -ex
                sudo apt-get install nmap
                while :
                do
                	nmap -6 2a02:6b8:c02:80e:0:417a:0:101 -PN -p ssh | egrep 'open|closed|filtered'
                	sleep 30
                done
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerPull = true
            dockerImage = "%yc-nbs-ci-tools.docker.image%"
            dockerRunParameters = """-u root --rm --add-host="local-lb.cloud-lab.yandex.net:2a02:6b8:bf00:1300:9a03:9bff:feaa:b659" --network host --volume ${'$'}SSH_AUTH_SOCK:/ssh-agent --env SSH_AUTH_SOCK=/ssh-agent --privileged"""
        }
    }

    triggers {
        schedule {
            enabled = false
            schedulingPolicy = cron {
                hours = "/3"
            }
            triggerBuild = always()
            withPendingChangesOnly = false
        }
    }

    features {
        swabra {
        }
        perfmon {
        }
        freeDiskSpace {
            requiredSpace = "1gb"
            failBuild = true
        }
        sshAgent {
            teamcitySshKey = "id_rsa_overlay"
        }
        sshAgent {
            teamcitySshKey = "robot-yc-nbs"
        }
    }

    requirements {
        doesNotContain("teamcity.agent.name", "kiwi")
        doesNotMatch("teamcity.agent.name", "cm-build-agent-.*")
        contains("teamcity.agent.name", "build-agent-myt8.bootstrap.cloud-preprod.yandex.net_2")
    }
}))

