syntax = "proto3";

package yandex.cloud.events.mdb.mysql;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "yandex/cloud/events/common.proto";
import "yandex/cloud/events/options.proto";
import "yandex/cloud/events/mdb/mysql/user.proto";
import "yandex/cloud/mdb/mysql/v1/database.proto";
import "yandex/cloud/mdb/mysql/v1/cluster.proto";
import "yandex/cloud/mdb/mysql/v1/cluster_service.proto";
import "yandex/cloud/mdb/mysql/v1/maintenance.proto";
import "yandex/cloud/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/events/mdb/mysql;mysql";
option java_package = "yandex.cloud.api.events.mdb.mysql";

message ClusterCommonEventDetails {
  // ID of the MySQL cluster.
  // This ID is assigned by Managed Service for MySQL at creation time.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
  // Name of the MySQL cluster.
  string cluster_name = 2;
  // Deployment environment of the MySQL cluster.
  string environment = 3;
  // Description of monitoring systems relevant to the MySQL cluster.
  repeated yandex.cloud.mdb.mysql.v1.Monitoring monitoring = 4;
  // Configuration of the MySQL cluster.
  yandex.cloud.mdb.mysql.v1.ClusterConfig config = 5;
  // ID of the network that the cluster belongs to.
  string network_id = 6 [(length) = "<=50"];
  // Aggregated cluster health.
  yandex.cloud.mdb.mysql.v1.Cluster.Health health = 7;
  // Current state of the cluster.
  yandex.cloud.mdb.mysql.v1.Cluster.Status status = 8;
  // Maintenance window for the cluster.
  yandex.cloud.mdb.mysql.v1.MaintenanceWindow maintenance_window = 9;
  // Planned maintenance operation to be started for the cluster within the nearest [maintenance_window].
  yandex.cloud.mdb.mysql.v1.MaintenanceOperation planned_operation = 10;
  // User security groups
  repeated string security_group_ids = 11;
  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 12;
  // Host groups hosting VMs of the cluster.
  repeated string host_group_ids = 13;
}

message ClusterWithHostsEventDetails {
  // ID of the MySQL cluster.
  // This ID is assigned by Managed Service for MySQL at creation time.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
  // Name of the MySQL cluster.
  string cluster_name = 2;
  // Deployment environment of the MySQL cluster.
  string environment = 3;
  // Description of monitoring systems relevant to the MySQL cluster.
  repeated yandex.cloud.mdb.mysql.v1.Monitoring monitoring = 4;
  // Configuration of the MySQL cluster.
  yandex.cloud.mdb.mysql.v1.ClusterConfig config = 5;
  // ID of the network that the cluster belongs to.
  string network_id = 6 [(length) = "<=50"];
  // Aggregated cluster health.
  yandex.cloud.mdb.mysql.v1.Cluster.Health health = 7;
  // Current state of the cluster.
  yandex.cloud.mdb.mysql.v1.Cluster.Status status = 8;
  // Maintenance window for the cluster.
  yandex.cloud.mdb.mysql.v1.MaintenanceWindow maintenance_window = 9;
  // Planned maintenance operation to be started for the cluster within the nearest [maintenance_window].
  yandex.cloud.mdb.mysql.v1.MaintenanceOperation planned_operation = 10;
  // User security groups
  repeated string security_group_ids = 11;
  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 12;

  repeated string host_names = 13 [(required) = true];
  // Host groups hosting VMs of the cluster.
  repeated string host_group_ids = 14;
}

message CreateCluster {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterCommonEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message RequestParameters {
    // ID of the folder to create the MySQL cluster in.
    string folder_id = 1 [(required) = true];
    // Name of the MySQL cluster.
    string name = 2 [(required) = true];
    // Custom labels for the MySQL cluster
    map<string, string> labels = 3 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
    // Deployment environment of the MySQL cluster.
    yandex.cloud.mdb.mysql.v1.Cluster.Environment environment = 4;
    // Configuration and resources for hosts that should be created for the MySQL cluster.
    yandex.cloud.mdb.mysql.v1.ConfigSpec config_spec = 6;

    // Descriptions of databases to be created in the MySQL cluster.
    repeated yandex.cloud.mdb.mysql.v1.DatabaseSpec database_specs = 7;

    // Descriptions of database users to be created in the MySQL cluster.
    repeated UserSpec user_specs = 8;

    // Individual configurations for hosts that should be created for the MySQL cluster.
    repeated yandex.cloud.mdb.mysql.v1.HostSpec host_specs = 9;

    // ID of the network to create the cluster in.
    string network_id = 10 [(length) = "<=50"];

    // User security groups
    repeated string security_group_ids = 11;

    // Deletion Protection inhibits deletion of the cluster
    bool deletion_protection = 12;

    // Host groups hosting VMs of the cluster.
    repeated string host_group_ids = 13;
  }
}

message UpdateCluster {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterCommonEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;
  
  message RequestParameters {
    // ID of the MySQL cluster.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];

    // Field mask that specifies which fields of the MySQL cluster should be updated.
    google.protobuf.FieldMask update_mask = 2;

    // Description of the cluster. [can contain sensitive data]
    reserved 3;

    // Custom labels for the MySQL cluster
    map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

    // New configuration and resources for hosts in the cluster.
    yandex.cloud.mdb.mysql.v1.ConfigSpec config_spec = 5;

    // New name for the cluster.
    string name = 6 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

    // New maintenance window settings for the cluster.
    yandex.cloud.mdb.mysql.v1.MaintenanceWindow maintenance_window = 7;

    // User security groups
    repeated string security_group_ids = 8;

    // Deletion Protection inhibits deletion of the cluster
    bool deletion_protection = 9;

    // Host groups hosting VMs of the cluster.
    //repeated string host_group_ids = 10;
  }
}

message DeleteCluster {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterCommonEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;


  message RequestParameters {
    // ID of the MySQL cluster to delete.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];
  }
}

message StartCluster {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterCommonEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message RequestParameters {
    // ID of the MySQL cluster to start.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];
  }
}

message StopCluster {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterCommonEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message RequestParameters {
    // ID of the MySQL cluster to stop.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];
  }
}

message MoveCluster {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  EventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message EventDetails {
    // ID of the MySQL cluster.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];
    // Name of the MySQL cluster.
    string cluster_name = 2;
    // Deployment environment of the MySQL cluster.
    string environment = 3;
    // Description of monitoring systems relevant to the MySQL cluster.
    repeated yandex.cloud.mdb.mysql.v1.Monitoring monitoring = 4;
    // Configuration of the MySQL cluster.
    yandex.cloud.mdb.mysql.v1.ClusterConfig config = 5;
    // ID of the network that the cluster belongs to.
    string network_id = 6 [(length) = "<=50"];
    // Aggregated cluster health.
    yandex.cloud.mdb.mysql.v1.Cluster.Health health = 7;
    // Current state of the cluster.
    yandex.cloud.mdb.mysql.v1.Cluster.Status status = 8;
    // Maintenance window for the cluster.
    yandex.cloud.mdb.mysql.v1.MaintenanceWindow maintenance_window = 9;
    // Planned maintenance operation to be started for the cluster within the nearest [maintenance_window].
    yandex.cloud.mdb.mysql.v1.MaintenanceOperation planned_operation = 10;
    // User security groups
    repeated string security_group_ids = 11;
    // Deletion Protection inhibits deletion of the cluster
    bool deletion_protection = 12;
    // ID of the source folder.
    string source_folder_id = 13 [(required) = true, (length) = "<=50"];
    // ID of the destination folder.
    string destination_folder_id = 14 [(required) = true, (length) = "<=50"];
  }

  message RequestParameters {
    // ID of the MySQL cluster to move.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];
    // ID of the destination folder.
    string destination_folder_id = 2 [(required) = true, (length) = "<=50"];
  }
}

message BackupCluster {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterCommonEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  Response response = 9;

  message RequestParameters {
    // ID of the MySQL cluster to backup.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];
  }
  
  message Response {
    string operation_id = 1 [(required) = true];
    string backup_id = 2 [(required) = true];
  }
}

message RestoreCluster {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  EventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message EventDetails {
    string cluster_id = 1 [(required) = true];
    // ID of the backup to restore from.
    string backup_id = 2 [(required) = true];
  }

  message RequestParameters {
    // ID of the backup to create a cluster from.
    string backup_id = 1 [(required) = true];

    // Timestamp of the moment to which the MySQL cluster should be restored.
    google.protobuf.Timestamp time = 2 [(required) = true];

    // Name of the new MySQL cluster. The name must be unique within the folder.
    string name = 4 [(required) = true, (pattern) = "[a-zA-Z0-9_-]*"];

    // Description of the new MySQL cluster. [can contain sensitive data]
    reserved 5;

    // Custom labels for the MySQL cluster
    map<string, string> labels = 6 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

    // Deployment environment of the new MySQL cluster.
    yandex.cloud.mdb.mysql.v1.Cluster.Environment environment = 7;

    // Configuration for the MySQL cluster to be created.
    yandex.cloud.mdb.mysql.v1.ConfigSpec config_spec = 8;

    // Configurations for MySQL hosts that should be added
    // to the cluster that is being created from the backup.
    repeated yandex.cloud.mdb.mysql.v1.HostSpec host_specs = 9;

    // ID of the network to create the MySQL cluster in.
    string network_id = 10 [(length) = "<=50"];

    // ID of the folder to create the MySQL cluster in.
    string folder_id = 11 [(length) = "<=50"];

    // User security groups
    repeated string security_group_ids = 12;

    // Deletion Protection inhibits deletion of the cluster
    bool deletion_protection = 13;

    // Host groups hosting VMs of the cluster.
    repeated string host_group_ids = 14;
  }
}

message StartClusterFailover {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterCommonEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message RequestParameters {
    // ID of the MySQL cluster to delete.
    // To get the MySQL cluster ID, use a [ClusterService.List] request.
    string cluster_id = 1 [(required) = true];
    // New master host. Switch to the most up-to-date replica if not provided.
    string host_name = 2 [(length) = "<=253"];
  }
}

message RescheduleMaintenance {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterCommonEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message RequestParameters {
    // ID of the MySQL cluster for which maintenance will be rescheduled.
    string cluster_id = 1 [(required) = true];
    // The type of reschedule request.
    yandex.cloud.mdb.mysql.v1.RescheduleMaintenanceRequest.RescheduleType reschedule_type = 2[(required) = true];
    // The time until which this maintenance operation should be delayed. The value should be ahead of the first time when the maintenance operation has been scheduled for no more than two weeks. The value can also point to the past moment of time if [reschedule_type.IMMEDIATE] reschedule type is chosen.
    google.protobuf.Timestamp delayed_until = 3;
  }
}

message AddClusterHosts {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterWithHostsEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message RequestParameters {
    // ID of the MySQL cluster to add hosts to.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];

    // Configurations for MySQL hosts that should be added to the cluster.
    repeated yandex.cloud.mdb.mysql.v1.HostSpec host_specs = 2 [(size) = ">0"];
  }
}

message DeleteClusterHosts {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterWithHostsEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message RequestParameters {
    // ID of the MySQL cluster to remove hosts from.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];

    // Names of hosts to delete.
    repeated string host_names = 2 [(size) = ">0", (length) = "<=253"];
  }
}

message UpdateClusterHosts {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  events.EventStatus event_status = 5 [(required) = true];
  ClusterWithHostsEventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  message RequestParameters {
    // ID of the MySQL cluster to update hosts in.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];

    // New configurations to apply to hosts.
    repeated yandex.cloud.mdb.mysql.v1.UpdateHostSpec update_host_specs = 2 [(size) = ">0"];
  }
}
