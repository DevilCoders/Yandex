syntax = "proto3";

package yandex.cloud.events.mdb.postgresql;

import "google/protobuf/field_mask.proto";
import "google/rpc/status.proto";

import "yandex/cloud/events/common.proto";
import "yandex/cloud/events/options.proto";
import "yandex/cloud/mdb/postgresql/v1/database.proto";
import "yandex/cloud/validation.proto";


option go_package = "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/events/mdb/postgresql;postgresql";
option java_package = "yandex.cloud.api.events.mdb.postgresql";

message CreateDatabase {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  EventStatus event_status = 5 [(required) = true];
  EventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  enum EventStatus {
    EVENT_STATUS_UNSPECIFIED = 0;
    STARTED = 1;
    DONE = 2;
    ERROR = 3;
  }

  message EventDetails {
    string cluster_id = 1 [(required) = true];
    string database_name = 2 [(required) = true];
  }
  
  message RequestParameters {
    // ID of the PostgreSQL cluster to create a database in.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];

    // Configuration of the database to create.
    yandex.cloud.mdb.postgresql.v1.DatabaseSpec database_spec = 2 [(required) = true];
  }
}

message UpdateDatabase {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  EventStatus event_status = 5 [(required) = true];
  EventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  enum EventStatus {
    EVENT_STATUS_UNSPECIFIED = 0;
    STARTED = 1;
    DONE = 2;
    ERROR = 3;
  }

  message EventDetails {
    string cluster_id = 1 [(required) = true];
    string database_name = 2 [(required) = true];
  }
  
  message RequestParameters {
    // ID of the PostgreSQL cluster to update a database in.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];

    // Name of the database to update.
    string database_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

    // Field mask that specifies which fields of the Database resource should be updated.
    google.protobuf.FieldMask update_mask = 3;

    // PostgreSQL extensions that should be enabled for the database.
    repeated yandex.cloud.mdb.postgresql.v1.Extension extensions = 4;
  }
}

message DeleteDatabase {
  option (include) = true;

  Authentication authentication = 1 [(required) = true];
  Authorization authorization = 2 [(required) = true];

  EventMetadata event_metadata = 3 [(required) = true];
  RequestMetadata request_metadata = 4 [(required) = true];

  EventStatus event_status = 5 [(required) = true];
  EventDetails details = 6 [(required) = true];

  google.rpc.Status error = 7;
  RequestParameters request_parameters = 8;
  events.Response response = 9;

  enum EventStatus {
    EVENT_STATUS_UNSPECIFIED = 0;
    STARTED = 1;
    DONE = 2;
    ERROR = 3;
  }

  message EventDetails {
    string cluster_id = 1 [(required) = true];
    string database_name = 2 [(required) = true];
  }
  
  message RequestParameters {
    // ID of the PostgreSQL cluster to delete a database in.
    string cluster_id = 1 [(required) = true, (length) = "<=50"];

    // Name of the database to delete.
    string database_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
  }
}
