syntax = "proto3";

package yandex.cloud.audit.iam;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "yandex/cloud/audit/common.proto";
import "yandex/cloud/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/audit/iam;iam";
option java_package = "yandex.cloud.api.audit.iam";
option java_outer_classname = "SecretScanningEvents";

message DetectLeakedCredential {
  string event_id = 1 [(required) = true];
  string event_source = 2 [(required) = true];
  string event_type = 3 [(required) = true];
  google.protobuf.Timestamp event_time = 4 [(required) = true];
  Authentication authentication = 5 [(required) = true];
  Authorization authorization = 6 [(required) = true];
  ResourceMetadata resource_metadata = 7 [(required) = true];
  RequestMetadata request_metadata = 8 [(required) = true];
  EventStatus event_status = 9 [(required) = true];
  google.rpc.Status error = 10;
  EventDetails details = 11 [(required) = true];
  google.protobuf.Struct request_parameters = 12;
  google.protobuf.Struct response = 13;

  enum EventStatus {
    EVENT_STATUS_UNSPECIFIED = 0;
    DONE = 3;
  }

  message EventDetails {
    string url = 1 [(required) = true];

    oneof credential {
      option (exactly_one) = true;

      IamToken yandex_cloud_iam_token = 2;
      IamCookie yandex_cloud_iam_cookie = 3;
      IamApiKey yandex_cloud_iam_api_key = 4;
      PassportOauthToken yandex_cloud_passport_oauth_token = 5;
      IamAccessKey yandex_cloud_iam_access_key = 6;
      IamKey yandex_cloud_iam_key = 7;
    }

    Subject subject = 10 [(required) = true];
  }

  message IamToken {
    string iam_token_part = 1 [(required) = true];
    string iam_token_hash = 2 [(required) = true];

    oneof subject {
      option (exactly_one) = true;

      UserAccount user_account = 3;
      ServiceAccount service_account = 4;
    }
  }

  message IamCookie {
    string iam_cookie_part = 1 [(required) = true];
    string iam_cookie_hash = 2 [(required) = true];

    oneof subject {
      option (exactly_one) = true;

      UserAccount user_account = 3;
    }
  }

  message IamApiKey {
    string iam_api_key_part = 1 [(required) = true];
    string key_id = 2 [(required) = true];

    oneof subject {
      option (exactly_one) = true;

      ServiceAccount service_account = 3;
    }
  }

  message PassportOauthToken {
    string passport_oauth_token_part = 1 [(required) = true];

    oneof subject {
      option (exactly_one) = true;

      UserAccount user_account = 2;
    }
  }

  message IamAccessKey {
    string key_id = 1 [(required) = true];

    oneof subject {
      option (exactly_one) = true;

      ServiceAccount service_account = 2;
    }
  }

  message IamKey {
    string key_id = 1 [(required) = true];

    oneof subject {
      option (exactly_one) = true;

      ServiceAccount service_account = 2;
    }
  }


  message UserAccount {
    string user_account_id = 1 [(required) = true];
    string federation_id = 2;
  }

  message ServiceAccount {
    string service_account_id = 1 [(required) = true];
  }

}
