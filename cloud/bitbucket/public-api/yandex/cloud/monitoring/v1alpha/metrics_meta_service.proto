syntax = "proto3";

package yandex.cloud.monitoring.v1alpha;

import "google/api/annotations.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/monitoring/v1alpha/metric.proto";
import "yandex/cloud/api/tools/options.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/monitoring/v1alpha;monitoringv1alpha";
option java_package = "yandex.cloud.api.monitoring.v1alpha";

// A set of methods for managing metric metadata.
service MetricsMetaService {
  // Retrieves the list of metrics.
  rpc ListMetrics (ListMetricsRequest) returns (ListMetricsResponse) {
    option (google.api.http) = { get: "/monitoring/v1/metrics" };
    option (yandex.cloud.api.tools.method).lint_skip.http_path = true;
  }

//  rpc ListMetricsNames (ListMetricsNamesRequest) returns (ListMetricsNamesResponse) {
//    option (google.api.http) = { get: "/monitoring/v1alpha/metrics/names" };
//  }
//  rpc ListLabelKeys (ListLabelKeysRequest) returns (ListLabelKeysResponse) {
//    option (google.api.http) = { get: "/monitoring/v1alpha/metrics/label_keys" };
//  }
//  rpc ListLabelKeysValues (ListLabelKeysValuesRequest) returns (ListLabelKeysValuesResponse) {
//    option (google.api.http) = { get: "/monitoring/v1alpha/metrics/label_keys/values" };
//  }
//  rpc ListLabelValues (ListLabelValuesRequest) returns (ListLabelValuesResponse) {
//    option (google.api.http) = { get: "/monitoring/v1alpha/metrics/label_values" };
//  }
}

message ListMetricsRequest {
    // ID of the cloud that the metric belongs to.
    string cloud_id = 1 [(required) = true, (length) = "<=50"];

    // ID of the folder that the metric belongs to.
    string folder_id = 2 [(required) = true, (length) = "<=50"];

    // metric selectors.
    // string selectors = 3;

    // Number of page to return.
    int64 page = 4;

    // Number of metrics per page.
    int64 page_size = 5;
}


message PageOptions {
    // Number of pages in the response.
    int64 pages_count = 1;

    // Total number of metrics in the response.
    int64 total_count = 2;

    // Number of metrics per page.
    int64 page_size = 3;

    // Number of the current page.
    int64 current = 4;
}

message ListMetricsResponse {
    // List of metrics.
    repeated MetricMeta result = 1;

    // Pagination parameters.
    PageOptions page = 2;
}

message ListMetricsNamesRequest {
    // ID of the cloud that the metric belongs to.
    string cloud_id = 1;

    // ID of the folder that the metric belongs to.
    string folder_id = 2;

    // Metric selectors.
    //string selectors = 3;

    // Substring filter text.
    string text = 4;

    // Maximum number of items in the response.
    int64 limit = 5;
}

message ListMetricsNamesResponse {
    // List of metric names.
    repeated string names = 1;

    // Indicates that the response is not full.
    bool truncated = 2;
}

message ListLabelKeysRequest {
    // ID of the cloud that the metric belongs to.
    string cloud_id = 1;

    // ID of the folder that the metric belongs to.
    string folder_id = 2;

    // Metric selectors.
    // string selectors = 3;
}

message ListLabelKeysResponse {
    // found label keys
    repeated string keys = 1;
}

message ListLabelKeysValuesRequest {
    // ID of the cloud that the metric belongs to.
    string cloud_id = 1;

    // ID of the folder that the metric belongs to.
    string folder_id = 2;

    // Label key.
    string label_key = 3;

    // Metric selectors.
    string selectors = 4;

    // Substring filter text.
    string text = 5;

    // Maximum number of items in the response.
    int64 limit = 6;
}

message ListLabelKeysValuesResponse {
    // values of given label key
    repeated string values = 1;
    // flag determining that there are no such key in metrics found with given selectors
    bool absent = 2;
    // flag determining that there are more names than given limit allow to return
    bool truncated = 3;
}

message ListLabelValuesRequest {
    // ID of the cloud that the metric belongs to.
    string cloud_id = 1;

    // ID of the folder that the metric belongs to.
    string folder_id = 2;

    // Metric selectors.
    // string selectors = 3;

    // keys which values to lookup
    repeated string keys = 4;

    // Substring filter text.
    string text = 5;

    // Maximum number of items in the response.
    int64 limit = 6;
}

message ListLabelValuesResponse {
    message LabelValues {
        string key = 1;
        repeated string values = 2;
        // flag determining that there are no such key in metrics found with given selectors
        bool absent = 3;
        // flag determining that there are more names than given limit allow to return
        bool truncated = 4;
    }
    int64 metrics_count = 1;
    repeated LabelValues labels = 2;
}
