syntax = "proto3";

package yandex.cloud.monitoring.v3;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/monitoring/v3/channel.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/monitoring/v3;monitoring";
option java_package = "yandex.cloud.api.monitoring.v3";

// A set of methods for managing Channel resources.
service ChannelService {
    // Returns the specified Channel resource.
    //
    // To get the list of available Channel resources, make a [List] request.
    rpc Get (GetChannelRequest) returns (Channel) {
        option (google.api.http) = { get: "/monitoring/v3/channels/{channel_id}" };
    }

    // Retrieves the list of Channel resources.
    rpc List (ListChannelsRequest) returns (ListChannelsResponse) {
        option (google.api.http) = { get: "/monitoring/v3/channels" };
    }

    // Creates a channel.
    rpc Create (CreateChannelRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/monitoring/v3/channels" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "CreateChannelMetadata"
            response: "Channel"
        };
    }

    // Updates the specified channel.
    rpc Update (UpdateChannelRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/monitoring/v3/channels/{channel_id}" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "UpdateChannelMetadata"
            response: "Channel"
        };
    }

    // Deletes the specified channel.
    rpc Delete (DeleteChannelRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/monitoring/v3/channels/{channel_id}" };
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteChannelMetadata"
            response: "google.protobuf.Empty"
        };
    }

    // Lists operations for the specified channel.
    rpc ListOperations (ListChannelOperationsRequest) returns (ListChannelOperationsResponse) {
        option (google.api.http) = { get: "/monitoring/v3/channles/{channel_id}/operations" };
    }
}

message GetChannelRequest {
    // ID of the Channel resource to return.
    string channel_id = 1 [(required) = true, (length) = "<=50"];
}

message ListChannelsRequest {
    // ID of the folder to list channels in.
    string folder_id = 1 [(required) = true, (length) = "<=50"];

    // The maximum number of results per page to return. If the number of available
    // results is larger than [page_size],
    // the service returns a [ListChannelsResponse.next_page_token]
    // that can be used to get the next page of results in subsequent list requests.
    int64 page_size = 2 [(value) = "<=1000"];

    // Page token. To get the next page of results, set [page_token] to the
    // [ListChannelsResponse.next_page_token] returned by a previous list request.
    string page_token = 3 [(length) = "<=100"];

    // A filter expression that filters resources listed in the response.
    // Currently you can use filtering only on the [Channel.id] or [Channel.name] field.
    string filter = 4 [(length) = "<=1000"];
}

message ListChannelsResponse {
    // List of Channel resources.
    repeated Channel channels = 1;

    // This token allows you to get the next page of results for list requests. If the number of results
    // is larger than [ListChannelsRequest.page_size], use
    // the [next_page_token] as the value
    // for the [ListChannelsRequest.page_token] query parameter
    // in the next list request. Each subsequent list request will have its own
    // [next_page_token] to continue paging through the results.
    string next_page_token = 2;
}

message CreateChannelRequest {
    // ID of the folder to create channel in.
    string folder_id = 1 [(required) = true, (length) = "<=50"];

    // Name of the channel.
    string name = 2 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

    // Description of the channel.
    string description = 3 [(length) = "<=256"];

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

    oneof type {
        // E-Mail channel.
        CloudEmailChannel cloud_email = 5;

        // SMS channel.
        CloudSmsChannel cloud_sms = 6;

        // Mobile application push channel.
        CloudMobilePushChannel cloud_mobile_push = 7;
    }
}

message CreateChannelMetadata {
    // ID of the channel.
    string channel_id = 1;
}

message UpdateChannelRequest {
    // ID of the Channel resource to update.
    string channel_id = 1 [(required) = true, (length) = "<=50"];

    // Field mask that specifies which fields of the Channel resource are going to be updated.
    google.protobuf.FieldMask update_mask = 2;

    // Name of the channel.
    string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

    // Description of the channel.
    string description = 4 [(length) = "<=256"];

    // Resource labels as `key:value` pairs.
    //
    // Existing set of `labels` is completely replaced by the provided set.
    map<string, string> labels = 5 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

    oneof type {
        // E-Mail channel.
        CloudEmailChannel cloud_email = 6;

        // SMS channel.
        CloudSmsChannel cloud_sms = 7;

        // Mobile application push channel.
        CloudMobilePushChannel cloud_mobile_push = 8;
    }
}

message UpdateChannelMetadata {
    // ID of the channel that is being updated.
    string channel_id = 1;
}

message DeleteChannelRequest {
    // ID of the channel to delete.
    string channel_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteChannelMetadata {
    // ID of the channel that is being deleted.
    string channel_id = 1;
}

message ListChannelOperationsRequest {
    // ID of the channel to list operations for.
    string channel_id = 1 [(required) = true, (length) = "<=50"];

    // The maximum number of results per page to return. If the number of available
    // results is larger than [page_size], the service returns a [ListChannelOperationsResponse.next_page_token]
    // that can be used to get the next page of results in subsequent list requests.
    int64 page_size = 2 [(value) = "<=1000"];

    // Page token. To get the next page of results, set [page_token] to the
    // [ListChannelOperationsResponse.next_page_token] returned by a previous list request.
    string page_token = 3 [(length) = "<=100"];
}

message ListChannelOperationsResponse {
    // List of operations for the specified channel.
    repeated operation.Operation operations = 1;

    // This token allows you to get the next page of results for list requests. If the number of results
    // is larger than [ListChannelOperationsRequest.page_size], use the [next_page_token] as the value
    // for the [ListChannelOperationsRequest.page_token] query parameter in the next list request.
    // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    string next_page_token = 2;
}
