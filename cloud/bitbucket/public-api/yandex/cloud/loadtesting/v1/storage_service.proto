syntax = "proto3";

package yandex.cloud.loadtesting.v1;

import "google/api/annotations.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/loadtesting/v1/storage.proto";


option go_package = "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/loadtesting/v1;loadtesting";
option java_package = "yandex.cloud.api.loadtesting.v1";


service StorageService {
  // Creates a storage for the specified folder.
  rpc Create (CreateStorageRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/loadtesting/v1/storages" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateStorageMetadata"
      response: "Storage"
    };
  };

  // Deletes the specified storage
  rpc Delete (DeleteStorageRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/loadtesting/v1/storages/{storage_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteStorageMetadata"
      response: "google.protobuf.Empty"
    };
  };

  // Returns the specified storage.
  rpc Get (GetStorageRequest) returns (Storage) {
    option (google.api.http) = { get: "/loadtesting/v1/storages/{storage_id}" };
  };

  // Retrieves the list of storages for the specified folder.
  rpc List (ListStorageRequest) returns (ListStorageResponse) {
    option (google.api.http) = { get: "/loadtesting/v1/storages" };
  };

  // Uploads the object to the specified storage.
  rpc UploadObject (UploadStorageObjectRequest) returns (StorageObject) {
    option (google.api.http) = { post: "/loadtesting/v1/storages/{storage_id}/uploadObject" body: "*" };
  };
}

message CreateStorageRequest {
  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  string object_storage_bucket_name = 2 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}
	
message DeleteStorageRequest {
  string storage_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message GetStorageRequest {
  string storage_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message ListStorageRequest {
  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  int64 page_size = 2 [(yandex.cloud.value) = "0-1000"];
  string page_token = 3 [(yandex.cloud.length) = "<=100"];
  string filter = 4 [(yandex.cloud.length) = "<=1000"];
}

message ListStorageResponse {
  repeated Storage storages = 1;
  string next_page_token = 2;
}

message UploadStorageObjectRequest {
  string storage_id = 1 [(yandex.cloud.length) = "<=50"];
  string folder_id = 2 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  string filename = 3 [(yandex.cloud.length) = "<=50"];
  bytes test_data = 4 [(yandex.cloud.required) = true];
}

message CreateStorageMetadata {
  string storage_id = 1;
}

message DeleteStorageMetadata {
  string storage_id = 1;
}
