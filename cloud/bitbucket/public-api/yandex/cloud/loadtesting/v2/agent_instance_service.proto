syntax = "proto3";

package yandex.cloud.loadtesting.v2;

import "google/api/annotations.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/compute/v1/instance_service.proto";
import "yandex/cloud/loadtesting/v2/agent_instance.proto";
import "yandex/cloud/operation/operation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/loadtesting/v2;loadtesting";
option java_package = "yandex.cloud.api.loadtesting.v2";

service AgentInstanceService {
  // Returns the specified agent instance
  rpc Get (GetAgentInstanceRequest) returns (GetAgentInstanceResponse) {
    option (google.api.http) = { get: "/loadtesting/v2/agents/{agent_instance_id}" };
  };

  // Retrieves the list of agent instances in the specified folder
  rpc List (ListAgentInstancesRequest) returns (ListAgentInstancesResponse) {
    option (google.api.http) = { get: "/loadtesting/v2/agents" };
  };

  // Creates the agent instance in specified folder
  rpc Create (CreateAgentInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/loadtesting/v2/agents" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateAgentInstanceMetadata"
      response: "AgentInstance"
    };
  };

  // Deletes the specified agent instance
  rpc Delete (DeleteAgentInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/loadtesting/v2/agents/{agent_instance_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteAgentInstanceMetadata"
      response: "google.protobuf.Empty"
    };
  };

  // Restarts the specified agent instance.
  rpc Restart (RestartAgentInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/loadtesting/v2/agents/{agent_instance_id}/restart" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "RestartAgentInstanceMetadata"
      response: "AgentInstance"
    };
  };

  // Stops the specified agent instance.
  rpc Stop (StopAgentInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/loadtesting/v2/agents/{agent_instance_id}/stop" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "StopAgentInstanceMetadata"
      response: "AgentInstance"
    };
  };

  // Starts the specified agent instance.
  rpc Start (StartAgentInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/loadtesting/v2/agents/{agent_instance_id}/start" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "StartAgentInstanceMetadata"
      response: "AgentInstance"
    };
  };

  // Upgrades the specified agent instance to the latest agent image.
  rpc UpgradeImage (UpgradeImageAgentInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/loadtesting/v2/agents/{agent_instance_id}/upgradeImage" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "UpgradeImageAgentInstanceMetadata"
      response: "AgentInstance"
    };
  };
}


message GetAgentInstanceRequest {
  string agent_instance_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message GetAgentInstanceResponse {
  AgentInstance agent_instance = 1;
}

message ListAgentInstancesRequest {
  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  int64 page_size = 2 [(yandex.cloud.value) = "0-1000"];
  string page_token = 3 [(yandex.cloud.length) = "<=100"];
  string filter = 4 [(yandex.cloud.length) = "<=1000"];
}

message ListAgentInstancesResponse {
  string folder_id = 1;
  repeated AgentInstance agent_instances = 2;
  string next_page_token = 3;
}

message CreateAgentInstanceRequest {
  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  string name = 2 [(yandex.cloud.pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 3 [(yandex.cloud.length) = "<=256"];
  map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (yandex.cloud.length) = "<=63",
    (yandex.cloud.pattern) = "[-_0-9a-z]*", (yandex.cloud.map_key).length = "1-63",
    (yandex.cloud.map_key).pattern = "[a-z][-_0-9a-z]*"];

  string preset_id = 5 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  string service_account_id = 6 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=256"];

  // Instance cpu/memory/disk resources are managed by ResourcePreset,
  // all the rest fields are taken from CreateInstanceRequest
  string zone_id = 7 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  repeated compute.v1.NetworkInterfaceSpec network_interface_specs = 8 [(size)=">0"];
  map<string, string> metadata = 9;
}

message CreateAgentInstanceMetadata {
  string agent_instance_id = 1;
}

message DeleteAgentInstanceRequest {
  string agent_instance_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message DeleteAgentInstanceMetadata {
  string agent_instance_id = 1;
}

message RestartAgentInstanceRequest {
  string agent_instance_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message RestartAgentInstanceMetadata {
  string agent_instance_id = 1;
}

message StopAgentInstanceRequest {
  string agent_instance_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message StopAgentInstanceMetadata {
  string agent_instance_id = 1;
}

message StartAgentInstanceRequest {
  string agent_instance_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message StartAgentInstanceMetadata {
  string agent_instance_id = 1;
}

message UpgradeImageAgentInstanceRequest {
  string agent_instance_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message UpgradeImageAgentInstanceMetadata {
  string agent_instance_id = 1;
}
