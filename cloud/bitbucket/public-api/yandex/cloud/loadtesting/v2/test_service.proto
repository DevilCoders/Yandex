syntax = "proto3";

package yandex.cloud.loadtesting.v2;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/loadtesting/v2/test.proto";
import "yandex/cloud/loadtesting/v2/storage.proto";


option go_package = "a.yandex-team.ru/cloud/bitbucket/public-api/yandex/cloud/loadtesting/v2;loadtesting";
option java_package = "yandex.cloud.api.loadtesting.v2";


service TestService {
  // Returns test by test id.
  rpc Get (GetTestRequest) returns (Test) {
    option (google.api.http) = { get: "/loadtesting/v2/tests/{test_id}" };
  };

  // Retrieves the list of tests for the specified folder.
  rpc List (ListTestsRequest) returns (ListTestsResponse) {
    option (google.api.http) = { get: "/loadtesting/v2/tests" };
  };

  // Creates a test in the specified folder.
  rpc Create (CreateTestRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/loadtesting/v2/tests" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateTestMetadata"
      response: "Test"
    };
  };

  // Updates the specified test.
  rpc Update (UpdateTestRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/loadtesting/v2/tests/{test_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateTestMetadata"
      response: "Test"
    };
  };

  // Stops the specified test.
  rpc Stop (StopTestRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/loadtesting/v2/tests/{test_id}/stop" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "StopTestMetadata"
      response: "Test"
    };
  };

  // Deletes the specified test
  rpc Delete (DeleteTestRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/loadtesting/v2/tests/{test_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteTestMetadata"
      response: "google.protobuf.Empty"
    };
  };
  rpc ValidateConfig (ValidateConfigRequest) returns (ValidateConfigResponse) {
    option (google.api.http) = { post: "/loadtesting/v2/tests/validateConfig" body: "*" };
  };

  rpc GetSummary (GetSummaryRequest) returns (TestSummary) {
    option (google.api.http) = { get: "/loadtesting/v2/tests/{test_id}/summary" };
  };

}


message GetTestRequest {
  string test_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message ListTestsRequest {
  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  int64 page_size = 2 [(yandex.cloud.value) = "0-1000"];
  string page_token = 3 [(yandex.cloud.length) = "<=100"];
  string filter = 4 [(yandex.cloud.length) = "<=1000"];
}

message ListTestsResponse {
  string folder_id = 1;
  repeated Test tests = 2;
  string next_page_token = 3;
}

message CreateTestRequest {
//  The rest

  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  string name = 2  [(yandex.cloud.pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 3 [(yandex.cloud.length) = "<=256"];
  map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (yandex.cloud.length) = "<=63",
    (yandex.cloud.pattern) = "[-_0-9a-z]*", (yandex.cloud.map_key).length = "1-63",
    (yandex.cloud.map_key).pattern = "[a-z][-_0-9a-z]*"];

  string agent_instance_id = 5 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  string config = 6 [(yandex.cloud.required) = true];
  string logging_log_group_id = 7;
  StorageObject payload_storage_object = 8;
}

message CreateTestMetadata {
  string test_id = 1;
}

message UpdateTestRequest {
  string test_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  google.protobuf.FieldMask update_mask = 2;
  string name = 3 [(yandex.cloud.pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 4 [(yandex.cloud.length) = "<=256"];
  map<string, string> labels = 5 [(yandex.cloud.size) = "<=64", (yandex.cloud.length) = "<=63",
    (yandex.cloud.pattern) = "[-_0-9a-z]*", (yandex.cloud.map_key).length = "1-63",
    (yandex.cloud.map_key).pattern = "[a-z][-_0-9a-z]*"];
  bool favorite = 6;
  string target_version = 7 [(yandex.cloud.length) = "<=50"];
}

message UpdateTestMetadata {
  string test_id = 1;
}

message StopTestRequest {
  string test_id = 1  [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message StopTestMetadata {
  string test_id = 1;
}

message DeleteTestRequest {
  string test_id = 1  [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message DeleteTestMetadata {
  string test_id = 1;
}

message ValidateConfigRequest {
  string config = 1  [(yandex.cloud.required) = true];
  string folder_id = 2 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

message ValidateConfigResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    OK = 1;
    FAILED = 2;
  }

  Status status = 1;
  repeated string errors = 2;
}

message GetSummaryRequest {
  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];;
  string test_id = 2 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
  bool full = 3;
}
