syntax = "proto3";

package yandex.cloud.priv.baas.v1;

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/baas/v1/policy.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/baas/v1;baas";

service PolicyService {
    rpc List(ListPoliciesRequest) returns (ListPoliciesResponse);

    rpc Create(CreatePolicyRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
          metadata: "CreatePolicyMetadata"
          response: "Policy"
        };
    }

    rpc Get(GetPolicyRequest) returns (Policy);

    rpc Update(UpdatePolicyRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
          metadata: "UpdatePolicyMetadata"
          response: "Policy"
        };
    }

    rpc Delete(DeletePolicyRequest)  returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "DeletePolicyMetadata"
            response: "google.protobuf.Empty"
        };
    }

    rpc Apply(ApplyPolicyRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "ApplyPolicyMetadata"
            response: "google.protobuf.Empty"
        };
    }

    rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse);

    rpc RunApplication(RunApplicationRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "RunApplicationMetadata"
            response: "google.protobuf.Empty"
        };
    }

    rpc DeleteApplication(DeleteApplicationRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteApplicationMetadata"
            response: "google.protobuf.Empty"
        };
    }
}

message ListPoliciesRequest {
    string folder_id = 1 [ (required) = true, (length) = "<=50" ];
    // if specified, returns policies applicable to specified resourse
    string compute_instance_id = 2;
}

message ListPoliciesResponse {
    repeated Policy policies = 1;
}

message CreatePolicyRequest {
    string folder_id = 1 [ (required) = true, (length) = "<=50" ];
    string name = 2 [ (required) = true, (length) = "<=50"];
    PolicySettings settings = 3 [ (required) = true ];
}

message CreatePolicyMetadata {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
}

message GetPolicyRequest {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
}

message UpdatePolicyRequest {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
    PolicySettings settings = 2 [ (required) = true ];
}

message UpdatePolicyMetadata {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
}

message DeletePolicyRequest {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
}

message DeletePolicyMetadata {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
}

message ApplyPolicyRequest {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
    string compute_instance_id = 2 [ (required) = true, (length) = "<=50" ];
}

message ApplyPolicyMetadata {
}

message ListApplicationsRequest {
    oneof id {
        option (exactly_one) = true;
        string folder_id = 1;
        string policy_id = 2;
        string compute_instance_id = 3;
    };
}

message ListApplicationsResponse {
    repeated PolicyApplication applications = 1;
}

message RunApplicationRequest {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
    string compute_instance_id = 2 [ (required) = true, (length) = "<=50" ];
}

message RunApplicationMetadata {
}

message DeleteApplicationRequest {
    string policy_id = 1 [ (required) = true, (length) = "<=50" ];
    string compute_instance_id = 2 [ (required) = true, (length) = "<=50" ];
}

message DeleteApplicationMetadata {
}
