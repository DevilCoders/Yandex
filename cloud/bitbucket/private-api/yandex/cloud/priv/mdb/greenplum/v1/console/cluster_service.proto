syntax = "proto3";

package yandex.cloud.priv.mdb.greenplum.v1.console;

import "google/api/annotations.proto";
import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/mdb/greenplum/v1/console/cluster.proto";
import "yandex/cloud/priv/mdb/greenplum/v1/cluster_service.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/greenplum/v1/console;greenplum_console";
option java_outer_classname = "GPCOS";

// A set of methods for managing Greenplum console support.
service ClusterService {
  rpc Get (GetGreenplumClustersConfigRequest) returns (GreenplumClustersConfig) {
    option (google.api.http) = { get: "/mdb/greenplum/v1/console/clusters:config" };
  }

  rpc EstimateCreate (CreateClusterRequest) returns (BillingEstimateResponse) {
    option (google.api.http) = { post: "/mdb/greenplum/v1/console/clusters:estimate" body: "*" };
  }

  rpc GetClustersStats (GetClustersStatsRequest) returns (ClustersStats) {
    option (google.api.http) = { get: "/mdb/greenplum/v1/console/clusters:stats" };
    option (yandex.cloud.api.tools.method).lint_skip.contains_resource_name = true;
  }

  rpc GetCreateConfig (CreateClusterConfigRequest) returns (JSONSchema) {
    option (google.api.http) = { get: "/mdb/greenplum/v1/console/clusters:createClusterConfig" };
  }
  rpc GetRecommendedConfig (GetRecommendedConfigRequest) returns (GetRecommendedConfigResponse){
    option (google.api.http) = { get: "/mdb/greenplum/v1/console/clusters:suggest-config" };
    option (yandex.cloud.api.tools.method).lint_skip.contains_resource_name = true;
  }
}

message GetGreenplumClustersConfigRequest {
    string folder_id = 1;
    repeated string host_group_ids = 2;
}

message GetClustersStatsRequest {
}

message CreateClusterConfigRequest {
}

message JSONSchema {
  string schema = 1;
}

message GetRecommendedConfigRequest {
    int64 database_size = 1;
    string disk_type_id = 2;
    bool need_dedicated_hosts = 3;
    string type = 4;
    string folder_id = 5;
}

message SubClusterResources {
    // ID of the preset for computational resources available to a host (CPU, memory etc.).
    // All available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
    string resource_preset_id = 1;

    // Possible values:
    // * network-hdd - network HDD drive,
    // * network-ssd - network SSD drive
    // * local-ssd - local SSD storage.
    // * network-ssd-nonreplicated - network SSD drive
    string disk_type_id = 2;

    // Volume of the storage needed for suggested configuration on a host.
    int64 disk_size = 3;

    // Generation of this preset
    int64 generation = 4;

    // Flavor type of this preset
    string type = 5;
}

message RecommendedConfig {
    SubClusterResources resources = 1;
}

message GetRecommendedConfigResponse {
    int64 master_hosts = 1;
    int64 segment_hosts = 2;
    int64 segments_per_host = 3;
    bool need_dedicated_hosts = 4;
    RecommendedConfig master_config = 5;
    RecommendedConfig segment_config = 6;
}
