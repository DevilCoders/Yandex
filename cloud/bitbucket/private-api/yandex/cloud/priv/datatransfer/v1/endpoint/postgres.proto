syntax = "proto3";

package yandex.cloud.priv.datatransfer.v1.endpoint;

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/datatransfer/v1/endpoint;tm_server_endpoint";

import "yandex/cloud/priv/datatransfer/v1/endpoint/common.proto";

// Deprecated. Use PostgresObjectTransferSettings instead.
message PostgresDumpSteps {
    bool sequence = 3;
    bool sequence_owned_by = 4;
    bool sequence_set = 18;
    bool table = 1;
    bool primary_key = 12;
    bool fk_constraint = 9;
    bool default_values = 7;
    bool constraint = 8;
    bool index = 10;
    bool view = 2;
    bool materialized_view = 17;
    bool function = 11;
    bool trigger = 14;
    bool type = 6;
    bool rule = 5;
    bool collation = 13;
    bool policy = 15;
    bool cast = 16;
}
message PostgresObjectTransferSettings {
    ObjectTransferStage sequence = 1;
    ObjectTransferStage sequence_owned_by = 2;
    ObjectTransferStage sequence_set = 18;
    ObjectTransferStage table = 3;
    ObjectTransferStage primary_key = 4;
    ObjectTransferStage fk_constraint = 5;
    ObjectTransferStage default_values = 6;
    ObjectTransferStage constraint = 7;
    ObjectTransferStage index = 8;
    ObjectTransferStage view = 9;
    ObjectTransferStage materialized_view = 17;
    ObjectTransferStage function = 10;
    ObjectTransferStage trigger = 11;
    ObjectTransferStage type = 12;
    ObjectTransferStage rule = 13;
    ObjectTransferStage collation = 14;
    ObjectTransferStage policy = 15;
    ObjectTransferStage cast = 16;
}
message OnPremisePostgres {
    string host = 1;
    repeated string hosts = 5;
    int64 port = 2;
    // Deprecated. Use tls_mode instead.
    string ca_certificate = 3;
    TLSMode tls_mode = 6;
    // Network interface for endpoint. If none will assume public ipv4
    string subnet_id = 4;
}
message SnapshotTableShardingSettings {
    int64 min_table_size = 1;
    int64 degree_of_parallelism = 2;
}
message PostgresConnection {
    oneof connection {
        string mdb_cluster_id = 1;
        OnPremisePostgres on_premise = 2;
    }
}
message PostgresSource {
    PostgresConnection connection = 1;
    repeated string security_groups = 14;
    string database = 2;
    string user = 3;
    Secret password = 4;
    // List of tables for replication. If none or empty list is presented - will
    // replicate all tables. Can contain * patterns.
    repeated string include_tables = 5;
    // List of tables for replication. If none or empty list is presented - will
    // replicate all tables. Can contain * patterns.
    repeated string exclude_tables = 6;
    // Maximum lag of replication slot (in bytes); after exceeding this limit
    // replication will be aborted.
    int64 slot_byte_lag_limit = 8;
    // schema for service tables (__consumer_keeper, __data_transfer_mole_finder).
    // Default is public
    string service_schema = 9;
    // Will collapse pg_inherit table into one big table in replication process
    bool collapse_inherit_table = 10;
    // Deprecated. Use object_transfer_settings instead.
    PostgresDumpSteps pre_steps = 11;
    // Deprecated. Use object_transfer_settings instead.
    PostgresDumpSteps post_steps = 12;
    PostgresObjectTransferSettings object_transfer_settings = 13;
    SnapshotTableShardingSettings snapshot_table_sharding_settings = 15;
}
message PostgresTarget {
    PostgresConnection connection = 1;
    repeated string security_groups = 7;
    string database = 2;
    string user = 3;
    Secret password = 4;
    // cleanup policy for activate / reupload processes. Default is truncate.
    CleanupPolicy cleanup_policy = 5;
    bool save_tx_boundaries = 6;
}
