syntax = "proto3";

package yandex.cloud.priv.datatransfer.v1;

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/datatransfer/v1;tm_server";

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint.proto";
import "yandex/cloud/priv/datatransfer/v1/transfer.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/api/tools/options.proto";

service TransferService {
    rpc Create(CreateTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer" body: "*" };
        option (api.operation) = {
            metadata: "CreateTransferMetadata"
            response: "Transfer"
        };
    }
    rpc Update(UpdateTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/v1/transfer/{transfer_id}" body: "*" };
        option (api.operation) = {
            metadata: "UpdateTransferMetadata"
            response: "Transfer"
        };
    }
    rpc Delete(DeleteTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/v1/transfer/{transfer_id}" };
        option (api.operation) = {
            metadata: "DeleteTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
// Transfer API
    rpc List(ListTransfersRequest) returns (ListTransfersResponse) {
        option (google.api.http) = { get: "/v1/transfers/list/{folder_id}" };
    }
    rpc Get(GetTransferRequest) returns (Transfer) {
        option (google.api.http) = { get: "/v1/transfer/{transfer_id}" };
    }
// Operation API
    rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {
        option (google.api.http) = { get: "/v1/transfers/logs" };
    }
    rpc ListOperations(ListTransferOperationsRequest) returns (ListTransferOperationsResponse) {
        option (google.api.http) = { get: "/v1/transfers/operations" };
    }
    rpc GetOperationLogs(GetLogsRequest) returns (GetLogsResponse) {
        option (google.api.http) = { get: "/v1/operation/logs" };
    }
// Edit API
    rpc Test(TestTransferRequest) returns (TestTransferResponse) {
        option (google.api.http) = { post: "/v1/transfer/test" body: "*" };
    }
    rpc AddTables(AddTransferTablesRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/v1/transfer/{transfer_id}:addTables" body: "*" };
        option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
        option (api.operation) = {
            metadata: "AddTablesTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc RemoveTables(RemoveTransferTablesRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/v1/transfer/{transfer_id}:removeTables" body: "*" };
        option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
        option (api.operation) = {
            metadata: "RemoveTablesTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc RestoreTarget(RestoreTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/restore-target" body: "*" };
        option (api.operation) = {
            metadata: "RestoreTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc Deactivate(DeactivateTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/{transfer_id}:deactivate" body: "*" };
        option (api.operation) = {
            metadata: "DeactivateTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
// Legacy method with improper name; use Deactivate instead
    rpc DeactivateSource(DeactivateTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/deactivate-source" body: "*" };
        option (api.operation) = {
            metadata: "DeactivateTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc Activate(ActivateTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/{transfer_id}:activate" body: "*" };
        option (api.operation) = {
            metadata: "ActivateTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc Upload(UploadTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/upload" body: "*" };
        option (api.operation) = {
            metadata: "UploadTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc ReUpload(ReUploadTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/re-upload" body: "*" };
        option (api.operation) = {
            metadata: "ReUploadTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc Pause(PauseTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/pause" body: "*" };
        option (api.operation) = {
            metadata: "PauseTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc Start(StartTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/start" body: "*" };
        option (api.operation) = {
            metadata: "StartTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
    rpc Restart(RestartTransferRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/transfer/restart" body: "*" };
        option (api.operation) = {
            metadata: "RestartTransferMetadata"
            response: "google.protobuf.Empty"
        };
    }
}
message CreateTransferRequest {
    string source_id = 1;
    string target_id = 2;
    string name = 7;
    string description = 3;
    map<string,string> labels = 8;
    string folder_id = 4;
    Runtime runtime = 5;
    TransferType type = 6;
    RegularSnapshot regular_snapshot = 9;
    Transformation transformation = 10;
    TmpPolicyConfig tmp_policy = 11;
    DataObjects data_objects = 12;
}
message CreateTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
}
message UpdateTransferRequest {
    string transfer_id = 1;
    string description = 2;
    map<string,string> labels = 6;
    Runtime runtime = 3;
    string name = 4;
    google.protobuf.FieldMask update_mask = 5;
    RegularSnapshot regular_snapshot = 7;
    Transformation transformation = 8;
    TmpPolicyConfig tmp_policy = 9;
    DataObjects data_objects = 10;
}
message UpdateTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
}
message DeleteTransferRequest {
    string transfer_id = 1;
}
message DeleteTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
}
message ListTransfersRequest {
    // Status of Transfer
    TransferStatus status = 1;
    // Folder ID
    string folder_id = 2;
    // Maximum number of returned transfers. Defaults to 100 if not provided.
    int64 page_size = 3;
    string page_token = 4;
}
message ListTransfersResponse {
    repeated Transfer transfers = 1;
    // proto.Marshal()ed message TransferPage in base64 encoding
    string next_page_token = 2;
}
message GetTransferRequest {
    // The ID of Transfer
    string transfer_id = 1;
}
message GetLogsRequest {
    // The ID of sinker, can be received from get /transfers api
    string log_group_id = 1;
    // Index of job, -1 for any job
    string stream_name = 2;
    int64 page_size = 5;
    oneof selector {
        string page_token = 6;
        Criteria criteria = 7;
    }
}
message Criteria {
    google.protobuf.Timestamp since = 1;
    google.protobuf.Timestamp until = 2;
    repeated LogLevel.Level levels = 4;
    string filter = 7;
}
message GetLogsResponse {
    repeated LogEvent log_events = 1;
    string next_page_token = 2;
    string previous_page_token = 3;
}
message LogEvent {
    string log_group_id = 1;
    string stream_name = 2;
    google.protobuf.Timestamp created_at = 3;
    string message = 4;
    LogLevel.Level level = 5;
}
message ListTransferOperationsRequest {
    string folder_id = 1;
    string transfer_id = 2;
    // Maximum number of returned operations. Defaults to 100 if not provided.
    int64 page_size = 3;
    string page_token = 4;
}
message ListTransferOperationsResponse {
    repeated operation.Operation operations = 1;
    string next_page_token = 2;
}
message TestTransferRequest {
    string source_id = 1;
    string target_id = 2;
    string description = 3;
    string folder_id = 4;
    Runtime runtime = 5;
    TransferType type = 6;
}
message TestTransferResponse {
    bool is_ok = 1;
    string message = 2;
    int64 eta_rows = 3;
    int64 eta_size = 4;
}
message AddTransferTablesRequest {
    string transfer_id = 1;
    // List of tables to be added
    repeated string tables = 2;
}
message AddTablesTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
    double progress_percentage = 4;
}
message RemoveTransferTablesRequest {
    string transfer_id = 1;
    // List of tables to be removed
    repeated string tables = 2;
}
message RemoveTablesTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
}
message RestoreTransferRequest {
    // List of banned tables
    repeated string tables = 1;
    Endpoint endpoint = 2;
}
message RestoreTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
}
message DeactivateTransferRequest {
    string transfer_id = 1;
}
message DeactivateTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
    double progress_percentage = 4;
}
message ActivateTransferRequest {
    string transfer_id = 1;
}
message ActivateTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
    double progress_percentage = 4;
}
message UploadTransferRequest {
    message TableDescription {
        string schema = 1;
        string name = 2;
        int64 offset = 3;
        string filter = 4;
    }
    string transfer_id = 1;
    repeated TableDescription tables = 2;
}
message UploadTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
    double progress_percentage = 4;
}
message ReUploadTransferRequest {
    string transfer_id = 1;
}
message ReUploadTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
    double progress_percentage = 4;
}
message PauseTransferRequest {
    string transfer_id = 1;
}
message PauseTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
}
message StartTransferRequest {
    string transfer_id = 1;
}
message StartTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
}
message RestartTransferRequest {
    string transfer_id = 1;
}
message RestartTransferMetadata {
    string transfer_id = 1;
    repeated string links = 2;
    OperationHealthMeta health_meta = 3;
}
message OperationHealthMeta {
    message ProgressMeta {
        // percentage progress for uploads
        double eta_progress = 1;
    }
    message ShardProgress {
        double shard_progress_percentage = 1;
        google.protobuf.Timestamp created_at = 2;
        bool completed = 3;
        string error = 4;
    }
    message ShardedMeta {
        int64 shard_index = 1;
        repeated ShardProgress shard_progress = 2;
        double total_progress_percentage = 3;
    }
    message NoMeta {
    }
    google.protobuf.Timestamp created_at = 1;
    oneof meta {
        NoMeta no_meta = 2;
        ProgressMeta progress = 3;
        ShardedMeta sharded_progress = 4;
    }
}
