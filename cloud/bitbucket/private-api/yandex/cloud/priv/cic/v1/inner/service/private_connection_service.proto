syntax = "proto3";

package yandex.cloud.priv.cic.v1.inner.service;

import "yandex/cloud/api/operation.proto";
import "google/protobuf/field_mask.proto";

import "yandex/cloud/priv/validation.proto";

import "yandex/cloud/priv/cic/v1/inner/service/private_connection.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/cic/v1/inner/service/debug.proto";
import "yandex/cloud/priv/cic/v1/inner/service/peering.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/cic/v1/inner/service;cic";
option java_outer_classname = "CICPRCS";

service PrivateConnectionService {

    rpc Get (GetPrivateConnectionRequest) returns (PrivateConnection);

    rpc List (ListPrivateConnectionRequest) returns (ListPrivateConnectionResponse);

    rpc Create (PrivateConnection) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "CreatePrivateConnectionMetadata"
            response: "PrivateConnection"
        };
    }

    rpc Update (PrivateConnection) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "UpdatePrivateConnectionMetadata"
            response: "PrivateConnection"
        };
    }

    rpc UpdateByMask (UpdatePrivateConnectionRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "UpdatePrivateConnectionMetadata"
            response: "PrivateConnection"
        };
    }

    rpc Delete (DeletePrivateConnectionRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "DeletePrivateConnectionMetadata"
            response: "google.protobuf.Empty"
        };
    }

    rpc ListOperations (ListPrivateConnectionOperationsRequest) returns (ListPrivateConnectionOperationsResponse);

    rpc AllocateRouteTarget (AllocatePrivateConnectionRouteTargetOperationsRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "AllocatePrivateConnectionRouteTargetMetadata"
            response: "google.protobuf.StringValue"
        };
    }

    rpc DeallocateRouteTarget (DeallocatePrivateConnectionRouteTargetOperationsRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "DeallocatePrivateConnectionRouteTargetMetadata"
            response: "google.protobuf.Empty"
        };
    }
}

message GetPrivateConnectionRequest {
    string private_connection_id = 1 [(required) = true, (length) = "<=50"];
}

message ListPrivateConnectionRequest {
    string folder_id = 1 [(required) = true, (length) = "<=50"];
    int64 page_size = 2;
    string page_token = 3;
    string filter = 4;
}

message ListPrivateConnectionResponse {
    repeated PrivateConnection private_connections = 1;
    string next_page_token = 2;
}

message UpdatePrivateConnectionRequest {
    string private_connection_id = 1;
    google.protobuf.FieldMask update_mask = 2;

    string name = 3;
    string description = 4;
    string cloud_id = 5;
    string folder_id = 6;
    string region_id = 7;
    string trunk_connection_id = 8;
    // Not used in connections over partners-II
    oneof optional_vlan_id {
        int64 vlan_id = 9;
    }

    Peering ipv4_peering = 10;
    Peering ipv6_peering = 11;

    repeated string import_route_targets = 12;
    repeated string export_route_targets = 13;

    oneof optional_subinterface {
        int64 subinterface = 14;
    }
    oneof optional_rd_value {
        int64 rd_value = 15;
    }

    // NB: Juniper routers always require a loopback, see https://kb.juniper.net/InfoCenter/index?page=content&id=KB23547
    // NB: Huawei routers do not require a loopback and have tight limits on their amount
    PrivateConnection.Loopback loopback = 16;

    DebugAcl ipv4_debug_acl = 17;
    DebugAcl ipv6_debug_acl = 18;

    repeated PrivateConnection.StaticRoute ipv4_static_routes = 19;
    repeated PrivateConnection.StaticRoute ipv6_static_routes = 20;

    string customer_name = 21;
}

message CreatePrivateConnectionMetadata {
    string private_connection_id = 1;
}

message UpdatePrivateConnectionMetadata {
    string private_connection_id = 1;
}

message DeletePrivateConnectionRequest {
    string private_connection_id = 1 [(required) = true, (length) = "<=50"];
}

message DeletePrivateConnectionMetadata {
    string private_connection_id = 1;
}

message AllocatePrivateConnectionRouteTargetMetadata {
    string private_connection_id = 1;
}

message DeallocatePrivateConnectionRouteTargetMetadata {
    string private_connection_id = 1;
}

message ListPrivateConnectionOperationsRequest {
    string private_connection_id = 1 [(required) = true, (length) = "<=50"];
    int64 page_size = 2;
    string page_token = 3;
}

message ListPrivateConnectionOperationsResponse {
    repeated operation.Operation operations = 1;
    string next_page_token = 2;
}

message AllocatePrivateConnectionRouteTargetOperationsRequest {
    string private_connection_id = 1;
    RouteTargetPoolType pool_type = 2;
}

message DeallocatePrivateConnectionRouteTargetOperationsRequest {
    string private_connection_id = 1;
    RouteTargetPoolType pool_type = 2;
    string route_target = 3;
}

enum RouteTargetPoolType {
    ROUTE_TARGET_POOL_TYPE_UNSPECIFIED = 0;
    ROUTE_TARGET_POOL_TYPE_EXPORT = 2;
    ROUTE_TARGET_POOL_TYPE_IMPORT = 3;

}
