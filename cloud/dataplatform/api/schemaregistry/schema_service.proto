syntax = "proto3";

package yandex.cloud.priv.schemaregistry.v1;

option go_package = "a.yandex-team.ru/cloud/dataplatform/api/schemaregistry";

import "google/protobuf/descriptor.proto";

import "google/api/annotations.proto";
import "cloud/dataplatform/api/schemaregistry/schema.proto";

service SchemaService {
    rpc List(ListSchemasRequest) returns (ListSchemasResponse) {
        option (google.api.http) = {
            get: "/v1/namespaces/{id}/schemas"
        };
    }
    rpc Create(CreateSchemaRequest) returns (CreateSchemaResponse) {
        option (google.api.http) = {
            post: "/v1/namespaces/{namespace_id}/schemas/{schema_id}"
            body: "*"
        };
    }
    rpc Get(GetSchemaRequest) returns (GetSchemaResponse) {
        option (google.api.http) = {
            get: "/v1/namespaces/{namespace_id}/schemas/{schema_id}"
        };
    }
    rpc CheckCompatibility(CheckCompatibilityRequest) returns (CheckCompatibilityResponse) {
        option (google.api.http) = {
            post: "/v1/namespaces/{namespace_id}/schemas/{schema_id}/check"
            body: "*"
        };
    }
    rpc Diff(DiffRequest) returns (DiffResponse) {
        option (google.api.http) = {
            post: "/v1/namespaces/{namespace_id}/schemas/{schema_id}/diff"
            body: "*"
        };
    }
    rpc GetMetadata(GetSchemaMetadataRequest) returns (GetSchemaMetadataResponse) {
        option (google.api.http) = {
            get: "/v1/namespaces/{namespace_id}/schemas/{schema_id}/meta"
        };
    }
    rpc UpdateMetadata(UpdateSchemaMetadataRequest) returns (UpdateSchemaMetadataResponse) {
        option (google.api.http) = {
            patch: "/v1/namespaces/{namespace_id}/schemas/{schema_id}"
            body: "*"
        };
    }
    rpc GetLatest(GetLatestSchemaRequest) returns (GetLatestSchemaResponse) {
        option (google.api.http) = {
            get: "/v1/namespaces/{namespace_id}/schemas/{schema_id}/latest"
        };
    }
    rpc Delete(DeleteSchemaRequest) returns (DeleteSchemaResponse) {
        option (google.api.http) = {
            delete: "/v1/namespaces/{namespace_id}/schemas/{schema_id}"
        };
    }
}

message ListSchemasRequest {
    string id = 1;
}
message ListSchemasResponse {
    repeated string schemas = 1;
}

message GetSchemaRequest {
    string namespace_id = 1;
    string schema_id = 2;
    int32 version_id = 3;
}

message GetSchemaResponse {
    bytes data = 1;
}

message GetLatestSchemaRequest {
    string namespace_id = 1;
    string schema_id = 2;
}

message GetLatestSchemaResponse {
    bytes data = 3;
}

message CreateSchemaRequest {
    string namespace_id = 1;
    string schema_id = 2;
    bytes data = 3;
    Schema.Format format = 4;
    Schema.Compatibility compatibility = 5;
}

message CreateSchemaResponse {
    int32 version = 1;
    string id = 2;
    string location = 3;
}

message CheckCompatibilityRequest {
    string namespace_id = 1;
    string schema_id = 2;
    bytes data = 3;
    Schema.Compatibility compatibility = 4;
}

message CheckCompatibilityResponse {}

message DiffRequest {
    string namespace_id = 1;
    string schema_id = 2;
    bytes data = 3;
}

message DiffResponse {
    repeated string diffs = 1;
}

message GetSchemaMetadataRequest {
    string namespace_id = 1;
    string schema_id = 2;
}

message GetSchemaMetadataResponse {
    Schema.Format format = 1;
    Schema.Compatibility compatibility = 2;
    string authority = 3;
}

message UpdateSchemaMetadataRequest {
    string namespace_id = 1;
    string schema_id = 2;
    Schema.Compatibility compatibility = 3;
}

message UpdateSchemaMetadataResponse {
    Schema.Format format = 1;
    Schema.Compatibility compatibility = 2;
    string authority = 3;
}

message DeleteSchemaRequest {
    string namespace_id = 1;
    string schema_id = 2;
}

message DeleteSchemaResponse {
    string message = 1;
}
