syntax = "proto2";

import "cloud/blockstore/tools/common/go/cms/proto/config.proto";
import "cloud/blockstore/tools/common/go/cms/proto/console_base.proto";

option go_package = "a.yandex-team.ru/cloud/blockstore/tools/common/go/cms/proto;kikimr";

package NKikimrConsole;

message TConfigItemId {
    optional uint64 Id = 1;
    optional uint64 Generation = 2;
}

message TItemIds {
    repeated uint64 Ids = 1;
}

message TNodeIds {
    repeated uint32 Nodes = 1;
}

message THosts {
    repeated string Hosts = 1;
}

message TTenants {
    repeated string Tenants = 1;
}

message TNodeTypes {
    repeated string NodeTypes = 1;
}

message TTenantAndNodeType {
    optional string Tenant = 1;
    optional string NodeType = 2;
}

message TTenantAndNodeTypes {
    repeated TTenantAndNodeType TenantAndNodeTypes = 1;
}

message TCookies {
    repeated string Cookies = 1;
}

message TUsageScope {
    oneof Filter {
        TNodeIds NodeFilter = 1;
        THosts HostFilter = 2;
        TTenantAndNodeType TenantAndNodeTypeFilter = 3;
    }
}

message TNodeAttributes {
    optional uint32 NodeId = 1;
    optional string Host = 2;
    optional string Tenant = 3;
    optional string NodeType = 4;
}

message TConfigItem {
    enum EKind {
        NamedConfigsItem = 100;
    }

    enum EMergeStrategy {
        OVERWRITE = 1;
        MERGE = 2;
        MERGE_OVERWRITE_REPEATED = 3;
    }

    optional TConfigItemId Id = 1;
    optional uint32 Kind = 2;
    optional NKikimrConfig.TAppConfig Config = 3;
    optional TUsageScope UsageScope = 4;
    optional uint32 Order = 5;
    optional uint32 MergeStrategy = 6;
    optional string Cookie = 7;
}

message TAddConfigItem {
    optional TConfigItem ConfigItem = 1;
    optional bool EnableAutoSplit = 2;
}

message TRemoveConfigItem {
    optional TConfigItemId ConfigItemId = 1;
}

message TRemoveConfigItems {
    oneof Filter {
        TCookies CookieFilter = 1;
    }
}

message TModifyConfigItem {
    optional TConfigItem ConfigItem = 1;
}

message TConfigureAction {
    oneof Action {
        TAddConfigItem AddConfigItem = 1;
        TRemoveConfigItem RemoveConfigItem = 2;
        TModifyConfigItem ModifyConfigItem = 3;
        TRemoveConfigItems RemoveConfigItems = 4;
    }
}

message TConfigureRequest {
    repeated TConfigureAction Actions = 1;
    optional bool DryRun = 2;
    optional bool FillAffectedConfigs = 3;
}

message TConfigureResponse {
    message TAffectedConfig {
        optional string Tenant = 1;
        optional string NodeType = 2;
        optional NKikimrConfig.TAppConfig OldConfig = 3;
        optional NKikimrConfig.TAppConfig NewConfig = 4;
    }

    optional TStatus Status = 1;
    repeated uint64 AddedItemIds = 2;
    repeated TAffectedConfig AffectedConfigs = 3;
}

message TGetConfigItemsRequest {
    repeated uint64 ItemIds = 1;
    optional TNodeIds NodeFilter= 2;
    optional THosts HostFilter = 3;
    optional TTenants TenantFilter = 4;
    optional TNodeTypes NodeTypeFilter = 5;
    optional TTenantAndNodeTypes TenantAndNodeTypeFilter = 6;
    repeated TUsageScope UsageScopes = 7;
    optional TCookies CookieFilter = 8;
    repeated uint32 ItemKinds = 10;
}

message TGetConfigItemsResponse {
    optional TStatus Status = 1;
    repeated TConfigItem ConfigItems = 2;
}

message TGetNodeConfigItemsRequest {
    optional TNodeAttributes Node = 1;
    repeated uint32 ItemKinds = 2;
}

message TGetNodeConfigItemsResponse {
    optional TStatus Status = 1;
    repeated TConfigItem ConfigItems = 2;
}

message TGetNodeConfigRequest {
    optional TNodeAttributes Node = 1;
    repeated uint32 ItemKinds = 2;
}

message TGetNodeConfigResponse {
    optional TStatus Status = 1;
    optional NKikimrConfig.TAppConfig Config = 2;
}

message TConfigsConfig {
    message TUsageScopeRestrictions {
        repeated uint32 AllowedNodeIdUsageScopeKinds = 1;
        repeated uint32 AllowedHostUsageScopeKinds = 2;
        repeated uint32 AllowedTenantUsageScopeKinds = 3;
        repeated uint32 AllowedNodeTypeUsageScopeKinds = 4;
        repeated uint32 DisallowedDomainUsageScopeKinds = 5;
    }

    optional TUsageScopeRestrictions UsageScopeRestrictions = 1;
}
