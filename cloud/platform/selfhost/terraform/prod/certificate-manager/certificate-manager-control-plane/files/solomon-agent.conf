Registration {
    Provider: "certificate-manager"
    PullInterval: "15s"
    Description: "provider data for project certificate-manager"

    Endpoints {
    	Type: CLOUD_PROD
    	AuthMethod: "metadata"
    }
}

Cluster: "prod"

AuthProvider {
    ThreadPoolName: "Default"

    AuthMethods: [
        {
            Name: "metadata"
            MetadataServiceConfig {
                InstanceType: OVERLAY
            }
        }
    ]
}

Logger {
    LogTo: STDERR
    Level: DEBUG
}

Python2 {
    # defines should agent try to load/write .pyc files (default: false)
    IgnorePycFiles: true
}

HttpServer {
    BindPort: 8080

    Shards: [{
        Project: "certificate-manager"
        Service: "certificate-manager"
        PreserveOriginal: false

        ShardKeyOverride {
            Project: "{{cloud_id}}"
            Cluster: "{{folder_id}}"
            Service: "certificate-manager"
            DoNotAppendHostLabel: true
        }
    }]
}

ManagementServer {
    BindAddress: "::"
    BindPort: 8081
}

Storage {
    Limit {
        Total: "768MiB"
        ShardDefault: "100MiB"
    }
}

ConfigLoader {
    Static {
        Services {
            Project: "certificate-manager"
            Service: "sys"

            PullInterval: "15s"

            Modules: [
                { System: {
                    Cpu: ADVANCED
                    Memory: ADVANCED
                    Network: BASIC
                    Storage: ADVANCED
                    Io: ADVANCED
                    Kernel: ADVANCED
                }}
            ]
        }
        Services {
            Project: "certificate-manager"
            Service: "public_envoy"

            PullInterval: "15s"

            Modules: [
                { HttpPull {
                    Url: "http://localhost:9901/stats/prometheus"
                    Format: PROMETHEUS
                }}
            ]
        }
        Services {
            Project: "certificate-manager"
            Service: "private_envoy"

            PullInterval: "15s"

            Modules: [
                { HttpPull {
                    Url: "http://localhost:9902/stats/prometheus"
                    Format: PROMETHEUS
                }}
            ]
        }
        Services {
            Project: "certificate-manager"
            Service: "certificate-manager"

            PullInterval: "15s"

            Modules: [
                {
                    HttpPull {
                        Url: "http://localhost:4303"
                        Format: PROMETHEUS
                    }
                    Transformations {
                        Rule {
                            Match: "sensor=certificate_days_until_expiration"
                            ReplaceMeta: "name=certificate.days_until_expiration, sensor=-"
                        }
                        Rule {
                            Match: "sensor=certificate_out_of_order"
                            ReplaceMeta: "name=certificate.is_out_of_order, sensor=-"
                        }
                        Rule {
                            Match: "sensor=quota_certificates_count_usage"
                            ReplaceMeta: "name=quota.certificates_count.usage, sensor=-"
                        }
                        Rule {
                            Match: "sensor=quota_certificates_count_limit"
                            ReplaceMeta: "name=quota.certificates_count.limit, sensor=-"
                        }
                    }
                }
            ]
        }
    }
}
