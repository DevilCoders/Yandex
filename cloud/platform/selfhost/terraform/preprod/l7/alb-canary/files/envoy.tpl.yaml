node:
  cluster: alb-canary
  id: __NODE__
  locality:
    region: __REGION__
    zone: __ZONE__

admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9901

stats_config:
  # Envoy has a lot of predefined tags, see
  # https://github.com/envoyproxy/envoy/blob/master/source/common/config/well_known_names.cc
  # E.g. *_rq(_<response_code>) or *_rq_(<response_code_class>)xx
  # If we need to manually rewrite these tags, set to false.
  use_all_default_tags: true
  stats_tags:
  # cluster tags
  - tag_name: "backend_group_id"
    regex: "^cluster\\.(([0-9a-zA-Z]+?)_)"
  - tag_name: "backend"
    regex: "^cluster\\.[0-9a-zA-Z]+?_(([a-zA-Z_]+?)\\.)"
  - tag_name: "cluster_group"
    regex: "^cluster\\..+?(\\.(circuit_breakers|external|health_check|outlier_detection|ssl)\\.)"
  # virtual clusters tags
  - tag_name: "http_router_id"
    regex: "\\.vcluster\\.\\/(ID\\:(.+?)\\/)"
  - tag_name: "route"
    regex: "\\/(RN\\:(.+?)\\.)"
  - tag_name: "metrics_group"
    regex: "^((cluster|server|vcluster|listener)\\.)"

stats_sinks:
- name: envoy.statsd
  config:
    address:
      socket_address: { address: 127.0.0.1, port_value: 9125 }

tracing:
  http:
    name: envoy.dynamic.ot
    typed_config:
      "@type": type.googleapis.com/envoy.config.trace.v2.DynamicOtConfig
      library: /usr/local/lib/libjaegertracing_plugin.so
      config:
        service_name: staging
        sampler: { type: const, param: 1 }
        reporter: { localAgentHostPort: 127.0.0.1:5775 }

cluster_manager:
  outlier_detection:
    event_log_path: /var/log/envoy/outlier_detection.log

dynamic_resources:
  ads_config:
    api_type: GRPC
    rate_limit_settings: {}
    grpc_services:
    - envoy_grpc:
        cluster_name: xds_cluster
  cds_config:
    ads: {}
  lds_config:
    ads: {}

static_resources:
  secrets:
  - name: frontend_cert
    tls_certificate:
      certificate_chain:
        filename: /etc/envoy/ssl/certs/frontend.crt
      private_key:
        filename: /etc/envoy/ssl/private/frontend.key

  clusters:
  - name: sds
    connect_timeout: 0.25s
    http2_protocol_options: {}
    type: STATIC
    hosts:
    - pipe: { path: /tmp/sds/sock }
  - name: xds_cluster
    connect_timeout: 1s
    http2_protocol_options: {}
    common_http_protocol_options:
      idle_timeout: 30s
    upstream_connection_options:
      tcp_keepalive:
        keepalive_probes: 1
        keepalive_time: 10
        keepalive_interval: 10
    type: STATIC
    hosts:
    - socket_address:
        address: "::1"
        port_value: 5443
    tls_context:
      sni: "xds.ycp.cloud-preprod.yandex.net"

  - name: als
    connect_timeout: 0.25s
    http2_protocol_options: {}
    common_http_protocol_options:
      idle_timeout: 30s
    upstream_connection_options:
      tcp_keepalive:
        keepalive_probes: 1
        keepalive_time: 10
        keepalive_interval: 10
    type: STATIC
    hosts:
    - socket_address:
        address: 127.0.0.1
        port_value: 4436

  # This is manually defined cluster for ALS log sending.
  # Later will be generated by ALB service.
  # Test it by using the same localhost address.
  - name: als_for_tls_v6
    connect_timeout: 0.25s
    http2_protocol_options: {}
    common_http_protocol_options:
      idle_timeout: 30s
    upstream_connection_options:
      tcp_keepalive:
        keepalive_probes: 1
        keepalive_time: 10
        keepalive_interval: 10
    transport_socket:
      name: tls
    type: LOGICAL_DNS
    hosts:
    - socket_address:
        address: 'als.ycp.cloud-preprod.yandex.net'
        port_value: 4436
