apiVersion: v1
kind: PodList
items:
- apiVersion: v1
  kind: Pod
  metadata:
    name: api-infrastructure
    namespace: kube-system
    annotations:
      config_digest: ${infra_config_digest}
      scheduler.alpha.kubernetes.io/critical-pod: ""
    labels:
      role: api
  spec:
    priority: 2000000001
    hostNetwork: true
    hostPID: true
    priorityClassName: system-cluster-critical
    initContainers:
    - name: deploy-infra-configs
      image: cr.yandex/crp7nvlkttssi7kapoho/infra/metadata:${metadata_version}
      command:
      - /usr/bin/metadata
      - --attribute-name
      - infra-configs
      imagePullPolicy: Always
      volumeMounts:
      - name: all-configs
        mountPath: /etc
        terminationGracePeriodSeconds: 30
    containers:
    - name: solomon-agent
      image: cr.yandex/crpr3khkepsccf25vvt6/solomon-agent:${solomon_version}
      resources:
        requests:
          memory: "${solomon_memory_limit}"
        limits:
          memory: "${solomon_memory_limit}"
      volumeMounts:
      - name: solomon-agent-config
        mountPath: /etc/solomon-agent/
        readOnly: true
    volumes:
    - name: all-configs
      hostPath:
       path: /etc
       type: DirectoryOrCreate
    - name: solomon-agent-config
      hostPath:
        path: /etc/solomon-agent

- apiVersion: v1
  kind: Pod
  metadata:
    name: api-static
    namespace: kube-system
    labels:
      role: api
    annotations:
      config_digest: ${config_digest}
      scheduler.alpha.kubernetes.io/critical-pod: ""
  spec:
    priority: 2000000001
    priorityClassName: system-cluster-critical
    hostNetwork: true
    initContainers:
    - name: deploy-configs
      image: cr.yandex/crp7nvlkttssi7kapoho/infra/metadata:${metadata_version}
      volumeMounts:
      - name: all-configs
        mountPath: /etc
        terminationGracePeriodSeconds: 30
    containers:
    - name: osquery-sender
      image: cr.yandex/${sender_registry}/osquery-sender:${sender_version}
      resources:
        requests:
          memory: "${sender_memory_limit}"
        limits:
          memory: "${sender_memory_limit}"
      env:
      - name: QLOUD_HTTP_PORT
        value: "${api_port}"
      # We can batch very large amounts of memory.
      - name: GOGC
        value: "50"
      - name: HEALTHCHECK_HTTP_PORT
        value: "${healthcheck_port}"
      volumeMounts:
      - name: osquery-sender-configs
        mountPath: /config
        readOnly: true
      # Used for certificate
      - name: osquery-sender-run
        mountPath: /run/osquery-sender
        readOnly: true
    volumes:
    - name: all-configs
      hostPath:
        path: /etc
        type: DirectoryOrCreate
    - name: osquery-sender-configs
      hostPath:
        path: /etc/osquery-sender
        type: DirectoryOrCreate
    - name: osquery-sender-run
      hostPath:
        path: /run/osquery-sender
        type: DirectoryOrCreate
