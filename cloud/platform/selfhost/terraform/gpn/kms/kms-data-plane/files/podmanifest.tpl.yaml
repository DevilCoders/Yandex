apiVersion: v1
kind: PodList
items:
- apiVersion: v1
  kind: Pod
  metadata:
    name: api-infrastructure
    namespace: kube-system
    annotations:
      config_digest: ${infra_config_digest}
      scheduler.alpha.kubernetes.io/critical-pod: ""
    labels:
      role: api
  spec:
    priority: 2000000001
    hostNetwork: true
    hostPID: true
    priorityClassName: system-cluster-critical
    initContainers:
    - name: deploy-infra-configs
      image: cr.yandex/crp7nvlkttssi7kapoho/infra/metadata:${metadata_version}
      command:
      - /usr/bin/metadata
      - --attribute-name
      - infra-configs
      imagePullPolicy: Always
      volumeMounts:
      - name: all-configs
        mountPath: /etc
        terminationGracePeriodSeconds: 30
      - name: usr-local
        mountPath: /usr/local
        terminationGracePeriodSeconds: 30
    containers:
    - name: solomon-agent
      image: cr.yandex/crpr3khkepsccf25vvt6/solomon-agent:${solomon_version}
      resources:
        requests:
          memory: "512Mi"
        limits:
          memory: "512Mi"
      volumeMounts:
      - name: solomon-agent-config
        mountPath: /etc/solomon-agent/
        readOnly: true
    - name: push-client
      image: cr.yandex/crpr3khkepsccf25vvt6/push-client:${push_client_version}
      resources:
        requests:
          memory: "256Mi"
        limits:
          memory: "256Mi"
      env:
      volumeMounts:
      - name: var-log
        mountPath: /var/log
        terminationGracePeriodSeconds: 30
      - name: var-spool
        mountPath: /var/spool
        terminationGracePeriodSeconds: 30
      - name: push-client-config
        mountPath: /etc/yandex/statbox-push-client
        readOnly: true
      - name: etc-hosts
        mountPath: /etc/hosts
        readOnly: true
#     - name: billing-push-client
#       image: cr.yandex/crpr3khkepsccf25vvt6/push-client:${push_client_version}
#       command: ["/usr/bin/push-client", "-f", "-c", "/etc/yandex/statbox-push-client/billing-push-client.yaml"]
#       resources:
#         requests:
#           memory: "128Mi"
#         limits:
#           memory: "128Mi"
#       env:
#       - name: PUSH_CLIENT_TVM_SECRET
#         value: ${push_client_tvm_secret}
#       volumeMounts:
#       - name: var-log
#         mountPath: /var/log
#         terminationGracePeriodSeconds: 30
#       - name: var-spool
#         mountPath: /var/spool
#         terminationGracePeriodSeconds: 30
#       - name: push-client-config
#         mountPath: /etc/yandex/statbox-push-client
#         readOnly: true
    volumes:
    - name: all-configs
      hostPath:
       path: /etc
       type: DirectoryOrCreate
    - name: usr-local
      hostPath:
       path: /usr/local
       type: DirectoryOrCreate
    - name: var-log
      hostPath:
        path: /var/log
    - name: var-spool
      hostPath:
        path: /var/spool
    - name: var-spool-push-client
      hostPath:
        path: /var/spool/push-client
    - name: push-client-config
      hostPath:
        path: /etc/yandex/statbox-push-client
    - name: solomon-agent-config
      hostPath:
        path: /etc/solomon-agent
    - name: etc-hosts
      hostPath:
        path: /etc/hosts
- apiVersion: v1
  kind: Pod
  metadata:
    name: api-static
    namespace: kube-system
    labels:
      role: api 
    annotations:
      config_digest: ${config_digest}
      scheduler.alpha.kubernetes.io/critical-pod: ""
  spec:
    priority: 2000000001
    priorityClassName: system-cluster-critical
    hostNetwork: true
    initContainers:
    - name: deploy-configs
      image: cr.yandex/crp7nvlkttssi7kapoho/infra/metadata:${metadata_version}
      volumeMounts:
      - name: all-configs
        mountPath: /etc
        terminationGracePeriodSeconds: 30
      - name: usr-local
        mountPath: /usr/local
        terminationGracePeriodSeconds: 30
    containers:
    - name: kms-data-plane
      image: cr.yandex/crpr3khkepsccf25vvt6/kms-data-plane:${application_version}
      resources:
        requests:
          memory: "13500Mi"
        limits:
          memory: "13500Mi"
      env:
      - name: APPLICATION_YAML
        value: /etc/kms/application.yaml
      - name: APPLICATION_LOG_DIR
        value: /var/log/kms
      - name: APPLICATION_LOG_FILE_MAX_FILES
        value: "3"
      - name: APPLICATION_ACCESS_LOG_FILE_MAX_FILES
        value: "3"
      - name: APPLICATION_AUDIT_LOG_FILE_MAX_FILES
        value: "3"
      - name: YANDEX_CLOUD_LOG_LEVEL
        value: debug
      - name: JAVA_TOOL_OPTIONS
        value: "-Xmx12500m -XX:-UseContainerSupport -Djavax.net.ssl.trustStore=/etc/kms/gpn-ca-certs -Djavax.net.ssl.trustStorePassword=changeit -Djava.net.preferIPv6Addresses=true -Dfile.encoding=UTF-8 -Xlog:gc*:file=/var/log/kms/gc.log:time,uptime:filecount=10,filesize=100M"
      # - name: YANDEX_CLOUD_ACCESS_LOG_LEVEL
      #   value: info
      volumeMounts:
      - name: kms-configs
        mountPath: /etc/kms
        readOnly: true
      - name: var-kms
        mountPath: /var/kms
        terminationGracePeriodSeconds: 30
      - name: var-log-kms
        mountPath: /var/log/kms
    volumes:
    - name: all-configs
      hostPath:
        path: /etc
        type: DirectoryOrCreate
    - name: kms-configs
      hostPath:
        path: /etc/kms
        type: DirectoryOrCreate
    - name: usr-local
      hostPath:
       path: /usr/local
       type: DirectoryOrCreate
    - name: var-kms
      hostPath:
        path: /var/kms
        type: DirectoryOrCreate
    - name: var-log-kms
      hostPath:
        path: /var/log/kms
        type: DirectoryOrCreate
- apiVersion: v1
  kind: Pod
  metadata:
    name: api-gateway
    namespace: kube-system
    labels:
      role: api
    annotations:
      config_digest: ${api_gateway_config_digest}
      scheduler.alpha.kubernetes.io/critical-pod: ""
  spec:
    priority: 2000000001
    priorityClassName: system-cluster-critical
    hostNetwork: true
    hostPID: true
    initContainers:
      - name: deploy-api-gateway-configs
        image: cr.yandex/crp7nvlkttssi7kapoho/infra/metadata:${metadata_version}
        command:
          - /usr/bin/metadata
          - --attribute-name
          - api-gateway-configs
        volumeMounts:
          - name: all-configs
            mountPath: /etc
            terminationGracePeriodSeconds: 30
    containers:
      - name: api-configserver
        image: cr.yandex/crp7nvlkttssi7kapoho/api/configserver:${config_server_version}
        resources:
          requests:
            memory: "128Mi"
          limits:
            memory: "128Mi"
        volumeMounts:
          - name: api-logs
            mountPath: /var/log/configserver
            terminationGracePeriodSeconds: 30
          - name: configserver-configs
            mountPath: /etc/configserver
            readOnly: true
          - name: etc-passwd
            mountPath: /etc/passwd
            readOnly: true
      - name: api-gateway
        image: cr.yandex/crp7nvlkttssi7kapoho/api/gateway:${api_gateway_version}
        resources:
          requests:
            memory: "128Mi"
          limits:
            memory: "128Mi"
        volumeMounts:
          - name: api-logs
            mountPath: /var/log/gateway
            terminationGracePeriodSeconds: 30
          - name: gateway-configs
            mountPath: /etc/gateway
            readOnly: true
          - name: etc-passwd
            mountPath: /etc/passwd
            readOnly: true
      - name: api-envoy
        image: cr.yandex/crp7nvlkttssi7kapoho/envoy:${envoy_version}
        command: ["/usr/bin/envoy", "-c", "/etc/api/envoy/envoy.yaml"]
        resources:
          requests:
            memory: "320Mi"
          limits:
            memory: "320Mi"
        volumeMounts:
          - name: api-logs
            mountPath: /var/log/api
            terminationGracePeriodSeconds: 30
          - name: envoy-configs
            mountPath: /etc/api/envoy
            readOnly: true
          - name: certs
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
      - name: private-envoy
        image: cr.yandex/crp7nvlkttssi7kapoho/envoy:${envoy_version}
        command: ["/usr/bin/envoy", "-c", "/etc/api/envoy/private-envoy.yaml", "--base-id", "1"]
        resources:
          requests:
            memory: "320Mi"
          limits:
            memory: "320Mi"
        volumeMounts:
          - name: api-logs
            mountPath: /var/log/api
            terminationGracePeriodSeconds: 30
          - name: envoy-configs
            mountPath: /etc/api/envoy
            readOnly: true
          - name: certs
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
      - name: techpark-envoy
        image: cr.yandex/crp7nvlkttssi7kapoho/envoy:${envoy_version}
        command: ["/usr/bin/envoy", "-c", "/etc/api/envoy/techpark-envoy.yaml", "--base-id", "3"]
        resources:
          requests:
            memory: "320Mi"
          limits:
            memory: "320Mi"
        volumeMounts:
          - name: api-logs
            mountPath: /var/log/api
            terminationGracePeriodSeconds: 30
          - name: envoy-configs
            mountPath: /etc/api/envoy
            readOnly: true
          - name: certs
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
    volumes:
      - name: configserver-configs
        hostPath:
          path: /etc/api/configserver
          type: DirectoryOrCreate
      - name: envoy-configs
        hostPath:
          path: /etc/api/envoy
          type: DirectoryOrCreate
      - name: certs
        hostPath:
          path: /usr/local/share/ca-certificates
          type: Directory
      - name: gateway-configs
        hostPath:
          path: /etc/api/gateway
          type: DirectoryOrCreate
      - name: api-logs
        hostPath:
          path: /var/log/api
          type: DirectoryOrCreate
      - name: all-configs
        hostPath:
          path: /etc
          type: DirectoryOrCreate
      - name: etc-passwd
        hostPath:
          path: /etc/passwd
