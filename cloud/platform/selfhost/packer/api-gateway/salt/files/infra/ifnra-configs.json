{
  "/etc/fluent/fluent.conf": {
    "content": "# This is the root config file, which only includes components of the actual configuration\n\n# Do not collect fluentd's own logs to avoid infinite loops.\n<match fluent.**>\n    @type null\n</match>\n\n@include /etc/fluent/config.d/*.conf\n"
  },
  "/etc/fluent/config.d/containers.input.conf": {
    "content": "# This configuration file for Fluentd / td-agent is used\n# to watch changes to Docker log files. The kubelet creates symlinks that\n# capture the pod name, namespace, container name & Docker container ID\n# to the docker logs for pods in the /var/log/containers directory on the host.\n# If running this fluentd configuration in a Docker container, the /var/log\n# directory should be mounted in the container.\n#\n# These logs are then submitted to Elasticsearch which assumes the\n# installation of the fluent-plugin-elasticsearch & the\n# fluent-plugin-kubernetes_metadata_filter plugins.\n# See https://github.com/uken/fluent-plugin-elasticsearch &\n# https://github.com/fabric8io/fluent-plugin-kubernetes_metadata_filter for\n# more information about the plugins.\n#\n# Example\n# =======\n# A line in the Docker log file might look like this JSON:\n#\n# {\"log\":\"2014/09/25 21:15:03 Got request with path wombat\\n\",\n#  \"stream\":\"stderr\",\n#   \"time\":\"2014-09-25T21:15:03.499185026Z\"}\n#\n# The time_format specification below makes sure we properly\n# parse the time format produced by Docker. This will be\n# submitted to Elasticsearch and should appear like:\n# $ curl 'http://elasticsearch-logging:9200/_search?pretty'\n# ...\n# {\n#      \"_index\" : \"logstash-2014.09.25\",\n#      \"_type\" : \"fluentd\",\n#      \"_id\" : \"VBrbor2QTuGpsQyTCdfzqA\",\n#      \"_score\" : 1.0,\n#      \"_source\":{\"log\":\"2014/09/25 22:45:50 Got request with path wombat\\n\",\n#                 \"stream\":\"stderr\",\"tag\":\"docker.container.all\",\n#                 \"@timestamp\":\"2014-09-25T22:45:50+00:00\"}\n#    },\n# ...\n#\n# The Kubernetes fluentd plugin is used to write the Kubernetes metadata to the log\n# record & add labels to the log record if properly configured. This enables users\n# to filter & search logs on any metadata.\n# For example a Docker container's logs might be in the directory:\n#\n#  /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b\n#\n# and in the file:\n#\n#  997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log\n#\n# where 997599971ee6... is the Docker ID of the running container.\n# The Kubernetes kubelet makes a symbolic link to this file on the host machine\n# in the /var/log/containers directory which includes the pod name and the Kubernetes\n# container name:\n#\n#    synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log\n#    ->\n#    /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log\n#\n# The /var/log directory on the host is mapped to the /var/log directory in the container\n# running this instance of Fluentd and we end up collecting the file:\n#\n#   /var/log/containers/synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log\n#\n# This results in the tag:\n#\n#  var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log\n#\n# The Kubernetes fluentd plugin is used to extract the namespace, pod name & container name\n# which are added to the log message as a kubernetes field object & the Docker container ID\n# is also added under the docker field object.\n# The final tag is:\n#\n#   kubernetes.var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log\n#\n# And the final log record look like:\n#\n# {\n#   \"log\":\"2014/09/25 21:15:03 Got request with path wombat\\n\",\n#   \"stream\":\"stderr\",\n#   \"time\":\"2014-09-25T21:15:03.499185026Z\",\n#   \"kubernetes\": {\n#     \"namespace\": \"default\",\n#     \"pod_name\": \"synthetic-logger-0.25lps-pod\",\n#     \"container_name\": \"synth-lgr\"\n#   },\n#   \"docker\": {\n#     \"container_id\": \"997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b\"\n#   }\n# }\n#\n# This makes it easier for users to search for logs by pod name or by\n# the name of the Kubernetes container regardless of how many times the\n# Kubernetes pod has been restarted (resulting in a several Docker container IDs).\n\n# Json Log Example:\n# {\"log\":\"[info:2016-02-16T16:04:05.930-08:00] Some log text here\\n\",\"stream\":\"stdout\",\"time\":\"2016-02-17T00:04:05.931087621Z\"}\n# CRI Log Example:\n# 2016-02-17T00:04:05.931087621Z stdout F [info:2016-02-16T16:04:05.930-08:00] Some log text here\n<source>\n  @id fluentd-containers.log\n  @type tail\n  path /var/log/containers/*.log\n  pos_file /var/log/fluentd-containers.log.pos\n  tag raw.kubelet.*\n  read_from_head true\n  <parse>\n    @type multi_format\n    <pattern>\n      format json\n      time_key time\n      time_format %Y-%m-%dT%H:%M:%S.%NZ\n    </pattern>\n    <pattern>\n      format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/\n      time_format %Y-%m-%dT%H:%M:%S.%N%:z\n    </pattern>\n  </parse>\n</source>\n\n# Detect exceptions in the log output and forward them as one log entry.\n<match raw.kubelet.**>\n  @id raw.kubelet\n  @label @CONTAINERS\n  @type detect_exceptions\n  remove_tag_prefix raw\n  message log\n  stream stream\n  multiline_flush_interval 5\n  max_bytes 500000\n  max_lines 1000\n</match>\n"
  },
  "/etc/fluent/config.d/system.input.conf": {
    "content": "# Example:\n# 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081\n<source>\n  @id minion\n  @type tail\n  @label @SYSTEMD\n  format /^(?<time>[^ ]* [^ ,]*)[^\\[]*\\[[^\\]]*\\]\\[(?<severity>[^ \\]]*) *\\] (?<message>.*)$/\n  time_format %Y-%m-%d %H:%M:%S\n  path /var/log/salt/minion\n  pos_file /var/log/salt.pos\n  tag salt\n</source>\n\n# Example:\n# Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script\n<source>\n  @id startupscript.log\n  @type tail\n  @label @SYSTEMD\n  format syslog\n  path /var/log/startupscript.log\n  pos_file /var/log/es-startupscript.log.pos\n  tag startupscript\n</source>\n\n# Examples:\n# time=\"2016-02-04T06:51:03.053580605Z\" level=info msg=\"GET /containers/json\"\n# time=\"2016-02-04T07:53:57.505612354Z\" level=error msg=\"HTTP Error\" err=\"No such image: -f\" statusCode=404\n# TODO(random-liu): Remove this after cri container runtime rolls out.\n<source>\n  @id docker.log\n  @type tail\n  @label @SYSTEMD\n  format /^time=\"(?<time>[^)]*)\" level=(?<severity>[^ ]*) msg=\"(?<message>[^\"]*)\"( err=\"(?<error>[^\"]*)\")?( statusCode=($<status_code>\\d+))?/\n  path /var/log/docker.log\n  pos_file /var/log/es-docker.log.pos\n  tag docker\n</source>\n\n# Example:\n# 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal\n<source>\n  @id etcd.log\n  @type tail\n  @label @SYSTEMD\n  # Not parsing this, because it doesn't have anything particularly useful to\n  # parse out of it (like severities).\n  format none\n  path /var/log/etcd.log\n  pos_file /var/log/es-etcd.log.pos\n  tag etcd\n</source>\n\n# Multi-line parsing is required for all the kube logs because very large log\n# statements, such as those that include entire object bodies, get split into\n# multiple lines by glog.\n\n# Example:\n# I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]\n<source>\n  @id kubelet.log\n  @type tail\n  @label @SYSTEMD\n  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/kubelet.log\n  pos_file /var/log/es-kubelet.log.pos\n  tag kubelet\n</source>\n\n# Example:\n# I1118 21:26:53.975789       6 proxier.go:1096] Port \"nodePort for kube-system/default-http-backend:http\" (:31429/tcp) was open before and is still needed\n<source>\n  @id kube-proxy.log\n  @type tail\n  @label @SYSTEMD\n  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/kube-proxy.log\n  pos_file /var/log/es-kube-proxy.log.pos\n  tag kube-proxy\n</source>\n\n# Example:\n# I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]\n<source>\n  @id kube-apiserver.log\n  @type tail\n  @label @SYSTEMD\n  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/kube-apiserver.log\n  pos_file /var/log/es-kube-apiserver.log.pos\n  tag kube-apiserver\n</source>\n\n# Example:\n# I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui\n<source>\n  @id kube-controller-manager.log\n  @type tail\n  @label @SYSTEMD\n  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/kube-controller-manager.log\n  pos_file /var/log/es-kube-controller-manager.log.pos\n  tag kube-controller-manager\n</source>\n\n# Example:\n# W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]\n<source>\n  @id kube-scheduler.log\n  @type tail\n  @label @SYSTEMD\n  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/kube-scheduler.log\n  pos_file /var/log/es-kube-scheduler.log.pos\n  tag kube-scheduler\n</source>\n\n# Example:\n# I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf\n<source>\n  @id glbc.log\n  @type tail\n  @label @SYSTEMD\n  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/glbc.log\n  pos_file /var/log/es-glbc.log.pos\n  tag glbc\n</source>\n\n# Example:\n# I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf\n<source>\n  @id cluster-autoscaler.log\n  @type tail\n  @label @SYSTEMD\n  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/cluster-autoscaler.log\n  pos_file /var/log/es-cluster-autoscaler.log.pos\n  tag cluster-autoscaler\n</source>\n\n# Logs from systemd-journal for interesting services.\n# TODO(random-liu): Remove this after cri container runtime rolls out.\n<source>\n  @id journald-docker\n  @type systemd\n  @label @SYSTEMD\n  matches [{ \"_SYSTEMD_UNIT\": \"docker.service\" }]\n  <storage>\n    @type local\n    persistent true\n    path /var/log/journald-docker.pos\n  </storage>\n  read_from_head true\n  tag docker\n</source>\n\n<source>\n  @id journald-container-runtime\n  @type systemd\n  @label @SYSTEMD\n  matches [{ \"_SYSTEMD_UNIT\": \"{{ fluentd_container_runtime_service }}.service\" }]\n  <storage>\n    @type local\n    persistent true\n    path /var/log/journald-container-runtime.pos\n  </storage>\n  read_from_head true\n  tag container-runtime\n</source>\n\n<source>\n  @id journald-kubelet\n  @type systemd\n  @label @SYSTEMD\n  matches [{ \"_SYSTEMD_UNIT\": \"kubelet.service\" }]\n  <storage>\n    @type local\n    persistent true\n    path /var/log/journald-kubelet.pos\n  </storage>\n  read_from_head true\n  tag kubelet\n</source>\n\n<source>\n  @id journald-node-problem-detector\n  @type systemd\n  @label @SYSTEMD\n  matches [{ \"_SYSTEMD_UNIT\": \"node-problem-detector.service\" }]\n  <storage>\n    @type local\n    persistent true\n    path /var/log/journald-node-problem-detector.pos\n  </storage>\n  read_from_head true\n  tag node-problem-detector\n</source>\n\n<source>\n  @id kernel\n  @type systemd\n  @label @KERNEL\n  matches [{ \"_TRANSPORT\": \"kernel\" }]\n  <storage>\n    @type local\n    persistent true\n    path /var/log/kernel.pos\n  </storage>\n  <entry>\n    fields_strip_underscores true\n    fields_lowercase true\n  </entry>\n  read_from_head true\n  tag kernel\n</source>\n"
  },
  "/etc/fluent/config.d/monitoring.conf": {
    "content": "# Prometheus Exporter Plugin\n# input plugin that exports metrics\n<source>\n  @type prometheus\n</source>\n\n<source>\n  @type monitor_agent\n</source>\n\n# input plugin that collects metrics from MonitorAgent\n<source>\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n# input plugin that collects metrics for output plugin\n<source>\n  @type prometheus_output_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n# input plugin that collects metrics for in_tail plugin\n<source>\n  @type prometheus_tail_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n"
  },
  "/etc/fluent/config.d/output.conf": {
    "content": "<label @CONTAINERS>\n    # Enriches records with Kubernetes metadata\n    <filter kubelet.**>\n      @type kubernetes_metadata\n    </filter>\n\n    Concatenate multi-line logs\n    <filter **>\n      @type concat\n      key message\n      multiline_end_regexp /\\n$/\n      separator \"\"\n    </filter>\n\n    <match kubelet.**>\n      @type rewrite_tag_filter\n\n      <rule>\n        key $.kubernetes.pod_name\n        pattern /^(.+)$/\n        tag $1.log\n      </rule>\n    </match>\n\n    <match *.log>\n      @type rewrite_tag_filter\n      <rule>\n        key stream\n        key $.kubernetes.container_name\n        pattern /^(.+)$/\n        tag $1.${tag}\n      </rule>\n    </match>\n\n    <match *.*.log>\n      @type rewrite_tag_filter\n      <rule>\n        key stream\n        pattern /^(.+)$/\n        tag $1.${tag}\n      </rule>\n    </match>\n\n    #<match **>\n    #  @type stdout\n    #</match>\n\n    <match stdout.**>\n      @id stdout\n      @type copy\n#      <store>\n#        @type file\n#        path  /var/log/fluent/${tag}.%Y%m%d\n#        append true\n#        include_tag_key true\n#        <buffer tag,time>\n#          @type memory\n#          time_slice_format %Y%m%d\n#          flush_mode interval\n#          retry_type exponential_backoff\n#          flush_thread_count 1\n#          flush_interval 5s\n#          retry_forever\n#          retry_max_interval 30\n#          chunk_limit_size 1MB\n#          total_limit_size 8MB\n#          queue_limit_length 8\n#          overflow_action throw_exception\n#        </buffer>\n#      </store>\n\n      <store>\n        @type file\n        path  /var/log/fluent/access_log.${tag[1]}.%Y%m%d\n        append true\n        include_tag_key true\n        <format>\n          @type single_value\n          add_newline false\n          message_key log\n        </format>\n        <buffer tag,time>\n          @type memory\n          time_slice_format %Y%m%d\n          flush_mode interval\n          retry_type exponential_backoff\n          flush_thread_count 1\n          flush_interval 5s\n          retry_forever\n          retry_max_interval 30\n          chunk_limit_size 1MB\n          total_limit_size 8MB\n          queue_limit_length 8\n          overflow_action throw_exception\n        </buffer>\n      </store>\n    </match>\n\n    <match stderr.**>\n      @id stderr\n      @type copy\n#      <store>\n#        @type file\n#        path  /var/log/fluent/${tag}.%Y%m%d\n#        append true\n#        include_tag_key true\n#        <buffer tag,time>\n#          @type memory\n#          time_slice_format %Y%m%d\n#          flush_mode interval\n#          retry_type exponential_backoff\n#          flush_thread_count 1\n#          flush_interval 5s\n#          retry_forever\n#          retry_max_interval 30\n#          chunk_limit_size 1MB\n#          total_limit_size 8MB\n#          queue_limit_length 8\n#          overflow_action throw_exception\n#        </buffer>\n#      </store>\n\n      <store>\n        @type file\n        path  /var/log/fluent/error_log.${tag[1]}.%Y%m%d\n        append true\n        include_tag_key true\n        <format>\n          @type single_value\n          add_newline false\n          message_key log\n        </format>\n        <buffer tag,time>\n          @type memory\n          time_slice_format %Y%m%d\n          flush_mode interval\n          retry_type exponential_backoff\n          flush_thread_count 1\n          flush_interval 5s\n          retry_forever\n          retry_max_interval 30\n          chunk_limit_size 1MB\n          total_limit_size 8MB\n          queue_limit_length 8\n          overflow_action throw_exception\n        </buffer>\n      </store>\n    </match>\n</label>\n\n<label @KERNEL>\n    <match kernel**>\n      @id kernel_output\n      @type file\n      path  /var/log/fluent/kernel.log.%Y%m%d\n      append true\n      include_tag_key true\n      <buffer>\n        @type memory\n        time_slice_format %Y%m%d\n        flush_mode interval\n        retry_type exponential_backoff\n        flush_thread_count 1\n        flush_interval 10s\n        retry_forever\n        retry_max_interval 30\n        chunk_limit_size 1MB\n        total_limit_size 8MB\n        queue_limit_length 8\n        overflow_action throw_exception\n      </buffer>\n    </match>\n</label>\n\n<label @SYSTEMD>\n    # Concatenate multi-line logs\n    <filter **>\n      @type concat\n      key message\n      multiline_end_regexp /\\n$/\n      separator \"\"\n    </filter>\n\n    <match **>\n      @id system_output\n      @type file\n      path  /var/log/fluent/system.${tag}.%Y%m%d\n      append true\n      include_tag_key true\n      <buffer tag,time>\n        @type memory\n        time_slice_format %Y%m%d\n        flush_mode interval\n        retry_type exponential_backoff\n        flush_thread_count 1\n        flush_interval 5s\n        retry_forever\n        retry_max_interval 30\n        chunk_limit_size 1MB\n        total_limit_size 8MB\n        queue_limit_length 8\n        overflow_action throw_exception\n      </buffer>\n    </match>\n</label>\n\n<match **>\n  @id output\n  @type file\n  path  /var/log/fluent/output.${tag}.%Y%m%d\n  append true\n  include_tag_key true\n  <buffer tag,time>\n    @type memory\n    time_slice_format %Y%m%d\n    flush_mode interval\n    retry_type exponential_backoff\n    flush_thread_count 1\n    flush_interval 5s\n    retry_forever\n    retry_max_interval 30\n    chunk_limit_size 1MB\n    total_limit_size 8MB\n    queue_limit_length 8\n    overflow_action throw_exception\n  </buffer>\n</match>\n"
  },
  "/etc/yandex/statbox-push-client/push-client.yaml": {
    "content": "---\nident: yc_api\n\nnetwork:\n  master-addr: logbroker.yandex.net\n  proto: rt\n\nlogger:\n  mode: stderr\n\nwatcher:\n  state: /var/spool/push-client\n\nfiles:\n  - name: /var/log/fluent/access_log.api-als*.log\n    log-type: yc-api-request-log\n\n  - name: /var/log/fluent/access_log.api-gateway*.log\n    log-type: yc-api-request-log\n"
  },
  "/etc/api/configs/juggler-client/MANIFEST.json": {
    "content": "{\n  \"build_number\": 370368689,\n  \"bundle_name\": \"cloud-platform-juggler-client-bundle\",\n  \"checks\": [\n    {\n      \"args\": [],\n      \"check_name\": \"freespace.py\",\n      \"check_script\": \"freespace.py\",\n      \"format\": \"nagios\",\n      \"interval\": 300,\n      \"run_always\": false,\n      \"services\": [\n        \"freespace\"\n      ],\n      \"timeout\": 30\n    },\n    {\n      \"args\": [],\n      \"check_name\": \"coredumps.py\",\n      \"check_script\": \"coredumps.py\",\n      \"format\": \"nagios\",\n      \"interval\": 300,\n      \"run_always\": false,\n      \"services\": [\n        \"coredumps\"\n      ],\n      \"timeout\": 30\n    },\n    {\n      \"args\": [],\n      \"check_name\": \"oom-killer.sh\",\n      \"check_script\": \"oom-killer.sh\",\n      \"format\": \"nagios\",\n      \"interval\": 300,\n      \"run_always\": false,\n      \"services\": [\n        \"oom-killer\"\n      ],\n      \"timeout\": 30\n    },\n    {\n      \"args\": [],\n      \"check_name\": \"reboot-count.py\",\n      \"check_script\": \"reboot-count.py\",\n      \"format\": \"nagios\",\n      \"interval\": 300,\n      \"run_always\": false,\n      \"services\": [\n        \"reboot-count\"\n      ],\n      \"timeout\": 30\n    },\n    {\n      \"args\": [],\n      \"check_name\": \"solomon-agent.py\",\n      \"check_script\": \"solomon-agent.py\",\n      \"format\": \"nagios\",\n      \"interval\": 300,\n      \"run_always\": false,\n      \"services\": [\n        \"solomon-agent\"\n      ],\n      \"timeout\": 30\n    },\n    {\n      \"check_script\": \"push-client.sh\",\n      \"services\": [\"push-client\"],\n      \"timeout\": 30\n    }\n    ,{\n      \"args\": [\n        \"--service\",\n        \"envoy-healthcheck\"\n      ],\n      \"check_name\": \"platform-http-check.py\",\n      \"check_script\": \"platform-http-check.py\",\n      \"format\": \"nagios\",\n      \"interval\": 30,\n      \"run_always\": false,\n      \"services\": [\n        \"envoy-healthcheck\"\n      ],\n      \"timeout\": 30\n    }\n\n  ],\n  \"env\": {\n    \"USER\": \"root\"\n  },\n  \"timestamp\": 1548873135,\n  \"version\": 1\n}\n"
  },
  "/etc/api/configs/juggler-client/platform-http-check.json": {
    "content": "{\n  \"envoy-healthcheck\": {\n    \"port\": 4486,\n    \"scheme\": \"http\",\n    \"path\": \"/\"\n  }\n}"
  },
  "/etc/api/configs/juggler-client/juggler-client.conf": {
    "content": "[client]\nconfig_url=http://juggler-api.search.yandex.net\ntargets=AUTO\nchecks_discover_dirs=/juggler-bundle\n"
  },
  "/etc/metricsagent/metricsagent.yaml": {
    "content": "add_host_label: yes\nlog:\n  level: INFO\npuller:\n  metrics_buffer: 1\n  scrape_interval: 15s\n  scrape_timeout: 5s\npushers:\n- type: SOLOMON\n  batch_size: 9000\n  push_timeout: \"120s\"\n  url: \"http://solomon.cloud.yandex-team.ru/push\"\n  project: \"platform\"\n  cluster: \"cloud_preprod_api-gateway\"\n  service: \"api_gateway_ma\"\n  sources:\n  - url: http://localhost:9998/metrics\n- type: SOLOMON\n  batch_size: 9000\n  push_timeout: \"120s\"\n  url: \"http://solomon.cloud.yandex-team.ru/push\"\n  project: \"platform\"\n  cluster: \"cloud_preprod_api-gateway\"\n  service: \"api_envoy_ma\"\n  sources:\n  - url: http://localhost:9102/metrics\n- type: SOLOMON\n  batch_size: 9000\n  push_timeout: \"120s\"\n  url: \"http://solomon.cloud.yandex-team.ru/push\"\n  project: \"platform\"\n  cluster: \"cloud_preprod_api-gateway\"\n  service: \"api-als_ma\"\n  sources:\n  - url: http://localhost:4437/metrics\n- type: SOLOMON\n  batch_size: 9000\n  push_timeout: \"120s\"\n  url: \"http://solomon.cloud.yandex-team.ru/push\"\n  project: \"platform\"\n  cluster: \"cloud_preprod_api-gateway\"\n  service: \"kubelet_ma\"\n  sources:\n  - url: http://localhost:10255/metrics\n- type: SOLOMON\n  batch_size: 9000\n  push_timeout: \"120s\"\n  url: \"http://solomon.cloud.yandex-team.ru/push\"\n  project: \"platform\"\n  cluster: \"cloud_preprod_api-gateway\"\n  service: \"node-exporter_ma\"\n  sources:\n  - url: http://localhost:9100/metrics\n"
  }
}
