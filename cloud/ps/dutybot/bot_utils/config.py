import logging
import os.path
import sys

import environ
import requests
import yaml

CFG_PATH = "config.yaml"


def get_current_az():
    r = requests.get("http://169.254.169.254/latest/meta-data/placement/availability-zone")
    r.raise_for_status()
    return r.text


TEST_CONFIG = {
    'database': {
        'name': '',
        'user': '',
        'pass': '',
        'host': '',
        'port': '',
    },
    'telegram': {
        'prod': '',
        'preprod': '',
        'debug': '',
    },
    'yandex_messenger': {
        'prod': '',
    },
    'auth': {
        'staff': '',
        'st': '',
    },
    'other': {
        'useragent': '',
        'tracker_endpoint': '',
        'staff_endpoint': '',
        'department': '',
        'resps_endpoint': '',
    },
    'chats': [],
}
IS_CODE_BEING_TESTED = 'pytest' in sys.modules


class Config:
    env = environ.Env()

    # The solution isn't an elegant one, however, it unblocks the testing
    # Refactoring of that class is highly advised
    if IS_CODE_BEING_TESTED:
        cfg = TEST_CONFIG
    else:
        if not os.path.isfile(CFG_PATH):
            logging.fatal("[config] Config file was not found!")
            raise FileNotFoundError()

        with open(CFG_PATH, "r") as cfg:
            cfg = yaml.safe_load(cfg)

    # Database
    db_name = cfg['database']['name']
    db_user = cfg['database']['user']
    db_pass = cfg['database']['pass']
    db_host = cfg['database']['host']
    db_port = cfg['database']['port']

    # Telegram
    tg_prod = cfg['telegram']['prod']
    tg_preprod = cfg['telegram']['preprod']
    tg_debug = cfg['telegram']['debug']

    # Yandex.Messenger
    yandex_messenger_prod = cfg['yandex_messenger']['prod']

    # Yandex services oAuth-tokens
    ya_staff = cfg['auth']['staff']
    ya_tracker = cfg['auth']['st']

    # Other
    useragent = cfg['other']['useragent']
    tracker_endpoint = cfg['other']['tracker_endpoint']
    staff_endpoint = cfg['other']['staff_endpoint']
    cloud_department = cfg['other']['department']
    resps_endpoint = cfg['other']['resps_endpoint']
    priority_types_startrek = {
        "1": "–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π",
        "2": "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π",
        "3": "–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π",
        "4": "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π",
        "5": "–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π",
    }

    # Chats parser
    well_known_chats = cfg["chats"]

    # Fake teams list
    vpc_text = [
        "–ö–æ–º–∞–Ω–¥–∞ VPC –ø–µ—Ä–µ—à–ª–∞ –∫ [—Ä–∞–∑–¥–µ–ª—å–Ω—ã–º –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º](https://clubs.at.yandex-team.ru/ycp/3154)\n",
        "‚Äî `/duty vpc-api` ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API, Terraform, –∫–≤–æ—Ç—ã –∏ –ª–∏–º–∏—Ç—ã, –æ—à–∏–±–∫–∏ —Ç–∏–ø–∞ Permission Denied –æ—Ç VPC,",
        "‚Äî `/duty overlay` ‚Äî —Å–≤—è–∑–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ –û–±–ª–∞–∫–∞, –¥–æ—Å—Ç—É–ø –¥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω, —Ä–∞–±–æ—Ç–∞ Security Groups –∏ Static Routes, "
        "HBF, e2e-–≤–∏—Ä—Ç—É–∞–ª–∫–∏ ¬´–ø–µ—Ä–º–Ω–µ—Ç—ã¬ª –∏ ¬´–º–∏—Å–∏–∫—Å—ã¬ª, network-flow-collector –∏ –±–∏–ª–ª–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞, "
        "—Å–µ—Ç–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –í–ú: DHCP –∏ Metadata.",
        "‚Äî `/duty cgw` ‚Äî –≤–Ω–µ—à–Ω—è—è —Å–≤—è–∑–Ω–æ—Å—Ç—å, Cloud Interconnect, NAT –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ L3-–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫,",
        "‚Äî `/duty netinfra` ‚Äî —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è (¬´–∂–µ–ª–µ–∑–Ω–∞—è¬ª) —Å–µ—Ç—å, —Å—Ç—ã–∫ –û–±–ª–∞–∫–∞ —Å –≤–Ω–µ—à–Ω–∏–º –º–∏—Ä–æ–º, –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–º,"
        "‚Äî `/duty vpc-pm` ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏—á –∏ –¥—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã.",
    ]
    fake_teams = {
        "vpc": vpc_text,
        "vpc-all": vpc_text,
        "ycp": [
            "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —É—Ç–∏–ª–∏—Ç—É `ycp` –∏—â–∏—Ç–µ –Ω–∞ [–≤–∏–∫–∏](https://wiki.yandex-team.ru/cloud/devel/platform-team/dev/ycp).",
            "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ [—á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ API self-service](https://t.me/joinchat/P0uloEwF29M81BfJukEO1g).",
            "–ï—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–∏–∑—ã–≤–∞–π—Ç–µ —Ç–∞–º [skipor_yandex](https://t.me/skipor_yandex).",
        ],
        "ui": [
            "–ï—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã UI:\n",
            "‚Äî `/duty console` ‚Äî –∫–æ–Ω—Å–æ–ª—å, –Ω–æ—Ç–∏—Ñ–∞–π",
            "‚Äî `/duty backoffice` ‚Äî –±—ç–∫–æ—Ñ–∏—Å, –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç, –ø–æ—Ä—Ç–∞–ª, —Å—Ç–∞—Ç—É—Å–±–æ—Ä–¥, –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        ],
        "datalens": [
            "–ï—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã DataLens:\n",
            "‚Äî `/duty datalens-front` ‚Äî –≤—Å–µ –ø—Ä–æ UI, –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
            "‚Äî `/duty datalens-back` ‚Äî –∑–∞–ø—Ä–æ—Å—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Ñ–æ—Ä–º—É–ª—ã, –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è, –±–∏–ª–ª–∏–Ω–≥",
            "‚Äî `/duty datalens-product` ‚Äî –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ä–∞–±–æ—Ç–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
        ],
        "compute": [
            "–ö–æ–º–∞–Ω–¥–∞ compute –ø–µ—Ä–µ—à–ª–∞ –∫ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º.",
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å –≤–∏–¥–∞:",
            "‚Äî —è —Ö–æ—á—É –Ω–æ–≤—É—é —Ñ–∏—á—É –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ –ø–æ –¥–∞–≤–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–π,",
            "‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ –ø–æ–ø–ª–æ—Ö–µ–ª–æ,",
            "‚Äî –æ–ø–µ—Ä–∞—Ü–∏—è –≤–∏—Å–∏—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ,",
            "‚Äî –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ `ResourceExhausted` –∏–ª–∏ `QuotaExceeded`,",
            "—Ç–æ –æ—Ç–≤–µ—Ç—ã –º–æ–∂–Ω–æ –ø–æ–∏—Å–∫–∞—Ç—å [–Ω–∞ –≤–∏–∫–∏](https://wiki.yandex-team.ru/cloud/compute/duty/how-to-support/).\n",
            "–ï—Å–ª–∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏–∫–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–æ –∑–∞–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ç –∏–∑ [—Ñ–æ—Ä–º—ã](https://st.yandex-team.ru/createTicket?queue=COMPUTESUPPORT&_form=76344),",
            " –∏ –¥–µ–∂—É—Ä–Ω—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.\n",
            "**–ï—Å–ª–∏ —É –≤–∞—Å —Ñ–∞–∫–∞–ø,** —Ç–æ [–≤–æ—Ç –∑–¥–µ—Å—å](https://wiki.yandex-team.ru/cloud/compute/duty/how-to-support/v-sluchae-fakapa/) –æ–ø–∏—Å–∞–Ω–æ, –∫–æ–≥–æ –∏ –≤ –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏–∑—ã–≤–∞—Ç—å.",
        ],
    }

    use_webhook = env.bool("USE_WEBHOOK", False)
    if use_webhook:
        telegram_webhook_url = env.str("TELEGRAM_WEBHOOK_URL", "")
        yandex_messenger_webhook_url = env.str("YANDEX_MESSENGER_WEBHOOK_URL", "")

    # It's some kind of hack. In production environment we have 3 instances with bot, one in each AZ (availability zone).
    # We have to run regular jobs (like a sending reminders about future duties) only from one of them.
    # So we use special environment variable $RUN_REGULAR_JOBS_ON_AZ with value "ru-central1-a" and check
    # that it's a substring of current instances' AZ.
    # And yes, this scheme doesn't work if there is more than one instance in one AZ.
    # In the future, we just need to make this place better.
    run_regular_jobs_on_az = env.str("RUN_REGULAR_JOBS_ON_AZ", "")
    if run_regular_jobs_on_az:
        run_regular_jobs = run_regular_jobs_on_az in get_current_az()
    else:
        # If environment variable is not set, then it's a local run.
        run_regular_jobs = True

    DUTY_SCORE_LIST = (
        "–í—Å–µ –ø–ª–æ—Ö–æ üôÅ  –î–∞–≤–∞–π—Ç–µ —á–∏–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å...",
        "–¢—è–∂–µ–ª–æ, –Ω–æ –∂–∏—Ç—å –±—É–¥—É",
        "–í —Ü–µ–ª–æ–º –Ω–æ—Ä–º...",
        "–õ–µ–≥–∫–æ!",
        "–ù–µ–∑–∞–º–µ—Ç–Ω–æ üôÇ",
    )

    # IM's meeting
    PING_CLOUDINC_FILTER = 'Queue: "YC Incidents" Tags: "inc-report:report-ready" tags: ! "inc-report:done" CLOUDINC."Meeting Date": <= today()'
    TODAY_CLOUDINC_FILTER = 'Queue: "YC Incidents" Tags: "inc-report:report-ready" tags: ! "inc-report:done" CLOUDINC."Meeting Date": today()'
    FUTURE_CLOUDINC_FILTER = 'Queue: "YC Incidents" Tags: "inc-report:report-ready" tags: ! "inc-report:done" CLOUDINC."Meeting Date": > today()'
    NO_ANSWER_CLOUDINC_FILTER = 'Queue: "YC Incidents" Tags: "inc-report:report-ready" tags: ! "inc-report:done" CLOUDINC."Meeting Date": < today()'

    shift_translate = {
        1: "–∑–∞–≤—Ç—Ä–∞",
        2: "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞",
        7: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    }

    WORKDAYS = tuple(range(5))
