// Code generated by MockGen. DO NOT EDIT.
// Source: a.yandex-team.ru/cloud/ps/gore/pkg/abc (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	auth "a.yandex-team.ru/cloud/ps/gore/internal/pkg/auth"
	abc "a.yandex-team.ru/cloud/ps/gore/pkg/abc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockClient) Authenticate(arg0 auth.AuthType, arg1 string) abc.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(abc.Client)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockClientMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockClient)(nil).Authenticate), arg0, arg1)
}

// GetShifts mocks base method.
func (m *MockClient) GetShifts(arg0, arg1 time.Time, arg2, arg3 uint64) ([]abc.Shift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShifts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]abc.Shift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShifts indicates an expected call of GetShifts.
func (mr *MockClientMockRecorder) GetShifts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShifts", reflect.TypeOf((*MockClient)(nil).GetShifts), arg0, arg1, arg2, arg3)
}
