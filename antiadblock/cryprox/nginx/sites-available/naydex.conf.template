limit_req_zone $binary_remote_addr zone=naydex_perip:50m rate=800r/s;

server {
    listen                      0.0.0.0:80;
    listen                      [::]:80;

    resolver                    [::1];
    log_subrequest on;

    server_name                 *.test.naydex.net *.naydex.net naydex.net
                                *.test.cdnclab.net *.cdnclab.net cdnclab.net
                                *.test.clstorage.net *.clstorage.net clstorage.net
                                *.test.static-storage.net *.static-storage.net static-storage.net
                                *.test.naydex-net.ru *.naydex-net.ru naydex-net.ru
                                *.test.cdnclab-net.ru *.cdnclab-net.ru cdnclab-net.ru
                                *.test.clstorage-net.ru *.clstorage-net.ru clstorage-net.ru
                                *.test.static-storage-net.ru *.static-storage-net.ru static-storage-net.ru
                                ;

    proxy_buffering             on;
    proxy_buffer_size           64k;
    proxy_buffers               8 16k;
    proxy_busy_buffers_size     64k;
    proxy_max_temp_file_size    0;
    merge_slashes               off;
    proxy_connect_timeout       60s;
    proxy_read_timeout          60s;
    proxy_send_timeout          60s;
    large_client_header_buffers 4 16k;
    brotli on;

    ${RATELIMIT}
    # For static-mon lib download accel-redirect
    location ~ /proxy/https://static-mon.yandex.net/.* {
        internal;
        rewrite /proxy/https://static-mon.yandex.net(/.*) $1 break;
        proxy_pass                  http://[::1];
        proxy_cache                 off;
        proxy_ignore_client_abort   off;
        proxy_pass_request_body     on;
        proxy_intercept_errors      on;
        proxy_set_header            x-aab-proxy         0;
        proxy_set_header            Host                static-mon.yandex.net;
        proxy_set_header            X-Forwarded-Proto   $http_x_forwarded_proto;
    }

    location ~ /proxy/https://static-mon.yandex-net.ru/.* {
        internal;
        rewrite /proxy/https://static-mon.yandex-net.ru(/.*) $1 break;
        proxy_pass                  http://[::1];
        proxy_cache                 off;
        proxy_ignore_client_abort   off;
        proxy_pass_request_body     on;
        proxy_intercept_errors      on;
        proxy_set_header            x-aab-proxy         0;
        proxy_set_header            Host                static-mon.yandex-net.ru;
        proxy_set_header            X-Forwarded-Proto   $http_x_forwarded_proto;
    }

    # For Internal Accel-Redirect
    location ~ ^/proxy/(.*) {
        internal;
        set $is_accel_redirect 1;
        set $decrypted_url $1;
        set $service_id $upstream_http_x_aab_serviceid;
        set $response_body "";
        body_filter_by_lua_block {
            if ngx.ctx.loggable == 1 then
                local resp_body = string.sub(ngx.arg[1], 1)
                ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
                if ngx.arg[2] then
                    ngx.var.response_body = ngx.ctx.buffered
                end
            end
        }
        # Внутренних партнеров резолвим через NAT64 DNS, т.к. IPv4 тунель не пропускает запросы внутри сети
        # Здесь в качестве резолвера используется ip-адрес ns64-cache.yandex.net
        resolver ${EXTERNAL_RESOLVER} ipv6=on;
        ${ACCELREDIRECT_TARGET}
        proxy_cache                 off;
        proxy_ignore_client_abort   off;
        proxy_pass_request_body     on;
        proxy_intercept_errors      on;
        proxy_set_header            x-aab-proxy 1;
        error_page 301 302 307 = @handle_redirects;
    }

    location @handle_redirects {
        # Внутренних партнеров резолвим через NAT64 DNS, т.к. IPv4 тунель не пропускает запросы внутри сети
        # Здесь в качестве резолвера используется ip-адрес ns64-cache.yandex.net
        resolver ${EXTERNAL_RESOLVER} ipv6=on;
        set $saved_redirect_location     '$upstream_http_location';
        proxy_set_header                 x-aab-proxy 1;
        proxy_pass                       $saved_redirect_location;
    }

    # by default
    location / {
        access_by_lua_block{
            ngx.var.service_id = get_service_id_from_naydex(ngx.var.host);
        }
        # cycle requests protection
        if ($http_x_aab_proxy = "1") {
            return 400;
        }

        if ($http_origin) {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # Need to prevent CORS errors in caching case . See ANTIADB-2604 for details.
            add_header                  Vary                'Origin, $upstream_http_vary' always;
            more_clear_headers          "Vary";
        }

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' $http_access_control_request_headers,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-AAB-HTTP-Check always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 200;
        }

        # bamboozled
        if ($http_x_aab_http_check) {
            set $is_bamboozled true;
            echo_read_request_body;
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }

        proxy_pass                  http://${CRYPROX};
        proxy_cache                 off;
        proxy_ignore_client_abort   off;
        proxy_set_header            Host                  $host;
        ${PROXY_ADD_X_FORWARDED_FOR}
        proxy_set_header            X-AAB-RequestId       $aab_requestid;
        proxy_set_header            X-AAB-Loggablefull    $loggable;
        # Remove 'Access-Control-Allow-Origin' from proxied request to avoid duplicates
        proxy_hide_header           Access-Control-Allow-Origin;
        proxy_pass_request_body     on;

        proxy_http_version          1.1;

        # Need to prevent CORS errors in caching case. See ANTIADB-2604 for details.
        add_header                  Vary                'Origin, $upstream_http_vary' always;
        more_clear_headers          "Vary";
    }

}
