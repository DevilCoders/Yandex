// https://razladki-wow.n.yandex-team.ru/workspace/1694/version/3
// * Complex algorithm [Bool]
// **** Load single series
let __data__input = single({project='Antiadblock', cluster='cryprox-prod', service='antiadblock_nginx', service_id='*', host='cluster', browser='ALL', sensor='request_aggregate', status='2XX_sum'});
// *** Downsample timeseries
let __data = drop_tail(group_by_time(60s, 'avg', __data__input), 1);
let __data__downsample = last(__data);
// **** From var [Timeseries]
let __has_h_data__input = __data;
// *** Has recent data
let __has_h_data = last(get_timestamps(__has_h_data__input)) + 3600 > time_interval_end();
// **** From var [Timeseries]
let __has_m_data__input = __data;
// *** Has recent data
let __has_m_data = last(get_timestamps(__has_m_data__input)) + 600 > time_interval_end();
// ****** From var [Timeseries]
let __rps___i_input = __data;
// ***** Tail
let __rps___input_vec = tail(__rps___i_input, 1200s);
// ******* From var [Timeseries]
let __rps___s__input = __data;
// ****** Drop tail
let __rps___s_train = drop_tail(__rps___s__input, 86400s);
// ***** Seasonal
let __rps___mean_vec = seasonal_mean(__rps___s_train, __rps___input_vec, 12, 'work', 10800s, 0.0);
let __rps___std_vec = transform(seasonal_variance(__rps___s_train, __rps___input_vec, 12, 'work', 10800s, 0.0), 'sqrt');
// **** LearnThreshold
let __rps___mean = last(__rps___mean_vec);
let __rps___lower_vec_crit = __rps___mean_vec + (-6.0) * __rps___std_vec;
let __rps___upper_vec_crit = __rps___mean_vec + (4.0) * __rps___std_vec;
let __rps___lower_crit = last(__rps___lower_vec_crit);
let __rps___upper_crit = last(__rps___upper_vec_crit);
let __rps___lower_bad_crit = transform(__rps___lower_vec_crit - __rps___input_vec, 'heaviside');
let __rps___upper_bad_crit = transform(__rps___input_vec - __rps___upper_vec_crit, 'heaviside');
let __rps___out_crit = __rps___lower_bad_crit + __rps___upper_bad_crit;
let __rps___out_warn = __rps___lower_bad_crit + __rps___upper_bad_crit;
let __rps__viol = __rps___out_warn + __rps___out_crit;
// *** Simple algorithm [Bool]
let __rps__crit = 0.5 * sum(__rps__viol * (__rps__viol - 1));
let __rps = __rps__crit > 0.999 * count(__rps__viol);
// **** From var [Bool]
let __result__cond = __has_h_data;
// ***** From var [Bool]
let __result__t_cond = __has_m_data;
// ***** From var [Bool]
let __result__t_tval = __rps;
// ***** Fixed boolean
let __result__t_fval = true;
// **** If-else [Bool]
let __result__tval = __result__t_cond ? __result__t_tval : __result__t_fval;
// **** Fixed boolean
let __result__fval = false;
// *** If-else [Bool]
let __result = __result__cond ? __result__tval : __result__fval;
let status = __result;
alarm_if(status);
