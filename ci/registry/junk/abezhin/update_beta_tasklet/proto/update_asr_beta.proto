syntax = "proto3";

import "ci/tasklet/common/proto/service.proto";
import "tasklet/api/tasklet.proto";
import "tasklet/services/yav/proto/yav.proto";

package voicetech.tasklet;

message Context {
  option (.tasklet.context) = true;

  yav_service.YavService yav = 1 [(.tasklet.inject) = true];
}

message UpdateAsrBetaInput {
  string beta_name = 1;
  string cpu_component_name = 2;
  string gpu_component_name = 3;
  bool monolith = 4;

  string lingware_resource_id = 5;
  
  string asr_server_cpu_resource_id = 6;
  string asr_server_gpu_resource_id = 7;
  string asr_server_parent_service_id = 8;

  string nn_server_resource_id = 9;
  string nn_server_parent_service_id = 10;
  
  string nn_server_endpointset_name = 11;
  string nn_server_endpointset_dc = 12;

  string apphost_node = 13;
  repeated string legacy_redirections = 14;
  string yaldi_balancer = 15;

  string release_ticket = 20;
  int32 wait_beta_minutes = 100;
}

///
message UpdateAsrBetaInputWrapper {
  ci.TaskletContext context = 1;
  UpdateAsrBetaInput config = 2;
}

message Output {
  string uniproxy_url = 1;
  string host_address_for_stress_test = 5;
}

message UpdateAsrBetaOutputWrapper {
  Output output = 1;

}

message UpdateASRBeta {
  option (.tasklet.tasklet_interface) = true;

  UpdateAsrBetaInputWrapper input = 1 [(.tasklet.input) = true];
  UpdateAsrBetaOutputWrapper output = 2 [(.tasklet.output) = true];
  Context ctx = 3;
}