syntax = "proto3";

import "ci/tasklet/common/proto/service.proto";
import "ci/tasklet/common/proto/sandbox.proto";
import "tasklet/api/tasklet.proto";
import "tasklet/services/yav/proto/yav.proto";

package voicetech.tasklet;

message Context {
  option (.tasklet.context) = true;

  yav_service.YavService yav = 1 [(.tasklet.inject) = true];
}

message Config {
  string model = 1;
  string ue2e_instance_url = 2;
  string yt_table_for_report = 3;
  string yt_proxy_for_report = 4;
}

///
message Input {
  ci.TaskletContext context = 1;
  Config config = 2;
  repeated ci.SandboxResource sb_resources = 3;
}

message State {
  bool success = 1;
}

message Output {
  State state = 1;
}

message CIFinalize {
  option (.tasklet.tasklet_interface) = true;

  Input input = 1 [(.tasklet.input) = true];
  Output output = 2 [(.tasklet.output) = true];
  Context ctx = 3;
}