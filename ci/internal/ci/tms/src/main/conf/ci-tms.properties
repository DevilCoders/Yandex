# Spring
server.port=${ci.shared.tms.http.port}

# Bazinga
ci.bazingaWorkerConfiguration.threadCount=1500
# Похоже, джоба не изымается из очереди до тех пор, пока она не будет завершена.
# Хотя интуитивно казалось, что queue — это только про те джобы, которые ещё не взяты в работу.
# Поэтому не имеет смысла делать queue-size меньше, чем thread-count, потому что
# количество параллельно исполняющихся джоб, похоже, равно min(queueSize, threadCount)
ci.bazingaWorkerConfiguration.queueSize=15000
ci.typedServer.bazingaPort=4212

ci.bazingaControllerAndWorkerApps.controllerForceFetchCount=1000
ci.bazingaControllerAndWorkerApps.minTaskFetchesBeforeDeadline=5
ci.bazingaAdminAddressResolver.httpPort=${ci.shared.tms.http.port}

ci.BazingaMonitoringSchedule.updateBazingaScheduledMetricsSeconds=30

# Deprecated settings
ci.workerLogConfiguration.logDir=${log.dir:./logs}/bazinga
ci.workerLogConfiguration.onetimeLogRotation=90d


#Temporal

ci.workerFactory.defaultMaxWorkflowThreads=200
ci.workerFactory.defaultMaxActivityThreads=4200
ci.workerFactory.cronMaxWorkflowThreads=20
ci.workerFactory.cronMaxActivityThreads=250


# Clients
ci.tsumClient.url=https://tsum.yandex-team.ru/api/
ci.tsumClient.oauthToken=${ci.tsum.token}

ci.teamcityClient.url=https://teamcity.yandex-team.ru/
ci.teamcityClient.oauthToken=${ci.teamcity.oauth-token}

ci.rmClient.url=https://rm.z.yandex-team.ru/

ci.solomonAlertClient.host=https://solomon.yandex-team.ru
ci.solomonAlertClient.oauthToken=${ci.tms.solomon.oauth-token}

ci.jugglerClient.host=http://juggler-api.search.yandex.net
ci.jugglerClient.oauthToken=${ci.tms.juggler.oauth-token}

ci.jugglerPushClient.host=http://juggler-push.search.yandex.net
ci.jugglerPushClient.oauthToken=${ci.tms.juggler.oauth-token}

ci.chartsClient.url=https://charts.yandex-team.ru/
ci.chartsClient.oauthToken=${ci.tms.charts.oauth-token}


# Bazinga
bazinga.amazonS3.endpoint=http://s3.mds.yandex.net
bazinga.amazonS3.region=eu-west-1
bazinga.amazonS3.accessKeyId=${ci.bazinga.s3.aws_access_key_id}
bazinga.amazonS3.secretAccessKeyId=${ci.bazinga.s3.aws_secret_access_key}

bazinga.logStorageS3.workdir=${log.dir:./logs}
bazinga.logStorageS3.s3Bucket=ci-bazinga-testing
bazinga.logStorageS3.s3Env=testing

bazinga.bazingaCleanup.cleanupOlderThan=4h
bazinga.bazingaTaskLoggerS3.uploadThreads=4
bazinga.bazingaTaskLoggerS3.immediateFlush=false

bazinga.BazingaCleanupService.cleanupSeconds=600
bazinga.OnetimeJobRetries.runSeconds=30

# Semaphore
ci.AutocheckSemaphoreManagerCronTasksConfig.dryRun=true
ci.AutocheckSemaphoreManagerCronTasksConfig.maxRetries=10
ci.AutocheckSemaphoreManagerCronTasksConfig.semaphoreId=15421035

# Запускать в будни 19:00
ci.autocheckSemaphorePessimizedIncreaseCapacity.cronExpression=0 19 * * 1,2,3,4,5
ci.autocheckSemaphorePessimizedIncreaseCapacity.targetCapacity=30

# Запускать в будни 7:50
ci.autocheckSemaphorePessimizedDecreaseCapacity.cronExpression=50 7 * * 1,2,3,4,5
ci.autocheckSemaphorePessimizedDecreaseCapacity.targetCapacity=0


# Metrics
ci.launchMetricsExportCronTask.project=ci-metrics
ci.launchMetricsExportCronTask.cluster=testing
ci.launchMetricsExportCronTask.service=processes

ci.completeReleaseToSolomonCronTask.project=${ci.launchMetricsExportCronTask.project}
ci.completeReleaseToSolomonCronTask.cluster=${ci.launchMetricsExportCronTask.cluster}
ci.completeReleaseToSolomonCronTask.service=releases


# Autocheck degradation
ci.AutocheckDegradationCronTaskConfig.dryRun=true
ci.AutocheckDegradationPostcommitTasksRestartConfig.dryRun=${ci.AutocheckDegradationCronTaskConfig.dryRun}

ci.inactivityConditionsChecker.manualChangeTimeout=30m
ci.inactivityConditionsChecker.enablePlatformTimeout=10m
ci.inactivityConditionsChecker.semaphoreIncreaseTimeout=10m
ci.inactivityConditionsChecker.robotLogin=${ci.muteFilters.robotLogin}

ci.autocheckDegradationTask.taskInterval=60s
ci.autocheckDegradationTask.postcommitsDegradation=true
ci.autocheckDegradationTask.precommitsDegradationPlatforms=SANITIZERS

ci.degradationPostcommitManager.dryRun=${ci.AutocheckDegradationCronTaskConfig.dryRun}

ci.degradationPostcommitManager.semaphoreIncreaseCapacity=160
ci.degradationPostcommitManager.autocheckLevelsMapping={100:2000, 150:1000, 200:480, 250:320, 300:160}
ci.degradationPostcommitManager.autocheckLevelsExtraValue=0

ci.majorAlertsConfiguration.alertsMajorProjectIds=
ci.majorAlertsConfiguration.triggerStatus=ALARM
ci.monitoringSourceConfiguration.inflightPrecommitsAlertProjectId=autocheck
ci.monitoringSourceConfiguration.inflightPrecommitsAlertId=autocheck-main-statistics-stable-precommits_inflight

ci.majorChecksStatusRequest.host=
ci.majorChecksStatusRequest.namespace=devtools.autocheck
ci.majorChecksStatusRequest.service=
ci.majorChecksStatusRequest.tags=autocheck_degradation_full
ci.monitoringSourceConfiguration.majorJugglerTriggerStatuses=CRIT
ci.monitoringSourceConfiguration.majorJugglerHoldStateStatuses=WARN

ci.blockingChecksStatusRequest.host=
ci.blockingChecksStatusRequest.namespace=devtools.autocheck
ci.blockingChecksStatusRequest.service=
ci.blockingChecksStatusRequest.tags=autocheck_blocking_degradation

ci.muteFilters.filterNamespace=devtools.autocheck
ci.muteFilters.filterTags=notify,autocheck_degradation_full
ci.muteFilters.robotLogin=robot-ci

ci.notificationsManager.durationMinutes=60
ci.notificationsManager.overlayMinutes=5
ci.notificationsManager.robotLogin=${ci.muteFilters.robotLogin}

ci.commentsChannels.feed=ci/ci_autocheck_active_iteration_stages_aggregate_new
ci.commentsChannels.color=#dcdcdc

# Service
ci.releaseStatusesToJugglerPushCronTask.namespace=
ci.AutoReleaseTaskConfig.refreshAutoReleaseMetricsSeconds=30
ci.cronTasksFailurePercent.failureCountToWarn=5
ci.heartbeatCronTask.taskInterval=30s

ci.graphDiscoveryResultReadinessCronTask.runDelay=15s
ci.graphDiscoveryResultReadinessCronTask.timeout=60s

ci.autoReleaseCronTask.runDelay=10s
ci.autoReleaseCronTask.timeout=120s

ci.postponeActionCronTask.runDelay=60s
ci.postponeActionCronTask.timeout=300s
