syntax = "proto3";

package frontend;

option java_package = "ru.yandex.ci.api.internal.frontend.release";

import "google/protobuf/empty.proto";
import "ci/proto/common.proto";

service TimelineService {
    rpc GetTimeline (GetTimelineRequest) returns (GetTimelineResponse);
    rpc GetLastRelease (GetLastReleaseRequest) returns (GetLastReleaseResponse);
    rpc CreateBranch (CreateBranchRequest) returns (CreateBranchResponse);
    rpc GetBranch (GetBranchRequest) returns (GetBranchResponse);
    rpc GetBranches (GetBranchesRequest) returns (GetBranchesResponse);
    rpc AddCommit (AddCommitRequest) returns (google.protobuf.Empty);
    rpc GetCommit (GetCommitRequest) returns (GetCommitResponse);
}

message GetTimelineRequest {
    ci.common.ReleaseProcessId release_process_id = 1;
    string branch = 2;
    TimelineOffset offset = 3;
    int32 limit = 4;
}

message GetTimelineResponse {
    repeated ci.common.TimelineItem items = 1;
    TimelineOffset next = 2;
    ci.common.Offset offset = 3;
    ci.common.XivaSubscription xiva_subscription = 4;
}

message GetLastReleaseRequest {
    ci.common.ReleaseProcessId release_process_id = 1;
    string branch = 2;
}

// Последний успешно выполненный релиз (status = SUCCESS)
message GetLastReleaseResponse {
    // Элемент будет заполнен только в том случае, если последний успешно выполненный релиз отличается от
    // последнего релиза в этом бранче (с любым статусом).
    ci.common.TimelineItem item = 1;
}

message TimelineOffset {
    int64 revision_number = 1;
    int32 item_number = 2;
}

message CreateBranchRequest {
    // имя ветки генерируется автоматически на основании конфигурации a.yaml
    ci.common.ReleaseProcessId release_process_id = 1;
    ci.common.OrderedArcRevision revision = 2;

    ci.common.CommitId commit = 3;
}

message CreateBranchResponse {
    ci.common.Branch branch = 1;
}

message GetBranchRequest {
    ci.common.ReleaseProcessId release_process_id = 1;
    string branch_name = 2;
}

message GetBranchResponse {
    ci.common.Branch branch = 1;
}

message GetBranchesRequest {
    ci.common.ReleaseProcessId release_process_id = 1;
    ci.common.BranchOffset offset = 2;
    int32 limit = 3;
}

message GetBranchesResponse {
    repeated ci.common.Branch branch = 1;

    ci.common.BranchOffset next = 2;
    ci.common.Offset offset = 3;
}

message AddCommitRequest {
    ci.common.ReleaseProcessId release_process_id = 1;
    string branch = 2;
    ci.common.CommitId commit = 3;
}


message GetCommitRequest {
    string branch = 1;
    ci.common.CommitId commit = 2;
}


message GetCommitResponse {
    ci.common.Commit commit = 1;
}
