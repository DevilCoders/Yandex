package NVectorMachine;

enum ESimilarityType {
    ST_COS = 1;
    ST_DOT = 2;
    ST_DOT_NO_SIZE_CHECK = 3;
}

enum ETransformType {
    TT_LINEAR = 1;
    TT_SIGMOID = 2;
    TT_CLAMP = 3;
}

enum EAggregatorType {
    AT_AVG_TOP_SCORE = 1;
    AT_AVG_TOP_SCORE_WEIGHTED = 2;
    AT_MIN_TOP_SCORE = 3;
    AT_MIN_TOP_SCORE_WEIGHTED = 4;
    AT_SCORE_THRESHOLD = 5;
    AT_AVG_TOP_WEIGHT = 6;
    AT_MIN_TOP_WEIGHT = 7;
    AT_IDENTITY = 8;
    AT_AVG_TOP_SCORE_X_WEIGHT = 9;
}

enum EThresholdStatType {
    TST_MAX_WEIGHT = 1;
    TST_AVG_WEIGHT = 2;
    TST_REL_COUNT = 4;
    TST_COUNT = 8;
    TST_SATURATED_WEIGHT_SUM = 16;
}

enum ECalcerType {
    CT_SIM_AGGR = 1;
}

enum ESlicerType {
    ST_ALL = 1;
    ST_LESS = 2;
    ST_GREATER_EQUAL = 3;
}

message TTransformConfig {
    required ETransformType Type = 1;
    optional float Multiplier = 2 [default = 1.0];
    optional float Bias = 3 [default = 0.0];
    optional float MinValue = 4 [default = 0.0];
    optional float MaxValue = 5 [default = 1.0];
}

message TSimilarityConfig {
    required ESimilarityType Type = 1;
    repeated TTransformConfig Transforms = 2;
}

message TSlicerConfig {
    optional ESlicerType Type = 1 [default = ST_ALL];
    optional float ThresholdValue = 2;
}

message TAggregatorConfig {
    required EAggregatorType Type = 1;
    repeated float Params = 2;
    repeated EThresholdStatType ThresholdStats = 3;
}

message TAggregatorListConfig {
    repeated TAggregatorConfig Aggregators = 1;
    optional string Name = 2;
    optional TSlicerConfig Slicer = 3;
    optional int64 WeightsIndex = 4 [default = -1]; // if -1 then index of aggregator list will be used
}

message TCalcerConfig {
    required string ClassName = 1;
    optional string FeatureNamePrefix = 2;
    required ECalcerType Type = 3;
    required TSimilarityConfig Similarity = 4;
    repeated TAggregatorListConfig AggregatorLists = 5;
    optional TTransformConfig FeatureTransform = 6;
}

message TBoosterConfig {
    required string ClassName = 1;
    repeated string CalcerClassNames = 2;
}

message TDssmBoostingConfig {
    repeated TCalcerConfig CalcerConfigs = 1;
    repeated TBoosterConfig BoosterConfigs = 2;
}
