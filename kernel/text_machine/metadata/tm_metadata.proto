// Text machine codegen
// Uses classes and templates from text_machine/parts
// to assemble larger machines, up to fully functional text machine core
//
// Machine
//   - Name
//        - Cpp name is generated as TXMachine
//
//   - Scope
//        - All classes for each type of machine are declared in one scope
//        - Scope name is used as is
//
//   - Names follow predefined convention:
//       - TXUnit, TXFamily, TXStub
//       - Expect TUnit for unit type class
//       - Expect TMachine for top-level assembler template
//
//   - Unit
//       - Two types of arguments: family and structural
//       - Unit without structural args is named TXUnit
//       - Unit with structural args is named TXStub
//       - If unit has family args, family class TXFamily is expected
//
//   - Args
//       - Family args are cpp names, used as is
//       - Structural args can be cpp names or machine names
//       - Machine name is looked up within the same proto file
//
// Using declaration
//   - Generates "using namespace X;" after includes
//

package NTextMachineParts;

message TCodeGenInput {
    message TPreambleDescriptor {
        repeated string Line = 1;
    };

    message TUnitReference {
        required string Name = 1;
        repeated string FamilyArg = 2;
    }

    message TUsingDescriptor {
        required string CppNamespace = 1;
    };

    message TArgDescriptor {
        optional string Name = 1;
        optional string CppName = 2;
    };

    message TUnitDescriptor {
        required string Name = 1;
        repeated string FamilyArg = 2;
        repeated TArgDescriptor Arg = 3;
    };

    message TFeatureDescriptor {
        optional TUnitReference Unit = 1;
        optional string Stream = 2;
        optional string StreamSet = 3;
        optional string StreamValue = 4;
        optional string Algorithm = 5;
        optional string CppName = 6;

        repeated string Expansion = 7;
        repeated string Filter = 8;
        repeated string Accumulator = 9;
        repeated string Normalizer = 10;

        optional float KValue = 11;
        optional uint32 NormValue = 12;

        repeated TFeatureDescriptor Feature = 13;
        repeated TFeatureDescriptor FeatureGroup = 14;
    };

    message TFeatureLevelDescriptor {
        required string Name = 1;
        repeated string Include = 2;

        repeated TFeatureDescriptor Feature = 13;
        repeated TFeatureDescriptor FeatureGroup = 14;
    };

    message TMachineDescriptor {
        optional string Name = 1;
        required string Domain = 2;
        optional string Extends = 4;
        repeated TUnitDescriptor Unit = 5;
        repeated TFeatureDescriptor Feature = 6;
        repeated TFeatureDescriptor FeatureGroup = 7;

        repeated TFeatureLevelDescriptor FeatureLevel = 8;
    };

    optional TPreambleDescriptor Preamble = 1;
    repeated TUsingDescriptor Using = 2;
    repeated TMachineDescriptor Machine = 3;
};
