package NFastUserFactors;

enum ECounterAggregationType {
    CAT_QUERY = 1;
    CAT_QUERY_DOPP = 2;
    CAT_QUERY_URL = 3;
    CAT_QUERY_OWNER = 4;
    CAT_QUERY_DOPP_URL = 5;
    CAT_QUERY_DOPP_OWNER = 6;
    CAT_URL = 7;
    CAT_OWNER = 8;
    CAT_QUERY_INTENT = 9;
    CAT_QUERY_DOPP_INTENT = 10;
    CAT_VIDEO_MARKER_DOPP_QUERY = 11;
    CAT_URL_PLAIN_REGION = 27;
    CAT_URL_PLAIN_REGION_NEWS_PATH = 28;
    CAT_QUERY_REGION = 12;
    CAT_QUERY_DOPP_REGION = 13;
    CAT_QUERY_DOPP_REGION_LARGE = 136;
    CAT_QUERY_URL_REGION = 14;
    CAT_QUERY_OWNER_REGION = 15;
    CAT_QUERY_DOPP_URL_REGION = 16;
    CAT_QUERY_DOPP_URL_REGION_LARGE = 132;
    CAT_QUERY_DOPP_OWNER_REGION = 17;
    CAT_QUERY_DOPP_OWNER_REGION_LARGE = 133;
    CAT_QUERY_OS = 21;
    CAT_QUERY_DOPP_OS = 22;
    CAT_QUERY_URL_OS = 23;
    CAT_QUERY_OWNER_OS = 24;
    CAT_QUERY_DOPP_URL_OS = 25;
    CAT_QUERY_DOPP_OWNER_OS = 26;
    CAT_USER = 20;
    CAT_USER_URL = 18;
    CAT_USER_OWNER = 19;
    CAT_USER_INTENT = 69;
    CAT_URL_OTHER_URL = 32;
    CAT_URL_OTHER_OWNER = 33;
    CAT_OWNER_OTHER_URL = 34;
    CAT_OWNER_OTHER_OWNER = 35;
    CAT_QUERY_URL_OTHER_URL = 36;
    CAT_QUERY_URL_OTHER_OWNER = 37;
    CAT_QUERY_OWNER_OTHER_URL = 38;
    CAT_QUERY_OWNER_OTHER_OWNER = 39;
    CAT_QUERY_DOPP_URL_OTHER_URL = 40;
    CAT_QUERY_DOPP_URL_OTHER_OWNER = 41;
    CAT_QUERY_DOPP_OWNER_OTHER_URL = 42;
    CAT_QUERY_DOPP_OWNER_OTHER_OWNER = 43;
    CAT_URL_OTHER_URL_ODLOCATION = 44;
    CAT_URL_OTHER_OWNER_ODLOCATION = 45;
    CAT_OWNER_OTHER_URL_ODLOCATION = 46;
    CAT_OWNER_OTHER_OWNER_ODLOCATION = 47;
    CAT_QUERY_URL_OTHER_URL_ODLOCATION = 48;
    CAT_QUERY_URL_OTHER_OWNER_ODLOCATION = 49;
    CAT_QUERY_OWNER_OTHER_URL_ODLOCATION = 50;
    CAT_QUERY_OWNER_OTHER_OWNER_ODLOCATION = 51;
    CAT_QUERY_DOPP_URL_OTHER_URL_ODLOCATION = 52;
    CAT_QUERY_DOPP_URL_OTHER_OWNER_ODLOCATION = 53;
    CAT_QUERY_DOPP_OWNER_OTHER_URL_ODLOCATION = 54;
    CAT_QUERY_DOPP_OWNER_OTHER_OWNER_ODLOCATION = 55;
    CAT_VIDEO_MARKER_DOPP_QUERY_URL = 56;
    CAT_DOCIDS = 57;
    CAT_QUERY_DOPP_DOCID = 58;
    CAT_RTX_QUERY = 61;
    CAT_RTX_QUERY_ITEM = 62;
    CAT_BASETYPE = 65;
    CAT_LANG = 66;
    CAT_QUERY_DOPP_BASETYPE = 67;
    CAT_QUERY_DOPP_LANG = 68;
    CAT_QUERY_DOPP_SLICE = 70;
    CAT_USER_SLICE = 71;
    CAT_USER_QUERY_DOPP_SLICE = 72;
    CAT_USER_QUERY_DOPP = 73;
    CAT_URL_REGION = 74;
    CAT_URL_REGION_LARGE = 134;
    CAT_OWNER_REGION = 75;
    CAT_OWNER_REGION_LARGE = 135;
    CAT_USER_REGION = 76;
    CAT_USER_URL_REGION = 77;
    CAT_USER_OWNER_REGION = 78;
    CAT_REGION = 79;
    CAT_LEFT_URL = 80; // For recomendations only. Url of site where recomendations are being posted
    CAT_USER_LEFT_URL = 81;
    CAT_URL_LEFT_URL = 82;
    CAT_OWNER_LEFT_URL = 83;
    CAT_USER_URL_LEFT_URL = 84;
    CAT_USER_OWNER_LEFT_URL = 85;
    CAT_LEFT_OWNER = 86;
    CAT_USER_LEFT_OWNER = 87;
    CAT_URL_LEFT_OWNER = 88;
    CAT_OWNER_LEFT_OWNER = 89;
    CAT_USER_URL_LEFT_OWNER = 90;
    CAT_USER_OWNER_LEFT_OWNER = 91;
    CAT_LEFT_CLUSTER = 92;
    CAT_LEFT_CLUSTER_RIGHT_URL = 93;
    CAT_LEFT_CLUSTER_RIGHT_OWNER = 94;
    CAT_USER_LEFT_CLUSTER = 95;
    CAT_USER_LEFT_CLUSTER_RIGHT_URL = 96;
    CAT_USER_LEFT_CLUSTER_RIGHT_OWNER = 97;
    CAT_LEFT_CLUSTER_LEFT_OWNER = 98;
    CAT_LEFT_CLUSTER_LEFT_OWNER_RIGHT_URL = 99;
    CAT_LEFT_CLUSTER_LEFT_OWNER_RIGHT_OWNER = 100;
    CAT_USER_LEFT_CLUSTER_LEFT_OWNER = 101;
    CAT_USER_LEFT_CLUSTER_LEFT_OWNER_RIGHT_URL = 102;
    CAT_USER_LEFT_CLUSTER_LEFT_OWNER_RIGHT_OWNER = 103;
    CAT_RIGHT_CLUSTER = 104;
    CAT_RIGHT_CLUSTER_RIGHT_OWNER = 105;
    CAT_USER_RIGHT_CLUSTER = 106;
    CAT_USER_RIGHT_CLUSTER_RIGHT_OWNER = 107;
    CAT_USER_LEFT_URL_RIGHT_CLUSTER = 108;
    CAT_USER_LEFT_URL_RIGHT_CLUSTER_RIGHT_OWNER = 109;
    CAT_USER_LEFT_OWNER_RIGHT_CLUSTER = 110;
    CAT_USER_LEFT_OWNER_RIGHT_CLUSTER_RIGHT_OWNER = 111;
    CAT_LEFT_URL_RIGHT_CLUSTER = 112;
    CAT_LEFT_URL_RIGHT_CLUSTER_RIGHT_OWNER = 113;
    CAT_LEFT_OWNER_RIGHT_CLUSTER = 114;
    CAT_LEFT_OWNER_RIGHT_CLUSTER_RIGHT_OWNER = 115;
    CAT_LEFT_CLUSTER_RIGHT_CLUSTER = 116;
    CAT_LEFT_CLUSTER_RIGHT_CLUSTER_RIGHT_OWNER = 117;
    CAT_LEFT_CLUSTER_LEFT_OWNER_RIGHT_CLUSTER = 118;
    CAT_LEFT_CLUSTER_LEFT_OWNER_RIGHT_CLUSTER_RIGHT_OWNER = 119;
    CAT_USER_LEFT_CLUSTER_RIGHT_CLUSTER = 120;
    CAT_USER_LEFT_CLUSTER_RIGHT_CLUSTER_RIGHT_OWNER = 121;
    CAT_USER_LEFT_CLUSTER_LEFT_OWNER_RIGHT_CLUSTER = 122;
    CAT_USER_LEFT_CLUSTER_LEFT_OWNER_RIGHT_CLUSTER_RIGHT_OWNER = 123;
    CAT_TITLE_TOKENS = 124;
    CAT_DESCRIPTION_TOKENS = 125;
    CAT_TEXT_TOKENS = 126;
    CAT_QUERY_TOKENS = 127;
    CAT_QUERY_DOPP_TOKENS = 128;
    CAT_QUERY_LOG_DT_BIGRAMS_CLUSTER = 129;
    CAT_QUERY_LOG_DT_BIGRAMS_CLUSTER_URL = 130;
    CAT_QUERY_LOG_DT_BIGRAMS_CLUSTER_OWNER = 131;
    CAT_URL_OS = 137;
    CAT_OWNER_OS = 138;
    CAT_QUERY_DOPP_LITE = 139;
    CAT_URL_PREFIX = 140;
    CAT_FRESH_QUERY_CLUSTER = 141;

    // BS Aggregations
    CAT_PAGEID_IMPID = 142;
    CAT_PAGEID_IMPID_DEVICE_TYPE = 143;
    CAT_PAGEID_IMPID_ORDERID = 144;
    CAT_PAGEID_IMPID_GROUPID = 145;
    CAT_PAGEID_IMPID_ORDERID_DEVICE_TYPE = 146;
    CAT_PAGEID_IMPID_GROUPID_DEVICE_TYPE = 147;
    CAT_PAGEID_IMPID_BM_CATEGORYID = 148;
    CAT_PAGEID_IMPID_ORDERID_INCOME = 149;
    CAT_PAGEID_IMPID_GROUPID_INCOME = 150;
    CAT_PAGEID_IMPID_ORDERID_GENDER = 151;
    CAT_PAGEID_IMPID_GROUPID_GENDER = 152;
    CAT_PAGEID_IMPID_PRODUCT_TYPE = 153;
    CAT_PAGEID_IMPID_ORDERID_SELECT_TYPE = 154;
    CAT_PAGEID_IMPID_GROUPID_SELECT_TYPE = 155;

    // next tag: 156
}

message TVersionDictionaryProto {
    message TVersion {
        required uint32 Id = 1;
        repeated string Names = 2;
    }

    repeated TVersion Versions = 1;
}

message TCountersProto {
    message TCounter {
        optional string Name = 1;
        optional float Value = 2;
    }

    optional bytes CompressedValues = 4;
    optional uint64 Timestamp = 1;
    repeated TCounter Counters = 2;
    optional int32 VersionId = 3;
    repeated bytes AdditionalInfo = 5;
    optional fixed64 Hash64 = 6;
}

message TKeyCounters {
    optional string Key = 1;
    optional uint32 HashKey = 2;
    optional TCountersProto Counters = 3;
}

message TQueryAggregation {
    optional TCountersProto QueryCounters = 1;

    message TQuerySmthStat {
        required ECounterAggregationType Type = 1;
        repeated TKeyCounters KeyCounters = 2;
    }
    repeated TQuerySmthStat QuerySmthStats = 2;
}

message TCompactQueryAggregation {
    repeated float QueryCounters = 1 [packed = true]; // deprecated
    optional bytes CompressedQueryCounters = 10;
    // Version Id of QueryCounters
    optional uint32 QueryCountersVersionId = 8;

    optional uint64 QueryCountersTimestamp = 7;

    // Amount of hashes/timestamps for each type of counters.
    // The sum of these values must be equal to Hashes, Timestamps array size.
    repeated uint32 QuerySmthStatsNums = 2;

    // Types of counters, NRapidClicks::EKeyType casted to string (can't save actual EKeyType because it creates a loop)
    repeated uint32 QuerySmthStatsKeyTypes = 12;

    // Hashes for differnt counter types.
    // For example: urlhash1, ..., urlhashN, ownerHash1, ..., ownerhashM
    repeated fixed32 Hashes = 3; // deprecated
    repeated fixed64 Hashes64 = 11;

    // Keys in string format instead of hashes
    repeated string StringKeys = 13;

    // Timestamps of the last update for the corresponding hash.
    // Sizes of Hashes and Timestamps should be the same.
    repeated uint64 Timestamps = 4 [packed = true];

    // We assume we have the same number of counters for each hash.
    repeated float Counters = 5 [packed = true]; // deprecated

    // A compressed version of counters. We assume that either Counters or
    // CharCounters is non-empty.
    optional bytes CompressedCounters = 6;

    //Version Id of Compressed and Usual Counters
    optional uint32 CountersVersionId = 9;
    // next 14
}

message TAggregation {
    required ECounterAggregationType Type = 1;
    repeated string Key = 2;
}

message TSubAggregationCounters {
    required TAggregation SubAggregation = 1;
    required TCountersProto Counters = 2;
}

message TRapidClicksRtmrResponses {
    repeated string Response = 1;
}
