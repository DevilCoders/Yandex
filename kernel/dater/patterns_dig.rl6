#if defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wsign-compare"
#endif

#include <kernel/dater/scanner.h>

namespace ND2 {
namespace NImpl {

void TUrlIdScanner::ScanAABBYYYYxxx() {
#if 0
%%{
    machine ScanIdAABBYYYYxxx;

    include PatternsCommon "pat_common.rl6";

    main := |*
                    dsepa (digit_2 & ('0'[1-9]|[12][0-9]|'3'[01]))
                          (digit_2 & ('0'[1-9]|[12][0-9]|'3'[01]))
                          (digit_4 & ('20'|'19')[0-9][0-9]) (digit* >I%O) dsepe
                    { Accept(PT_U_ID_AABBYYYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };
             *|;
}%%
#endif
    %% write data noerror nofinal;
    %% write init;
    %% write exec;
    Y_UNUSED(ScanIdAABBYYYYxxx_en_main);
}

void TUrlIdScanner::ScanxxxAABBYYYY() {
#if 0
%%{
    machine ScanIdxxxAABBYYYY;

    include PatternsCommon "pat_common.rl6";

    main := |*
                    dsepa (digit* >I%O) :>> (digit_2 & ('0'[1-9]|[12][0-9]|'3'[01]))
                          (digit_2 & ('0'[1-9]|[12][0-9]|'3'[01]))
                          (digit_4 & ('20'|'19')[0-9][0-9]) dsepe
                    { Accept(PT_U_ID_AABBYYYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };
             *|;
}%%
#endif
    %% write data noerror nofinal;
    %% write init;
    %% write exec;
    Y_UNUSED(ScanIdxxxAABBYYYY_en_main);
}

void TUrlIdScanner::ScanYYYYMMDDxxx() {
#if 0
%%{
    machine ScanIdYYYYMMDDxxx;

    include PatternsCommon "pat_common.rl6";

    main := |*
                    dsepa (digit_4 & ('20'|'19')[0-9][0-9])
                          (digit_2 & ('0'[1-9]|'1'[0-2]))
                          (digit_2 & ('0'[1-9]|[12][0-9]|'3'[01])) (digit* >I%O) dsepe
                    { Accept(PT_U_ID_YYYYMMDD, SS_YEAR, SS_MONTH, SS_DAY); };
             *|;
}%%
#endif
    %% write data noerror nofinal;
    %% write init;
    %% write exec;
    Y_UNUSED(ScanIdYYYYMMDDxxx_en_main);
}

void TUrlIdScanner::ScanxxxYYYYMMDD() {
#if 0
%%{
    machine ScanIdxxxYYYYMMDD;

    include PatternsCommon "pat_common.rl6";

    main := |*
                    dsepa (digit* >I%O) :>> (digit_4 & ('20'|'19')[0-9][0-9])
                          (digit_2 & ('0'[1-9]|'1'[0-2]))
                          (digit_2 & ('0'[1-9]|[12][0-9]|'3'[01])) dsepe
                    { Accept(PT_U_ID_YYYYMMDD, SS_YEAR, SS_MONTH, SS_DAY); };
             *|;
}%%
#endif
    %% write data noerror nofinal;
    %% write init;
    %% write exec;
    Y_UNUSED(ScanIdxxxYYYYMMDD_en_main);
}

void TScanner::DoScanHost() {
#if 0
%%{
    machine ScanHost;

    include PatternsCommon "pat_common.rl6";

    main := |*
                    year_4_dig = ('1999' | '20'[0-2][0-9]) >I%O%D;

                    (dsepa year_4_dig
                         | year_4_dig when { AtStart() }) dsepe
                    { Accept(PT_H_YYYY, SS_YEAR); };

                    any
                    => Reject;
             *|;
}%%
#endif
    %% write data noerror nofinal;
    %% write init;
    %% write exec;
    Y_UNUSED(ScanHost_en_main);
}

void TScanner::DoScanUrlDigits() {
#if 0
%%{
    machine ScanUrlDigits;

    include PatternsCommon "pat_common.rl6";

    main := |*

##############################################################
# filter out odd number patterns
##############################################################

                junksepa  = (ndiglet|0) - ':';
                junksepe = junksepa - '/';
                junkdig  = digit+ - digit{4};

                junksepa
                (
                                (junkdig (junksepe+ junkdig){3,})
                                |  digit (junksepe+   digit){2}
                ) >I%O%J sepe
                { Accept(PT_U_DIG_JUNK, SS_JUNK); };

##############################################################
# id patterns
##############################################################

                dsepa digit_8x dsepe
                { Accept(PT_U_ID, SS_ID); };

##############################################################
# day-month-year digit patterns
##############################################################

                slash = sepa & '/';
                dot = sepa & '.';
                dash = sepa & '-';
                uscr = sepa & '_';

                slash digit_2 slash digit_2 slash digit_2 (sepe & ('/'|0))
                { Accept(PT_U_DIG_YYMMDD, SS_YEAR, SS_MONTH, SS_DAY); };

                dsepa digit_4 sepa digit_2_1 sepa digit_2_1 dsepe
                { Accept(PT_U_DIG_YYYYMMDD, SS_YEAR, SS_MONTH, SS_DAY); };

                (sepa - '/')  digit_2_1 slash digit_2_1 slash digit_2 (sepe - '/')
                { Accept(PT_U_DIG_AABBYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                slash digit_2 slash digit_2 slash digit_4 (sepe & ('/'|0))
                { Accept(PT_U_DIG_AABBYYYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                (dsepa - '/') digit_2_1 slash digit_2_1 slash digit_4 (sepe - '/')
                { Accept(PT_U_DIG_AABBYYYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                sepa  digit_2_1 dot  digit_2_1 dot  digit_2 sepe
                { Accept(PT_U_DIG_AABBYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                dsepa digit_2_1 dot  digit_2_1 dot  digit_4 dsepe
                { Accept(PT_U_DIG_AABBYYYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                sepa  digit_2_1 dash digit_2_1 dash digit_2 sepe
                { Accept(PT_U_DIG_AABBYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                dsepa digit_2_1 dash digit_2_1 dash digit_4 dsepe
                { Accept(PT_U_DIG_AABBYYYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                sepa  digit_2_1 uscr digit_2_1 uscr digit_2 sepe
                { Accept(PT_U_DIG_AABBYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                dsepa digit_2_1 uscr digit_2_1 uscr digit_4 dsepe
                { Accept(PT_U_DIG_AABBYYYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

##############################################################
# month-year digit patterns
##############################################################

                sepa digit_4 sepa digit_2_1 sepe
                { Accept(PT_U_DIG_YYYYMM, SS_YEAR, SS_MONTH); };

                (sepa - '/') digit_2 slash digit_4 (sepe - '/')
                { Accept(PT_U_DIG_MMYYYY, SS_MONTH, SS_YEAR); };

                slash digit_2 slash digit_4 (sepe & ('/'|0))
                { Accept(PT_U_DIG_MMYYYY, SS_MONTH, SS_YEAR); };

                sepa digit_2 (sepa - slash) digit_4 sepe
                { Accept(PT_U_DIG_MMYYYY, SS_MONTH, SS_YEAR); };

##############################################################
# year digit patterns
##############################################################

                yyyy = sepa digit_4;

                yyyy sepe
                { Accept(PT_U_DIG_YYYY, SS_YEAR); };

##############################################################
# fallback
##############################################################
                any
                => Reject;

            *|;
}%%
#endif
    %% write data noerror nofinal;
    %% write init;
    %% write exec;
    Y_UNUSED(ScanUrlDigits_en_main);
}

#if 0
%%{
    machine ScanTextDigitsCommon;

    include PatternsCommon "pat_common.rl6";

    time_expr = (digit{2} sp? ':' sp? digit{2} (sp? ':' sp? digit{2})?);
    time = time_expr >I%O%T;

}%%
#endif

void TScanner::DoScanTextDigitDates() {
#if 0
%%{
    machine ScanTextDateDigits;

    include ScanTextDigitsCommon;

    y4md_joiner_a = (sp? '/' sp?) >I%O;
    y4md_joiner_b = (sp? '.' sp?) >I%O;
    y4md_joiner_c = (sp? '-' sp?) >I%O;
    y4md_joiner_d = (sp? '>' '>'? sp?) >I%O;

    zzy4_joiner_a = (sp? '.' sp?) >I%O;
    zzy4_joiner_b = (sp? '/' sp?) >I%O;
    zzy4_joiner_c = (sp? '-' sp?) >I%O;
    zzy4_joiner_d = sp >I%O;

    zzy2_joiner_a = (sp? '.' sp?) >I%O;
    zzy2_joiner_b = (sp? '/' sp?) >I%O;
    zzy2_joiner_c = (sp? '-' sp?) >I%O;
    zz_joiner     = (sp? [./] sp?) >I%O;
    zz_time_joiner = (sp | sp? ',' sp?) >I%O;

    year_4_month_day_d = digit_4   y4md_joiner_a digit_2_1 y4md_joiner_a digit_2_1
                       | digit_4   y4md_joiner_b digit_2_1 y4md_joiner_b digit_2_1
                       | digit_4   y4md_joiner_c digit_2_1 y4md_joiner_c digit_2_1
                       | digit_4   y4md_joiner_d digit_2_1 y4md_joiner_d digit_2_1;

    zz_zz_year_4_d     = (time zz_time_joiner %T)?
                       ( digit_2_1 zzy4_joiner_a digit_2_1 zzy4_joiner_a digit_4
                       | digit_2_1 zzy4_joiner_b digit_2_1 zzy4_joiner_b digit_4
                       | digit_2_1 zzy4_joiner_c digit_2_1 zzy4_joiner_c digit_4
                       | digit_2_1 zzy4_joiner_d digit_2_1 zzy4_joiner_d digit_4);

    zz_zz_year_2_d     = (time zz_time_joiner %T)?
                       ( digit_2_1 zzy2_joiner_a digit_2_1 zzy2_joiner_a digit_2
                       | digit_2_1 zzy2_joiner_b digit_2_1 zzy2_joiner_b digit_2
                       | digit_2_1 zzy2_joiner_c digit_2_1 zzy2_joiner_c digit_2);

    zz_zz_time         = digit_2_1 zz_joiner digit_2_1 (zz_time_joiner time);
    time_zz_zz         = (time zz_time_joiner) digit_2_1 zz_joiner digit_2_1;

    main := |*

                sepa year_4_month_day_d sepe
                { Accept(PT_T_DIG_YYYYMMDD, SS_YEAR, SS_MONTH, SS_DAY); };

                sepa zz_zz_year_4_d dsepe
                { Accept(PT_T_DIG_AABBYYYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                sepa zz_zz_year_2_d spe
                { Accept(PT_T_DIG_AABBYY, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH, SS_YEAR); };

                dsepa digit_4 dsepe
                { Accept(PT_T_DIG_YYYY, SS_YEAR); };

                sepa zz_zz_time sepe
                { Accept(PT_T_DIG_AABBTIME, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH); };

                sepa time_zz_zz sepe
                { Accept(PT_T_DIG_TIMEAABB, SS_DAY | SS_MONTH, SS_DAY | SS_MONTH); };

                junk10 = digit  (sp? '.' sp? digit)+;
                junk20 = digit  (sp? '-' sp? digit)+;
                junk30 = digit  (sp? '/' sp? digit)+;

                junk11 = digit+ (sp? '.' sp? digit+){3,};
                junk21 = digit+ (sp? '-' sp? digit+){3,};
                junk31 = digit+ (sp? '/' sp? digit+){3,};

                junk2 = (alnum+ - digit{4}) (sp? [./\-] sp? digit{1,3}){3,};
                junk3 = alnum+ (sp? [./\-] sp? alnum+)* (sp? [./\-] sp? digit{3}) (sp? [./\-] sp? alnum+)*;
                junk4 = digit{3} (sp? [./\-] sp? alnum+)*;

                junk0 = junk10 | junk20 | junk30;
                junk1 = junk11 | junk21 | junk31;

                dsepa (junk0 | junk3 | junk4) dsepe
                { Accept(PT_T_DIG_JUNK, SS_JUNK); };

                dsepa (junk1 | junk2) (dsepe - ':')
                { Accept(PT_T_DIG_JUNK, SS_JUNK); };

                ph_pref = ( '/' sp? digit{2,} sp? '/' | '(' sp? digit* sp? ')' );
                ph_sep = sp? [ .,/\-] sp?;
                junk_ph = (( ph_pref
                                | '+'
                                | (
                                        ( 'ph' ('n'? '.'? | 'one')
                                        | 'fax' '.'?
                                        | 'cel' 'l'? '.'?
                                        | 'call'
                                        | cyr_T ('.' | cyr_E cyr_L ('.' | cyr_E cyr_F ('.' | cyr_O cyr_N cyr_U?)?)?)?
                                        | cyr_F cyr_A cyr_K 'c' '.'?
                                        | cyr_M cyr_O cyr_B ('.' | cyr_I cyr_L ('.'
                                                        | cyr_y cyr_N ('.' | cyr_Yy cyr_J | cyr_O cyr_M cyr_U)?)?)?
                                        | cyr_Z cyr_V cyr_O cyr_N cyr_I cyr_T (cyr_E | cyr_y)
                                        )
                                        sp? ')'? sp? ':'? sp? ('+'? sp? digit+ sp?)? ph_pref?
                                  )
                                ) sp? digit{1,3} (ph_sep digit{1,3}){2,});

                sepa junk_ph dsepe
                { Accept(PT_T_DIG_JUNK, SS_JUNK); };

                sepa time sepe
                { Accept(PT_T_DIG_TIME, SS_TIME); };

                any
                => Reject;

            *|;
}%%
#endif
    %% write data noerror nofinal;
    %% write init;
    %% write exec;
    Y_UNUSED(ScanTextDateDigits_en_main);
}

}
}
