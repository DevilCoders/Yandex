package NQueryDataSaaS;

import "kernel/querydata/idl/querydata_structs_client.proto";
import "mapreduce/yt/interface/protos/extension.proto";

message TQDSaaSSnapshotRecord {
    optional string SaasKey = 1        [(NYT.key_column_name) = "SaasKey"];
    optional string SaasPropName = 2   [(NYT.key_column_name) = "SaasPropName"];
    optional uint64 Timestamp = 3      [(NYT.key_column_name) = "Timestamp"];
    optional NQueryData.TSourceFactors SourceFactors = 4  [(NYT.column_name) = "SourceFactors"];
    optional string ShardIndex = 7     [(NYT.key_column_name) = "ShardIndex"];
    optional bool Delete = 8           [(NYT.key_column_name) = "Delete"];

    // Всё, что ниже, - отладочные колонки, выборочная копия входных данных

    optional string Namespace = 5  [(NYT.key_column_name) = "Namespace"];
    optional string SourceFactorsHR = 6  [(NYT.column_name) = "SourceFactorsHR"]; // SourceFactors.ShortUtf8DebugString()

    // Копия подключей из InputRecord

    // Запросы
    optional string Subkey_QueryStrong = 10      [(NYT.key_column_name) = "Subkey_QueryStrong"]; // Бывший KT_QUERY_STRONG ("-N strong")
    optional string Subkey_QueryDoppel = 11      [(NYT.key_column_name) = "Subkey_QueryDoppel"]; // Бывший KT_QUERY_DOPPEL ("-N doppel")
    optional string Subkey_QueryDoppelToken = 12 [(NYT.key_column_name) = "Subkey_QueryDoppelToken"]; // Бывший KT_QUERY_DOPPEL_TOKEN ("-N doppeltok")
    optional string Subkey_QueryDoppelPair = 13  [(NYT.key_column_name) = "Subkey_QueryDoppelPair"]; // Бывший KT_QUERY_DOPPEL_PAIR ("-N doppelpair")

    // Документ
    optional string Subkey_Url = 20      [(NYT.key_column_name) = "Subkey_Url"];     // Бывший KT_URL (вместо KT_DOCID, KT_SNIPDOCID)
    optional string Subkey_Owner = 21    [(NYT.key_column_name) = "Subkey_Owner"];   // Бывшие KT_CATEG, KT_SERPCATEG ("-N categ", "-N serpcateg")
    optional string Subkey_UrlMask = 22  [(NYT.key_column_name) = "Subkey_UrlMask"]; // Бывшие KT_CATEG_URL, KT_SNIPCATEG_URL
    optional string Subkey_ZDocId = 23   [(NYT.key_column_name) = "Subkey_ZDocId"];  // Deprecated, бывшие KT_DOCID, KT_SNIPDOCID ("-N docid", "-N snipdocid")
    optional string Subkey_UrlNoCgi = 53 [(NYT.key_column_name) = "Subkey_UrlNoCgi"];  // KT_URL_NO_CGI

    // Пользователь
    optional string Subkey_UserId = 30           [(NYT.key_column_name) = "Subkey_UserId"];        // Бывший KT_USER_ID ("-N yid")
    optional string Subkey_UserLoginHash = 31    [(NYT.key_column_name) = "Subkey_UserLoginHash"]; // Бывший KT_USER_LOGIN_HASH ("-N yloginhash")
    optional string Subkey_UserRegion = 32       [(NYT.key_column_name) = "Subkey_UserRegion"];    // Бывший KT_USER_REGION ("-N region")

    optional string Subkey_UserRegionIpReg = 33  [(NYT.column_name) = "Subkey_UserRegionIpReg"]; // Бывший KT_USER_REGION_IPREG
    optional string Subkey_UserIpType = 34       [(NYT.column_name) = "Subkey_UserIpType"];      // Бывший KT_USER_IP_TYPE

    // Кастомный ключ
    optional string Subkey_StructKey = 40  [(NYT.key_column_name) = "Subkey_StructKey"]; // Бывший KT_STRUCT_KEY ("-N structkey")

    // Серп
    optional string Subkey_SerpTLD = 50     [(NYT.column_name) = "Subkey_SerpTLD"];    // Бывший KT_SERP_TLD ("-N tld")
    optional string Subkey_SerpUIL = 51     [(NYT.column_name) = "Subkey_SerpUIL"];    // Бывший KT_SERP_UIL ("-N uil")
    optional string Subkey_SerpDevice = 52  [(NYT.column_name) = "Subkey_SerpDevice"]; // Бывший KT_SERP_DEVICE ("-N serptype")

}
