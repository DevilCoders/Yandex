// Code generated by MockGen. DO NOT EDIT.
// Source: ua.go

// Package mock is a generated GoMock package.
package mock

import (
	metrics "a.yandex-team.ru/library/go/core/metrics"
	uaclient "a.yandex-team.ru/library/go/yandex/uagent/log/zap/client"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockClient) Send(clientMessages []uaclient.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", clientMessages)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(clientMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), clientMessages)
}

// Stat mocks base method.
func (m *MockClient) Stat() uaclient.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(uaclient.Stats)
	return ret0
}

// Stat indicates an expected call of Stat.
func (mr *MockClientMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockClient)(nil).Stat))
}

// GRPCMaxMessageSize mocks base method.
func (m *MockClient) GRPCMaxMessageSize() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCMaxMessageSize")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GRPCMaxMessageSize indicates an expected call of GRPCMaxMessageSize.
func (mr *MockClientMockRecorder) GRPCMaxMessageSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCMaxMessageSize", reflect.TypeOf((*MockClient)(nil).GRPCMaxMessageSize))
}

// CollectMetrics mocks base method.
func (m *MockClient) CollectMetrics(r metrics.Registry, c metrics.CollectPolicy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectMetrics", r, c)
}

// CollectMetrics indicates an expected call of CollectMetrics.
func (mr *MockClientMockRecorder) CollectMetrics(r, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectMetrics", reflect.TypeOf((*MockClient)(nil).CollectMetrics), r, c)
}

// Close mocks base method.
func (m *MockClient) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), ctx)
}

// MockStats is a mock of Stats interface.
type MockStats struct {
	ctrl     *gomock.Controller
	recorder *MockStatsMockRecorder
}

// MockStatsMockRecorder is the mock recorder for MockStats.
type MockStatsMockRecorder struct {
	mock *MockStats
}

// NewMockStats creates a new mock instance.
func NewMockStats(ctrl *gomock.Controller) *MockStats {
	mock := &MockStats{ctrl: ctrl}
	mock.recorder = &MockStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStats) EXPECT() *MockStatsMockRecorder {
	return m.recorder
}

// AckedBytes mocks base method.
func (m *MockStats) AckedBytes() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckedBytes")
	ret0, _ := ret[0].(int64)
	return ret0
}

// AckedBytes indicates an expected call of AckedBytes.
func (mr *MockStatsMockRecorder) AckedBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckedBytes", reflect.TypeOf((*MockStats)(nil).AckedBytes))
}

// AckedMessages mocks base method.
func (m *MockStats) AckedMessages() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckedMessages")
	ret0, _ := ret[0].(int64)
	return ret0
}

// AckedMessages indicates an expected call of AckedMessages.
func (mr *MockStatsMockRecorder) AckedMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckedMessages", reflect.TypeOf((*MockStats)(nil).AckedMessages))
}

// DroppedBytes mocks base method.
func (m *MockStats) DroppedBytes() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroppedBytes")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DroppedBytes indicates an expected call of DroppedBytes.
func (mr *MockStatsMockRecorder) DroppedBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroppedBytes", reflect.TypeOf((*MockStats)(nil).DroppedBytes))
}

// DroppedMessages mocks base method.
func (m *MockStats) DroppedMessages() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroppedMessages")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DroppedMessages indicates an expected call of DroppedMessages.
func (mr *MockStatsMockRecorder) DroppedMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroppedMessages", reflect.TypeOf((*MockStats)(nil).DroppedMessages))
}

// ErrorCount mocks base method.
func (m *MockStats) ErrorCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ErrorCount indicates an expected call of ErrorCount.
func (mr *MockStatsMockRecorder) ErrorCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorCount", reflect.TypeOf((*MockStats)(nil).ErrorCount))
}
