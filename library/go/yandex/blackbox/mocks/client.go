// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	blackbox "a.yandex-team.ru/library/go/yandex/blackbox"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SessionID mocks base method
func (m *MockClient) SessionID(ctx context.Context, req blackbox.SessionIDRequest) (*blackbox.SessionIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionID", ctx, req)
	ret0, _ := ret[0].(*blackbox.SessionIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionID indicates an expected call of SessionID
func (mr *MockClientMockRecorder) SessionID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionID", reflect.TypeOf((*MockClient)(nil).SessionID), ctx, req)
}

// MultiSessionID mocks base method
func (m *MockClient) MultiSessionID(ctx context.Context, req blackbox.MultiSessionIDRequest) (*blackbox.MultiSessionIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSessionID", ctx, req)
	ret0, _ := ret[0].(*blackbox.MultiSessionIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSessionID indicates an expected call of MultiSessionID
func (mr *MockClientMockRecorder) MultiSessionID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSessionID", reflect.TypeOf((*MockClient)(nil).MultiSessionID), ctx, req)
}

// OAuth mocks base method
func (m *MockClient) OAuth(ctx context.Context, req blackbox.OAuthRequest) (*blackbox.OAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuth", ctx, req)
	ret0, _ := ret[0].(*blackbox.OAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuth indicates an expected call of OAuth
func (mr *MockClientMockRecorder) OAuth(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuth", reflect.TypeOf((*MockClient)(nil).OAuth), ctx, req)
}

// UserInfo mocks base method
func (m *MockClient) UserInfo(ctx context.Context, req blackbox.UserInfoRequest) (*blackbox.UserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfo", ctx, req)
	ret0, _ := ret[0].(*blackbox.UserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInfo indicates an expected call of UserInfo
func (mr *MockClientMockRecorder) UserInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfo", reflect.TypeOf((*MockClient)(nil).UserInfo), ctx, req)
}

// UserTicket mocks base method
func (m *MockClient) UserTicket(ctx context.Context, req blackbox.UserTicketRequest) (*blackbox.UserTicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTicket", ctx, req)
	ret0, _ := ret[0].(*blackbox.UserTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTicket indicates an expected call of UserTicket
func (mr *MockClientMockRecorder) UserTicket(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTicket", reflect.TypeOf((*MockClient)(nil).UserTicket), ctx, req)
}

// CheckIP mocks base method
func (m *MockClient) CheckIP(ctx context.Context, req blackbox.CheckIPRequest) (*blackbox.CheckIPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIP", ctx, req)
	ret0, _ := ret[0].(*blackbox.CheckIPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIP indicates an expected call of CheckIP
func (mr *MockClientMockRecorder) CheckIP(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIP", reflect.TypeOf((*MockClient)(nil).CheckIP), ctx, req)
}
