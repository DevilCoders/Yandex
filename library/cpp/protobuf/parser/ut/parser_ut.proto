package NParserUt;

import "library/cpp/protobuf/parser/options.proto";

enum ETestEnum {
    test1 = 1;
    test2 = 10;
    test3 = -5;
}

message TTestSubMessage {
    optional string test = 1;
    optional int32 optional_int32 = 103;
    repeated int64 repeated_int64 = 204 [(NProtoParser.delimiter) = "|"];
}

message TTestMessage {
    // optional values
    optional double optional_double = 101;
    optional float optional_float = 102;
    optional int32 optional_int32 = 103;
    optional int64 optional_int64 = 104;
    optional uint32 optional_uint32 = 105;
    optional uint64 optional_uint64 = 106;
    optional sint32 optional_sint32 = 107;
    optional sint64 optional_sint64 = 108;
    optional fixed32 optional_fixed32 = 109;
    optional fixed64 optional_fixed64 = 110;
    optional sfixed32 optional_sfixed32 = 111;
    optional sfixed64 optional_sfixed64 = 112;
    optional bool optional_bool = 113;
    optional string optional_string = 114 [(NProtoParser.delimiter) = ","]; // has no strength
    optional bytes optional_bytes = 115;
    optional ETestEnum optional_enum = 116;
    optional TTestSubMessage optional_message = 117;

    // repeated values
    repeated double repeated_double = 201 [(NProtoParser.delimiter) = ","];
    repeated float repeated_float = 202;
    repeated int32 repeated_int32 = 203;
    repeated int64 repeated_int64 = 204;
    repeated uint32 repeated_uint32 = 205;
    repeated uint64 repeated_uint64 = 206;
    repeated sint32 repeated_sint32 = 207;
    repeated sint64 repeated_sint64 = 208;
    repeated fixed32 repeated_fixed32 = 209;
    repeated fixed64 repeated_fixed64 = 210;
    repeated sfixed32 repeated_sfixed32 = 211;
    repeated sfixed64 repeated_sfixed64 = 212;
    repeated bool repeated_bool = 213;
    repeated string repeated_string = 214;
    repeated bytes repeated_bytes = 215;
    repeated ETestEnum repeated_enum = 216 [(NProtoParser.delimiter) = ","];
    repeated TTestSubMessage repeated_message = 217;

    // required values
    required double required_double = 301;
    required float required_float = 302;
    required int32 required_int32 = 303;
    required int64 required_int64 = 304;
    required uint32 required_uint32 = 305;
    required uint64 required_uint64 = 306;
    required sint32 required_sint32 = 307;
    required sint64 required_sint64 = 308;
    required fixed32 required_fixed32 = 309;
    required fixed64 required_fixed64 = 310;
    required sfixed32 required_sfixed32 = 311;
    required sfixed64 required_sfixed64 = 312;
    required bool required_bool = 313;
    required string required_string = 314;
    required bytes required_bytes = 315;
    required ETestEnum required_enum = 316;
    required TTestSubMessage required_message = 317;
}
