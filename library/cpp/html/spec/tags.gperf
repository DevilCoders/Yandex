%{
#include <cstring>
#include <stdio.h>
#include <util/system/yassert.h>
#include <util/generic/singleton.h>
#include <library/cpp/html/spec/tags.h>
#ifdef __GNUC__
#   ifdef __inline
#       undef __inline
#   endif
#   define __inline
#endif

namespace NHtml {

%}


%struct-type
%ignore-case
%compare-lengths
%compare-strncmp
%null-strings
// %language=C++
%language=ANSI-C
%define hash-function-name tags_hash
%define lookup-function-name in_tags_set
// %define class-name NAME
%readonly-tables
%enum
%global-table
// %pic
// %define string-pool-name NAME'

// WARNING: if modified HT_lit flag for any element update cdata.rli with
//      mk_cdata_entries.pl tags.gperf > cdata.rli

// HT_irreg | HT_subwin has special meaning: this irregular markup tag
// overrides usual subwindow rules (NOSCRIPT, NOINDEX)

struct TTag;
%%
ANY,       "",        HT_PCDATA                    , IRREG_none, 	/* doesn't make para, requires end */
BODY,      "body",    HT_BODY      |HT_br|HT_ignore, IRREG_none
HEAD,      "head",    HT_HEAD      |HT_br|HT_ignore, IRREG_none,
HTML,      "html",    HT_HTML      |HT_br|HT_ignore, IRREG_none,
SCRIPT,    "script",  HT_SCRIPT    |HT_head|HT_lit|HT_w0|HT_br|HT_delete, IRREG_none,
STYLE,     "style",   HT_STYLE     |HT_head|HT_lit|HT_w0|HT_br|HT_delete, IRREG_none,
TITLE,     "title",   HT_TITLE     |HT_head|HT_lit|HT_w2|HT_br|HT_delete, IRREG_none,
B,         "b",       HT_B         |HT_irreg|HT_inline|HT_w1     , IRREG_B	/* font */
BIG,       "big",     HT_BIG       |HT_irreg|HT_inline     , IRREG_BIG	/* font */
FONT,      "font",    HT_FONT      |HT_irreg|HT_container               , IRREG_FONT	/* font */
I,         "i",       HT_I         |HT_irreg|HT_inline               , IRREG_I	/* font */
S,         "s",       HT_S         |HT_irreg               , IRREG_S	/* font */
SMALL,     "small",   HT_SMALL     |HT_irreg|HT_inline               , IRREG_SMALL	/* font */
SPAN,      "span",    HT_SPAN      |HT_container, IRREG_none, 	/* generic span */
STRIKE,    "strike",  HT_STRIKE    |HT_irreg|HT_inline               , IRREG_STRIKE	/* font */
TT,        "tt",      HT_TT        |HT_irreg|HT_inline               , IRREG_TT	/* font */
U,         "u",       HT_U         |HT_irreg|HT_inline               , IRREG_U	/* font */
SUB,       "sub",     HT_SUB       |HT_irreg|HT_inline               , IRREG_SUB	/* font wbr? "2<sup>nd</sup>" */
SUP,       "sup",     HT_SUP       |HT_irreg|HT_inline               , IRREG_SUP	/* font wbr?  */
COMMENT,   "comment", HT_COMMENT   |HT_w0|HT_br|HT_lit|HT_delete, IRREG_none, 	/* special-effect */
DEL,       "del",     HT_DEL       |HT_irreg               , IRREG_DEL	/* phrase(+block) */
INS,       "ins",     HT_INS       |HT_irreg               , IRREG_INS	/* special-effect */
NOBR,      "nobr",    HT_NOBR      |HT_inline, IRREG_none, 	/* special ws->nbsp mode */
A,         "a",       HT_A         |HT_irreg|HT_inline     , IRREG_none	/* ns: <a href> != <a name> */
BDI,       "bdi",     HT_BDI       |HT_irreg|HT_inline     , IRREG_BDO,
BDO,       "bdo",     HT_BDO       |HT_irreg|HT_inline     , IRREG_BDO	/* special-effect */
BLINK,     "blink",   HT_BLINK     |HT_ignore|HT_inline, IRREG_none, 	/* special-effect */
MARQUEE,   "marquee", HT_MARQUEE   |HT_br|HT_wbr|HT_w0|HT_par, IRREG_none, 	/* special-effect */
ABBR,      "abbr",    HT_ABBR      |HT_inline, IRREG_none, 	/* phrase */
ACRONYM,   "acronym", HT_ACRONYM   |HT_inline, IRREG_none, 	/* phrase */
CITE,      "cite",    HT_CITE      |HT_inline, IRREG_none, 	/* phrase */
CODE,      "code",    HT_CODE      |HT_inline, IRREG_none, 	/* phrase */
DFN,       "dfn",     HT_DFN       |HT_inline, IRREG_none, 	/* phrase */
EM,        "em",      HT_EM        |HT_irreg|HT_inline              , IRREG_EM	/* font */
KBD,       "kbd",     HT_KBD       |HT_inline, IRREG_none, 	/* phrase */
Q,         "q",       HT_Q         |HT_inline, IRREG_none, 	/* phrase */
SAMP,      "samp",    HT_SAMP      |HT_inline, IRREG_none, 	/* phrase */
STRONG,    "strong",  HT_STRONG    |HT_irreg|HT_inline|HT_w1              , IRREG_STRONG	/* font */
VAR,       "var",     HT_VAR       |HT_inline                       	/* phrase */, IRREG_none,
ADDRESS,   "address", HT_ADDRESS   |HT_br|HT_par|HT_block, IRREG_none, 	/* block: indent */
BLOCKQUOTE,"blockquote",HT_BLOCKQUOTE|HT_br|HT_par|HT_block, IRREG_none, 	/* block: indent */
MAIN,      "main",    HT_MAIN      |HT_br|HT_par, IRREG_none,
CENTER,    "center",  HT_CENTER    |HT_br|HT_par, IRREG_none, 	/* block: center */
DIV,       "div",     HT_DIV       |HT_br|HT_par|HT_block, IRREG_none, 	/* block: bold, largest */
H1,        "h1",      HT_H1        |HT_w1|HT_br|HT_par|HT_block, IRREG_none, 	/* block: bold, largest */
H2,        "h2",      HT_H2        |HT_w1|HT_br|HT_par|HT_block, IRREG_none, 	/* block: bold, large */
H3,        "h3",      HT_H3        |HT_w1|HT_br|HT_par|HT_block, IRREG_none, 	/* block: bold, normal */
H4,        "h4",      HT_H4        |HT_w1|HT_br|HT_par|HT_block, IRREG_none, 	/* block: normal */
H5,        "h5",      HT_H5        |HT_w1|HT_br|HT_par|HT_block, IRREG_none, 	/* block: bold, small */
H6,        "h6",      HT_H6        |HT_w1|HT_br|HT_par|HT_block, IRREG_none, 	/* block: bold, smallest */
P,         "p",       HT_P         |HT_br|HT_par, IRREG_none,
LAYER,     "layer",   HT_LAYER     |HT_br|HT_ignore|HT_block, IRREG_none,
MULTICOL,  "multicol",HT_MULTICOL  |HT_br, IRREG_none,
BUTTON,    "button",  HT_BUTTON    |HT_subwin|HT_br, IRREG_none, 	/* close on any %form.content, form isindex iframe a  */
IFRAME,    "iframe",  HT_IFRAME    |HT_subwin|HT_w0|HT_br|HT_ignore|HT_block, IRREG_none,
ILAYER,    "ilayer",  HT_ILAYER    |HT_wbr|HT_ignore|HT_block, IRREG_none, 	/* ignore ???  */
LISTING,   "listing", HT_LISTING   |HT_pre|HT_br|HT_par, IRREG_none,
PRE,       "pre",     HT_PRE       |HT_pre|HT_br|HT_par, IRREG_none,
XMP,       "xmp",     HT_XMP       |HT_lit|HT_pre|HT_br, IRREG_none,
NOINDEX,   "noindex", HT_NOINDEX   |HT_irreg|HT_subwin|HT_head|HT_w0, IRREG_NOINDEX
PLAINTEXT, "plaintext",HT_PLAINTEXT |HT_lit|HT_pre|HT_br, IRREG_none, 	/* IGNORE MARKUP AND ENTITIES NOT IMLEMENTED */
META,      "meta",    HT_META      |HT_head|HT_empty|HT_br|HT_ignore, IRREG_none,
NEXTID,    "nextid",  HT_NEXTID    |HT_head|HT_empty|HT_br|HT_ignore, IRREG_none,
LINK,      "link",    HT_LINK      |HT_head|HT_empty|HT_br|HT_ignore, IRREG_none,
BASE,      "base",    HT_BASE      |HT_head|HT_empty|HT_br|HT_ignore, IRREG_none, 	/* can be in <body> ? */
ISINDEX,   "isindex", HT_ISINDEX   |HT_head|HT_empty|HT_br|HT_par, IRREG_none, 	/* can be in <body> */
BASEFONT,  "basefont",HT_BASEFONT  |HT_head|HT_empty|HT_ignore, IRREG_none, 	/* can be in head ?! */
BGSOUND,   "bgsound", HT_BGSOUND   |HT_empty|HT_ignore, IRREG_none, 	/* can be in head ? */
SOUND,     "sound",   HT_SOUND     |HT_empty|HT_ignore, IRREG_none, 	/* can be in head ? */
IMAGE,     "image",   HT_IMAGE     |HT_empty|HT_wbr, IRREG_none,
IMG,       "img",     HT_IMG       |HT_empty|HT_wbr, IRREG_none,
SPACER,    "spacer",  HT_SPACER    |HT_wbr, IRREG_none, 	/* vertical is HT_br */
WBR,       "wbr",     HT_WBR       |HT_empty, IRREG_none,
OBJECT,    "object",  HT_OBJECT    |HT_|HT_w0|HT_head|HT_wbr|HT_ignore, IRREG_none, 	/* (param)+ (can be in head!) */
PARAM,     "param",   HT_PARAM     |HT_empty|HT_head|HT_wbr|HT_ignore, IRREG_none, 	/* can be in head inside object */
APPLET,    "applet",  HT_APPLET    |HT_|HT_w0|HT_wbr|HT_ignore, IRREG_none, 	/* (param)+ ? */
EMBED,     "embed",   HT_EMBED     |HT_empty|HT_|HT_w0|HT_wbr|HT_ignore, IRREG_none,
NOEMBED,   "noembed", HT_NOEMBED   |HT_br|HT_w0|HT_ignore, IRREG_none,
NOSCRIPT,  "noscript",HT_NOSCRIPT  |HT_head|HT_irreg|HT_subwin|HT_w0|HT_ignore, IRREG_NOSCRIPT,
MAP,       "map",     HT_MAP       |HT_|HT_wbr|HT_inline, IRREG_none,
AREA,      "area",    HT_AREA      |HT_empty|HT_wbr, IRREG_none, 	/* map = (#pcdata|area)+ */
DIR,       "dir",     HT_DIR       |HT_list|HT_br|HT_par|HT_subtxt, IRREG_none, 	/* list */
MENU,      "menu",    HT_MENU      |HT_list|HT_br|HT_par|HT_subtxt, IRREG_none,
MENUITEM,  "menuitem",HT_MENUITEM  |HT_empty|HT_br, IRREG_none,
OL,        "ol",      HT_OL        |HT_list|HT_br|HT_par|HT_subtxt|HT_block, IRREG_none, 	/* list */
UL,        "ul",      HT_UL        |HT_list|HT_br|HT_par|HT_subtxt|HT_block, IRREG_none, 	/* list close on %list.content */
LI,        "li",      HT_LI        |HT_br, IRREG_none,
DL,        "dl",      HT_DL        |HT_br|HT_par|HT_subtxt|HT_block, IRREG_none, 	/* deflist */
DD,        "dd",      HT_DD        |HT_br|HT_par|HT_subtxt, IRREG_none, 	/* close on any %dl.content  */
DT,        "dt",      HT_DT        |HT_br|HT_par|HT_subtxt, IRREG_none, 	/* close on any %dlist.content */
BR,        "br",      HT_BR        |HT_empty|HT_br, IRREG_none,
HR,        "hr",      HT_HR        |HT_empty|HT_br|HT_par, IRREG_none,
FORM,      "form",    HT_FORM      |HT_form|HT_br|HT_container, IRREG_none, 	/* form */
FIELDSET,  "fieldset",HT_FIELDSET  |HT_form|HT_br|HT_par, IRREG_none, 	/* block: bordered (#pcdata,legend? %flow) */
LEGEND,    "legend",  HT_LEGEND    |HT_form|HT_br|HT_inline, IRREG_none, 	/* break in fieldset, nothing outside HT_w1? */
LABEL,     "label",   HT_LABEL     |HT_form|HT_wbr, IRREG_none,
INPUT,     "input",   HT_INPUT     |HT_form|HT_empty|HT_wbr, IRREG_none,
TEMPLATE,  "template", HT_TEMPLATE |HT_br, IRREG_none
TEXTAREA,  "textarea",HT_TEXTAREA  |HT_form|HT_lit|HT_pre|HT_br, IRREG_none,
KEYGEN,    "keygen",  HT_KEYGEN    |HT_form|HT_empty|HT_wbr|HT_ignore, IRREG_none,
SELECT,    "select",  HT_SELECT    |HT_|HT_form|HT_br, IRREG_none,
OPTGROUP,  "optgroup",HT_OPTGROUP  |HT_|HT_form|HT_wbr, IRREG_none,
OPTION,    "option",  HT_OPTION    |HT_|HT_form|HT_wbr|HT_w0, IRREG_none,
FRAME,     "frame",   HT_FRAME     |HT_empty|HT_frame|HT_br|HT_ignore, IRREG_none,
FRAMESET,  "frameset",HT_FRAMESET  |HT_w0|HT_frame|HT_br|HT_ignore, IRREG_none,
NOFRAMES,  "noframes",HT_NOFRAMES  |HT_frame|HT_br|HT_w0|HT_ignore, IRREG_none,
TABLE,     "table",   HT_TABLE     |HT_br|HT_subwin|HT_block|HT_container, IRREG_none, 	/* (caption?,(col*|colgrup*),thead?,tfoot?,tbody+) */
CAPTION,   "caption", HT_CAPTION   |HT_table|HT_w1|HT_br|HT_subtxt|HT_inline, IRREG_none, 	/* close on any %table.content */
COLGROUP,  "colgroup",HT_COLGROUP  |HT_table|HT_br, IRREG_none, 	/* break in table, nothing outside colgroup = (#pcdata|col)+ */
TBODY,     "tbody",   HT_TBODY     |HT_table|HT_br, IRREG_none,
TFOOT,     "tfoot",   HT_TFOOT     |HT_table|HT_br, IRREG_none,
THEAD,     "thead",   HT_THEAD     |HT_table|HT_br, IRREG_none,
COL,       "col",     HT_COL       |HT_subtab|HT_empty|HT_br, IRREG_none, 	/* break in table, nothing outside */
TD,        "td",      HT_TD        |HT_subwin|HT_subtab|HT_subtxt|HT_br, IRREG_none, 	/* close on any %table.content */
TH,        "th",      HT_TH        |HT_subwin|HT_subtab|HT_subtxt|HT_w1|HT_br, IRREG_none,
TR,        "tr",      HT_TR        |HT_subtab|HT_br|HT_block, IRREG_none,
XML,       "xml",     HT_XML       |HT_delete|HT_lit|HT_w0, IRREG_none,
ARTICLE,   "article", HT_ARTICLE   |HT_br|HT_par, IRREG_none,
ASIDE,     "aside",   HT_ASIDE     |HT_br|HT_par, IRREG_none,
AUDIO,     "audio",   HT_AUDIO     |HT_br, IRREG_none,
BB,        "bb",      HT_BB              , IRREG_none,
CANVAS,    "canvas",  HT_CANVAS    |HT_br, IRREG_none,
COMMAND,   "command", HT_COMMAND   |HT_br, IRREG_none,    /* must be in menu tag, but few bits in HT_TAG enum left */
DATA,      "data",    HT_DATA      |HT_container, IRREG_none,
DATAGRID,  "datagrid", HT_DATAGRID |HT_br|HT_par|HT_subtxt, IRREG_none,
DATALIST,  "datalist", HT_DATALIST |HT_br, IRREG_none,
DETAILS,   "details", HT_DETAILS   |HT_br|HT_par, IRREG_none,
SUMMARY,   "summary", HT_SUMMARY   |HT_br|HT_par, IRREG_none,
DIALOG,    "dialog",  HT_DIALOG    |HT_list|HT_br|HT_par|HT_subtxt, IRREG_none,
EVENTSOURCE, "eventsource", HT_EVENTSOURCE |HT_empty, IRREG_none,
FIGCAPTION,"figcaption", HT_FIGCAPTION |HT_br, IRREG_none,
FIGURE,    "figure",  HT_FIGURE    |HT_br|HT_par, IRREG_none,
FOOTER,    "footer",  HT_FOOTER    |HT_br|HT_par, IRREG_none,
HEADER,    "header",  HT_HEADER    |HT_br|HT_par, IRREG_none,
HGROUP,    "hgroup",  HT_HGROUP    |HT_br|HT_par|HT_block, IRREG_none,
MARK,      "mark",    HT_MARK      |HT_irreg, IRREG_MARK,
METER,     "meter",   HT_METER          , IRREG_none,
NAV,       "nav",     HT_NAV       |HT_br|HT_par, IRREG_none,
OUTPUT,    "output",  HT_OUTPUT         , IRREG_none,
PROGRESS,  "progress", HT_PROGRESS      , IRREG_none,
RUBY,      "ruby",    HT_RUBY           , IRREG_none,
RP,        "rp",      HT_RP            , IRREG_none,
RT,        "rt",      HT_RT            , IRREG_none,
RB,        "rb",      HT_RB            , IRREG_none,
SECTION,   "section", HT_SECTION   |HT_br|HT_par, IRREG_none,
SOURCE,    "source",  HT_SOURCE    |HT_empty, IRREG_none,
SVG,       "svg",     HT_SVG       |HT_br, IRREG_none,
FOREIGNOBJECT, "foreignObject", HT_FOREIGNOBJECT,  IRREG_none,
DESC,      "desc",    HT_DESC      |HT_br, IRREG_none,
MATH,      "math",    HT_MATH      |HT_br, IRREG_none,
MALIGNMARK, "malignmark", HT_MALIGNMARK, IRREG_none,
MGLYPH,    "mglyph",  HT_MGLYPH    , IRREG_none,
MI,        "mi",      HT_MI        , IRREG_none,
MO,        "mo",      HT_MO        , IRREG_none,
MN,        "mn",      HT_MN        , IRREG_none,
MS,        "ms",      HT_MS        , IRREG_none,
MTEXT,     "mtext",   HT_MTEXT     |HT_br, IRREG_none,
TIME,      "time",    HT_TIME      , IRREG_none,
VIDEO,     "video",   HT_VIDEO     |HT_br, IRREG_none,
TRACK,     "track",   HT_TRACK     |HT_empty, IRREG_none,
YX:HLWORD, "yx:hlword", HT_HLWORD  |HT_irreg, IRREG_HLWORD,
AMP-VK,    "amp-vk",  HT_AMP_VK    , IRREG_none
%%
/* #line 128 "tags.gperf" */

const TTag& FindTag(const char *tagname) {
    return FindTag(tagname, strlen(tagname));
}

const TTag& FindTag(const char *tagname, size_t len) {
    const TTag *ret = in_tags_set(tagname, (unsigned int)len);
    if (!ret)
        ret = in_tags_set("ANY", 3);
    Y_ASSERT(ret);
    return *ret;
}

static const size_t* MakeId2IdxMapping() {
    static const unsigned int wordlist_len = sizeof(wordlist) / sizeof(wordlist[0]);
    static size_t mapping[HT_TagCount];

    for (const TTag* tag = wordlist; tag < wordlist + wordlist_len; ++tag) {
        if (tag->name) {
            Y_ASSERT(tag->id() < HT_TagCount);
            mapping[tag->id()] = tag - wordlist;
            //fprintf(stderr, "map: %i (%s) to %i\n", tag->id(), tag->lowerName, (int)mapping[tag->id()]);
        }
    }
    return mapping;
}

struct TFindTagMapping {
    const size_t* mapping;

    TFindTagMapping()
        : mapping(MakeId2IdxMapping())
    {
    }
};

const TTag& FindTag(HT_TAG id) {
    if (id >= HT_TagCount)
        return FindTag(HT_TAG(0));
    return wordlist[Singleton<TFindTagMapping>()->mapping[id]];
}

unsigned TTag::len() const {
    return lengthtable[Singleton<TFindTagMapping>()->mapping[id()]];
}

} // namespace NHtml
