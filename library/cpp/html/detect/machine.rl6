#include <library/cpp/html/detect/machine.h>

%%{
    machine Detect1;
    alphtype unsigned char;
    include HtmlDetect "detectors.rli";

    main := any* | DetectFirst;
    write data;
}%%


namespace NHtmlDetect {

static void Init1(int& cs) {
    %% write init;
}

static void Push1(int& cs, const ui8* p, const ui8* pe, TDetectResult& r) {
    %% write exec;
}

%%{
    machine Detect2;
    alphtype unsigned char;
    include HtmlDetect "detectors.rli";
    include HtmlDetect;

    main := any* | DetectSecond;
    write data;
}%%

static void Init2(int& cs) {
    %% write init;
}

static void Push2(int& cs, const ui8* p, const ui8* pe, TDetectResult& r) {
    %% write exec;
}

%%{
    machine Detect3;
    alphtype unsigned char;
    include HtmlDetect "detectors.rli";
    include HtmlDetect;

    main := any* | DetectThird;
    write data;
}%%

static void Init3(int& cs) {
    %% write init;
}

static void Push3(int& cs, const ui8* p, const ui8* pe, TDetectResult& r) {
    %% write exec;
}

// Add new machines here

static TMachineDesc MachineDescriptions[] = {
      {Init1, Push1}
    , {Init2, Push2}
    , {Init3, Push3}
    // and here
};


TMachine::TMachine(size_t id)
    : cs(0)
{
    Y_ASSERT(NumMachines == Y_ARRAY_SIZE(MachineDescriptions));
    Y_ASSERT(id < Y_ARRAY_SIZE(MachineDescriptions));
    MDesc = MachineDescriptions[id];
    MDesc.InitFun(cs);
}

void TMachine::Push(const char* text, size_t len) {
    MDesc.PushFun(cs, (const ui8*)text, (const ui8*)(text + len), Result);
}

} // ns
