%{
#pragma GCC diagnostic ignored "-Wimplicit-fallthrough"

#include <library/cpp/html/html5/tag.h>

#include <util/generic/singleton.h>

#include <assert.h>
#include <ctype.h>

namespace NHtml5 {
namespace {

struct TTag {
    const char* Name;
    const char* LowerName;
    ETag        Tag;
};

%}

%struct-type
%language=ANSI-C
%define slot-name Name
%define hash-function-name tag_hash
%define lookup-function-name in_tags_set
%ignore-case
%compare-lengths
%compare-strncmp
%null-strings
%readonly-tables
%enum
%global-table

struct TTag;
%%
UNKNOWN,        "",                 TAG_UNKNOWN
HTML,           "html",             TAG_HTML
HEAD,           "head",             TAG_HEAD
TITLE,          "title",            TAG_TITLE
BASE,           "base",             TAG_BASE
LINK,           "link",             TAG_LINK
META,           "meta",             TAG_META
STYLE,          "style",            TAG_STYLE
SCRIPT,         "script",           TAG_SCRIPT
NOSCRIPT,       "noscript",         TAG_NOSCRIPT
TEMPLATE,       "template",         TAG_TEMPLATE
BODY,           "body",             TAG_BODY
ARTICLE,        "article",          TAG_ARTICLE
SECTION,        "section",          TAG_SECTION
NAV,            "nav",              TAG_NAV
ASIDE,          "aside",            TAG_ASIDE
H1,             "h1",               TAG_H1
H2,             "h2",               TAG_H2
H3,             "h3",               TAG_H3
H4,             "h4",               TAG_H4
H5,             "h5",               TAG_H5
H6,             "h6",               TAG_H6
HGROUP,         "hgroup",           TAG_HGROUP
HEADER,         "header",           TAG_HEADER
FOOTER,         "footer",           TAG_FOOTER
ADDRESS,        "address",          TAG_ADDRESS
P,              "p",                TAG_P
HR,             "hr",               TAG_HR
PRE,            "pre",              TAG_PRE
BLOCKQUOTE,     "blockquote",       TAG_BLOCKQUOTE
OL,             "ol",               TAG_OL
UL,             "ul",               TAG_UL
LI,             "li",               TAG_LI
DL,             "dl",               TAG_DL
DT,             "dt",               TAG_DT
DD,             "dd",               TAG_DD
FIGURE,         "figure",           TAG_FIGURE
FIGCAPTION,     "figcaption",       TAG_FIGCAPTION
MAIN,           "main",             TAG_MAIN
DIV,            "div",              TAG_DIV
A,              "a",                TAG_A
EM,             "em",               TAG_EM
STRONG,         "strong",           TAG_STRONG
SMALL,          "small",            TAG_SMALL
S,              "s",                TAG_S
CITE,           "cite",             TAG_CITE
Q,              "q",                TAG_Q
DFN,            "dfn",              TAG_DFN
ABBR,           "abbr",             TAG_ABBR
DATA,           "data",             TAG_DATA
TIME,           "time",             TAG_TIME
CODE,           "code",             TAG_CODE
VAR,            "var",              TAG_VAR
SAMP,           "samp",             TAG_SAMP
KBD,            "kbd",              TAG_KBD
SUB,            "sub",              TAG_SUB
SUP,            "sup",              TAG_SUP
I,              "i",                TAG_I
B,              "b",                TAG_B
U,              "u",                TAG_U
MARK,           "mark",             TAG_MARK
RUBY,           "ruby",             TAG_RUBY
RT,             "rt",               TAG_RT
RP,             "rp",               TAG_RP
BDI,            "bdi",              TAG_BDI
BDO,            "bdo",              TAG_BDO
SPAN,           "span",             TAG_SPAN
BR,             "br",               TAG_BR
WBR,            "wbr",              TAG_WBR
INS,            "ins",              TAG_INS
DEL,            "del",              TAG_DEL
IMAGE,          "image",            TAG_IMAGE
IMG,            "img",              TAG_IMG
IFRAME,         "iframe",           TAG_IFRAME
EMBED,          "embed",            TAG_EMBED
OBJECT,         "object",           TAG_OBJECT
PARAM,          "param",            TAG_PARAM
VIDEO,          "video",            TAG_VIDEO
AUDIO,          "audio",            TAG_AUDIO
SOURCE,         "source",           TAG_SOURCE
TRACK,          "track",            TAG_TRACK
CANVAS,         "canvas",           TAG_CANVAS
MAP,            "map",              TAG_MAP
AREA,           "area",             TAG_AREA
MATH,           "math",             TAG_MATH
MI,             "mi",               TAG_MI
MO,             "mo",               TAG_MO
MN,             "mn",               TAG_MN
MS,             "ms",               TAG_MS
MTEXT,          "mtext",            TAG_MTEXT
MGLYPH,         "mglyph",           TAG_MGLYPH
MALIGNMARK,     "malignmark",       TAG_MALIGNMARK
ANNOTATION-XML, "annotation-xml",   TAG_ANNOTATION_XML
SVG,            "svg",              TAG_SVG
FOREIGNOBJECT,  "foreignobject",    TAG_FOREIGNOBJECT
DESC,           "desc",             TAG_DESC
TABLE,          "table",            TAG_TABLE
CAPTION,        "caption",          TAG_CAPTION
COLGROUP,       "colgroup",         TAG_COLGROUP
COL,            "col",              TAG_COL
TBODY,          "tbody",            TAG_TBODY
THEAD,          "thead",            TAG_THEAD
TFOOT,          "tfoot",            TAG_TFOOT
TR,             "tr",               TAG_TR
TD,             "td",               TAG_TD
TH,             "th",               TAG_TH
DIALOG,         "dialog",           TAG_DIALOG
FORM,           "form",             TAG_FORM
FIELDSET,       "fieldset",         TAG_FIELDSET
LEGEND,         "legend",           TAG_LEGEND
LABEL,          "label",            TAG_LABEL
INPUT,          "input",            TAG_INPUT
BUTTON,         "button",           TAG_BUTTON
SELECT,         "select",           TAG_SELECT
DATALIST,       "datalist",         TAG_DATALIST
OPTGROUP,       "optgroup",         TAG_OPTGROUP
OPTION,         "option",           TAG_OPTION
TEXTAREA,       "textarea",         TAG_TEXTAREA
KEYGEN,         "keygen",           TAG_KEYGEN
OUTPUT,         "output",           TAG_OUTPUT
PROGRESS,       "progress",         TAG_PROGRESS
METER,          "meter",            TAG_METER
DETAILS,        "details",          TAG_DETAILS
SUMMARY,        "summary",          TAG_SUMMARY
MENU,           "menu",             TAG_MENU
MENUITEM,       "menuitem",         TAG_MENUITEM
APPLET,         "applet",           TAG_APPLET
ACRONYM,        "acronym",          TAG_ACRONYM
BGSOUND,        "bgsound",          TAG_BGSOUND
DIR,            "dir",              TAG_DIR
FRAME,          "frame",            TAG_FRAME
FRAMESET,       "frameset",         TAG_FRAMESET
NOFRAMES,       "noframes",         TAG_NOFRAMES
NOINDEX,        "noindex",          TAG_NOINDEX
ISINDEX,        "isindex",          TAG_ISINDEX
LISTING,        "listing",          TAG_LISTING
XMP,            "xmp",              TAG_XMP
NEXTID,         "nextid",           TAG_NEXTID
NOEMBED,        "noembed",          TAG_NOEMBED
PLAINTEXT,      "plaintext",        TAG_PLAINTEXT
RB,             "rb",               TAG_RB
STRIKE,         "strike",           TAG_STRIKE
BASEFONT,       "basefont",         TAG_BASEFONT
BIG,            "big",              TAG_BIG
BLINK,          "blink",            TAG_BLINK
CENTER,         "center",           TAG_CENTER
FONT,           "font",             TAG_FONT
MARQUEE,        "marquee",          TAG_MARQUEE
MULTICOL,       "multicol",         TAG_MULTICOL
NOBR,           "nobr",             TAG_NOBR
SPACER,         "spacer",           TAG_SPACER
TT,             "tt",               TAG_TT
COMMENT,        "comment",          TAG_COMMENT
XML,            "xml",              TAG_XML
AMP-VK,         "amp-vk",           TAG_AMP_VK
%%

static const size_t* MakeId2IdxMapping() {
    static const unsigned int wordlist_len = sizeof(wordlist) / sizeof(wordlist[0]);
    static size_t mapping[TAG_LAST];

    for (const TTag* tag = wordlist; tag < wordlist + wordlist_len; ++tag) {
        if (tag->Name) {
            assert(tag->Tag < TAG_LAST);
            mapping[tag->Tag] = tag - wordlist;
        }
    }

    return mapping;
}

struct TFindTagMapping {
    const size_t* const Mapping;

    TFindTagMapping()
        : Mapping(MakeId2IdxMapping())
    {
    }
};

} // namespace

ETag GetTagEnum(const char* name, size_t len) {
    if (const TTag* tag = in_tag_set(name, len)) {
        return tag->Tag;
    }
    return TAG_UNKNOWN;
}

const char* GetTagName(const ETag tag) {
    return wordlist[Singleton<TFindTagMapping>()->Mapping[tag]].LowerName;
}

TStringPiece GetTagFromOriginalText(const TStringPiece& text) {
    TStringPiece res = text;

    if (res.Data == NULL) {
        return res;
    }

    assert(res.Length >= 2);
    assert(res.Data[0] == '<');
    assert(res.Data[res.Length - 1] == '>');
    if (res.Data[1] == '/') {
        // End tag.
        assert(res.Length >= 3);
        res.Data += 2;    // Move past </
        res.Length -= 3;
    } else {
        // Start tag.
        res.Data += 1;    // Move past <
        res.Length -= 2;
    }
    // strnchr is apparently not a standard C library function, so I loop
    // explicitly looking for whitespace or other illegal tag characters.
    for (const char* c = res.Data; c != res.Data + res.Length; ++c) {
        if (isspace(*c) || *c == '/') {
          res.Length = c - res.Data;
          break;
        }
    }

    return res;
}

} // namespace NHtml5
